
003RTOSProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f98  08007f98  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fa0  08007fa0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00014474  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001448c  2001448c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f2b  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003194  00000000  00000000  00037f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003b108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001378  00000000  00000000  0003c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021035  00000000  00000000  0003d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d2f  00000000  00000000  0005e985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f00  00000000  00000000  000766b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f5b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057c8  00000000  00000000  0014f604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d7c 	.word	0x08007d7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08007d7c 	.word	0x08007d7c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e04 	.word	0x20012e04

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 0208 	add.w	r2, r3, #8
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000590:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f103 0208 	add.w	r2, r3, #8
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0208 	add.w	r2, r3, #8
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005d2:	b480      	push	{r7}
 80005d4:	b085      	sub	sp, #20
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	689a      	ldr	r2, [r3, #8]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000630:	d103      	bne.n	800063a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	691b      	ldr	r3, [r3, #16]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	e00c      	b.n	8000654 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3308      	adds	r3, #8
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e002      	b.n	8000648 <vListInsert+0x2e>
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	429a      	cmp	r2, r3
 8000652:	d2f6      	bcs.n	8000642 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	601a      	str	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	6892      	ldr	r2, [r2, #8]
 80006a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	6852      	ldr	r2, [r2, #4]
 80006ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d103      	bne.n	80006c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	1e5a      	subs	r2, r3, #1
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10a      	bne.n	800070a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000706:	bf00      	nop
 8000708:	e7fe      	b.n	8000708 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800070a:	f002 f813 	bl	8002734 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000716:	68f9      	ldr	r1, [r7, #12]
 8000718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	441a      	add	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800073a:	3b01      	subs	r3, #1
 800073c:	68f9      	ldr	r1, [r7, #12]
 800073e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000740:	fb01 f303 	mul.w	r3, r1, r3
 8000744:	441a      	add	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	22ff      	movs	r2, #255	; 0xff
 8000756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d114      	bne.n	800078a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	691b      	ldr	r3, [r3, #16]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d01a      	beq.n	800079e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3310      	adds	r3, #16
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f909 	bl	8001984 <xTaskRemoveFromEventList>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d012      	beq.n	800079e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <xQueueGenericReset+0xcc>)
 800077a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	f3bf 8f4f 	dsb	sy
 8000784:	f3bf 8f6f 	isb	sy
 8000788:	e009      	b.n	800079e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3310      	adds	r3, #16
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fef2 	bl	8000578 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3324      	adds	r3, #36	; 0x24
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff feed 	bl	8000578 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800079e:	f001 fff9 	bl	8002794 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	e000ed04 	.word	0xe000ed04

080007b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	4613      	mov	r3, r2
 80007bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d10a      	bne.n	80007da <xQueueGenericCreate+0x2a>
        __asm volatile
 80007c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c8:	f383 8811 	msr	BASEPRI, r3
 80007cc:	f3bf 8f6f 	isb	sy
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	61bb      	str	r3, [r7, #24]
    }
 80007d6:	bf00      	nop
 80007d8:	e7fe      	b.n	80007d8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	68ba      	ldr	r2, [r7, #8]
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <xQueueGenericCreate+0x48>
 80007ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d101      	bne.n	80007fc <xQueueGenericCreate+0x4c>
 80007f8:	2301      	movs	r3, #1
 80007fa:	e000      	b.n	80007fe <xQueueGenericCreate+0x4e>
 80007fc:	2300      	movs	r3, #0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <xQueueGenericCreate+0x68>
        __asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	617b      	str	r3, [r7, #20]
    }
 8000814:	bf00      	nop
 8000816:	e7fe      	b.n	8000816 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800081e:	d90a      	bls.n	8000836 <xQueueGenericCreate+0x86>
        __asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	613b      	str	r3, [r7, #16]
    }
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	3350      	adds	r3, #80	; 0x50
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f8a6 	bl	800298c <pvPortMalloc>
 8000840:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000842:	6a3b      	ldr	r3, [r7, #32]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00d      	beq.n	8000864 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	3350      	adds	r3, #80	; 0x50
 8000850:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4613      	mov	r3, r2
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f805 	bl	800086e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000864:	6a3b      	ldr	r3, [r7, #32]
    }
 8000866:	4618      	mov	r0, r3
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d103      	bne.n	800088a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	e002      	b.n	8000890 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800089c:	2101      	movs	r1, #1
 800089e:	69b8      	ldr	r0, [r7, #24]
 80008a0:	f7ff ff1e 	bl	80006e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	78fa      	ldrb	r2, [r7, #3]
 80008a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	68f9      	ldr	r1, [r7, #12]
 80008b2:	2073      	movs	r0, #115	; 0x73
 80008b4:	f003 f8a0 	bl	80039f8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	; 0x38
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10a      	bne.n	80008f2 <xQueueGenericSend+0x32>
        __asm volatile
 80008dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	623b      	str	r3, [r7, #32]
    }
 80008ee:	bf00      	nop
 80008f0:	e7fe      	b.n	80008f0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d103      	bne.n	8000900 <xQueueGenericSend+0x40>
 80008f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <xQueueGenericSend+0x44>
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <xQueueGenericSend+0x46>
 8000904:	2300      	movs	r3, #0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10a      	bne.n	8000920 <xQueueGenericSend+0x60>
        __asm volatile
 800090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090e:	f383 8811 	msr	BASEPRI, r3
 8000912:	f3bf 8f6f 	isb	sy
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	61fb      	str	r3, [r7, #28]
    }
 800091c:	bf00      	nop
 800091e:	e7fe      	b.n	800091e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d103      	bne.n	800092e <xQueueGenericSend+0x6e>
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092a:	2b01      	cmp	r3, #1
 800092c:	d101      	bne.n	8000932 <xQueueGenericSend+0x72>
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <xQueueGenericSend+0x74>
 8000932:	2300      	movs	r3, #0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10a      	bne.n	800094e <xQueueGenericSend+0x8e>
        __asm volatile
 8000938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093c:	f383 8811 	msr	BASEPRI, r3
 8000940:	f3bf 8f6f 	isb	sy
 8000944:	f3bf 8f4f 	dsb	sy
 8000948:	61bb      	str	r3, [r7, #24]
    }
 800094a:	bf00      	nop
 800094c:	e7fe      	b.n	800094c <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800094e:	f001 fef1 	bl	8002734 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800095a:	429a      	cmp	r2, r3
 800095c:	d302      	bcc.n	8000964 <xQueueGenericSend+0xa4>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d136      	bne.n	80009d2 <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 8000964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000966:	4618      	mov	r0, r3
 8000968:	f003 fe80 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	460b      	mov	r3, r1
 8000976:	4601      	mov	r1, r0
 8000978:	205a      	movs	r0, #90	; 0x5a
 800097a:	f003 f8b3 	bl	8003ae4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000984:	f000 f9a2 	bl	8000ccc <prvCopyDataToQueue>
 8000988:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098e:	2b00      	cmp	r3, #0
 8000990:	d010      	beq.n	80009b4 <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000994:	3324      	adds	r3, #36	; 0x24
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fff4 	bl	8001984 <xTaskRemoveFromEventList>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d013      	beq.n	80009ca <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009a2:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <xQueueGenericSend+0x218>)
 80009a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	f3bf 8f4f 	dsb	sy
 80009ae:	f3bf 8f6f 	isb	sy
 80009b2:	e00a      	b.n	80009ca <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009ba:	4b47      	ldr	r3, [pc, #284]	; (8000ad8 <xQueueGenericSend+0x218>)
 80009bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	f3bf 8f4f 	dsb	sy
 80009c6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009ca:	f001 fee3 	bl	8002794 <vPortExitCritical>
                return pdPASS;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e07d      	b.n	8000ace <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d110      	bne.n	80009fa <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009d8:	f001 fedc 	bl	8002794 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80009dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fe44 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	460b      	mov	r3, r1
 80009ee:	4601      	mov	r1, r0
 80009f0:	205a      	movs	r0, #90	; 0x5a
 80009f2:	f003 f877 	bl	8003ae4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e069      	b.n	8000ace <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d106      	bne.n	8000a0e <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 f823 	bl	8001a50 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a0e:	f001 fec1 	bl	8002794 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a12:	f000 fdad 	bl	8001570 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a16:	f001 fe8d 	bl	8002734 <vPortEnterCritical>
 8000a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a26:	d103      	bne.n	8000a30 <xQueueGenericSend+0x170>
 8000a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a3c:	d103      	bne.n	8000a46 <xQueueGenericSend+0x186>
 8000a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a46:	f001 fea5 	bl	8002794 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a4a:	1d3a      	adds	r2, r7, #4
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 f812 	bl	8001a7c <xTaskCheckForTimeOut>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d124      	bne.n	8000aa8 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a60:	f000 fa2c 	bl	8000ebc <prvIsQueueFull>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d018      	beq.n	8000a9c <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3310      	adds	r3, #16
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 ff62 	bl	800193c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a7a:	f000 f9b7 	bl	8000dec <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a7e:	f000 fd85 	bl	800158c <xTaskResumeAll>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f47f af62 	bne.w	800094e <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <xQueueGenericSend+0x218>)
 8000a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	f3bf 8f4f 	dsb	sy
 8000a96:	f3bf 8f6f 	isb	sy
 8000a9a:	e758      	b.n	800094e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a9e:	f000 f9a5 	bl	8000dec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000aa2:	f000 fd73 	bl	800158c <xTaskResumeAll>
 8000aa6:	e752      	b.n	800094e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000aaa:	f000 f99f 	bl	8000dec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000aae:	f000 fd6d 	bl	800158c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fdd9 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	205a      	movs	r0, #90	; 0x5a
 8000ac8:	f003 f80c 	bl	8003ae4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000acc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3730      	adds	r7, #48	; 0x30
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000ed04 	.word	0xe000ed04

08000adc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b08f      	sub	sp, #60	; 0x3c
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10a      	bne.n	8000b0c <xQueueReceive+0x30>
        __asm volatile
 8000af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000afa:	f383 8811 	msr	BASEPRI, r3
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	f3bf 8f4f 	dsb	sy
 8000b06:	623b      	str	r3, [r7, #32]
    }
 8000b08:	bf00      	nop
 8000b0a:	e7fe      	b.n	8000b0a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d103      	bne.n	8000b1a <xQueueReceive+0x3e>
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <xQueueReceive+0x42>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <xQueueReceive+0x44>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10a      	bne.n	8000b3a <xQueueReceive+0x5e>
        __asm volatile
 8000b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b28:	f383 8811 	msr	BASEPRI, r3
 8000b2c:	f3bf 8f6f 	isb	sy
 8000b30:	f3bf 8f4f 	dsb	sy
 8000b34:	61fb      	str	r3, [r7, #28]
    }
 8000b36:	bf00      	nop
 8000b38:	e7fe      	b.n	8000b38 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b3a:	f001 fdfb 	bl	8002734 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d02f      	beq.n	8000baa <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b4e:	f000 f927 	bl	8000da0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 fd89 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f003 fd85 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 8000b62:	4602      	mov	r2, r0
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2101      	movs	r1, #1
 8000b68:	9100      	str	r1, [sp, #0]
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	205c      	movs	r0, #92	; 0x5c
 8000b6e:	f002 ffb9 	bl	8003ae4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	1e5a      	subs	r2, r3, #1
 8000b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b78:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00f      	beq.n	8000ba2 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b84:	3310      	adds	r3, #16
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fefc 	bl	8001984 <xTaskRemoveFromEventList>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <xQueueReceive+0xc6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b92:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <xQueueReceive+0x1ec>)
 8000b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000ba2:	f001 fdf7 	bl	8002794 <vPortExitCritical>
                return pdPASS;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e08a      	b.n	8000cc0 <xQueueReceive+0x1e4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d113      	bne.n	8000bd8 <xQueueReceive+0xfc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000bb0:	f001 fdf0 	bl	8002794 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 fd58 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f003 fd54 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	9100      	str	r1, [sp, #0]
 8000bcc:	4621      	mov	r1, r4
 8000bce:	205c      	movs	r0, #92	; 0x5c
 8000bd0:	f002 ff88 	bl	8003ae4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e073      	b.n	8000cc0 <xQueueReceive+0x1e4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d106      	bne.n	8000bec <xQueueReceive+0x110>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 ff34 	bl	8001a50 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000bec:	f001 fdd2 	bl	8002794 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000bf0:	f000 fcbe 	bl	8001570 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bf4:	f001 fd9e 	bl	8002734 <vPortEnterCritical>
 8000bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c04:	d103      	bne.n	8000c0e <xQueueReceive+0x132>
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c1a:	d103      	bne.n	8000c24 <xQueueReceive+0x148>
 8000c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c24:	f001 fdb6 	bl	8002794 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c28:	1d3a      	adds	r2, r7, #4
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 ff23 	bl	8001a7c <xTaskCheckForTimeOut>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d124      	bne.n	8000c86 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c3e:	f000 f927 	bl	8000e90 <prvIsQueueEmpty>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d018      	beq.n	8000c7a <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4a:	3324      	adds	r3, #36	; 0x24
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fe73 	bl	800193c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c58:	f000 f8c8 	bl	8000dec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c5c:	f000 fc96 	bl	800158c <xTaskResumeAll>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f47f af69 	bne.w	8000b3a <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <xQueueReceive+0x1ec>)
 8000c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	f3bf 8f4f 	dsb	sy
 8000c74:	f3bf 8f6f 	isb	sy
 8000c78:	e75f      	b.n	8000b3a <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c7c:	f000 f8b6 	bl	8000dec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c80:	f000 fc84 	bl	800158c <xTaskResumeAll>
 8000c84:	e759      	b.n	8000b3a <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c88:	f000 f8b0 	bl	8000dec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c8c:	f000 fc7e 	bl	800158c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c92:	f000 f8fd 	bl	8000e90 <prvIsQueueEmpty>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f43f af4e 	beq.w	8000b3a <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 fce3 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f003 fcdf 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	9100      	str	r1, [sp, #0]
 8000cb6:	4621      	mov	r1, r4
 8000cb8:	205c      	movs	r0, #92	; 0x5c
 8000cba:	f002 ff13 	bl	8003ae4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000cbe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3734      	adds	r7, #52	; 0x34
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	e000ed04 	.word	0xe000ed04

08000ccc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10d      	bne.n	8000d06 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d14d      	bne.n	8000d8e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 ffe4 	bl	8001cc4 <xTaskPriorityDisinherit>
 8000cfc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	e043      	b.n	8000d8e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d119      	bne.n	8000d40 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6858      	ldr	r0, [r3, #4]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	461a      	mov	r2, r3
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	f007 f81a 	bl	8007d50 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	441a      	add	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d32b      	bcc.n	8000d8e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	e026      	b.n	8000d8e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	68d8      	ldr	r0, [r3, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68b9      	ldr	r1, [r7, #8]
 8000d4c:	f007 f800 	bl	8007d50 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	425b      	negs	r3, r3
 8000d5a:	441a      	add	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	425b      	negs	r3, r3
 8000d76:	441a      	add	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d105      	bne.n	8000d8e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000d96:	697b      	ldr	r3, [r7, #20]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d018      	beq.n	8000de4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	441a      	add	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d303      	bcc.n	8000dd4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68d9      	ldr	r1, [r3, #12]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	461a      	mov	r2, r3
 8000dde:	6838      	ldr	r0, [r7, #0]
 8000de0:	f006 ffb6 	bl	8007d50 <memcpy>
    }
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000df4:	f001 fc9e 	bl	8002734 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dfe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e00:	e011      	b.n	8000e26 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d012      	beq.n	8000e30 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3324      	adds	r3, #36	; 0x24
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fdb8 	bl	8001984 <xTaskRemoveFromEventList>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000e1a:	f000 fe95 	bl	8001b48 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	dce9      	bgt.n	8000e02 <prvUnlockQueue+0x16>
 8000e2e:	e000      	b.n	8000e32 <prvUnlockQueue+0x46>
                        break;
 8000e30:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	22ff      	movs	r2, #255	; 0xff
 8000e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000e3a:	f001 fcab 	bl	8002794 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000e3e:	f001 fc79 	bl	8002734 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e48:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e4a:	e011      	b.n	8000e70 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d012      	beq.n	8000e7a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3310      	adds	r3, #16
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fd93 	bl	8001984 <xTaskRemoveFromEventList>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000e64:	f000 fe70 	bl	8001b48 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000e68:	7bbb      	ldrb	r3, [r7, #14]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dce9      	bgt.n	8000e4c <prvUnlockQueue+0x60>
 8000e78:	e000      	b.n	8000e7c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000e7a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	22ff      	movs	r2, #255	; 0xff
 8000e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000e84:	f001 fc86 	bl	8002794 <vPortExitCritical>
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e98:	f001 fc4c 	bl	8002734 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e001      	b.n	8000eae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000eae:	f001 fc71 	bl	8002794 <vPortExitCritical>

    return xReturn;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ec4:	f001 fc36 	bl	8002734 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d102      	bne.n	8000eda <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	e001      	b.n	8000ede <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000ede:	f001 fc59 	bl	8002794 <vPortExitCritical>

    return xReturn;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 fd43 	bl	800298c <pvPortMalloc>
 8000f06:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00e      	beq.n	8000f2c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000f0e:	2058      	movs	r0, #88	; 0x58
 8000f10:	f001 fd3c 	bl	800298c <pvPortMalloc>
 8000f14:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	631a      	str	r2, [r3, #48]	; 0x30
 8000f22:	e005      	b.n	8000f30 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000f24:	6978      	ldr	r0, [r7, #20]
 8000f26:	f001 fe11 	bl	8002b4c <vPortFree>
 8000f2a:	e001      	b.n	8000f30 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d013      	beq.n	8000f5e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000f36:	88fa      	ldrh	r2, [r7, #6]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9303      	str	r3, [sp, #12]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f80e 	bl	8000f6e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000f52:	69f8      	ldr	r0, [r7, #28]
 8000f54:	f000 f8a2 	bl	800109c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	e002      	b.n	8000f64 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f62:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000f64:	69bb      	ldr	r3, [r7, #24]
    }
 8000f66:	4618      	mov	r0, r3
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b088      	sub	sp, #32
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	461a      	mov	r2, r3
 8000f86:	21a5      	movs	r1, #165	; 0xa5
 8000f88:	f006 fef0 	bl	8007d6c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f96:	3b01      	subs	r3, #1
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	f023 0307 	bic.w	r3, r3, #7
 8000fa4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00a      	beq.n	8000fc6 <prvInitialiseNewTask+0x58>
        __asm volatile
 8000fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	f3bf 8f6f 	isb	sy
 8000fbc:	f3bf 8f4f 	dsb	sy
 8000fc0:	617b      	str	r3, [r7, #20]
    }
 8000fc2:	bf00      	nop
 8000fc4:	e7fe      	b.n	8000fc4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d01f      	beq.n	800100c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	e012      	b.n	8000ff8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	7819      	ldrb	r1, [r3, #0]
 8000fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	4413      	add	r3, r2
 8000fe0:	3334      	adds	r3, #52	; 0x34
 8000fe2:	460a      	mov	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b09      	cmp	r3, #9
 8000ffc:	d9e9      	bls.n	8000fd2 <prvInitialiseNewTask+0x64>
 8000ffe:	e000      	b.n	8001002 <prvInitialiseNewTask+0x94>
            {
                break;
 8001000:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800100a:	e003      	b.n	8001014 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800100c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	2b04      	cmp	r3, #4
 8001018:	d901      	bls.n	800101e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800101a:	2304      	movs	r3, #4
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800101e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001028:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800102a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800102c:	2200      	movs	r2, #0
 800102e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001032:	3304      	adds	r3, #4
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fabf 	bl	80005b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800103a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103c:	3318      	adds	r3, #24
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff faba 	bl	80005b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001048:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104c:	f1c3 0205 	rsb	r2, r3, #5
 8001050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001052:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800105a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800105c:	3350      	adds	r3, #80	; 0x50
 800105e:	2204      	movs	r2, #4
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f006 fe82 	bl	8007d6c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106a:	3354      	adds	r3, #84	; 0x54
 800106c:	2201      	movs	r2, #1
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f006 fe7b 	bl	8007d6c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	69b8      	ldr	r0, [r7, #24]
 800107c:	f001 f9aa 	bl	80023d4 <pxPortInitialiseStack>
 8001080:	4602      	mov	r2, r0
 8001082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001084:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001090:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80010a4:	f001 fb46 	bl	8002734 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <prvAddNewTaskToReadyList+0xfc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a3a      	ldr	r2, [pc, #232]	; (8001198 <prvAddNewTaskToReadyList+0xfc>)
 80010b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80010b2:	4b3a      	ldr	r3, [pc, #232]	; (800119c <prvAddNewTaskToReadyList+0x100>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d109      	bne.n	80010ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80010ba:	4a38      	ldr	r2, [pc, #224]	; (800119c <prvAddNewTaskToReadyList+0x100>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80010c0:	4b35      	ldr	r3, [pc, #212]	; (8001198 <prvAddNewTaskToReadyList+0xfc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d110      	bne.n	80010ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80010c8:	f000 fd62 	bl	8001b90 <prvInitialiseTaskLists>
 80010cc:	e00d      	b.n	80010ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <prvAddNewTaskToReadyList+0x104>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <prvAddNewTaskToReadyList+0x100>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d802      	bhi.n	80010ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80010e4:	4a2d      	ldr	r2, [pc, #180]	; (800119c <prvAddNewTaskToReadyList+0x100>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <prvAddNewTaskToReadyList+0x108>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	4a2c      	ldr	r2, [pc, #176]	; (80011a4 <prvAddNewTaskToReadyList+0x108>)
 80010f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <prvAddNewTaskToReadyList+0x108>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d016      	beq.n	8001130 <prvAddNewTaskToReadyList+0x94>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	f003 f98b 	bl	8004420 <SEGGER_SYSVIEW_OnTaskCreate>
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	461d      	mov	r5, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	461c      	mov	r4, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	1ae3      	subs	r3, r4, r3
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	462b      	mov	r3, r5
 800112c:	f001 fedc 	bl	8002ee8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4618      	mov	r0, r3
 8001134:	f003 f9f8 	bl	8004528 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	2201      	movs	r2, #1
 800113e:	409a      	lsls	r2, r3
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <prvAddNewTaskToReadyList+0x10c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4313      	orrs	r3, r2
 8001146:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <prvAddNewTaskToReadyList+0x10c>)
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <prvAddNewTaskToReadyList+0x110>)
 8001158:	441a      	add	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3304      	adds	r3, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4610      	mov	r0, r2
 8001162:	f7ff fa36 	bl	80005d2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001166:	f001 fb15 	bl	8002794 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <prvAddNewTaskToReadyList+0x104>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00e      	beq.n	8001190 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <prvAddNewTaskToReadyList+0x100>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <prvAddNewTaskToReadyList+0x114>)
 8001182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	f3bf 8f4f 	dsb	sy
 800118c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	2000010c 	.word	0x2000010c
 800119c:	20000034 	.word	0x20000034
 80011a0:	20000118 	.word	0x20000118
 80011a4:	20000128 	.word	0x20000128
 80011a8:	20000114 	.word	0x20000114
 80011ac:	20000038 	.word	0x20000038
 80011b0:	e000ed04 	.word	0xe000ed04

080011b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d01b      	beq.n	80011fe <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <vTaskDelay+0x68>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00a      	beq.n	80011e4 <vTaskDelay+0x30>
        __asm volatile
 80011ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d2:	f383 8811 	msr	BASEPRI, r3
 80011d6:	f3bf 8f6f 	isb	sy
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	60bb      	str	r3, [r7, #8]
    }
 80011e0:	bf00      	nop
 80011e2:	e7fe      	b.n	80011e2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80011e4:	f000 f9c4 	bl	8001570 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	2023      	movs	r0, #35	; 0x23
 80011ec:	f002 fb6e 	bl	80038cc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80011f0:	2100      	movs	r1, #0
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f001 f876 	bl	80022e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80011f8:	f000 f9c8 	bl	800158c <xTaskResumeAll>
 80011fc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <vTaskDelay+0x6c>)
 8001206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	f3bf 8f4f 	dsb	sy
 8001210:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000134 	.word	0x20000134
 8001220:	e000ed04 	.word	0xe000ed04

08001224 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800122c:	f001 fa82 	bl	8002734 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <vTaskSuspend+0x18>
 8001236:	4b4a      	ldr	r3, [pc, #296]	; (8001360 <vTaskSuspend+0x13c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	e000      	b.n	800123e <vTaskSuspend+0x1a>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fa12 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 8001248:	4603      	mov	r3, r0
 800124a:	4619      	mov	r1, r3
 800124c:	2029      	movs	r0, #41	; 0x29
 800124e:	f002 fb3d 	bl	80038cc <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	3304      	adds	r3, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fa18 	bl	800068c <uxListRemove>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d115      	bne.n	800128e <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001266:	493f      	ldr	r1, [pc, #252]	; (8001364 <vTaskSuspend+0x140>)
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10a      	bne.n	800128e <vTaskSuspend+0x6a>
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2201      	movs	r2, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	4b38      	ldr	r3, [pc, #224]	; (8001368 <vTaskSuspend+0x144>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4013      	ands	r3, r2
 800128a:	4a37      	ldr	r2, [pc, #220]	; (8001368 <vTaskSuspend+0x144>)
 800128c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	3318      	adds	r3, #24
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f9f6 	bl	800068c <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	211b      	movs	r1, #27
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 f981 	bl	80045ac <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	3304      	adds	r3, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	482e      	ldr	r0, [pc, #184]	; (800136c <vTaskSuspend+0x148>)
 80012b2:	f7ff f98e 	bl	80005d2 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e010      	b.n	80012de <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	4413      	add	r3, r2
 80012c2:	3354      	adds	r3, #84	; 0x54
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	4413      	add	r3, r2
 80012d2:	3354      	adds	r3, #84	; 0x54
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	ddeb      	ble.n	80012bc <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 80012e4:	f001 fa56 	bl	8002794 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <vTaskSuspend+0x14c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 80012f0:	f001 fa20 	bl	8002734 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 80012f4:	f000 fcca 	bl	8001c8c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 80012f8:	f001 fa4c 	bl	8002794 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <vTaskSuspend+0x13c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	429a      	cmp	r2, r3
 8001304:	d127      	bne.n	8001356 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <vTaskSuspend+0x14c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d017      	beq.n	800133e <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <vTaskSuspend+0x150>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00a      	beq.n	800132c <vTaskSuspend+0x108>
        __asm volatile
 8001316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800131a:	f383 8811 	msr	BASEPRI, r3
 800131e:	f3bf 8f6f 	isb	sy
 8001322:	f3bf 8f4f 	dsb	sy
 8001326:	60fb      	str	r3, [r7, #12]
    }
 8001328:	bf00      	nop
 800132a:	e7fe      	b.n	800132a <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <vTaskSuspend+0x154>)
 800132e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	f3bf 8f4f 	dsb	sy
 8001338:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800133c:	e00b      	b.n	8001356 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <vTaskSuspend+0x148>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <vTaskSuspend+0x158>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d103      	bne.n	8001352 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <vTaskSuspend+0x13c>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
    }
 8001350:	e001      	b.n	8001356 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8001352:	f000 fa89 	bl	8001868 <vTaskSwitchContext>
    }
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000034 	.word	0x20000034
 8001364:	20000038 	.word	0x20000038
 8001368:	20000114 	.word	0x20000114
 800136c:	200000f8 	.word	0x200000f8
 8001370:	20000118 	.word	0x20000118
 8001374:	20000134 	.word	0x20000134
 8001378:	e000ed04 	.word	0xe000ed04
 800137c:	2000010c 	.word	0x2000010c

08001380 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10a      	bne.n	80013ac <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8001396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800139a:	f383 8811 	msr	BASEPRI, r3
 800139e:	f3bf 8f6f 	isb	sy
 80013a2:	f3bf 8f4f 	dsb	sy
 80013a6:	60fb      	str	r3, [r7, #12]
    }
 80013a8:	bf00      	nop
 80013aa:	e7fe      	b.n	80013aa <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <prvTaskIsTaskSuspended+0x5c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10a      	bne.n	80013cc <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <prvTaskIsTaskSuspended+0x60>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d005      	beq.n	80013cc <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80013cc:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80013ce:	4618      	mov	r0, r3
 80013d0:	371c      	adds	r7, #28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	200000f8 	.word	0x200000f8
 80013e0:	200000cc 	.word	0x200000cc

080013e4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10a      	bne.n	800140c <vTaskResume+0x28>
        __asm volatile
 80013f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fa:	f383 8811 	msr	BASEPRI, r3
 80013fe:	f3bf 8f6f 	isb	sy
 8001402:	f3bf 8f4f 	dsb	sy
 8001406:	60bb      	str	r3, [r7, #8]
    }
 8001408:	bf00      	nop
 800140a:	e7fe      	b.n	800140a <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <vTaskResume+0xc4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	429a      	cmp	r2, r3
 8001414:	d044      	beq.n	80014a0 <vTaskResume+0xbc>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d041      	beq.n	80014a0 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 800141c:	f001 f98a 	bl	8002734 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff ffad 	bl	8001380 <prvTaskIsTaskSuspended>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d037      	beq.n	800149c <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f91c 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 8001434:	4603      	mov	r3, r0
 8001436:	4619      	mov	r1, r3
 8001438:	202a      	movs	r0, #42	; 0x2a
 800143a:	f002 fa47 	bl	80038cc <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3304      	adds	r3, #4
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f922 	bl	800068c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4618      	mov	r0, r3
 800144c:	f003 f86c 	bl	8004528 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	2201      	movs	r2, #1
 8001456:	409a      	lsls	r2, r3
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <vTaskResume+0xc8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4313      	orrs	r3, r2
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <vTaskResume+0xc8>)
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <vTaskResume+0xcc>)
 8001470:	441a      	add	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3304      	adds	r3, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4610      	mov	r0, r2
 800147a:	f7ff f8aa 	bl	80005d2 <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <vTaskResume+0xc4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	429a      	cmp	r2, r3
 800148a:	d307      	bcc.n	800149c <vTaskResume+0xb8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <vTaskResume+0xd0>)
 800148e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	f3bf 8f4f 	dsb	sy
 8001498:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800149c:	f001 f97a 	bl	8002794 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000034 	.word	0x20000034
 80014ac:	20000114 	.word	0x20000114
 80014b0:	20000038 	.word	0x20000038
 80014b4:	e000ed04 	.word	0xe000ed04

080014b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <vTaskStartScheduler+0x98>)
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	2300      	movs	r3, #0
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2300      	movs	r3, #0
 80014c8:	2282      	movs	r2, #130	; 0x82
 80014ca:	4922      	ldr	r1, [pc, #136]	; (8001554 <vTaskStartScheduler+0x9c>)
 80014cc:	4822      	ldr	r0, [pc, #136]	; (8001558 <vTaskStartScheduler+0xa0>)
 80014ce:	f7ff fd0d 	bl	8000eec <xTaskCreate>
 80014d2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d124      	bne.n	8001524 <vTaskStartScheduler+0x6c>
        __asm volatile
 80014da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014de:	f383 8811 	msr	BASEPRI, r3
 80014e2:	f3bf 8f6f 	isb	sy
 80014e6:	f3bf 8f4f 	dsb	sy
 80014ea:	60bb      	str	r3, [r7, #8]
    }
 80014ec:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <vTaskStartScheduler+0xa4>)
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <vTaskStartScheduler+0xa8>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <vTaskStartScheduler+0xac>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <vTaskStartScheduler+0xb0>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <vTaskStartScheduler+0x98>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d102      	bne.n	8001514 <vTaskStartScheduler+0x5c>
 800150e:	f002 ff6b 	bl	80043e8 <SEGGER_SYSVIEW_OnIdle>
 8001512:	e004      	b.n	800151e <vTaskStartScheduler+0x66>
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <vTaskStartScheduler+0xb0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f002 ffc3 	bl	80044a4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800151e:	f000 ffe9 	bl	80024f4 <xPortStartScheduler>
 8001522:	e00e      	b.n	8001542 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800152a:	d10a      	bne.n	8001542 <vTaskStartScheduler+0x8a>
        __asm volatile
 800152c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001530:	f383 8811 	msr	BASEPRI, r3
 8001534:	f3bf 8f6f 	isb	sy
 8001538:	f3bf 8f4f 	dsb	sy
 800153c:	607b      	str	r3, [r7, #4]
    }
 800153e:	bf00      	nop
 8001540:	e7fe      	b.n	8001540 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <vTaskStartScheduler+0xb4>)
 8001544:	681b      	ldr	r3, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000130 	.word	0x20000130
 8001554:	08007d94 	.word	0x08007d94
 8001558:	08001b61 	.word	0x08001b61
 800155c:	2000012c 	.word	0x2000012c
 8001560:	20000118 	.word	0x20000118
 8001564:	20000110 	.word	0x20000110
 8001568:	20000034 	.word	0x20000034
 800156c:	20000000 	.word	0x20000000

08001570 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <vTaskSuspendAll+0x18>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	4a03      	ldr	r2, [pc, #12]	; (8001588 <vTaskSuspendAll+0x18>)
 800157c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	20000134 	.word	0x20000134

0800158c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <xTaskResumeAll+0x11c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10a      	bne.n	80015b8 <xTaskResumeAll+0x2c>
        __asm volatile
 80015a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a6:	f383 8811 	msr	BASEPRI, r3
 80015aa:	f3bf 8f6f 	isb	sy
 80015ae:	f3bf 8f4f 	dsb	sy
 80015b2:	603b      	str	r3, [r7, #0]
    }
 80015b4:	bf00      	nop
 80015b6:	e7fe      	b.n	80015b6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80015b8:	f001 f8bc 	bl	8002734 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80015bc:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <xTaskResumeAll+0x11c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4a39      	ldr	r2, [pc, #228]	; (80016a8 <xTaskResumeAll+0x11c>)
 80015c4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015c6:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <xTaskResumeAll+0x11c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d165      	bne.n	800169a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <xTaskResumeAll+0x120>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d061      	beq.n	800169a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015d6:	e032      	b.n	800163e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <xTaskResumeAll+0x124>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3318      	adds	r3, #24
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f851 	bl	800068c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3304      	adds	r3, #4
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f84c 	bl	800068c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 ff96 	bl	8004528 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2201      	movs	r2, #1
 8001602:	409a      	lsls	r2, r3
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <xTaskResumeAll+0x128>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4313      	orrs	r3, r2
 800160a:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <xTaskResumeAll+0x128>)
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <xTaskResumeAll+0x12c>)
 800161c:	441a      	add	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3304      	adds	r3, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4610      	mov	r0, r2
 8001626:	f7fe ffd4 	bl	80005d2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <xTaskResumeAll+0x130>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	429a      	cmp	r2, r3
 8001636:	d302      	bcc.n	800163e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <xTaskResumeAll+0x134>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <xTaskResumeAll+0x124>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1c8      	bne.n	80015d8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800164c:	f000 fb1e 	bl	8001c8c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <xTaskResumeAll+0x138>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d010      	beq.n	800167e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800165c:	f000 f848 	bl	80016f0 <xTaskIncrementTick>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <xTaskResumeAll+0x134>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f1      	bne.n	800165c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <xTaskResumeAll+0x138>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <xTaskResumeAll+0x134>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d009      	beq.n	800169a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001686:	2301      	movs	r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <xTaskResumeAll+0x13c>)
 800168c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f3bf 8f4f 	dsb	sy
 8001696:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800169a:	f001 f87b 	bl	8002794 <vPortExitCritical>

    return xAlreadyYielded;
 800169e:	68bb      	ldr	r3, [r7, #8]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000134 	.word	0x20000134
 80016ac:	2000010c 	.word	0x2000010c
 80016b0:	200000cc 	.word	0x200000cc
 80016b4:	20000114 	.word	0x20000114
 80016b8:	20000038 	.word	0x20000038
 80016bc:	20000034 	.word	0x20000034
 80016c0:	20000120 	.word	0x20000120
 80016c4:	2000011c 	.word	0x2000011c
 80016c8:	e000ed04 	.word	0xe000ed04

080016cc <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80016d2:	f001 f91b 	bl	800290c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <xTaskGetTickCountFromISR+0x20>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80016e0:	683b      	ldr	r3, [r7, #0]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000110 	.word	0x20000110

080016f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016fa:	4b50      	ldr	r3, [pc, #320]	; (800183c <xTaskIncrementTick+0x14c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 8092 	bne.w	8001828 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <xTaskIncrementTick+0x150>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800170c:	4a4c      	ldr	r2, [pc, #304]	; (8001840 <xTaskIncrementTick+0x150>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d120      	bne.n	800175a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001718:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <xTaskIncrementTick+0x154>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00a      	beq.n	8001738 <xTaskIncrementTick+0x48>
        __asm volatile
 8001722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001726:	f383 8811 	msr	BASEPRI, r3
 800172a:	f3bf 8f6f 	isb	sy
 800172e:	f3bf 8f4f 	dsb	sy
 8001732:	603b      	str	r3, [r7, #0]
    }
 8001734:	bf00      	nop
 8001736:	e7fe      	b.n	8001736 <xTaskIncrementTick+0x46>
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <xTaskIncrementTick+0x154>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b42      	ldr	r3, [pc, #264]	; (8001848 <xTaskIncrementTick+0x158>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a40      	ldr	r2, [pc, #256]	; (8001844 <xTaskIncrementTick+0x154>)
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4a40      	ldr	r2, [pc, #256]	; (8001848 <xTaskIncrementTick+0x158>)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <xTaskIncrementTick+0x15c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	4a3e      	ldr	r2, [pc, #248]	; (800184c <xTaskIncrementTick+0x15c>)
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	f000 fa99 	bl	8001c8c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <xTaskIncrementTick+0x160>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d34c      	bcc.n	80017fe <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001764:	4b37      	ldr	r3, [pc, #220]	; (8001844 <xTaskIncrementTick+0x154>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d104      	bne.n	8001778 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <xTaskIncrementTick+0x160>)
 8001770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001774:	601a      	str	r2, [r3, #0]
                    break;
 8001776:	e042      	b.n	80017fe <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001778:	4b32      	ldr	r3, [pc, #200]	; (8001844 <xTaskIncrementTick+0x154>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	d203      	bcs.n	8001798 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001790:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <xTaskIncrementTick+0x160>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001796:	e032      	b.n	80017fe <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	3304      	adds	r3, #4
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe ff75 	bl	800068c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3318      	adds	r3, #24
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe ff6c 	bl	800068c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f002 feb6 	bl	8004528 <SEGGER_SYSVIEW_OnTaskStartReady>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	2201      	movs	r2, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <xTaskIncrementTick+0x164>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <xTaskIncrementTick+0x164>)
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <xTaskIncrementTick+0x168>)
 80017dc:	441a      	add	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3304      	adds	r3, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4610      	mov	r0, r2
 80017e6:	f7fe fef4 	bl	80005d2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <xTaskIncrementTick+0x16c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d3b5      	bcc.n	8001764 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017fc:	e7b2      	b.n	8001764 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <xTaskIncrementTick+0x16c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001804:	4914      	ldr	r1, [pc, #80]	; (8001858 <xTaskIncrementTick+0x168>)
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d901      	bls.n	800181a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <xTaskIncrementTick+0x170>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8001822:	2301      	movs	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e004      	b.n	8001832 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <xTaskIncrementTick+0x174>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <xTaskIncrementTick+0x174>)
 8001830:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001832:	697b      	ldr	r3, [r7, #20]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000134 	.word	0x20000134
 8001840:	20000110 	.word	0x20000110
 8001844:	200000c4 	.word	0x200000c4
 8001848:	200000c8 	.word	0x200000c8
 800184c:	20000124 	.word	0x20000124
 8001850:	2000012c 	.word	0x2000012c
 8001854:	20000114 	.word	0x20000114
 8001858:	20000038 	.word	0x20000038
 800185c:	20000034 	.word	0x20000034
 8001860:	20000120 	.word	0x20000120
 8001864:	2000011c 	.word	0x2000011c

08001868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <vTaskSwitchContext+0xbc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <vTaskSwitchContext+0xc0>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800187c:	e04d      	b.n	800191a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <vTaskSwitchContext+0xc0>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <vTaskSwitchContext+0xc4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001892:	7afb      	ldrb	r3, [r7, #11]
 8001894:	f1c3 031f 	rsb	r3, r3, #31
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	4925      	ldr	r1, [pc, #148]	; (8001930 <vTaskSwitchContext+0xc8>)
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10a      	bne.n	80018c4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80018ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b2:	f383 8811 	msr	BASEPRI, r3
 80018b6:	f3bf 8f6f 	isb	sy
 80018ba:	f3bf 8f4f 	dsb	sy
 80018be:	607b      	str	r3, [r7, #4]
    }
 80018c0:	bf00      	nop
 80018c2:	e7fe      	b.n	80018c2 <vTaskSwitchContext+0x5a>
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4a18      	ldr	r2, [pc, #96]	; (8001930 <vTaskSwitchContext+0xc8>)
 80018d0:	4413      	add	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	3308      	adds	r3, #8
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d104      	bne.n	80018f4 <vTaskSwitchContext+0x8c>
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <vTaskSwitchContext+0xcc>)
 80018fc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <vTaskSwitchContext+0xcc>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <vTaskSwitchContext+0xd0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d102      	bne.n	8001910 <vTaskSwitchContext+0xa8>
 800190a:	f002 fd6d 	bl	80043e8 <SEGGER_SYSVIEW_OnIdle>
}
 800190e:	e004      	b.n	800191a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <vTaskSwitchContext+0xcc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fdc5 	bl	80044a4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000134 	.word	0x20000134
 8001928:	20000120 	.word	0x20000120
 800192c:	20000114 	.word	0x20000114
 8001930:	20000038 	.word	0x20000038
 8001934:	20000034 	.word	0x20000034
 8001938:	20000130 	.word	0x20000130

0800193c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800194c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001950:	f383 8811 	msr	BASEPRI, r3
 8001954:	f3bf 8f6f 	isb	sy
 8001958:	f3bf 8f4f 	dsb	sy
 800195c:	60fb      	str	r3, [r7, #12]
    }
 800195e:	bf00      	nop
 8001960:	e7fe      	b.n	8001960 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <vTaskPlaceOnEventList+0x44>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3318      	adds	r3, #24
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7fe fe55 	bl	800061a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001970:	2101      	movs	r1, #1
 8001972:	6838      	ldr	r0, [r7, #0]
 8001974:	f000 fcb6 	bl	80022e4 <prvAddCurrentTaskToDelayedList>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000034 	.word	0x20000034

08001984 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10a      	bne.n	80019b0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800199a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199e:	f383 8811 	msr	BASEPRI, r3
 80019a2:	f3bf 8f6f 	isb	sy
 80019a6:	f3bf 8f4f 	dsb	sy
 80019aa:	60fb      	str	r3, [r7, #12]
    }
 80019ac:	bf00      	nop
 80019ae:	e7fe      	b.n	80019ae <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	3318      	adds	r3, #24
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fe69 	bl	800068c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <xTaskRemoveFromEventList+0xb4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d120      	bne.n	8001a04 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	3304      	adds	r3, #4
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fe60 	bl	800068c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fdaa 	bl	8004528 <SEGGER_SYSVIEW_OnTaskStartReady>
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	2201      	movs	r2, #1
 80019da:	409a      	lsls	r2, r3
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <xTaskRemoveFromEventList+0xb8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <xTaskRemoveFromEventList+0xb8>)
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <xTaskRemoveFromEventList+0xbc>)
 80019f4:	441a      	add	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	3304      	adds	r3, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4610      	mov	r0, r2
 80019fe:	f7fe fde8 	bl	80005d2 <vListInsertEnd>
 8001a02:	e005      	b.n	8001a10 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	3318      	adds	r3, #24
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480e      	ldr	r0, [pc, #56]	; (8001a44 <xTaskRemoveFromEventList+0xc0>)
 8001a0c:	f7fe fde1 	bl	80005d2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <xTaskRemoveFromEventList+0xc4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d905      	bls.n	8001a2a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <xTaskRemoveFromEventList+0xc8>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e001      	b.n	8001a2e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001a2e:	697b      	ldr	r3, [r7, #20]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000134 	.word	0x20000134
 8001a3c:	20000114 	.word	0x20000114
 8001a40:	20000038 	.word	0x20000038
 8001a44:	200000cc 	.word	0x200000cc
 8001a48:	20000034 	.word	0x20000034
 8001a4c:	20000120 	.word	0x20000120

08001a50 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <vTaskInternalSetTimeOutState+0x24>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <vTaskInternalSetTimeOutState+0x28>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	605a      	str	r2, [r3, #4]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	20000124 	.word	0x20000124
 8001a78:	20000110 	.word	0x20000110

08001a7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a90:	f383 8811 	msr	BASEPRI, r3
 8001a94:	f3bf 8f6f 	isb	sy
 8001a98:	f3bf 8f4f 	dsb	sy
 8001a9c:	613b      	str	r3, [r7, #16]
    }
 8001a9e:	bf00      	nop
 8001aa0:	e7fe      	b.n	8001aa0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10a      	bne.n	8001abe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aac:	f383 8811 	msr	BASEPRI, r3
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	60fb      	str	r3, [r7, #12]
    }
 8001aba:	bf00      	nop
 8001abc:	e7fe      	b.n	8001abc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001abe:	f000 fe39 	bl	8002734 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <xTaskCheckForTimeOut+0xc4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ada:	d102      	bne.n	8001ae2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	e026      	b.n	8001b30 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <xTaskCheckForTimeOut+0xc8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d00a      	beq.n	8001b04 <xTaskCheckForTimeOut+0x88>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d305      	bcc.n	8001b04 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e015      	b.n	8001b30 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d20b      	bcs.n	8001b26 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	1ad2      	subs	r2, r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff98 	bl	8001a50 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	e004      	b.n	8001b30 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001b30:	f000 fe30 	bl	8002794 <vPortExitCritical>

    return xReturn;
 8001b34:	69fb      	ldr	r3, [r7, #28]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3720      	adds	r7, #32
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000110 	.word	0x20000110
 8001b44:	20000124 	.word	0x20000124

08001b48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <vTaskMissedYield+0x14>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20000120 	.word	0x20000120

08001b60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001b68:	f000 f852 	bl	8001c10 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <prvIdleTask+0x28>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d9f9      	bls.n	8001b68 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <prvIdleTask+0x2c>)
 8001b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001b84:	e7f0      	b.n	8001b68 <prvIdleTask+0x8>
 8001b86:	bf00      	nop
 8001b88:	20000038 	.word	0x20000038
 8001b8c:	e000ed04 	.word	0xe000ed04

08001b90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	e00c      	b.n	8001bb6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <prvInitialiseTaskLists+0x60>)
 8001ba8:	4413      	add	r3, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fce4 	bl	8000578 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d9ef      	bls.n	8001b9c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <prvInitialiseTaskLists+0x64>)
 8001bbe:	f7fe fcdb 	bl	8000578 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001bc2:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <prvInitialiseTaskLists+0x68>)
 8001bc4:	f7fe fcd8 	bl	8000578 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <prvInitialiseTaskLists+0x6c>)
 8001bca:	f7fe fcd5 	bl	8000578 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001bce:	480c      	ldr	r0, [pc, #48]	; (8001c00 <prvInitialiseTaskLists+0x70>)
 8001bd0:	f7fe fcd2 	bl	8000578 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <prvInitialiseTaskLists+0x74>)
 8001bd6:	f7fe fccf 	bl	8000578 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <prvInitialiseTaskLists+0x78>)
 8001bdc:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <prvInitialiseTaskLists+0x64>)
 8001bde:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <prvInitialiseTaskLists+0x7c>)
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <prvInitialiseTaskLists+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000038 	.word	0x20000038
 8001bf4:	2000009c 	.word	0x2000009c
 8001bf8:	200000b0 	.word	0x200000b0
 8001bfc:	200000cc 	.word	0x200000cc
 8001c00:	200000e0 	.word	0x200000e0
 8001c04:	200000f8 	.word	0x200000f8
 8001c08:	200000c4 	.word	0x200000c4
 8001c0c:	200000c8 	.word	0x200000c8

08001c10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c16:	e019      	b.n	8001c4c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001c18:	f000 fd8c 	bl	8002734 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <prvCheckTasksWaitingTermination+0x50>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fd2f 	bl	800068c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <prvCheckTasksWaitingTermination+0x54>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <prvCheckTasksWaitingTermination+0x54>)
 8001c36:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <prvCheckTasksWaitingTermination+0x58>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <prvCheckTasksWaitingTermination+0x58>)
 8001c40:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001c42:	f000 fda7 	bl	8002794 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f810 	bl	8001c6c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <prvCheckTasksWaitingTermination+0x58>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e1      	bne.n	8001c18 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200000e0 	.word	0x200000e0
 8001c64:	2000010c 	.word	0x2000010c
 8001c68:	200000f4 	.word	0x200000f4

08001c6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 ff67 	bl	8002b4c <vPortFree>
                vPortFree( pxTCB );
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 ff64 	bl	8002b4c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <prvResetNextTaskUnblockTime+0x30>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d104      	bne.n	8001ca4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <prvResetNextTaskUnblockTime+0x34>)
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001ca2:	e005      	b.n	8001cb0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <prvResetNextTaskUnblockTime+0x30>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <prvResetNextTaskUnblockTime+0x34>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	200000c4 	.word	0x200000c4
 8001cc0:	2000012c 	.word	0x2000012c

08001cc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d068      	beq.n	8001dac <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <xTaskPriorityDisinherit+0xf4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d00a      	beq.n	8001cfa <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce8:	f383 8811 	msr	BASEPRI, r3
 8001cec:	f3bf 8f6f 	isb	sy
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	60fb      	str	r3, [r7, #12]
    }
 8001cf6:	bf00      	nop
 8001cf8:	e7fe      	b.n	8001cf8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d06:	f383 8811 	msr	BASEPRI, r3
 8001d0a:	f3bf 8f6f 	isb	sy
 8001d0e:	f3bf 8f4f 	dsb	sy
 8001d12:	60bb      	str	r3, [r7, #8]
    }
 8001d14:	bf00      	nop
 8001d16:	e7fe      	b.n	8001d16 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d03e      	beq.n	8001dac <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13a      	bne.n	8001dac <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fca6 	bl	800068c <uxListRemove>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43da      	mvns	r2, r3
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <xTaskPriorityDisinherit+0xf8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4013      	ands	r3, r2
 8001d58:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <xTaskPriorityDisinherit+0xf8>)
 8001d5a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	204a      	movs	r0, #74	; 0x4a
 8001d62:	f001 fdb3 	bl	80038cc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	f1c3 0205 	rsb	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	2201      	movs	r2, #1
 8001d80:	409a      	lsls	r2, r3
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <xTaskPriorityDisinherit+0xf8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <xTaskPriorityDisinherit+0xf8>)
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <xTaskPriorityDisinherit+0xfc>)
 8001d9a:	441a      	add	r2, r3
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f7fe fc15 	bl	80005d2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001dac:	697b      	ldr	r3, [r7, #20]
    }
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000034 	.word	0x20000034
 8001dbc:	20000114 	.word	0x20000114
 8001dc0:	20000038 	.word	0x20000038

08001dc4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00a      	beq.n	8001dee <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	613b      	str	r3, [r7, #16]
    }
 8001dea:	bf00      	nop
 8001dec:	e7fe      	b.n	8001dec <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001dee:	f000 fca1 	bl	8002734 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <xTaskGenericNotifyWait+0x108>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	3354      	adds	r3, #84	; 0x54
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d022      	beq.n	8001e4a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001e04:	4b31      	ldr	r3, [pc, #196]	; (8001ecc <xTaskGenericNotifyWait+0x108>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	3214      	adds	r2, #20
 8001e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	43d2      	mvns	r2, r2
 8001e14:	4011      	ands	r1, r2
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	3214      	adds	r2, #20
 8001e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <xTaskGenericNotifyWait+0x108>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	3354      	adds	r3, #84	; 0x54
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e32:	2101      	movs	r1, #1
 8001e34:	6a38      	ldr	r0, [r7, #32]
 8001e36:	f000 fa55 	bl	80022e4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001e3a:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <xTaskGenericNotifyWait+0x10c>)
 8001e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f3bf 8f4f 	dsb	sy
 8001e46:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e4a:	f000 fca3 	bl	8002794 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001e4e:	f000 fc71 	bl	8002734 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	2040      	movs	r0, #64	; 0x40
 8001e60:	f001 fe40 	bl	8003ae4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <xTaskGenericNotifyWait+0x108>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	3214      	adds	r2, #20
 8001e72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <xTaskGenericNotifyWait+0x108>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4413      	add	r3, r2
 8001e82:	3354      	adds	r3, #84	; 0x54
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d002      	beq.n	8001e92 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e00e      	b.n	8001eb0 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <xTaskGenericNotifyWait+0x108>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	3214      	adds	r2, #20
 8001e9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	43d2      	mvns	r2, r2
 8001ea2:	4011      	ands	r1, r2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	3214      	adds	r2, #20
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001eac:	2301      	movs	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <xTaskGenericNotifyWait+0x108>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3354      	adds	r3, #84	; 0x54
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001ebe:	f000 fc69 	bl	8002794 <vPortExitCritical>

        return xReturn;
 8001ec2:	697b      	ldr	r3, [r7, #20]
    }
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000034 	.word	0x20000034
 8001ed0:	e000ed04 	.word	0xe000ed04

08001ed4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08e      	sub	sp, #56	; 0x38
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00a      	beq.n	8001f02 <xTaskGenericNotify+0x2e>
        __asm volatile
 8001eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef0:	f383 8811 	msr	BASEPRI, r3
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	623b      	str	r3, [r7, #32]
    }
 8001efe:	bf00      	nop
 8001f00:	e7fe      	b.n	8001f00 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10a      	bne.n	8001f1e <xTaskGenericNotify+0x4a>
        __asm volatile
 8001f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0c:	f383 8811 	msr	BASEPRI, r3
 8001f10:	f3bf 8f6f 	isb	sy
 8001f14:	f3bf 8f4f 	dsb	sy
 8001f18:	61fb      	str	r3, [r7, #28]
    }
 8001f1a:	bf00      	nop
 8001f1c:	e7fe      	b.n	8001f1c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8001f22:	f000 fc07 	bl	8002734 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	3214      	adds	r2, #20
 8001f32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4413      	add	r3, r2
 8001f40:	3354      	adds	r3, #84	; 0x54
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3354      	adds	r3, #84	; 0x54
 8001f50:	2202      	movs	r2, #2
 8001f52:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d83b      	bhi.n	8001fd2 <xTaskGenericNotify+0xfe>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <xTaskGenericNotify+0x8c>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001ff1 	.word	0x08001ff1
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f91 	.word	0x08001f91
 8001f6c:	08001fa9 	.word	0x08001fa9
 8001f70:	08001fb7 	.word	0x08001fb7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	3214      	adds	r2, #20
 8001f7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	ea42 0103 	orr.w	r1, r2, r3
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	3214      	adds	r2, #20
 8001f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f8e:	e032      	b.n	8001ff6 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	3214      	adds	r2, #20
 8001f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9a:	1c59      	adds	r1, r3, #1
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	3214      	adds	r2, #20
 8001fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fa6:	e026      	b.n	8001ff6 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	3214      	adds	r2, #20
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fb4:	e01f      	b.n	8001ff6 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d006      	beq.n	8001fcc <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	3214      	adds	r2, #20
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001fca:	e014      	b.n	8001ff6 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001fd0:	e011      	b.n	8001ff6 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001fd2:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <xTaskGenericNotify+0x1d0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00c      	beq.n	8001ff4 <xTaskGenericNotify+0x120>
        __asm volatile
 8001fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	61bb      	str	r3, [r7, #24]
    }
 8001fec:	bf00      	nop
 8001fee:	e7fe      	b.n	8001fee <xTaskGenericNotify+0x11a>
                    break;
 8001ff0:	bf00      	nop
 8001ff2:	e000      	b.n	8001ff6 <xTaskGenericNotify+0x122>

                    break;
 8001ff4:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 fb37 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 8001ffe:	4601      	mov	r1, r0
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	203e      	movs	r0, #62	; 0x3e
 800200c:	f001 fd6a 	bl	8003ae4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002014:	2b01      	cmp	r3, #1
 8002016:	d13d      	bne.n	8002094 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201a:	3304      	adds	r3, #4
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fb35 	bl	800068c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002024:	4618      	mov	r0, r3
 8002026:	f002 fa7f 	bl	8004528 <SEGGER_SYSVIEW_OnTaskStartReady>
 800202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	2201      	movs	r2, #1
 8002030:	409a      	lsls	r2, r3
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <xTaskGenericNotify+0x1d4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <xTaskGenericNotify+0x1d4>)
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4a18      	ldr	r2, [pc, #96]	; (80020ac <xTaskGenericNotify+0x1d8>)
 800204a:	441a      	add	r2, r3
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	3304      	adds	r3, #4
 8002050:	4619      	mov	r1, r3
 8002052:	4610      	mov	r0, r2
 8002054:	f7fe fabd 	bl	80005d2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <xTaskGenericNotify+0x1a2>
        __asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	617b      	str	r3, [r7, #20]
    }
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <xTaskGenericNotify+0x1dc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	429a      	cmp	r2, r3
 8002082:	d907      	bls.n	8002094 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <xTaskGenericNotify+0x1e0>)
 8002086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002094:	f000 fb7e 	bl	8002794 <vPortExitCritical>

        return xReturn;
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800209a:	4618      	mov	r0, r3
 800209c:	3730      	adds	r7, #48	; 0x30
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000110 	.word	0x20000110
 80020a8:	20000114 	.word	0x20000114
 80020ac:	20000038 	.word	0x20000038
 80020b0:	20000034 	.word	0x20000034
 80020b4:	e000ed04 	.word	0xe000ed04

080020b8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b092      	sub	sp, #72	; 0x48
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80020c6:	2301      	movs	r3, #1
 80020c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10a      	bne.n	80020e6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80020e2:	bf00      	nop
 80020e4:	e7fe      	b.n	80020e4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80020fe:	bf00      	nop
 8002100:	e7fe      	b.n	8002100 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002102:	f000 fc03 	bl	800290c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800210a:	f3ef 8211 	mrs	r2, BASEPRI
 800210e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002112:	f383 8811 	msr	BASEPRI, r3
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	627a      	str	r2, [r7, #36]	; 0x24
 8002120:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8002126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800212c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	3214      	adds	r2, #20
 8002132:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002138:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800213a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4413      	add	r3, r2
 8002140:	3354      	adds	r3, #84	; 0x54
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	4413      	add	r3, r2
 800214e:	3354      	adds	r3, #84	; 0x54
 8002150:	2202      	movs	r2, #2
 8002152:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	2b04      	cmp	r3, #4
 8002158:	d83b      	bhi.n	80021d2 <xTaskGenericNotifyFromISR+0x11a>
 800215a:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <xTaskGenericNotifyFromISR+0xa8>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	080021f1 	.word	0x080021f1
 8002164:	08002175 	.word	0x08002175
 8002168:	08002191 	.word	0x08002191
 800216c:	080021a9 	.word	0x080021a9
 8002170:	080021b7 	.word	0x080021b7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	3214      	adds	r2, #20
 800217a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	ea42 0103 	orr.w	r1, r2, r3
 8002184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	3214      	adds	r2, #20
 800218a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800218e:	e032      	b.n	80021f6 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	3214      	adds	r2, #20
 8002196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219a:	1c59      	adds	r1, r3, #1
 800219c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	3214      	adds	r2, #20
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021a6:	e026      	b.n	80021f6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	3214      	adds	r2, #20
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021b4:	e01f      	b.n	80021f6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80021b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d006      	beq.n	80021cc <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	3214      	adds	r2, #20
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80021ca:	e014      	b.n	80021f6 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80021d0:	e011      	b.n	80021f6 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <xTaskGenericNotifyFromISR+0x210>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80021da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021de:	f383 8811 	msr	BASEPRI, r3
 80021e2:	f3bf 8f6f 	isb	sy
 80021e6:	f3bf 8f4f 	dsb	sy
 80021ea:	61fb      	str	r3, [r7, #28]
    }
 80021ec:	bf00      	nop
 80021ee:	e7fe      	b.n	80021ee <xTaskGenericNotifyFromISR+0x136>
                    break;
 80021f0:	bf00      	nop
 80021f2:	e000      	b.n	80021f6 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80021f4:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 fa37 	bl	800466c <SEGGER_SYSVIEW_ShrinkId>
 80021fe:	78f9      	ldrb	r1, [r7, #3]
 8002200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002204:	9201      	str	r2, [sp, #4]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	460b      	mov	r3, r1
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4601      	mov	r1, r0
 800220e:	203f      	movs	r0, #63	; 0x3f
 8002210:	f001 fcfa 	bl	8003c08 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002218:	2b01      	cmp	r3, #1
 800221a:	d149      	bne.n	80022b0 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800221c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	61bb      	str	r3, [r7, #24]
    }
 8002236:	bf00      	nop
 8002238:	e7fe      	b.n	8002238 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <xTaskGenericNotifyFromISR+0x214>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d120      	bne.n	8002284 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	3304      	adds	r3, #4
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fa20 	bl	800068c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	4618      	mov	r0, r3
 8002250:	f002 f96a 	bl	8004528 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	2201      	movs	r2, #1
 800225a:	409a      	lsls	r2, r3
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <xTaskGenericNotifyFromISR+0x218>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4313      	orrs	r3, r2
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <xTaskGenericNotifyFromISR+0x218>)
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <xTaskGenericNotifyFromISR+0x21c>)
 8002274:	441a      	add	r2, r3
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002278:	3304      	adds	r3, #4
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f7fe f9a8 	bl	80005d2 <vListInsertEnd>
 8002282:	e005      	b.n	8002290 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	3318      	adds	r3, #24
 8002288:	4619      	mov	r1, r3
 800228a:	4813      	ldr	r0, [pc, #76]	; (80022d8 <xTaskGenericNotifyFromISR+0x220>)
 800228c:	f7fe f9a1 	bl	80005d2 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <xTaskGenericNotifyFromISR+0x224>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	429a      	cmp	r2, r3
 800229c:	d908      	bls.n	80022b0 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800229e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80022a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <xTaskGenericNotifyFromISR+0x228>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b2:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80022ba:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80022bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80022be:	4618      	mov	r0, r3
 80022c0:	3740      	adds	r7, #64	; 0x40
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000110 	.word	0x20000110
 80022cc:	20000134 	.word	0x20000134
 80022d0:	20000114 	.word	0x20000114
 80022d4:	20000038 	.word	0x20000038
 80022d8:	200000cc 	.word	0x200000cc
 80022dc:	20000034 	.word	0x20000034
 80022e0:	20000120 	.word	0x20000120

080022e4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80022ee:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022f4:	4b31      	ldr	r3, [pc, #196]	; (80023bc <prvAddCurrentTaskToDelayedList+0xd8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3304      	adds	r3, #4
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f9c6 	bl	800068c <uxListRemove>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	2201      	movs	r2, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4013      	ands	r3, r2
 800231a:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800231c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002324:	d110      	bne.n	8002348 <prvAddCurrentTaskToDelayedList+0x64>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <prvAddCurrentTaskToDelayedList+0xd8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	211b      	movs	r1, #27
 8002332:	4618      	mov	r0, r3
 8002334:	f002 f93a 	bl	80045ac <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <prvAddCurrentTaskToDelayedList+0xd8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3304      	adds	r3, #4
 800233e:	4619      	mov	r1, r3
 8002340:	4820      	ldr	r0, [pc, #128]	; (80023c4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002342:	f7fe f946 	bl	80005d2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002346:	e032      	b.n	80023ae <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d20f      	bcs.n	8002380 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2104      	movs	r1, #4
 8002366:	4618      	mov	r0, r3
 8002368:	f002 f920 	bl	80045ac <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3304      	adds	r3, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f7fe f94e 	bl	800061a <vListInsert>
}
 800237e:	e016      	b.n	80023ae <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2104      	movs	r1, #4
 8002386:	4618      	mov	r0, r3
 8002388:	f002 f910 	bl	80045ac <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3304      	adds	r3, #4
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f7fe f93e 	bl	800061a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <prvAddCurrentTaskToDelayedList+0xec>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d202      	bcs.n	80023ae <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80023a8:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <prvAddCurrentTaskToDelayedList+0xec>)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6013      	str	r3, [r2, #0]
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000110 	.word	0x20000110
 80023bc:	20000034 	.word	0x20000034
 80023c0:	20000114 	.word	0x20000114
 80023c4:	200000f8 	.word	0x200000f8
 80023c8:	200000c8 	.word	0x200000c8
 80023cc:	200000c4 	.word	0x200000c4
 80023d0:	2000012c 	.word	0x2000012c

080023d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3b04      	subs	r3, #4
 80023e4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3b04      	subs	r3, #4
 80023f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f023 0201 	bic.w	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3b04      	subs	r3, #4
 8002402:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <pxPortInitialiseStack+0x64>)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3b14      	subs	r3, #20
 800240e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3b04      	subs	r3, #4
 800241a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f06f 0202 	mvn.w	r2, #2
 8002422:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3b20      	subs	r3, #32
 8002428:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	0800243d 	.word	0x0800243d

0800243c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <prvTaskExitError+0x54>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800244e:	d00a      	beq.n	8002466 <prvTaskExitError+0x2a>
        __asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	60fb      	str	r3, [r7, #12]
    }
 8002462:	bf00      	nop
 8002464:	e7fe      	b.n	8002464 <prvTaskExitError+0x28>
        __asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	60bb      	str	r3, [r7, #8]
    }
 8002478:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800247a:	bf00      	nop
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0fc      	beq.n	800247c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	20000004 	.word	0x20000004
	...

080024a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <pxCurrentTCBConst2>)
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	6808      	ldr	r0, [r1, #0]
 80024a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024aa:	f380 8809 	msr	PSP, r0
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f04f 0000 	mov.w	r0, #0
 80024b6:	f380 8811 	msr	BASEPRI, r0
 80024ba:	4770      	bx	lr
 80024bc:	f3af 8000 	nop.w

080024c0 <pxCurrentTCBConst2>:
 80024c0:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop

080024c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80024c8:	4808      	ldr	r0, [pc, #32]	; (80024ec <prvPortStartFirstTask+0x24>)
 80024ca:	6800      	ldr	r0, [r0, #0]
 80024cc:	6800      	ldr	r0, [r0, #0]
 80024ce:	f380 8808 	msr	MSP, r0
 80024d2:	f04f 0000 	mov.w	r0, #0
 80024d6:	f380 8814 	msr	CONTROL, r0
 80024da:	b662      	cpsie	i
 80024dc:	b661      	cpsie	f
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	df00      	svc	0
 80024e8:	bf00      	nop
 80024ea:	0000      	.short	0x0000
 80024ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop

080024f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80024fa:	4b46      	ldr	r3, [pc, #280]	; (8002614 <xPortStartScheduler+0x120>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a46      	ldr	r2, [pc, #280]	; (8002618 <xPortStartScheduler+0x124>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10a      	bne.n	800251a <xPortStartScheduler+0x26>
        __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	613b      	str	r3, [r7, #16]
    }
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800251a:	4b3e      	ldr	r3, [pc, #248]	; (8002614 <xPortStartScheduler+0x120>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a3f      	ldr	r2, [pc, #252]	; (800261c <xPortStartScheduler+0x128>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d10a      	bne.n	800253a <xPortStartScheduler+0x46>
        __asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	60fb      	str	r3, [r7, #12]
    }
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <xPortStartScheduler+0x12c>)
 800253c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	22ff      	movs	r2, #255	; 0xff
 800254a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <xPortStartScheduler+0x130>)
 8002560:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002562:	4b31      	ldr	r3, [pc, #196]	; (8002628 <xPortStartScheduler+0x134>)
 8002564:	2207      	movs	r2, #7
 8002566:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002568:	e009      	b.n	800257e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <xPortStartScheduler+0x134>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3b01      	subs	r3, #1
 8002570:	4a2d      	ldr	r2, [pc, #180]	; (8002628 <xPortStartScheduler+0x134>)
 8002572:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b80      	cmp	r3, #128	; 0x80
 8002588:	d0ef      	beq.n	800256a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800258a:	4b27      	ldr	r3, [pc, #156]	; (8002628 <xPortStartScheduler+0x134>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	d00a      	beq.n	80025ac <xPortStartScheduler+0xb8>
        __asm volatile
 8002596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259a:	f383 8811 	msr	BASEPRI, r3
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	60bb      	str	r3, [r7, #8]
    }
 80025a8:	bf00      	nop
 80025aa:	e7fe      	b.n	80025aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <xPortStartScheduler+0x134>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <xPortStartScheduler+0x134>)
 80025b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <xPortStartScheduler+0x134>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025be:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <xPortStartScheduler+0x134>)
 80025c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <xPortStartScheduler+0x138>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a17      	ldr	r2, [pc, #92]	; (800262c <xPortStartScheduler+0x138>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <xPortStartScheduler+0x138>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a14      	ldr	r2, [pc, #80]	; (800262c <xPortStartScheduler+0x138>)
 80025dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80025e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80025e2:	f000 f963 	bl	80028ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <xPortStartScheduler+0x13c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80025ec:	f000 f982 	bl	80028f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80025f0:	4b10      	ldr	r3, [pc, #64]	; (8002634 <xPortStartScheduler+0x140>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <xPortStartScheduler+0x140>)
 80025f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80025fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80025fc:	f7ff ff64 	bl	80024c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002600:	f7ff f932 	bl	8001868 <vTaskSwitchContext>
    prvTaskExitError();
 8002604:	f7ff ff1a 	bl	800243c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000ed00 	.word	0xe000ed00
 8002618:	410fc271 	.word	0x410fc271
 800261c:	410fc270 	.word	0x410fc270
 8002620:	e000e400 	.word	0xe000e400
 8002624:	20000138 	.word	0x20000138
 8002628:	2000013c 	.word	0x2000013c
 800262c:	e000ed20 	.word	0xe000ed20
 8002630:	20000004 	.word	0x20000004
 8002634:	e000ef34 	.word	0xe000ef34

08002638 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <vInitPrioGroupValue+0xe4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a37      	ldr	r2, [pc, #220]	; (8002720 <vInitPrioGroupValue+0xe8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d10a      	bne.n	800265e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	613b      	str	r3, [r7, #16]
    }
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <vInitPrioGroupValue+0xe4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a30      	ldr	r2, [pc, #192]	; (8002724 <vInitPrioGroupValue+0xec>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10a      	bne.n	800267e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	60fb      	str	r3, [r7, #12]
    }
 800267a:	bf00      	nop
 800267c:	e7fe      	b.n	800267c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <vInitPrioGroupValue+0xf0>)
 8002680:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	22ff      	movs	r2, #255	; 0xff
 800268e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <vInitPrioGroupValue+0xf4>)
 80026a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <vInitPrioGroupValue+0xf8>)
 80026a8:	2207      	movs	r2, #7
 80026aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026ac:	e009      	b.n	80026c2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <vInitPrioGroupValue+0xf8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <vInitPrioGroupValue+0xf8>)
 80026b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ca:	2b80      	cmp	r3, #128	; 0x80
 80026cc:	d0ef      	beq.n	80026ae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <vInitPrioGroupValue+0xf8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f1c3 0307 	rsb	r3, r3, #7
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d00a      	beq.n	80026f0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80026da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	60bb      	str	r3, [r7, #8]
    }
 80026ec:	bf00      	nop
 80026ee:	e7fe      	b.n	80026ee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <vInitPrioGroupValue+0xf8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <vInitPrioGroupValue+0xf8>)
 80026f8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <vInitPrioGroupValue+0xf8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002702:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <vInitPrioGroupValue+0xf8>)
 8002704:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00
 8002720:	410fc271 	.word	0x410fc271
 8002724:	410fc270 	.word	0x410fc270
 8002728:	e000e400 	.word	0xe000e400
 800272c:	20000138 	.word	0x20000138
 8002730:	2000013c 	.word	0x2000013c

08002734 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
        __asm volatile
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	607b      	str	r3, [r7, #4]
    }
 800274c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <vPortEnterCritical+0x58>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	4a0d      	ldr	r2, [pc, #52]	; (800278c <vPortEnterCritical+0x58>)
 8002756:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <vPortEnterCritical+0x58>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d10f      	bne.n	8002780 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <vPortEnterCritical+0x5c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <vPortEnterCritical+0x4c>
        __asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	603b      	str	r3, [r7, #0]
    }
 800277c:	bf00      	nop
 800277e:	e7fe      	b.n	800277e <vPortEnterCritical+0x4a>
    }
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	20000004 	.word	0x20000004
 8002790:	e000ed04 	.word	0xe000ed04

08002794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <vPortExitCritical+0x50>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <vPortExitCritical+0x24>
        __asm volatile
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	607b      	str	r3, [r7, #4]
    }
 80027b4:	bf00      	nop
 80027b6:	e7fe      	b.n	80027b6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <vPortExitCritical+0x50>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3b01      	subs	r3, #1
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <vPortExitCritical+0x50>)
 80027c0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <vPortExitCritical+0x50>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <vPortExitCritical+0x42>
 80027ca:	2300      	movs	r3, #0
 80027cc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f383 8811 	msr	BASEPRI, r3
    }
 80027d4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000004 	.word	0x20000004
	...

080027f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80027f0:	f3ef 8009 	mrs	r0, PSP
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <pxCurrentTCBConst>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f01e 0f10 	tst.w	lr, #16
 8002800:	bf08      	it	eq
 8002802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280a:	6010      	str	r0, [r2, #0]
 800280c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002814:	f380 8811 	msr	BASEPRI, r0
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f7ff f822 	bl	8001868 <vTaskSwitchContext>
 8002824:	f04f 0000 	mov.w	r0, #0
 8002828:	f380 8811 	msr	BASEPRI, r0
 800282c:	bc09      	pop	{r0, r3}
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	6808      	ldr	r0, [r1, #0]
 8002832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002836:	f01e 0f10 	tst.w	lr, #16
 800283a:	bf08      	it	eq
 800283c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002840:	f380 8809 	msr	PSP, r0
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	f3af 8000 	nop.w

08002850 <pxCurrentTCBConst>:
 8002850:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop

08002858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
        __asm volatile
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	607b      	str	r3, [r7, #4]
    }
 8002870:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002872:	f001 fd3f 	bl	80042f4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002876:	f7fe ff3b 	bl	80016f0 <xTaskIncrementTick>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002880:	f001 fd96 	bl	80043b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <SysTick_Handler+0x50>)
 8002886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e001      	b.n	8002892 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800288e:	f001 fd73 	bl	8004378 <SEGGER_SYSVIEW_RecordExitISR>
 8002892:	2300      	movs	r3, #0
 8002894:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f383 8811 	msr	BASEPRI, r3
    }
 800289c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000ed04 	.word	0xe000ed04

080028ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <vPortSetupTimerInterrupt+0x34>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <vPortSetupTimerInterrupt+0x38>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <vPortSetupTimerInterrupt+0x3c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <vPortSetupTimerInterrupt+0x40>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <vPortSetupTimerInterrupt+0x44>)
 80028ca:	3b01      	subs	r3, #1
 80028cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <vPortSetupTimerInterrupt+0x34>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010
 80028e4:	e000e018 	.word	0xe000e018
 80028e8:	2000000c 	.word	0x2000000c
 80028ec:	10624dd3 	.word	0x10624dd3
 80028f0:	e000e014 	.word	0xe000e014

080028f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80028f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002904 <vPortEnableVFP+0x10>
 80028f8:	6801      	ldr	r1, [r0, #0]
 80028fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80028fe:	6001      	str	r1, [r0, #0]
 8002900:	4770      	bx	lr
 8002902:	0000      	.short	0x0000
 8002904:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop

0800290c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002912:	f3ef 8305 	mrs	r3, IPSR
 8002916:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b0f      	cmp	r3, #15
 800291c:	d914      	bls.n	8002948 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800291e:	4a17      	ldr	r2, [pc, #92]	; (800297c <vPortValidateInterruptPriority+0x70>)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002928:	4b15      	ldr	r3, [pc, #84]	; (8002980 <vPortValidateInterruptPriority+0x74>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	7afa      	ldrb	r2, [r7, #11]
 800292e:	429a      	cmp	r2, r3
 8002930:	d20a      	bcs.n	8002948 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	607b      	str	r3, [r7, #4]
    }
 8002944:	bf00      	nop
 8002946:	e7fe      	b.n	8002946 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <vPortValidateInterruptPriority+0x78>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <vPortValidateInterruptPriority+0x7c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d90a      	bls.n	800296e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	603b      	str	r3, [r7, #0]
    }
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <vPortValidateInterruptPriority+0x60>
    }
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e3f0 	.word	0xe000e3f0
 8002980:	20000138 	.word	0x20000138
 8002984:	e000ed0c 	.word	0xe000ed0c
 8002988:	2000013c 	.word	0x2000013c

0800298c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002998:	f7fe fdea 	bl	8001570 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800299c:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <pvPortMalloc+0x1a8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80029a4:	f000 f934 	bl	8002c10 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80029a8:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <pvPortMalloc+0x1ac>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f040 80a7 	bne.w	8002b04 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d02d      	beq.n	8002a18 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80029bc:	2208      	movs	r2, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d227      	bcs.n	8002a18 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80029c8:	2208      	movs	r2, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d021      	beq.n	8002a1e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f023 0307 	bic.w	r3, r3, #7
 80029e0:	3308      	adds	r3, #8
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d214      	bcs.n	8002a12 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f023 0307 	bic.w	r3, r3, #7
 80029ee:	3308      	adds	r3, #8
 80029f0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <pvPortMalloc+0x92>
        __asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	617b      	str	r3, [r7, #20]
    }
 8002a0e:	bf00      	nop
 8002a10:	e7fe      	b.n	8002a10 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a16:	e002      	b.n	8002a1e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	e000      	b.n	8002a20 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a1e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d06e      	beq.n	8002b04 <pvPortMalloc+0x178>
 8002a26:	4b45      	ldr	r3, [pc, #276]	; (8002b3c <pvPortMalloc+0x1b0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d869      	bhi.n	8002b04 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002a30:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <pvPortMalloc+0x1b4>)
 8002a32:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002a34:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <pvPortMalloc+0x1b4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a3a:	e004      	b.n	8002a46 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d903      	bls.n	8002a58 <pvPortMalloc+0xcc>
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f1      	bne.n	8002a3c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002a58:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <pvPortMalloc+0x1a8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d050      	beq.n	8002b04 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2208      	movs	r2, #8
 8002a68:	4413      	add	r3, r2
 8002a6a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1ad2      	subs	r2, r2, r3
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d91f      	bls.n	8002ac4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <pvPortMalloc+0x120>
        __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	613b      	str	r3, [r7, #16]
    }
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	1ad2      	subs	r2, r2, r3
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002abe:	69b8      	ldr	r0, [r7, #24]
 8002ac0:	f000 f908 	bl	8002cd4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <pvPortMalloc+0x1b0>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <pvPortMalloc+0x1b0>)
 8002ad0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <pvPortMalloc+0x1b0>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <pvPortMalloc+0x1b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d203      	bcs.n	8002ae6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <pvPortMalloc+0x1b0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <pvPortMalloc+0x1b8>)
 8002ae4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <pvPortMalloc+0x1ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <pvPortMalloc+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <pvPortMalloc+0x1bc>)
 8002b02:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002b04:	f7fe fd42 	bl	800158c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <pvPortMalloc+0x19c>
        __asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	60fb      	str	r3, [r7, #12]
    }
 8002b24:	bf00      	nop
 8002b26:	e7fe      	b.n	8002b26 <pvPortMalloc+0x19a>
    return pvReturn;
 8002b28:	69fb      	ldr	r3, [r7, #28]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20012d48 	.word	0x20012d48
 8002b38:	20012d5c 	.word	0x20012d5c
 8002b3c:	20012d4c 	.word	0x20012d4c
 8002b40:	20012d40 	.word	0x20012d40
 8002b44:	20012d50 	.word	0x20012d50
 8002b48:	20012d54 	.word	0x20012d54

08002b4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d04d      	beq.n	8002bfa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002b5e:	2308      	movs	r3, #8
 8002b60:	425b      	negs	r3, r3
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <vPortFree+0xb8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <vPortFree+0x44>
        __asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	60fb      	str	r3, [r7, #12]
    }
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <vPortFree+0x62>
        __asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	60bb      	str	r3, [r7, #8]
    }
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <vPortFree+0xb8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01e      	beq.n	8002bfa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d11a      	bne.n	8002bfa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <vPortFree+0xb8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	401a      	ands	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002bd4:	f7fe fccc 	bl	8001570 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <vPortFree+0xbc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <vPortFree+0xbc>)
 8002be4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002be6:	6938      	ldr	r0, [r7, #16]
 8002be8:	f000 f874 	bl	8002cd4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <vPortFree+0xc0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <vPortFree+0xc0>)
 8002bf4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002bf6:	f7fe fcc9 	bl	800158c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20012d5c 	.word	0x20012d5c
 8002c08:	20012d4c 	.word	0x20012d4c
 8002c0c:	20012d58 	.word	0x20012d58

08002c10 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002c1a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002c1c:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <prvHeapInit+0xac>)
 8002c1e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00c      	beq.n	8002c44 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3307      	adds	r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0307 	bic.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <prvHeapInit+0xac>)
 8002c40:	4413      	add	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <prvHeapInit+0xb0>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <prvHeapInit+0xb0>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4413      	add	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0307 	bic.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <prvHeapInit+0xb4>)
 8002c70:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002c72:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <prvHeapInit+0xb4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <prvHeapInit+0xb4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	1ad2      	subs	r2, r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <prvHeapInit+0xb4>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <prvHeapInit+0xb8>)
 8002c9e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <prvHeapInit+0xbc>)
 8002ca6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <prvHeapInit+0xc0>)
 8002caa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002cae:	601a      	str	r2, [r3, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	20000140 	.word	0x20000140
 8002cc0:	20012d40 	.word	0x20012d40
 8002cc4:	20012d48 	.word	0x20012d48
 8002cc8:	20012d50 	.word	0x20012d50
 8002ccc:	20012d4c 	.word	0x20012d4c
 8002cd0:	20012d5c 	.word	0x20012d5c

08002cd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002cdc:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <prvInsertBlockIntoFreeList+0xac>)
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e002      	b.n	8002ce8 <prvInsertBlockIntoFreeList+0x14>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d8f7      	bhi.n	8002ce2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d108      	bne.n	8002d16 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	441a      	add	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	441a      	add	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d118      	bne.n	8002d5c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <prvInsertBlockIntoFreeList+0xb0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d00d      	beq.n	8002d52 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	441a      	add	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	e008      	b.n	8002d64 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <prvInsertBlockIntoFreeList+0xb0>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e003      	b.n	8002d64 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d002      	beq.n	8002d72 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20012d40 	.word	0x20012d40
 8002d84:	20012d48 	.word	0x20012d48

08002d88 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002d8c:	4803      	ldr	r0, [pc, #12]	; (8002d9c <_cbSendSystemDesc+0x14>)
 8002d8e:	f001 fa5b 	bl	8004248 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002d92:	4803      	ldr	r0, [pc, #12]	; (8002da0 <_cbSendSystemDesc+0x18>)
 8002d94:	f001 fa58 	bl	8004248 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	08007d9c 	.word	0x08007d9c
 8002da0:	08007de4 	.word	0x08007de4

08002da4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SEGGER_SYSVIEW_Conf+0x24>)
 8002db2:	4a06      	ldr	r2, [pc, #24]	; (8002dcc <SEGGER_SYSVIEW_Conf+0x28>)
 8002db4:	f000 fd18 	bl	80037e8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002db8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002dbc:	f000 fd58 	bl	8003870 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2000000c 	.word	0x2000000c
 8002dc8:	08002d89 	.word	0x08002d89
 8002dcc:	08007f6c 	.word	0x08007f6c

08002dd0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	e033      	b.n	8002e44 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002ddc:	491e      	ldr	r1, [pc, #120]	; (8002e58 <_cbSendTaskList+0x88>)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	491a      	ldr	r1, [pc, #104]	; (8002e58 <_cbSendTaskList+0x88>)
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	4c16      	ldr	r4, [pc, #88]	; (8002e58 <_cbSendTaskList+0x88>)
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4423      	add	r3, r4
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	681c      	ldr	r4, [r3, #0]
 8002e10:	4d11      	ldr	r5, [pc, #68]	; (8002e58 <_cbSendTaskList+0x88>)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	442b      	add	r3, r5
 8002e1e:	330c      	adds	r3, #12
 8002e20:	681d      	ldr	r5, [r3, #0]
 8002e22:	4e0d      	ldr	r6, [pc, #52]	; (8002e58 <_cbSendTaskList+0x88>)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4433      	add	r3, r6
 8002e30:	3310      	adds	r3, #16
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	462b      	mov	r3, r5
 8002e38:	4622      	mov	r2, r4
 8002e3a:	f000 f8bd 	bl	8002fb8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3301      	adds	r3, #1
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <_cbSendTaskList+0x8c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3c6      	bcc.n	8002ddc <_cbSendTaskList+0xc>
  }
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e58:	20012d60 	.word	0x20012d60
 8002e5c:	20012e00 	.word	0x20012e00

08002e60 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002e68:	f7fe fc30 	bl	80016cc <xTaskGetTickCountFromISR>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2200      	movs	r2, #0
 8002e70:	469a      	mov	sl, r3
 8002e72:	4693      	mov	fp, r2
 8002e74:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	f04f 0a00 	mov.w	sl, #0
 8002e84:	f04f 0b00 	mov.w	fp, #0
 8002e88:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002e8c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002e90:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002e94:	4652      	mov	r2, sl
 8002e96:	465b      	mov	r3, fp
 8002e98:	1a14      	subs	r4, r2, r0
 8002e9a:	eb63 0501 	sbc.w	r5, r3, r1
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	00ab      	lsls	r3, r5, #2
 8002ea8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002eac:	00a2      	lsls	r2, r4, #2
 8002eae:	4614      	mov	r4, r2
 8002eb0:	461d      	mov	r5, r3
 8002eb2:	eb14 0800 	adds.w	r8, r4, r0
 8002eb6:	eb45 0901 	adc.w	r9, r5, r1
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ece:	4690      	mov	r8, r2
 8002ed0:	4699      	mov	r9, r3
 8002ed2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002ee8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002ef6:	2205      	movs	r2, #5
 8002ef8:	492b      	ldr	r1, [pc, #172]	; (8002fa8 <SYSVIEW_AddTask+0xc0>)
 8002efa:	68b8      	ldr	r0, [r7, #8]
 8002efc:	f004 ff18 	bl	8007d30 <memcmp>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04b      	beq.n	8002f9e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002f06:	4b29      	ldr	r3, [pc, #164]	; (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b07      	cmp	r3, #7
 8002f0c:	d903      	bls.n	8002f16 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002f0e:	4828      	ldr	r0, [pc, #160]	; (8002fb0 <SYSVIEW_AddTask+0xc8>)
 8002f10:	f001 fc98 	bl	8004844 <SEGGER_SYSVIEW_Warn>
    return;
 8002f14:	e044      	b.n	8002fa0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4926      	ldr	r1, [pc, #152]	; (8002fb4 <SYSVIEW_AddTask+0xcc>)
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002f2a:	4b20      	ldr	r3, [pc, #128]	; (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4921      	ldr	r1, [pc, #132]	; (8002fb4 <SYSVIEW_AddTask+0xcc>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	491b      	ldr	r1, [pc, #108]	; (8002fb4 <SYSVIEW_AddTask+0xcc>)
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3308      	adds	r3, #8
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <SYSVIEW_AddTask+0xcc>)
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	330c      	adds	r3, #12
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4910      	ldr	r1, [pc, #64]	; (8002fb4 <SYSVIEW_AddTask+0xcc>)
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3310      	adds	r3, #16
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a08      	ldr	r2, [pc, #32]	; (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f8a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f80e 	bl	8002fb8 <SYSVIEW_SendTaskInfo>
 8002f9c:	e000      	b.n	8002fa0 <SYSVIEW_AddTask+0xb8>
    return;
 8002f9e:	bf00      	nop

}
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	08007df4 	.word	0x08007df4
 8002fac:	20012e00 	.word	0x20012e00
 8002fb0:	08007dfc 	.word	0x08007dfc
 8002fb4:	20012d60 	.word	0x20012d60

08002fb8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	2214      	movs	r2, #20
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 fecc 	bl	8007d6c <memset>
  TaskInfo.TaskID     = TaskID;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 f833 	bl	8004058 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	; 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <_DoInit+0x98>)
 8003004:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2203      	movs	r2, #3
 800300a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2203      	movs	r2, #3
 8003010:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a20      	ldr	r2, [pc, #128]	; (8003098 <_DoInit+0x9c>)
 8003016:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a20      	ldr	r2, [pc, #128]	; (800309c <_DoInit+0xa0>)
 800301c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003024:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a17      	ldr	r2, [pc, #92]	; (8003098 <_DoInit+0x9c>)
 800303c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <_DoInit+0xa4>)
 8003042:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2210      	movs	r2, #16
 8003048:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3307      	adds	r3, #7
 8003060:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <_DoInit+0xa8>)
 8003062:	6810      	ldr	r0, [r2, #0]
 8003064:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003066:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <_DoInit+0xac>)
 800306e:	6810      	ldr	r0, [r2, #0]
 8003070:	6018      	str	r0, [r3, #0]
 8003072:	8891      	ldrh	r1, [r2, #4]
 8003074:	7992      	ldrb	r2, [r2, #6]
 8003076:	8099      	strh	r1, [r3, #4]
 8003078:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800307a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003084:	f3bf 8f5f 	dmb	sy
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	20012e04 	.word	0x20012e04
 8003098:	08007e4c 	.word	0x08007e4c
 800309c:	20012eac 	.word	0x20012eac
 80030a0:	200132ac 	.word	0x200132ac
 80030a4:	08007e58 	.word	0x08007e58
 80030a8:	08007e5c 	.word	0x08007e5c

080030ac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	; 0x30
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80030b8:	4b3e      	ldr	r3, [pc, #248]	; (80031b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80030ba:	623b      	str	r3, [r7, #32]
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <SEGGER_RTT_ReadNoLock+0x1e>
 80030c6:	f7ff ff99 	bl	8002ffc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	3360      	adds	r3, #96	; 0x60
 80030d6:	4a37      	ldr	r2, [pc, #220]	; (80031b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80030d8:	4413      	add	r3, r2
 80030da:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80030f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d92b      	bls.n	8003150 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4293      	cmp	r3, r2
 8003108:	bf28      	it	cs
 800310a:	4613      	movcs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	4413      	add	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	6939      	ldr	r1, [r7, #16]
 800311c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800311e:	f004 fe17 	bl	8007d50 <memcpy>
    NumBytesRead += NumBytesRem;
 8003122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	4413      	add	r3, r2
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800312a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	4413      	add	r3, r2
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800313a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	4413      	add	r3, r2
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003148:	429a      	cmp	r2, r3
 800314a:	d101      	bne.n	8003150 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800314c:	2300      	movs	r3, #0
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4293      	cmp	r3, r2
 800315e:	bf28      	it	cs
 8003160:	4613      	movcs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d019      	beq.n	800319e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	4413      	add	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	6939      	ldr	r1, [r7, #16]
 8003178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800317a:	f004 fde9 	bl	8007d50 <memcpy>
    NumBytesRead += NumBytesRem;
 800317e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	4413      	add	r3, r2
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	4413      	add	r3, r2
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	4413      	add	r3, r2
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3730      	adds	r7, #48	; 0x30
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20012e04 	.word	0x20012e04

080031b8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80031c6:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80031d4:	f7ff ff12 	bl	8002ffc <_DoInit>
  SEGGER_RTT_LOCK();
 80031d8:	f3ef 8311 	mrs	r3, BASEPRI
 80031dc:	f04f 0120 	mov.w	r1, #32
 80031e0:	f381 8811 	msr	BASEPRI, r1
 80031e4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80031e6:	4b35      	ldr	r3, [pc, #212]	; (80032bc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80031e8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80031ee:	6939      	ldr	r1, [r7, #16]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	3304      	adds	r3, #4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3301      	adds	r3, #1
 800320a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	429a      	cmp	r2, r3
 8003214:	dbeb      	blt.n	80031ee <SEGGER_RTT_AllocUpBuffer+0x36>
 8003216:	e000      	b.n	800321a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003218:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	429a      	cmp	r2, r3
 8003222:	da3f      	bge.n	80032a4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003224:	6939      	ldr	r1, [r7, #16]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003238:	6939      	ldr	r1, [r7, #16]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	3304      	adds	r3, #4
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800324e:	6939      	ldr	r1, [r7, #16]
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	3320      	adds	r3, #32
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003262:	6939      	ldr	r1, [r7, #16]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	440b      	add	r3, r1
 8003270:	3328      	adds	r3, #40	; 0x28
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003276:	6939      	ldr	r1, [r7, #16]
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	440b      	add	r3, r1
 8003284:	3324      	adds	r3, #36	; 0x24
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800328a:	6939      	ldr	r1, [r7, #16]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	332c      	adds	r3, #44	; 0x2c
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800329e:	f3bf 8f5f 	dmb	sy
 80032a2:	e002      	b.n	80032aa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032a8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80032b0:	69fb      	ldr	r3, [r7, #28]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20012e04 	.word	0x20012e04

080032c0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80032ce:	4b33      	ldr	r3, [pc, #204]	; (800339c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80032dc:	f7ff fe8e 	bl	8002ffc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80032e0:	4b2e      	ldr	r3, [pc, #184]	; (800339c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80032e2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	461a      	mov	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d24d      	bcs.n	800338c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80032f0:	f3ef 8311 	mrs	r3, BASEPRI
 80032f4:	f04f 0120 	mov.w	r1, #32
 80032f8:	f381 8811 	msr	BASEPRI, r1
 80032fc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d031      	beq.n	8003368 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003304:	6979      	ldr	r1, [r7, #20]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	3360      	adds	r3, #96	; 0x60
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003318:	6979      	ldr	r1, [r7, #20]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	3364      	adds	r3, #100	; 0x64
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800332c:	6979      	ldr	r1, [r7, #20]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	3368      	adds	r3, #104	; 0x68
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003340:	6979      	ldr	r1, [r7, #20]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	3370      	adds	r3, #112	; 0x70
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003354:	6979      	ldr	r1, [r7, #20]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	336c      	adds	r3, #108	; 0x6c
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003368:	6979      	ldr	r1, [r7, #20]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	440b      	add	r3, r1
 8003376:	3374      	adds	r3, #116	; 0x74
 8003378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800337a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800337c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e002      	b.n	8003392 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800338c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003390:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003392:	69fb      	ldr	r3, [r7, #28]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20012e04 	.word	0x20012e04

080033a0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80033b0:	e002      	b.n	80033b8 <_EncodeStr+0x18>
    Len++;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	3301      	adds	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4413      	add	r3, r2
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f6      	bne.n	80033b2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d901      	bls.n	80033d0 <_EncodeStr+0x30>
    Len = Limit;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2bfe      	cmp	r3, #254	; 0xfe
 80033d4:	d806      	bhi.n	80033e4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	60fa      	str	r2, [r7, #12]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e011      	b.n	8003408 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	60fa      	str	r2, [r7, #12]
 80033ea:	22ff      	movs	r2, #255	; 0xff
 80033ec:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	60fa      	str	r2, [r7, #12]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	0a19      	lsrs	r1, r3, #8
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	60fa      	str	r2, [r7, #12]
 8003404:	b2ca      	uxtb	r2, r1
 8003406:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800340c:	e00a      	b.n	8003424 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	1c53      	adds	r3, r2, #1
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1c59      	adds	r1, r3, #1
 8003418:	60f9      	str	r1, [r7, #12]
 800341a:	7812      	ldrb	r2, [r2, #0]
 800341c:	701a      	strb	r2, [r3, #0]
    n++;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3301      	adds	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	429a      	cmp	r2, r3
 800342a:	d3f0      	bcc.n	800340e <_EncodeStr+0x6e>
  }
  return pPayload;
 800342c:	68fb      	ldr	r3, [r7, #12]
}
 800342e:	4618      	mov	r0, r3
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800345a:	4b36      	ldr	r3, [pc, #216]	; (8003534 <_HandleIncomingPacket+0xe0>)
 800345c:	7e1b      	ldrb	r3, [r3, #24]
 800345e:	4618      	mov	r0, r3
 8003460:	1cfb      	adds	r3, r7, #3
 8003462:	2201      	movs	r2, #1
 8003464:	4619      	mov	r1, r3
 8003466:	f7ff fe21 	bl	80030ac <SEGGER_RTT_ReadNoLock>
 800346a:	4603      	mov	r3, r0
 800346c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	dd54      	ble.n	800351e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	2b80      	cmp	r3, #128	; 0x80
 8003478:	d032      	beq.n	80034e0 <_HandleIncomingPacket+0x8c>
 800347a:	2b80      	cmp	r3, #128	; 0x80
 800347c:	dc42      	bgt.n	8003504 <_HandleIncomingPacket+0xb0>
 800347e:	2b07      	cmp	r3, #7
 8003480:	dc16      	bgt.n	80034b0 <_HandleIncomingPacket+0x5c>
 8003482:	2b00      	cmp	r3, #0
 8003484:	dd3e      	ble.n	8003504 <_HandleIncomingPacket+0xb0>
 8003486:	3b01      	subs	r3, #1
 8003488:	2b06      	cmp	r3, #6
 800348a:	d83b      	bhi.n	8003504 <_HandleIncomingPacket+0xb0>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <_HandleIncomingPacket+0x40>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034b7 	.word	0x080034b7
 8003498:	080034bd 	.word	0x080034bd
 800349c:	080034c3 	.word	0x080034c3
 80034a0:	080034c9 	.word	0x080034c9
 80034a4:	080034cf 	.word	0x080034cf
 80034a8:	080034d5 	.word	0x080034d5
 80034ac:	080034db 	.word	0x080034db
 80034b0:	2b7f      	cmp	r3, #127	; 0x7f
 80034b2:	d036      	beq.n	8003522 <_HandleIncomingPacket+0xce>
 80034b4:	e026      	b.n	8003504 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80034b6:	f000 fc55 	bl	8003d64 <SEGGER_SYSVIEW_Start>
      break;
 80034ba:	e037      	b.n	800352c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80034bc:	f000 fd0c 	bl	8003ed8 <SEGGER_SYSVIEW_Stop>
      break;
 80034c0:	e034      	b.n	800352c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80034c2:	f000 fee5 	bl	8004290 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80034c6:	e031      	b.n	800352c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80034c8:	f000 feaa 	bl	8004220 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80034cc:	e02e      	b.n	800352c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80034ce:	f000 fd29 	bl	8003f24 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80034d2:	e02b      	b.n	800352c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80034d4:	f001 f978 	bl	80047c8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80034d8:	e028      	b.n	800352c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80034da:	f001 f957 	bl	800478c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80034de:	e025      	b.n	800352c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <_HandleIncomingPacket+0xe0>)
 80034e2:	7e1b      	ldrb	r3, [r3, #24]
 80034e4:	4618      	mov	r0, r3
 80034e6:	1cfb      	adds	r3, r7, #3
 80034e8:	2201      	movs	r2, #1
 80034ea:	4619      	mov	r1, r3
 80034ec:	f7ff fdde 	bl	80030ac <SEGGER_RTT_ReadNoLock>
 80034f0:	4603      	mov	r3, r0
 80034f2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	dd15      	ble.n	8003526 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 f8c5 	bl	800468c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003502:	e010      	b.n	8003526 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	b25b      	sxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	da0e      	bge.n	800352a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <_HandleIncomingPacket+0xe0>)
 800350e:	7e1b      	ldrb	r3, [r3, #24]
 8003510:	4618      	mov	r0, r3
 8003512:	1cfb      	adds	r3, r7, #3
 8003514:	2201      	movs	r2, #1
 8003516:	4619      	mov	r1, r3
 8003518:	f7ff fdc8 	bl	80030ac <SEGGER_RTT_ReadNoLock>
      }
      break;
 800351c:	e005      	b.n	800352a <_HandleIncomingPacket+0xd6>
    }
  }
 800351e:	bf00      	nop
 8003520:	e004      	b.n	800352c <_HandleIncomingPacket+0xd8>
      break;
 8003522:	bf00      	nop
 8003524:	e002      	b.n	800352c <_HandleIncomingPacket+0xd8>
      break;
 8003526:	bf00      	nop
 8003528:	e000      	b.n	800352c <_HandleIncomingPacket+0xd8>
      break;
 800352a:	bf00      	nop
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	200142c4 	.word	0x200142c4

08003538 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b08c      	sub	sp, #48	; 0x30
 800353c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800353e:	2301      	movs	r3, #1
 8003540:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	3301      	adds	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800354c:	4b31      	ldr	r3, [pc, #196]	; (8003614 <_TrySendOverflowPacket+0xdc>)
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
 8003552:	e00b      	b.n	800356c <_TrySendOverflowPacket+0x34>
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	b2da      	uxtb	r2, r3
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	1c59      	adds	r1, r3, #1
 800355c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800355e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	09db      	lsrs	r3, r3, #7
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	2b7f      	cmp	r3, #127	; 0x7f
 8003570:	d8f0      	bhi.n	8003554 <_TrySendOverflowPacket+0x1c>
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003582:	4b25      	ldr	r3, [pc, #148]	; (8003618 <_TrySendOverflowPacket+0xe0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <_TrySendOverflowPacket+0xdc>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	623b      	str	r3, [r7, #32]
 800359a:	e00b      	b.n	80035b4 <_TrySendOverflowPacket+0x7c>
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	6279      	str	r1, [r7, #36]	; 0x24
 80035a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	09db      	lsrs	r3, r3, #7
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	2b7f      	cmp	r3, #127	; 0x7f
 80035b8:	d8f0      	bhi.n	800359c <_TrySendOverflowPacket+0x64>
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	627a      	str	r2, [r7, #36]	; 0x24
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <_TrySendOverflowPacket+0xdc>)
 80035cc:	785b      	ldrb	r3, [r3, #1]
 80035ce:	4618      	mov	r0, r3
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	1d3b      	adds	r3, r7, #4
 80035da:	4619      	mov	r1, r3
 80035dc:	f7fc fdf8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80035e0:	4603      	mov	r3, r0
 80035e2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <_TrySendOverflowPacket+0xdc>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <_TrySendOverflowPacket+0xdc>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <_TrySendOverflowPacket+0xdc>)
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e004      	b.n	8003608 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <_TrySendOverflowPacket+0xdc>)
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	3301      	adds	r3, #1
 8003604:	4a03      	ldr	r2, [pc, #12]	; (8003614 <_TrySendOverflowPacket+0xdc>)
 8003606:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003608:	693b      	ldr	r3, [r7, #16]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3730      	adds	r7, #48	; 0x30
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	200142c4 	.word	0x200142c4
 8003618:	e0001004 	.word	0xe0001004

0800361c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003628:	4b6c      	ldr	r3, [pc, #432]	; (80037dc <_SendPacket+0x1c0>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d010      	beq.n	8003652 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003630:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <_SendPacket+0x1c0>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a3 	beq.w	8003780 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800363a:	4b68      	ldr	r3, [pc, #416]	; (80037dc <_SendPacket+0x1c0>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d109      	bne.n	8003656 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003642:	f7ff ff79 	bl	8003538 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003646:	4b65      	ldr	r3, [pc, #404]	; (80037dc <_SendPacket+0x1c0>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	f040 809a 	bne.w	8003784 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003650:	e001      	b.n	8003656 <_SendPacket+0x3a>
    goto Send;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <_SendPacket+0x3c>
Send:
 8003656:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b1f      	cmp	r3, #31
 800365c:	d809      	bhi.n	8003672 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800365e:	4b5f      	ldr	r3, [pc, #380]	; (80037dc <_SendPacket+0x1c0>)
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	f040 808b 	bne.w	8003788 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b17      	cmp	r3, #23
 8003676:	d807      	bhi.n	8003688 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3b01      	subs	r3, #1
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e03d      	b.n	8003704 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b7f      	cmp	r3, #127	; 0x7f
 8003694:	d912      	bls.n	80036bc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	09da      	lsrs	r2, r3, #7
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3b01      	subs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	3a01      	subs	r2, #1
 80036ae:	60fa      	str	r2, [r7, #12]
 80036b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e006      	b.n	80036ca <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3b01      	subs	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b7f      	cmp	r3, #127	; 0x7f
 80036ce:	d912      	bls.n	80036f6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	09da      	lsrs	r2, r3, #7
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	3a01      	subs	r2, #1
 80036e8:	60fa      	str	r2, [r7, #12]
 80036ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	e006      	b.n	8003704 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003704:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <_SendPacket+0x1c4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800370a:	4b34      	ldr	r3, [pc, #208]	; (80037dc <_SendPacket+0x1c0>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	e00b      	b.n	8003736 <_SendPacket+0x11a>
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	1c59      	adds	r1, r3, #1
 8003726:	6279      	str	r1, [r7, #36]	; 0x24
 8003728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	09db      	lsrs	r3, r3, #7
 8003734:	623b      	str	r3, [r7, #32]
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	2b7f      	cmp	r3, #127	; 0x7f
 800373a:	d8f0      	bhi.n	800371e <_SendPacket+0x102>
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	627a      	str	r2, [r7, #36]	; 0x24
 8003742:	6a3a      	ldr	r2, [r7, #32]
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800374c:	4b23      	ldr	r3, [pc, #140]	; (80037dc <_SendPacket+0x1c0>)
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	4618      	mov	r0, r3
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	461a      	mov	r2, r3
 800375a:	68f9      	ldr	r1, [r7, #12]
 800375c:	f7fc fd38 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003760:	4603      	mov	r3, r0
 8003762:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800376a:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <_SendPacket+0x1c0>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	60d3      	str	r3, [r2, #12]
 8003770:	e00b      	b.n	800378a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003772:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <_SendPacket+0x1c0>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	3301      	adds	r3, #1
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <_SendPacket+0x1c0>)
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e004      	b.n	800378a <_SendPacket+0x16e>
    goto SendDone;
 8003780:	bf00      	nop
 8003782:	e002      	b.n	800378a <_SendPacket+0x16e>
      goto SendDone;
 8003784:	bf00      	nop
 8003786:	e000      	b.n	800378a <_SendPacket+0x16e>
      goto SendDone;
 8003788:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <_SendPacket+0x1c0>)
 800378c:	7e1b      	ldrb	r3, [r3, #24]
 800378e:	4619      	mov	r1, r3
 8003790:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <_SendPacket+0x1c8>)
 8003792:	460b      	mov	r3, r1
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	440b      	add	r3, r1
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	336c      	adds	r3, #108	; 0x6c
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <_SendPacket+0x1c0>)
 80037a2:	7e1b      	ldrb	r3, [r3, #24]
 80037a4:	4618      	mov	r0, r3
 80037a6:	490f      	ldr	r1, [pc, #60]	; (80037e4 <_SendPacket+0x1c8>)
 80037a8:	4603      	mov	r3, r0
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4403      	add	r3, r0
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	440b      	add	r3, r1
 80037b2:	3370      	adds	r3, #112	; 0x70
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d00b      	beq.n	80037d2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <_SendPacket+0x1c0>)
 80037bc:	789b      	ldrb	r3, [r3, #2]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d107      	bne.n	80037d2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <_SendPacket+0x1c0>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80037c8:	f7ff fe44 	bl	8003454 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <_SendPacket+0x1c0>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80037d2:	bf00      	nop
 80037d4:	3728      	adds	r7, #40	; 0x28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200142c4 	.word	0x200142c4
 80037e0:	e0001004 	.word	0xe0001004
 80037e4:	20012e04 	.word	0x20012e04

080037e8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80037f6:	2300      	movs	r3, #0
 80037f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037fc:	4917      	ldr	r1, [pc, #92]	; (800385c <SEGGER_SYSVIEW_Init+0x74>)
 80037fe:	4818      	ldr	r0, [pc, #96]	; (8003860 <SEGGER_SYSVIEW_Init+0x78>)
 8003800:	f7ff fcda 	bl	80031b8 <SEGGER_RTT_AllocUpBuffer>
 8003804:	4603      	mov	r3, r0
 8003806:	b2da      	uxtb	r2, r3
 8003808:	4b16      	ldr	r3, [pc, #88]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 800380a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800380c:	4b15      	ldr	r3, [pc, #84]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 800380e:	785a      	ldrb	r2, [r3, #1]
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 8003812:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 8003816:	7e1b      	ldrb	r3, [r3, #24]
 8003818:	4618      	mov	r0, r3
 800381a:	2300      	movs	r3, #0
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	2308      	movs	r3, #8
 8003820:	4a11      	ldr	r2, [pc, #68]	; (8003868 <SEGGER_SYSVIEW_Init+0x80>)
 8003822:	490f      	ldr	r1, [pc, #60]	; (8003860 <SEGGER_SYSVIEW_Init+0x78>)
 8003824:	f7ff fd4c 	bl	80032c0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <SEGGER_SYSVIEW_Init+0x84>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a0c      	ldr	r2, [pc, #48]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 8003834:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003836:	4a0b      	ldr	r2, [pc, #44]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800383c:	4a09      	ldr	r2, [pc, #36]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003842:	4a08      	ldr	r2, [pc, #32]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003848:	4a06      	ldr	r2, [pc, #24]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <SEGGER_SYSVIEW_Init+0x7c>)
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200132bc 	.word	0x200132bc
 8003860:	08007e64 	.word	0x08007e64
 8003864:	200142c4 	.word	0x200142c4
 8003868:	200142bc 	.word	0x200142bc
 800386c:	e0001004 	.word	0xe0001004

08003870 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003878:	4a04      	ldr	r2, [pc, #16]	; (800388c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6113      	str	r3, [r2, #16]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	200142c4 	.word	0x200142c4

08003890 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003898:	f3ef 8311 	mrs	r3, BASEPRI
 800389c:	f04f 0120 	mov.w	r1, #32
 80038a0:	f381 8811 	msr	BASEPRI, r1
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4808      	ldr	r0, [pc, #32]	; (80038c8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80038a8:	f7ff fdc7 	bl	800343a <_PreparePacket>
 80038ac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68b8      	ldr	r0, [r7, #8]
 80038b4:	f7ff feb2 	bl	800361c <_SendPacket>
  RECORD_END();
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f383 8811 	msr	BASEPRI, r3
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200142f4 	.word	0x200142f4

080038cc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80038d6:	f3ef 8311 	mrs	r3, BASEPRI
 80038da:	f04f 0120 	mov.w	r1, #32
 80038de:	f381 8811 	msr	BASEPRI, r1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	4816      	ldr	r0, [pc, #88]	; (8003940 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80038e6:	f7ff fda8 	bl	800343a <_PreparePacket>
 80038ea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	61fb      	str	r3, [r7, #28]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e00b      	b.n	8003912 <SEGGER_SYSVIEW_RecordU32+0x46>
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	1c59      	adds	r1, r3, #1
 8003902:	61f9      	str	r1, [r7, #28]
 8003904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	09db      	lsrs	r3, r3, #7
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b7f      	cmp	r3, #127	; 0x7f
 8003916:	d8f0      	bhi.n	80038fa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	61fa      	str	r2, [r7, #28]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68f9      	ldr	r1, [r7, #12]
 800392c:	6938      	ldr	r0, [r7, #16]
 800392e:	f7ff fe75 	bl	800361c <_SendPacket>
  RECORD_END();
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f383 8811 	msr	BASEPRI, r3
}
 8003938:	bf00      	nop
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	200142f4 	.word	0x200142f4

08003944 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b08c      	sub	sp, #48	; 0x30
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003950:	f3ef 8311 	mrs	r3, BASEPRI
 8003954:	f04f 0120 	mov.w	r1, #32
 8003958:	f381 8811 	msr	BASEPRI, r1
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	4825      	ldr	r0, [pc, #148]	; (80039f4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003960:	f7ff fd6b 	bl	800343a <_PreparePacket>
 8003964:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
 8003972:	e00b      	b.n	800398c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	b2da      	uxtb	r2, r3
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	1c59      	adds	r1, r3, #1
 800397c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800397e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	09db      	lsrs	r3, r3, #7
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	2b7f      	cmp	r3, #127	; 0x7f
 8003990:	d8f0      	bhi.n	8003974 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	623b      	str	r3, [r7, #32]
 80039aa:	e00b      	b.n	80039c4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	1c59      	adds	r1, r3, #1
 80039b4:	6279      	str	r1, [r7, #36]	; 0x24
 80039b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	09db      	lsrs	r3, r3, #7
 80039c2:	623b      	str	r3, [r7, #32]
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	2b7f      	cmp	r3, #127	; 0x7f
 80039c8:	d8f0      	bhi.n	80039ac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	627a      	str	r2, [r7, #36]	; 0x24
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	6979      	ldr	r1, [r7, #20]
 80039de:	69b8      	ldr	r0, [r7, #24]
 80039e0:	f7ff fe1c 	bl	800361c <_SendPacket>
  RECORD_END();
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f383 8811 	msr	BASEPRI, r3
}
 80039ea:	bf00      	nop
 80039ec:	3730      	adds	r7, #48	; 0x30
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200142f4 	.word	0x200142f4

080039f8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08e      	sub	sp, #56	; 0x38
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a06:	f3ef 8311 	mrs	r3, BASEPRI
 8003a0a:	f04f 0120 	mov.w	r1, #32
 8003a0e:	f381 8811 	msr	BASEPRI, r1
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	4832      	ldr	r0, [pc, #200]	; (8003ae0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003a16:	f7ff fd10 	bl	800343a <_PreparePacket>
 8003a1a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	633b      	str	r3, [r7, #48]	; 0x30
 8003a28:	e00b      	b.n	8003a42 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a30:	1c59      	adds	r1, r3, #1
 8003a32:	6379      	str	r1, [r7, #52]	; 0x34
 8003a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	09db      	lsrs	r3, r3, #7
 8003a40:	633b      	str	r3, [r7, #48]	; 0x30
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	2b7f      	cmp	r3, #127	; 0x7f
 8003a46:	d8f0      	bhi.n	8003a2a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	637a      	str	r2, [r7, #52]	; 0x34
 8003a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a60:	e00b      	b.n	8003a7a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	1c59      	adds	r1, r3, #1
 8003a6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	09db      	lsrs	r3, r3, #7
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a7e:	d8f0      	bhi.n	8003a62 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	623b      	str	r3, [r7, #32]
 8003a98:	e00b      	b.n	8003ab2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	1c59      	adds	r1, r3, #1
 8003aa2:	6279      	str	r1, [r7, #36]	; 0x24
 8003aa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	09db      	lsrs	r3, r3, #7
 8003ab0:	623b      	str	r3, [r7, #32]
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ab6:	d8f0      	bhi.n	8003a9a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	627a      	str	r2, [r7, #36]	; 0x24
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	6979      	ldr	r1, [r7, #20]
 8003acc:	69b8      	ldr	r0, [r7, #24]
 8003ace:	f7ff fda5 	bl	800361c <_SendPacket>
  RECORD_END();
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f383 8811 	msr	BASEPRI, r3
}
 8003ad8:	bf00      	nop
 8003ada:	3738      	adds	r7, #56	; 0x38
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	200142f4 	.word	0x200142f4

08003ae4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b090      	sub	sp, #64	; 0x40
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003af2:	f3ef 8311 	mrs	r3, BASEPRI
 8003af6:	f04f 0120 	mov.w	r1, #32
 8003afa:	f381 8811 	msr	BASEPRI, r1
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	4840      	ldr	r0, [pc, #256]	; (8003c04 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003b02:	f7ff fc9a 	bl	800343a <_PreparePacket>
 8003b06:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b14:	e00b      	b.n	8003b2e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1c:	1c59      	adds	r1, r3, #1
 8003b1e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2a:	09db      	lsrs	r3, r3, #7
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	2b7f      	cmp	r3, #127	; 0x7f
 8003b32:	d8f0      	bhi.n	8003b16 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b4c:	e00b      	b.n	8003b66 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b54:	1c59      	adds	r1, r3, #1
 8003b56:	6379      	str	r1, [r7, #52]	; 0x34
 8003b58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	09db      	lsrs	r3, r3, #7
 8003b64:	633b      	str	r3, [r7, #48]	; 0x30
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	2b7f      	cmp	r3, #127	; 0x7f
 8003b6a:	d8f0      	bhi.n	8003b4e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	637a      	str	r2, [r7, #52]	; 0x34
 8003b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b84:	e00b      	b.n	8003b9e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	1c59      	adds	r1, r3, #1
 8003b8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	09db      	lsrs	r3, r3, #7
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ba2:	d8f0      	bhi.n	8003b86 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	e00b      	b.n	8003bd6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	1c59      	adds	r1, r3, #1
 8003bc6:	6279      	str	r1, [r7, #36]	; 0x24
 8003bc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	09db      	lsrs	r3, r3, #7
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8003bda:	d8f0      	bhi.n	8003bbe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	627a      	str	r2, [r7, #36]	; 0x24
 8003be2:	6a3a      	ldr	r2, [r7, #32]
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	69b8      	ldr	r0, [r7, #24]
 8003bf2:	f7ff fd13 	bl	800361c <_SendPacket>
  RECORD_END();
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f383 8811 	msr	BASEPRI, r3
}
 8003bfc:	bf00      	nop
 8003bfe:	3740      	adds	r7, #64	; 0x40
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	200142f4 	.word	0x200142f4

08003c08 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b092      	sub	sp, #72	; 0x48
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c16:	f3ef 8311 	mrs	r3, BASEPRI
 8003c1a:	f04f 0120 	mov.w	r1, #32
 8003c1e:	f381 8811 	msr	BASEPRI, r1
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	484e      	ldr	r0, [pc, #312]	; (8003d60 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8003c26:	f7ff fc08 	bl	800343a <_PreparePacket>
 8003c2a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	647b      	str	r3, [r7, #68]	; 0x44
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	643b      	str	r3, [r7, #64]	; 0x40
 8003c38:	e00b      	b.n	8003c52 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8003c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c40:	1c59      	adds	r1, r3, #1
 8003c42:	6479      	str	r1, [r7, #68]	; 0x44
 8003c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4e:	09db      	lsrs	r3, r3, #7
 8003c50:	643b      	str	r3, [r7, #64]	; 0x40
 8003c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c54:	2b7f      	cmp	r3, #127	; 0x7f
 8003c56:	d8f0      	bhi.n	8003c3a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8003c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	647a      	str	r2, [r7, #68]	; 0x44
 8003c5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c70:	e00b      	b.n	8003c8a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c78:	1c59      	adds	r1, r3, #1
 8003c7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003c7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	09db      	lsrs	r3, r3, #7
 8003c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c8e:	d8f0      	bhi.n	8003c72 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8003c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca8:	e00b      	b.n	8003cc2 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb0:	1c59      	adds	r1, r3, #1
 8003cb2:	6379      	str	r1, [r7, #52]	; 0x34
 8003cb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	09db      	lsrs	r3, r3, #7
 8003cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8003cc6:	d8f0      	bhi.n	8003caa <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	637a      	str	r2, [r7, #52]	; 0x34
 8003cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce0:	e00b      	b.n	8003cfa <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	1c59      	adds	r1, r3, #1
 8003cea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003cec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	09db      	lsrs	r3, r3, #7
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cfe:	d8f0      	bhi.n	8003ce2 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8003d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
 8003d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d16:	623b      	str	r3, [r7, #32]
 8003d18:	e00b      	b.n	8003d32 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	1c59      	adds	r1, r3, #1
 8003d22:	6279      	str	r1, [r7, #36]	; 0x24
 8003d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	09db      	lsrs	r3, r3, #7
 8003d30:	623b      	str	r3, [r7, #32]
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	2b7f      	cmp	r3, #127	; 0x7f
 8003d36:	d8f0      	bhi.n	8003d1a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	6979      	ldr	r1, [r7, #20]
 8003d4c:	69b8      	ldr	r0, [r7, #24]
 8003d4e:	f7ff fc65 	bl	800361c <_SendPacket>
  RECORD_END();
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f383 8811 	msr	BASEPRI, r3
}
 8003d58:	bf00      	nop
 8003d5a:	3748      	adds	r7, #72	; 0x48
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	200142f4 	.word	0x200142f4

08003d64 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08c      	sub	sp, #48	; 0x30
 8003d68:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003d6a:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <SEGGER_SYSVIEW_Start+0x168>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003d70:	f3ef 8311 	mrs	r3, BASEPRI
 8003d74:	f04f 0120 	mov.w	r1, #32
 8003d78:	f381 8811 	msr	BASEPRI, r1
 8003d7c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003d7e:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <SEGGER_SYSVIEW_Start+0x168>)
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	220a      	movs	r2, #10
 8003d84:	4952      	ldr	r1, [pc, #328]	; (8003ed0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fc fa22 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003d92:	200a      	movs	r0, #10
 8003d94:	f7ff fd7c 	bl	8003890 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d98:	f3ef 8311 	mrs	r3, BASEPRI
 8003d9c:	f04f 0120 	mov.w	r1, #32
 8003da0:	f381 8811 	msr	BASEPRI, r1
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	484b      	ldr	r0, [pc, #300]	; (8003ed4 <SEGGER_SYSVIEW_Start+0x170>)
 8003da8:	f7ff fb47 	bl	800343a <_PreparePacket>
 8003dac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db6:	4b45      	ldr	r3, [pc, #276]	; (8003ecc <SEGGER_SYSVIEW_Start+0x168>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbc:	e00b      	b.n	8003dd6 <SEGGER_SYSVIEW_Start+0x72>
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	1c59      	adds	r1, r3, #1
 8003dc6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003dc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	09db      	lsrs	r3, r3, #7
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dda:	d8f0      	bhi.n	8003dbe <SEGGER_SYSVIEW_Start+0x5a>
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
 8003df0:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <SEGGER_SYSVIEW_Start+0x168>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	e00b      	b.n	8003e10 <SEGGER_SYSVIEW_Start+0xac>
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	1c59      	adds	r1, r3, #1
 8003e00:	6279      	str	r1, [r7, #36]	; 0x24
 8003e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	09db      	lsrs	r3, r3, #7
 8003e0e:	623b      	str	r3, [r7, #32]
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2b7f      	cmp	r3, #127	; 0x7f
 8003e14:	d8f0      	bhi.n	8003df8 <SEGGER_SYSVIEW_Start+0x94>
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	627a      	str	r2, [r7, #36]	; 0x24
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <SEGGER_SYSVIEW_Start+0x168>)
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	e00b      	b.n	8003e4a <SEGGER_SYSVIEW_Start+0xe6>
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	1c59      	adds	r1, r3, #1
 8003e3a:	61f9      	str	r1, [r7, #28]
 8003e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	09db      	lsrs	r3, r3, #7
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e4e:	d8f0      	bhi.n	8003e32 <SEGGER_SYSVIEW_Start+0xce>
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	61fa      	str	r2, [r7, #28]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	e00b      	b.n	8003e82 <SEGGER_SYSVIEW_Start+0x11e>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	1c59      	adds	r1, r3, #1
 8003e72:	6179      	str	r1, [r7, #20]
 8003e74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	09db      	lsrs	r3, r3, #7
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b7f      	cmp	r3, #127	; 0x7f
 8003e86:	d8f0      	bhi.n	8003e6a <SEGGER_SYSVIEW_Start+0x106>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	617a      	str	r2, [r7, #20]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003e98:	2218      	movs	r2, #24
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fbbd 	bl	800361c <_SendPacket>
      RECORD_END();
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003ea8:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <SEGGER_SYSVIEW_Start+0x168>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <SEGGER_SYSVIEW_Start+0x168>)
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003eb6:	f000 f9eb 	bl	8004290 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003eba:	f000 f9b1 	bl	8004220 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003ebe:	f000 fc83 	bl	80047c8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003ec2:	bf00      	nop
 8003ec4:	3730      	adds	r7, #48	; 0x30
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200142c4 	.word	0x200142c4
 8003ed0:	08007f74 	.word	0x08007f74
 8003ed4:	200142f4 	.word	0x200142f4

08003ed8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003ede:	f3ef 8311 	mrs	r3, BASEPRI
 8003ee2:	f04f 0120 	mov.w	r1, #32
 8003ee6:	f381 8811 	msr	BASEPRI, r1
 8003eea:	607b      	str	r3, [r7, #4]
 8003eec:	480b      	ldr	r0, [pc, #44]	; (8003f1c <SEGGER_SYSVIEW_Stop+0x44>)
 8003eee:	f7ff faa4 	bl	800343a <_PreparePacket>
 8003ef2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <SEGGER_SYSVIEW_Stop+0x48>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003efc:	220b      	movs	r2, #11
 8003efe:	6839      	ldr	r1, [r7, #0]
 8003f00:	6838      	ldr	r0, [r7, #0]
 8003f02:	f7ff fb8b 	bl	800361c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <SEGGER_SYSVIEW_Stop+0x48>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f383 8811 	msr	BASEPRI, r3
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200142f4 	.word	0x200142f4
 8003f20:	200142c4 	.word	0x200142c4

08003f24 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	; 0x30
 8003f28:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f2e:	f04f 0120 	mov.w	r1, #32
 8003f32:	f381 8811 	msr	BASEPRI, r1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	4845      	ldr	r0, [pc, #276]	; (8004050 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003f3a:	f7ff fa7e 	bl	800343a <_PreparePacket>
 8003f3e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f48:	4b42      	ldr	r3, [pc, #264]	; (8004054 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4e:	e00b      	b.n	8003f68 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	1c59      	adds	r1, r3, #1
 8003f58:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	09db      	lsrs	r3, r3, #7
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f6c:	d8f0      	bhi.n	8003f50 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
 8003f82:	4b34      	ldr	r3, [pc, #208]	; (8004054 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	e00b      	b.n	8003fa2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	1c59      	adds	r1, r3, #1
 8003f92:	6279      	str	r1, [r7, #36]	; 0x24
 8003f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	09db      	lsrs	r3, r3, #7
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8003fa6:	d8f0      	bhi.n	8003f8a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	627a      	str	r2, [r7, #36]	; 0x24
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	4b25      	ldr	r3, [pc, #148]	; (8004054 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	e00b      	b.n	8003fdc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	1c59      	adds	r1, r3, #1
 8003fcc:	61f9      	str	r1, [r7, #28]
 8003fce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	09db      	lsrs	r3, r3, #7
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b7f      	cmp	r3, #127	; 0x7f
 8003fe0:	d8f0      	bhi.n	8003fc4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	61fa      	str	r2, [r7, #28]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	e00b      	b.n	8004014 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	1c59      	adds	r1, r3, #1
 8004004:	6179      	str	r1, [r7, #20]
 8004006:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	09db      	lsrs	r3, r3, #7
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b7f      	cmp	r3, #127	; 0x7f
 8004018:	d8f0      	bhi.n	8003ffc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	617a      	str	r2, [r7, #20]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800402a:	2218      	movs	r2, #24
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	68b8      	ldr	r0, [r7, #8]
 8004030:	f7ff faf4 	bl	800361c <_SendPacket>
  RECORD_END();
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004042:	4b04      	ldr	r3, [pc, #16]	; (8004054 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	4798      	blx	r3
  }
}
 8004048:	bf00      	nop
 800404a:	3730      	adds	r7, #48	; 0x30
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	200142f4 	.word	0x200142f4
 8004054:	200142c4 	.word	0x200142c4

08004058 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b092      	sub	sp, #72	; 0x48
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004060:	f3ef 8311 	mrs	r3, BASEPRI
 8004064:	f04f 0120 	mov.w	r1, #32
 8004068:	f381 8811 	msr	BASEPRI, r1
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	486a      	ldr	r0, [pc, #424]	; (8004218 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004070:	f7ff f9e3 	bl	800343a <_PreparePacket>
 8004074:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	647b      	str	r3, [r7, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b66      	ldr	r3, [pc, #408]	; (800421c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	643b      	str	r3, [r7, #64]	; 0x40
 800408a:	e00b      	b.n	80040a4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800408c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408e:	b2da      	uxtb	r2, r3
 8004090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	6479      	str	r1, [r7, #68]	; 0x44
 8004096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a0:	09db      	lsrs	r3, r3, #7
 80040a2:	643b      	str	r3, [r7, #64]	; 0x40
 80040a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a6:	2b7f      	cmp	r3, #127	; 0x7f
 80040a8:	d8f0      	bhi.n	800408c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80040aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	647a      	str	r2, [r7, #68]	; 0x44
 80040b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80040c4:	e00b      	b.n	80040de <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040cc:	1c59      	adds	r1, r3, #1
 80040ce:	63f9      	str	r1, [r7, #60]	; 0x3c
 80040d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040da:	09db      	lsrs	r3, r3, #7
 80040dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2b7f      	cmp	r3, #127	; 0x7f
 80040e2:	d8f0      	bhi.n	80040c6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80040e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	4619      	mov	r1, r3
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff f94f 	bl	80033a0 <_EncodeStr>
 8004102:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004104:	2209      	movs	r2, #9
 8004106:	68f9      	ldr	r1, [r7, #12]
 8004108:	6938      	ldr	r0, [r7, #16]
 800410a:	f7ff fa87 	bl	800361c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4b40      	ldr	r3, [pc, #256]	; (800421c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	633b      	str	r3, [r7, #48]	; 0x30
 8004122:	e00b      	b.n	800413c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	b2da      	uxtb	r2, r3
 8004128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412a:	1c59      	adds	r1, r3, #1
 800412c:	6379      	str	r1, [r7, #52]	; 0x34
 800412e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	09db      	lsrs	r3, r3, #7
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	2b7f      	cmp	r3, #127	; 0x7f
 8004140:	d8f0      	bhi.n	8004124 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	637a      	str	r2, [r7, #52]	; 0x34
 8004148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004150:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
 800415c:	e00b      	b.n	8004176 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	b2da      	uxtb	r2, r3
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	1c59      	adds	r1, r3, #1
 8004166:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004168:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	09db      	lsrs	r3, r3, #7
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	2b7f      	cmp	r3, #127	; 0x7f
 800417a:	d8f0      	bhi.n	800415e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	e00b      	b.n	80041b0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	1c59      	adds	r1, r3, #1
 80041a0:	6279      	str	r1, [r7, #36]	; 0x24
 80041a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	09db      	lsrs	r3, r3, #7
 80041ae:	623b      	str	r3, [r7, #32]
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	2b7f      	cmp	r3, #127	; 0x7f
 80041b4:	d8f0      	bhi.n	8004198 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	627a      	str	r2, [r7, #36]	; 0x24
 80041bc:	6a3a      	ldr	r2, [r7, #32]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	e00b      	b.n	80041e8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	1c59      	adds	r1, r3, #1
 80041d8:	61f9      	str	r1, [r7, #28]
 80041da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	09db      	lsrs	r3, r3, #7
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b7f      	cmp	r3, #127	; 0x7f
 80041ec:	d8f0      	bhi.n	80041d0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	61fa      	str	r2, [r7, #28]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80041fe:	2215      	movs	r2, #21
 8004200:	68f9      	ldr	r1, [r7, #12]
 8004202:	6938      	ldr	r0, [r7, #16]
 8004204:	f7ff fa0a 	bl	800361c <_SendPacket>
  RECORD_END();
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f383 8811 	msr	BASEPRI, r3
}
 800420e:	bf00      	nop
 8004210:	3748      	adds	r7, #72	; 0x48
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200142f4 	.word	0x200142f4
 800421c:	200142c4 	.word	0x200142c4

08004220 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004224:	4b07      	ldr	r3, [pc, #28]	; (8004244 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004236:	4b03      	ldr	r3, [pc, #12]	; (8004244 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4798      	blx	r3
  }
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	200142c4 	.word	0x200142c4

08004248 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004250:	f3ef 8311 	mrs	r3, BASEPRI
 8004254:	f04f 0120 	mov.w	r1, #32
 8004258:	f381 8811 	msr	BASEPRI, r1
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	480b      	ldr	r0, [pc, #44]	; (800428c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004260:	f7ff f8eb 	bl	800343a <_PreparePacket>
 8004264:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	6938      	ldr	r0, [r7, #16]
 800426c:	f7ff f898 	bl	80033a0 <_EncodeStr>
 8004270:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004272:	220e      	movs	r2, #14
 8004274:	68f9      	ldr	r1, [r7, #12]
 8004276:	6938      	ldr	r0, [r7, #16]
 8004278:	f7ff f9d0 	bl	800361c <_SendPacket>
  RECORD_END();
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f383 8811 	msr	BASEPRI, r3
}
 8004282:	bf00      	nop
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	200142f4 	.word	0x200142f4

08004290 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01a      	beq.n	80042d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80042a8:	4b10      	ldr	r3, [pc, #64]	; (80042ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4798      	blx	r3
 80042b0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80042b4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80042b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	000a      	movs	r2, r1
 80042c4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80042c6:	4613      	mov	r3, r2
 80042c8:	461a      	mov	r2, r3
 80042ca:	4621      	mov	r1, r4
 80042cc:	200d      	movs	r0, #13
 80042ce:	f7ff fb39 	bl	8003944 <SEGGER_SYSVIEW_RecordU32x2>
 80042d2:	e006      	b.n	80042e2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4619      	mov	r1, r3
 80042da:	200c      	movs	r0, #12
 80042dc:	f7ff faf6 	bl	80038cc <SEGGER_SYSVIEW_RecordU32>
  }
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd90      	pop	{r4, r7, pc}
 80042ea:	bf00      	nop
 80042ec:	200142c4 	.word	0x200142c4
 80042f0:	e0001004 	.word	0xe0001004

080042f4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042fa:	f3ef 8311 	mrs	r3, BASEPRI
 80042fe:	f04f 0120 	mov.w	r1, #32
 8004302:	f381 8811 	msr	BASEPRI, r1
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	4819      	ldr	r0, [pc, #100]	; (8004370 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800430a:	f7ff f896 	bl	800343a <_PreparePacket>
 800430e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	e00b      	b.n	8004340 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	6179      	str	r1, [r7, #20]
 8004332:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	09db      	lsrs	r3, r3, #7
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b7f      	cmp	r3, #127	; 0x7f
 8004344:	d8f0      	bhi.n	8004328 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	617a      	str	r2, [r7, #20]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004356:	2202      	movs	r2, #2
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	68b8      	ldr	r0, [r7, #8]
 800435c:	f7ff f95e 	bl	800361c <_SendPacket>
  RECORD_END();
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f383 8811 	msr	BASEPRI, r3
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	200142f4 	.word	0x200142f4
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800437e:	f3ef 8311 	mrs	r3, BASEPRI
 8004382:	f04f 0120 	mov.w	r1, #32
 8004386:	f381 8811 	msr	BASEPRI, r1
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	4807      	ldr	r0, [pc, #28]	; (80043ac <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800438e:	f7ff f854 	bl	800343a <_PreparePacket>
 8004392:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004394:	2203      	movs	r2, #3
 8004396:	6839      	ldr	r1, [r7, #0]
 8004398:	6838      	ldr	r0, [r7, #0]
 800439a:	f7ff f93f 	bl	800361c <_SendPacket>
  RECORD_END();
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f383 8811 	msr	BASEPRI, r3
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	200142f4 	.word	0x200142f4

080043b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80043b6:	f3ef 8311 	mrs	r3, BASEPRI
 80043ba:	f04f 0120 	mov.w	r1, #32
 80043be:	f381 8811 	msr	BASEPRI, r1
 80043c2:	607b      	str	r3, [r7, #4]
 80043c4:	4807      	ldr	r0, [pc, #28]	; (80043e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80043c6:	f7ff f838 	bl	800343a <_PreparePacket>
 80043ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80043cc:	2212      	movs	r2, #18
 80043ce:	6839      	ldr	r1, [r7, #0]
 80043d0:	6838      	ldr	r0, [r7, #0]
 80043d2:	f7ff f923 	bl	800361c <_SendPacket>
  RECORD_END();
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f383 8811 	msr	BASEPRI, r3
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	200142f4 	.word	0x200142f4

080043e8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80043ee:	f3ef 8311 	mrs	r3, BASEPRI
 80043f2:	f04f 0120 	mov.w	r1, #32
 80043f6:	f381 8811 	msr	BASEPRI, r1
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	4807      	ldr	r0, [pc, #28]	; (800441c <SEGGER_SYSVIEW_OnIdle+0x34>)
 80043fe:	f7ff f81c 	bl	800343a <_PreparePacket>
 8004402:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004404:	2211      	movs	r2, #17
 8004406:	6839      	ldr	r1, [r7, #0]
 8004408:	6838      	ldr	r0, [r7, #0]
 800440a:	f7ff f907 	bl	800361c <_SendPacket>
  RECORD_END();
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f383 8811 	msr	BASEPRI, r3
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	200142f4 	.word	0x200142f4

08004420 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004428:	f3ef 8311 	mrs	r3, BASEPRI
 800442c:	f04f 0120 	mov.w	r1, #32
 8004430:	f381 8811 	msr	BASEPRI, r1
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	4819      	ldr	r0, [pc, #100]	; (800449c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004438:	f7fe ffff 	bl	800343a <_PreparePacket>
 800443c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	e00b      	b.n	800446e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	1c59      	adds	r1, r3, #1
 800445e:	61f9      	str	r1, [r7, #28]
 8004460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	09db      	lsrs	r3, r3, #7
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b7f      	cmp	r3, #127	; 0x7f
 8004472:	d8f0      	bhi.n	8004456 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	61fa      	str	r2, [r7, #28]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004484:	2208      	movs	r2, #8
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	6938      	ldr	r0, [r7, #16]
 800448a:	f7ff f8c7 	bl	800361c <_SendPacket>
  RECORD_END();
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f383 8811 	msr	BASEPRI, r3
}
 8004494:	bf00      	nop
 8004496:	3720      	adds	r7, #32
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	200142f4 	.word	0x200142f4
 80044a0:	200142c4 	.word	0x200142c4

080044a4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044ac:	f3ef 8311 	mrs	r3, BASEPRI
 80044b0:	f04f 0120 	mov.w	r1, #32
 80044b4:	f381 8811 	msr	BASEPRI, r1
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	4819      	ldr	r0, [pc, #100]	; (8004520 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80044bc:	f7fe ffbd 	bl	800343a <_PreparePacket>
 80044c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80044c6:	4b17      	ldr	r3, [pc, #92]	; (8004524 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	e00b      	b.n	80044f2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	1c59      	adds	r1, r3, #1
 80044e2:	61f9      	str	r1, [r7, #28]
 80044e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	09db      	lsrs	r3, r3, #7
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b7f      	cmp	r3, #127	; 0x7f
 80044f6:	d8f0      	bhi.n	80044da <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	61fa      	str	r2, [r7, #28]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004508:	2204      	movs	r2, #4
 800450a:	68f9      	ldr	r1, [r7, #12]
 800450c:	6938      	ldr	r0, [r7, #16]
 800450e:	f7ff f885 	bl	800361c <_SendPacket>
  RECORD_END();
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f383 8811 	msr	BASEPRI, r3
}
 8004518:	bf00      	nop
 800451a:	3720      	adds	r7, #32
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	200142f4 	.word	0x200142f4
 8004524:	200142c4 	.word	0x200142c4

08004528 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004530:	f3ef 8311 	mrs	r3, BASEPRI
 8004534:	f04f 0120 	mov.w	r1, #32
 8004538:	f381 8811 	msr	BASEPRI, r1
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	4819      	ldr	r0, [pc, #100]	; (80045a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004540:	f7fe ff7b 	bl	800343a <_PreparePacket>
 8004544:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800454a:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	e00b      	b.n	8004576 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	1c59      	adds	r1, r3, #1
 8004566:	61f9      	str	r1, [r7, #28]
 8004568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	09db      	lsrs	r3, r3, #7
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b7f      	cmp	r3, #127	; 0x7f
 800457a:	d8f0      	bhi.n	800455e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	61fa      	str	r2, [r7, #28]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800458c:	2206      	movs	r2, #6
 800458e:	68f9      	ldr	r1, [r7, #12]
 8004590:	6938      	ldr	r0, [r7, #16]
 8004592:	f7ff f843 	bl	800361c <_SendPacket>
  RECORD_END();
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f383 8811 	msr	BASEPRI, r3
}
 800459c:	bf00      	nop
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	200142f4 	.word	0x200142f4
 80045a8:	200142c4 	.word	0x200142c4

080045ac <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80045b6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ba:	f04f 0120 	mov.w	r1, #32
 80045be:	f381 8811 	msr	BASEPRI, r1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	4827      	ldr	r0, [pc, #156]	; (8004664 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80045c6:	f7fe ff38 	bl	800343a <_PreparePacket>
 80045ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80045d0:	4b25      	ldr	r3, [pc, #148]	; (8004668 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	e00b      	b.n	80045fc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	1c59      	adds	r1, r3, #1
 80045ec:	6279      	str	r1, [r7, #36]	; 0x24
 80045ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	09db      	lsrs	r3, r3, #7
 80045fa:	623b      	str	r3, [r7, #32]
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004600:	d8f0      	bhi.n	80045e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	627a      	str	r2, [r7, #36]	; 0x24
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	61fb      	str	r3, [r7, #28]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	e00b      	b.n	8004634 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	b2da      	uxtb	r2, r3
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	1c59      	adds	r1, r3, #1
 8004624:	61f9      	str	r1, [r7, #28]
 8004626:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	09db      	lsrs	r3, r3, #7
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b7f      	cmp	r3, #127	; 0x7f
 8004638:	d8f0      	bhi.n	800461c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	61fa      	str	r2, [r7, #28]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800464a:	2207      	movs	r2, #7
 800464c:	68f9      	ldr	r1, [r7, #12]
 800464e:	6938      	ldr	r0, [r7, #16]
 8004650:	f7fe ffe4 	bl	800361c <_SendPacket>
  RECORD_END();
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f383 8811 	msr	BASEPRI, r3
}
 800465a:	bf00      	nop
 800465c:	3728      	adds	r7, #40	; 0x28
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	200142f4 	.word	0x200142f4
 8004668:	200142c4 	.word	0x200142c4

0800466c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	1ad3      	subs	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	200142c4 	.word	0x200142c4

0800468c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b08c      	sub	sp, #48	; 0x30
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004696:	4b3b      	ldr	r3, [pc, #236]	; (8004784 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d06d      	beq.n	800477a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800469e:	4b39      	ldr	r3, [pc, #228]	; (8004784 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80046a4:	2300      	movs	r3, #0
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a8:	e008      	b.n	80046bc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80046aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	3301      	adds	r3, #1
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d3f2      	bcc.n	80046aa <SEGGER_SYSVIEW_SendModule+0x1e>
 80046c4:	e000      	b.n	80046c8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80046c6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d055      	beq.n	800477a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80046ce:	f3ef 8311 	mrs	r3, BASEPRI
 80046d2:	f04f 0120 	mov.w	r1, #32
 80046d6:	f381 8811 	msr	BASEPRI, r1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	482a      	ldr	r0, [pc, #168]	; (8004788 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80046de:	f7fe feac 	bl	800343a <_PreparePacket>
 80046e2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	e00b      	b.n	800470a <SEGGER_SYSVIEW_SendModule+0x7e>
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	1c59      	adds	r1, r3, #1
 80046fa:	6279      	str	r1, [r7, #36]	; 0x24
 80046fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	09db      	lsrs	r3, r3, #7
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	2b7f      	cmp	r3, #127	; 0x7f
 800470e:	d8f0      	bhi.n	80046f2 <SEGGER_SYSVIEW_SendModule+0x66>
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	627a      	str	r2, [r7, #36]	; 0x24
 8004716:	6a3a      	ldr	r2, [r7, #32]
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e00b      	b.n	8004744 <SEGGER_SYSVIEW_SendModule+0xb8>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	1c59      	adds	r1, r3, #1
 8004734:	61f9      	str	r1, [r7, #28]
 8004736:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	09db      	lsrs	r3, r3, #7
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	2b7f      	cmp	r3, #127	; 0x7f
 8004748:	d8f0      	bhi.n	800472c <SEGGER_SYSVIEW_SendModule+0xa0>
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	61fa      	str	r2, [r7, #28]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2280      	movs	r2, #128	; 0x80
 8004760:	4619      	mov	r1, r3
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7fe fe1c 	bl	80033a0 <_EncodeStr>
 8004768:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800476a:	2216      	movs	r2, #22
 800476c:	68f9      	ldr	r1, [r7, #12]
 800476e:	6938      	ldr	r0, [r7, #16]
 8004770:	f7fe ff54 	bl	800361c <_SendPacket>
      RECORD_END();
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800477a:	bf00      	nop
 800477c:	3730      	adds	r7, #48	; 0x30
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	200142ec 	.word	0x200142ec
 8004788:	200142f4 	.word	0x200142f4

0800478c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004792:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00f      	beq.n	80047ba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f2      	bne.n	80047a0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200142ec 	.word	0x200142ec

080047c8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80047ce:	f3ef 8311 	mrs	r3, BASEPRI
 80047d2:	f04f 0120 	mov.w	r1, #32
 80047d6:	f381 8811 	msr	BASEPRI, r1
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	4817      	ldr	r0, [pc, #92]	; (800483c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80047de:	f7fe fe2c 	bl	800343a <_PreparePacket>
 80047e2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	4b14      	ldr	r3, [pc, #80]	; (8004840 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	e00b      	b.n	800480c <SEGGER_SYSVIEW_SendNumModules+0x44>
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	1c59      	adds	r1, r3, #1
 80047fc:	6179      	str	r1, [r7, #20]
 80047fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	09db      	lsrs	r3, r3, #7
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b7f      	cmp	r3, #127	; 0x7f
 8004810:	d8f0      	bhi.n	80047f4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	617a      	str	r2, [r7, #20]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004822:	221b      	movs	r2, #27
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	68b8      	ldr	r0, [r7, #8]
 8004828:	f7fe fef8 	bl	800361c <_SendPacket>
  RECORD_END();
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f383 8811 	msr	BASEPRI, r3
}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	200142f4 	.word	0x200142f4
 8004840:	200142f0 	.word	0x200142f0

08004844 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800484c:	f3ef 8311 	mrs	r3, BASEPRI
 8004850:	f04f 0120 	mov.w	r1, #32
 8004854:	f381 8811 	msr	BASEPRI, r1
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	4827      	ldr	r0, [pc, #156]	; (80048f8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800485c:	f7fe fded 	bl	800343a <_PreparePacket>
 8004860:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	6938      	ldr	r0, [r7, #16]
 8004868:	f7fe fd9a 	bl	80033a0 <_EncodeStr>
 800486c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	2301      	movs	r3, #1
 8004874:	623b      	str	r3, [r7, #32]
 8004876:	e00b      	b.n	8004890 <SEGGER_SYSVIEW_Warn+0x4c>
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	b2da      	uxtb	r2, r3
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	1c59      	adds	r1, r3, #1
 8004880:	6279      	str	r1, [r7, #36]	; 0x24
 8004882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	09db      	lsrs	r3, r3, #7
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	2b7f      	cmp	r3, #127	; 0x7f
 8004894:	d8f0      	bhi.n	8004878 <SEGGER_SYSVIEW_Warn+0x34>
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	627a      	str	r2, [r7, #36]	; 0x24
 800489c:	6a3a      	ldr	r2, [r7, #32]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e00b      	b.n	80048c8 <SEGGER_SYSVIEW_Warn+0x84>
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	1c59      	adds	r1, r3, #1
 80048b8:	61f9      	str	r1, [r7, #28]
 80048ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	09db      	lsrs	r3, r3, #7
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b7f      	cmp	r3, #127	; 0x7f
 80048cc:	d8f0      	bhi.n	80048b0 <SEGGER_SYSVIEW_Warn+0x6c>
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	61fa      	str	r2, [r7, #28]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80048de:	221a      	movs	r2, #26
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	6938      	ldr	r0, [r7, #16]
 80048e4:	f7fe fe9a 	bl	800361c <_SendPacket>
  RECORD_END();
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f383 8811 	msr	BASEPRI, r3
}
 80048ee:	bf00      	nop
 80048f0:	3728      	adds	r7, #40	; 0x28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200142f4 	.word	0x200142f4

080048fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004902:	f000 fe7b 	bl	80055fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004906:	f000 f8d1 	bl	8004aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800490a:	f000 f963 	bl	8004bd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800490e:	f000 f937 	bl	8004b80 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_UART_MspInit(&huart2);
 8004912:	4854      	ldr	r0, [pc, #336]	; (8004a64 <main+0x168>)
 8004914:	f000 fd40 	bl	8005398 <HAL_UART_MspInit>

  //Enable the DWT (Data Watch Point) Cycle Count Feature
  DWT_CTRL |= (1 << 0);
 8004918:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <main+0x16c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a52      	ldr	r2, [pc, #328]	; (8004a68 <main+0x16c>)
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	6013      	str	r3, [r2, #0]

  //Enabling SEGGER SYSVIEW event tracing
  SEGGER_SYSVIEW_Conf();
 8004924:	f7fe fa3e 	bl	8002da4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8004928:	f7ff fa1c 	bl	8003d64 <SEGGER_SYSVIEW_Start>

  //HAL_UART_Receive_IT(&huart2,RxBuf,1);

  status = xTaskCreate(task_menu,"menu_task",1024,NULL,2,&task_handle_menu);
 800492c:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <main+0x170>)
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	2302      	movs	r3, #2
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	2300      	movs	r3, #0
 8004936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800493a:	494d      	ldr	r1, [pc, #308]	; (8004a70 <main+0x174>)
 800493c:	484d      	ldr	r0, [pc, #308]	; (8004a74 <main+0x178>)
 800493e:	f7fc fad5 	bl	8000eec <xTaskCreate>
 8004942:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d00a      	beq.n	8004960 <main+0x64>
        __asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	61bb      	str	r3, [r7, #24]
    }
 800495c:	bf00      	nop
 800495e:	e7fe      	b.n	800495e <main+0x62>

  status = xTaskCreate(task_led,"led_task",1024,NULL,2,&task_handle_led);
 8004960:	4b45      	ldr	r3, [pc, #276]	; (8004a78 <main+0x17c>)
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	2302      	movs	r3, #2
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2300      	movs	r3, #0
 800496a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800496e:	4943      	ldr	r1, [pc, #268]	; (8004a7c <main+0x180>)
 8004970:	4843      	ldr	r0, [pc, #268]	; (8004a80 <main+0x184>)
 8004972:	f7fc fabb 	bl	8000eec <xTaskCreate>
 8004976:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d00a      	beq.n	8004994 <main+0x98>
        __asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	617b      	str	r3, [r7, #20]
    }
 8004990:	bf00      	nop
 8004992:	e7fe      	b.n	8004992 <main+0x96>

  status = xTaskCreate(task_rtc,"rtc_task",1024,NULL,2,&task_handle_rtc);
 8004994:	4b3b      	ldr	r3, [pc, #236]	; (8004a84 <main+0x188>)
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	2302      	movs	r3, #2
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049a2:	4939      	ldr	r1, [pc, #228]	; (8004a88 <main+0x18c>)
 80049a4:	4839      	ldr	r0, [pc, #228]	; (8004a8c <main+0x190>)
 80049a6:	f7fc faa1 	bl	8000eec <xTaskCreate>
 80049aa:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d00a      	beq.n	80049c8 <main+0xcc>
        __asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	613b      	str	r3, [r7, #16]
    }
 80049c4:	bf00      	nop
 80049c6:	e7fe      	b.n	80049c6 <main+0xca>

  status = xTaskCreate(task_cmd,"cmd_task",1024,NULL,2,&task_handle_cmd);
 80049c8:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <main+0x194>)
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	2302      	movs	r3, #2
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2300      	movs	r3, #0
 80049d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049d6:	492f      	ldr	r1, [pc, #188]	; (8004a94 <main+0x198>)
 80049d8:	482f      	ldr	r0, [pc, #188]	; (8004a98 <main+0x19c>)
 80049da:	f7fc fa87 	bl	8000eec <xTaskCreate>
 80049de:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d00a      	beq.n	80049fc <main+0x100>
        __asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60fb      	str	r3, [r7, #12]
    }
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <main+0xfe>

  status = xTaskCreate(task_print,"print_task",1024,NULL,2,&task_handle_print);
 80049fc:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <main+0x1a0>)
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	2302      	movs	r3, #2
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2300      	movs	r3, #0
 8004a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a0a:	4925      	ldr	r1, [pc, #148]	; (8004aa0 <main+0x1a4>)
 8004a0c:	4825      	ldr	r0, [pc, #148]	; (8004aa4 <main+0x1a8>)
 8004a0e:	f7fc fa6d 	bl	8000eec <xTaskCreate>
 8004a12:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d00a      	beq.n	8004a30 <main+0x134>
        __asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	60bb      	str	r3, [r7, #8]
    }
 8004a2c:	bf00      	nop
 8004a2e:	e7fe      	b.n	8004a2e <main+0x132>

  print_queue = xQueueCreate(10,sizeof(unsigned long));
 8004a30:	2200      	movs	r2, #0
 8004a32:	2104      	movs	r1, #4
 8004a34:	200a      	movs	r0, #10
 8004a36:	f7fb febb 	bl	80007b0 <xQueueGenericCreate>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <main+0x1ac>)
 8004a3e:	6013      	str	r3, [r2, #0]
  configASSERT(print_queue != NULL);
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <main+0x1ac>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <main+0x162>
        __asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	607b      	str	r3, [r7, #4]
    }
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <main+0x160>

  vTaskStartScheduler();
 8004a5e:	f7fc fd2b 	bl	80014b8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004a62:	e7fe      	b.n	8004a62 <main+0x166>
 8004a64:	200143d8 	.word	0x200143d8
 8004a68:	e0001000 	.word	0xe0001000
 8004a6c:	20014428 	.word	0x20014428
 8004a70:	08007e6c 	.word	0x08007e6c
 8004a74:	08004e91 	.word	0x08004e91
 8004a78:	2001442c 	.word	0x2001442c
 8004a7c:	08007e78 	.word	0x08007e78
 8004a80:	08004edd 	.word	0x08004edd
 8004a84:	20014430 	.word	0x20014430
 8004a88:	08007e84 	.word	0x08007e84
 8004a8c:	08005091 	.word	0x08005091
 8004a90:	20014434 	.word	0x20014434
 8004a94:	08007e90 	.word	0x08007e90
 8004a98:	08005145 	.word	0x08005145
 8004a9c:	20014438 	.word	0x20014438
 8004aa0:	08007e9c 	.word	0x08007e9c
 8004aa4:	0800521d 	.word	0x0800521d
 8004aa8:	2001443c 	.word	0x2001443c

08004aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b094      	sub	sp, #80	; 0x50
 8004ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ab2:	f107 0320 	add.w	r3, r7, #32
 8004ab6:	2230      	movs	r2, #48	; 0x30
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f003 f956 	bl	8007d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ac0:	f107 030c 	add.w	r3, r7, #12
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	4b28      	ldr	r3, [pc, #160]	; (8004b78 <SystemClock_Config+0xcc>)
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	4a27      	ldr	r2, [pc, #156]	; (8004b78 <SystemClock_Config+0xcc>)
 8004ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ade:	6413      	str	r3, [r2, #64]	; 0x40
 8004ae0:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <SystemClock_Config+0xcc>)
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aec:	2300      	movs	r3, #0
 8004aee:	607b      	str	r3, [r7, #4]
 8004af0:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <SystemClock_Config+0xd0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a21      	ldr	r2, [pc, #132]	; (8004b7c <SystemClock_Config+0xd0>)
 8004af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	4b1f      	ldr	r3, [pc, #124]	; (8004b7c <SystemClock_Config+0xd0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b10:	2310      	movs	r3, #16
 8004b12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b14:	2302      	movs	r3, #2
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004b20:	2332      	movs	r3, #50	; 0x32
 8004b22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004b24:	2304      	movs	r3, #4
 8004b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004b28:	2307      	movs	r3, #7
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b2c:	f107 0320 	add.w	r3, r7, #32
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 f8e9 	bl	8005d08 <HAL_RCC_OscConfig>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004b3c:	f000 fbfc 	bl	8005338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b40:	230f      	movs	r3, #15
 8004b42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b44:	2302      	movs	r3, #2
 8004b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004b4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004b50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004b58:	f107 030c 	add.w	r3, r7, #12
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 fb4a 	bl	80061f8 <HAL_RCC_ClockConfig>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004b6a:	f000 fbe5 	bl	8005338 <Error_Handler>
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3750      	adds	r7, #80	; 0x50
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40007000 	.word	0x40007000

08004b80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004b84:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <MX_USART2_UART_Init+0x4c>)
 8004b86:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <MX_USART2_UART_Init+0x50>)
 8004b88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <MX_USART2_UART_Init+0x4c>)
 8004b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004b92:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <MX_USART2_UART_Init+0x4c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <MX_USART2_UART_Init+0x4c>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <MX_USART2_UART_Init+0x4c>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <MX_USART2_UART_Init+0x4c>)
 8004ba6:	220c      	movs	r2, #12
 8004ba8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <MX_USART2_UART_Init+0x4c>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <MX_USART2_UART_Init+0x4c>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004bb6:	4805      	ldr	r0, [pc, #20]	; (8004bcc <MX_USART2_UART_Init+0x4c>)
 8004bb8:	f002 f81e 	bl	8006bf8 <HAL_UART_Init>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004bc2:	f000 fbb9 	bl	8005338 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004bc6:	bf00      	nop
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200143d8 	.word	0x200143d8
 8004bd0:	40004400 	.word	0x40004400

08004bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	; 0x30
 8004bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bda:	f107 031c 	add.w	r3, r7, #28
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	605a      	str	r2, [r3, #4]
 8004be4:	609a      	str	r2, [r3, #8]
 8004be6:	60da      	str	r2, [r3, #12]
 8004be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	4ba2      	ldr	r3, [pc, #648]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	4aa1      	ldr	r2, [pc, #644]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004bf4:	f043 0310 	orr.w	r3, r3, #16
 8004bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfa:	4b9f      	ldr	r3, [pc, #636]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	4b9b      	ldr	r3, [pc, #620]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4a9a      	ldr	r2, [pc, #616]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c10:	f043 0304 	orr.w	r3, r3, #4
 8004c14:	6313      	str	r3, [r2, #48]	; 0x30
 8004c16:	4b98      	ldr	r3, [pc, #608]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	4b94      	ldr	r3, [pc, #592]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a93      	ldr	r2, [pc, #588]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c30:	6313      	str	r3, [r2, #48]	; 0x30
 8004c32:	4b91      	ldr	r3, [pc, #580]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	4b8d      	ldr	r3, [pc, #564]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	4a8c      	ldr	r2, [pc, #560]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4e:	4b8a      	ldr	r3, [pc, #552]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	4b86      	ldr	r3, [pc, #536]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4a85      	ldr	r2, [pc, #532]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6a:	4b83      	ldr	r3, [pc, #524]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	4b7f      	ldr	r3, [pc, #508]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	4a7e      	ldr	r2, [pc, #504]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c80:	f043 0308 	orr.w	r3, r3, #8
 8004c84:	6313      	str	r3, [r2, #48]	; 0x30
 8004c86:	4b7c      	ldr	r3, [pc, #496]	; (8004e78 <MX_GPIO_Init+0x2a4>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004c92:	2200      	movs	r2, #0
 8004c94:	2108      	movs	r1, #8
 8004c96:	4879      	ldr	r0, [pc, #484]	; (8004e7c <MX_GPIO_Init+0x2a8>)
 8004c98:	f001 f802 	bl	8005ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	4877      	ldr	r0, [pc, #476]	; (8004e80 <MX_GPIO_Init+0x2ac>)
 8004ca2:	f000 fffd 	bl	8005ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8004cac:	4875      	ldr	r0, [pc, #468]	; (8004e84 <MX_GPIO_Init+0x2b0>)
 8004cae:	f000 fff7 	bl	8005ca0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004cc2:	f107 031c 	add.w	r3, r7, #28
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	486c      	ldr	r0, [pc, #432]	; (8004e7c <MX_GPIO_Init+0x2a8>)
 8004cca:	f000 fe4d 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004cde:	f107 031c 	add.w	r3, r7, #28
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4866      	ldr	r0, [pc, #408]	; (8004e80 <MX_GPIO_Init+0x2ac>)
 8004ce6:	f000 fe3f 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004cea:	2308      	movs	r3, #8
 8004cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cfa:	2305      	movs	r3, #5
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004cfe:	f107 031c 	add.w	r3, r7, #28
 8004d02:	4619      	mov	r1, r3
 8004d04:	485e      	ldr	r0, [pc, #376]	; (8004e80 <MX_GPIO_Init+0x2ac>)
 8004d06:	f000 fe2f 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d18:	f107 031c 	add.w	r3, r7, #28
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	485a      	ldr	r0, [pc, #360]	; (8004e88 <MX_GPIO_Init+0x2b4>)
 8004d20:	f000 fe22 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004d24:	2310      	movs	r3, #16
 8004d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d30:	2300      	movs	r3, #0
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004d34:	2306      	movs	r3, #6
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004d38:	f107 031c 	add.w	r3, r7, #28
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4852      	ldr	r0, [pc, #328]	; (8004e88 <MX_GPIO_Init+0x2b4>)
 8004d40:	f000 fe12 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004d44:	23e0      	movs	r3, #224	; 0xe0
 8004d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d54:	2305      	movs	r3, #5
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d58:	f107 031c 	add.w	r3, r7, #28
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	484a      	ldr	r0, [pc, #296]	; (8004e88 <MX_GPIO_Init+0x2b4>)
 8004d60:	f000 fe02 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004d64:	2304      	movs	r3, #4
 8004d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004d70:	f107 031c 	add.w	r3, r7, #28
 8004d74:	4619      	mov	r1, r3
 8004d76:	4845      	ldr	r0, [pc, #276]	; (8004e8c <MX_GPIO_Init+0x2b8>)
 8004d78:	f000 fdf6 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d82:	2302      	movs	r3, #2
 8004d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d8e:	2305      	movs	r3, #5
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8004d92:	f107 031c 	add.w	r3, r7, #28
 8004d96:	4619      	mov	r1, r3
 8004d98:	483c      	ldr	r0, [pc, #240]	; (8004e8c <MX_GPIO_Init+0x2b8>)
 8004d9a:	f000 fde5 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004d9e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8004da2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004da4:	2301      	movs	r3, #1
 8004da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004db0:	f107 031c 	add.w	r3, r7, #28
 8004db4:	4619      	mov	r1, r3
 8004db6:	4833      	ldr	r0, [pc, #204]	; (8004e84 <MX_GPIO_Init+0x2b0>)
 8004db8:	f000 fdd6 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004dbc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8004dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004dce:	2306      	movs	r3, #6
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dd2:	f107 031c 	add.w	r3, r7, #28
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4829      	ldr	r0, [pc, #164]	; (8004e80 <MX_GPIO_Init+0x2ac>)
 8004dda:	f000 fdc5 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004de4:	2300      	movs	r3, #0
 8004de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004dec:	f107 031c 	add.w	r3, r7, #28
 8004df0:	4619      	mov	r1, r3
 8004df2:	4825      	ldr	r0, [pc, #148]	; (8004e88 <MX_GPIO_Init+0x2b4>)
 8004df4:	f000 fdb8 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004df8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e06:	2300      	movs	r3, #0
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004e0a:	230a      	movs	r3, #10
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e0e:	f107 031c 	add.w	r3, r7, #28
 8004e12:	4619      	mov	r1, r3
 8004e14:	481c      	ldr	r0, [pc, #112]	; (8004e88 <MX_GPIO_Init+0x2b4>)
 8004e16:	f000 fda7 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004e1a:	2320      	movs	r3, #32
 8004e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004e26:	f107 031c 	add.w	r3, r7, #28
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4815      	ldr	r0, [pc, #84]	; (8004e84 <MX_GPIO_Init+0x2b0>)
 8004e2e:	f000 fd9b 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004e32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e38:	2312      	movs	r3, #18
 8004e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e40:	2300      	movs	r3, #0
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e44:	2304      	movs	r3, #4
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e48:	f107 031c 	add.w	r3, r7, #28
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	480f      	ldr	r0, [pc, #60]	; (8004e8c <MX_GPIO_Init+0x2b8>)
 8004e50:	f000 fd8a 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004e54:	2302      	movs	r3, #2
 8004e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004e58:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004e62:	f107 031c 	add.w	r3, r7, #28
 8004e66:	4619      	mov	r1, r3
 8004e68:	4804      	ldr	r0, [pc, #16]	; (8004e7c <MX_GPIO_Init+0x2a8>)
 8004e6a:	f000 fd7d 	bl	8005968 <HAL_GPIO_Init>

}
 8004e6e:	bf00      	nop
 8004e70:	3730      	adds	r7, #48	; 0x30
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40020800 	.word	0x40020800
 8004e84:	40020c00 	.word	0x40020c00
 8004e88:	40020000 	.word	0x40020000
 8004e8c:	40020400 	.word	0x40020400

08004e90 <task_menu>:

/* USER CODE BEGIN 4 */

static void task_menu(void *params)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	6078      	str	r0, [r7, #4]
	char *menu_msg = "\r\nMain Menu\r\n1. LED Control\r\n2. RTC Control\r\nEnter Choice: ";
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <task_menu+0x3c>)
 8004e9a:	60fb      	str	r3, [r7, #12]

    while(1)
    {
    	xQueueSend(print_queue,&menu_msg,portMAX_DELAY);
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <task_menu+0x40>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	f107 010c 	add.w	r1, r7, #12
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eaa:	f7fb fd09 	bl	80008c0 <xQueueGenericSend>
    	HAL_UART_Receive_IT(&huart2,RxBuf,1);
 8004eae:	2201      	movs	r2, #1
 8004eb0:	4908      	ldr	r1, [pc, #32]	; (8004ed4 <task_menu+0x44>)
 8004eb2:	4809      	ldr	r0, [pc, #36]	; (8004ed8 <task_menu+0x48>)
 8004eb4:	f001 ff7f 	bl	8006db6 <HAL_UART_Receive_IT>
    	xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f7fc ff7d 	bl	8001dc4 <xTaskGenericNotifyWait>
    	xQueueSend(print_queue,&menu_msg,portMAX_DELAY);
 8004eca:	e7e7      	b.n	8004e9c <task_menu+0xc>
 8004ecc:	08007ea8 	.word	0x08007ea8
 8004ed0:	2001443c 	.word	0x2001443c
 8004ed4:	2001441c 	.word	0x2001441c
 8004ed8:	200143d8 	.word	0x200143d8

08004edc <task_led>:
    }
}

static void task_led(void *params)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	; 0x30
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	6078      	str	r0, [r7, #4]
	char *msg = "\r\n LED Control\r\nChoose Pattern 1 or Pattern 2 (0 to Exit): ";
 8004ee4:	4b60      	ldr	r3, [pc, #384]	; (8005068 <task_led+0x18c>)
 8004ee6:	617b      	str	r3, [r7, #20]
	BaseType_t status;
	uint8_t task_handle_led_pattern_1_created = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t task_handle_led_pattern_2_created = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	TaskHandle_t task_handle_led_pattern_1;
	TaskHandle_t task_handle_led_pattern_2;

    while(1)
    {
    	if(app_state != APP_STATE_LED)
 8004ef4:	4b5d      	ldr	r3, [pc, #372]	; (800506c <task_led+0x190>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d009      	beq.n	8004f10 <task_led+0x34>
    	{
    		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	2200      	movs	r2, #0
 8004f06:	2100      	movs	r1, #0
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f7fc ff5b 	bl	8001dc4 <xTaskGenericNotifyWait>
 8004f0e:	e7f1      	b.n	8004ef4 <task_led+0x18>
    	}
    	else
    	{
    		xQueueSend(print_queue,&msg,portMAX_DELAY);
 8004f10:	4b57      	ldr	r3, [pc, #348]	; (8005070 <task_led+0x194>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	f107 0114 	add.w	r1, r7, #20
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f1e:	f7fb fccf 	bl	80008c0 <xQueueGenericSend>
    		HAL_UART_Receive_IT(&huart2,RxBuf,1);
 8004f22:	2201      	movs	r2, #1
 8004f24:	4953      	ldr	r1, [pc, #332]	; (8005074 <task_led+0x198>)
 8004f26:	4854      	ldr	r0, [pc, #336]	; (8005078 <task_led+0x19c>)
 8004f28:	f001 ff45 	bl	8006db6 <HAL_UART_Receive_IT>
    		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	2200      	movs	r2, #0
 8004f36:	2100      	movs	r1, #0
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f7fc ff43 	bl	8001dc4 <xTaskGenericNotifyWait>
    		if(RxBuf[0] == '1')
 8004f3e:	4b4d      	ldr	r3, [pc, #308]	; (8005074 <task_led+0x198>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b31      	cmp	r3, #49	; 0x31
 8004f44:	d137      	bne.n	8004fb6 <task_led+0xda>
    		{
    			if(task_handle_led_pattern_1_created == 0)
 8004f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d126      	bne.n	8004f9c <task_led+0xc0>
    			{
    				status = xTaskCreate(task_led_pattern_1,"led_pattern_1",1024,NULL,1,&task_handle_led_pattern_1);
 8004f4e:	f107 0310 	add.w	r3, r7, #16
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	2301      	movs	r3, #1
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f5e:	4947      	ldr	r1, [pc, #284]	; (800507c <task_led+0x1a0>)
 8004f60:	4847      	ldr	r0, [pc, #284]	; (8005080 <task_led+0x1a4>)
 8004f62:	f7fb ffc3 	bl	8000eec <xTaskCreate>
 8004f66:	6238      	str	r0, [r7, #32]
    				configASSERT(status == pdPASS);
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d00a      	beq.n	8004f84 <task_led+0xa8>
        __asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	61fb      	str	r3, [r7, #28]
    }
 8004f80:	bf00      	nop
 8004f82:	e7fe      	b.n	8004f82 <task_led+0xa6>
    				task_handle_led_pattern_1_created = 1;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    				if(task_handle_led_pattern_2_created == 1)
 8004f8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d1b0      	bne.n	8004ef4 <task_led+0x18>
    				{
    					vTaskSuspend(task_handle_led_pattern_2);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fc f945 	bl	8001224 <vTaskSuspend>
 8004f9a:	e7ab      	b.n	8004ef4 <task_led+0x18>
    				}
    			}
    			else
    			{
    				if(task_handle_led_pattern_2_created == 1)
 8004f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d103      	bne.n	8004fac <task_led+0xd0>
    				{
    				    vTaskSuspend(task_handle_led_pattern_2);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fc f93c 	bl	8001224 <vTaskSuspend>
    				}

    				vTaskResume(task_handle_led_pattern_1);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fc fa18 	bl	80013e4 <vTaskResume>
 8004fb4:	e79e      	b.n	8004ef4 <task_led+0x18>
    			}
    		}
    		else if(RxBuf[0] == '2')
 8004fb6:	4b2f      	ldr	r3, [pc, #188]	; (8005074 <task_led+0x198>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b32      	cmp	r3, #50	; 0x32
 8004fbc:	d138      	bne.n	8005030 <task_led+0x154>
			{
    			if(task_handle_led_pattern_2_created == 0)
 8004fbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d127      	bne.n	8005016 <task_led+0x13a>
    			{
    				status = xTaskCreate(task_led_pattern_2,"led_pattern_2",1024,NULL,1,&task_handle_led_pattern_2);
 8004fc6:	f107 030c 	add.w	r3, r7, #12
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fd6:	492b      	ldr	r1, [pc, #172]	; (8005084 <task_led+0x1a8>)
 8004fd8:	482b      	ldr	r0, [pc, #172]	; (8005088 <task_led+0x1ac>)
 8004fda:	f7fb ff87 	bl	8000eec <xTaskCreate>
 8004fde:	6238      	str	r0, [r7, #32]
    				configASSERT(status == pdPASS);
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d00a      	beq.n	8004ffc <task_led+0x120>
        __asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	61bb      	str	r3, [r7, #24]
    }
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <task_led+0x11e>

    				task_handle_led_pattern_2_created = 1;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    				if(task_handle_led_pattern_1_created == 1)
 8005002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005006:	2b01      	cmp	r3, #1
 8005008:	f47f af74 	bne.w	8004ef4 <task_led+0x18>
    				{
    					vTaskSuspend(task_handle_led_pattern_1);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fc f908 	bl	8001224 <vTaskSuspend>
 8005014:	e76e      	b.n	8004ef4 <task_led+0x18>
    				}
    			}
    			else
    			{
    				if(task_handle_led_pattern_1_created == 1)
 8005016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800501a:	2b01      	cmp	r3, #1
 800501c:	d103      	bne.n	8005026 <task_led+0x14a>
    				{
    				    vTaskSuspend(task_handle_led_pattern_1);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4618      	mov	r0, r3
 8005022:	f7fc f8ff 	bl	8001224 <vTaskSuspend>
    				}

    				vTaskResume(task_handle_led_pattern_2);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fc f9db 	bl	80013e4 <vTaskResume>
 800502e:	e761      	b.n	8004ef4 <task_led+0x18>
    			}
			}
    		else if(RxBuf[0] == '0')
 8005030:	4b10      	ldr	r3, [pc, #64]	; (8005074 <task_led+0x198>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b30      	cmp	r3, #48	; 0x30
 8005036:	f47f af5d 	bne.w	8004ef4 <task_led+0x18>
    		{
    		   //Return to Menu Task
    			app_state = APP_STATE_MENU;
 800503a:	4b0c      	ldr	r3, [pc, #48]	; (800506c <task_led+0x190>)
 800503c:	2201      	movs	r2, #1
 800503e:	701a      	strb	r2, [r3, #0]
    			xTaskNotify(task_handle_menu,0,eNoAction);
 8005040:	4b12      	ldr	r3, [pc, #72]	; (800508c <task_led+0x1b0>)
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	2300      	movs	r3, #0
 800504a:	2200      	movs	r2, #0
 800504c:	2100      	movs	r1, #0
 800504e:	f7fc ff41 	bl	8001ed4 <xTaskGenericNotify>
    			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8005052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2300      	movs	r3, #0
 800505a:	2200      	movs	r2, #0
 800505c:	2100      	movs	r1, #0
 800505e:	2000      	movs	r0, #0
 8005060:	f7fc feb0 	bl	8001dc4 <xTaskGenericNotifyWait>
    	if(app_state != APP_STATE_LED)
 8005064:	e746      	b.n	8004ef4 <task_led+0x18>
 8005066:	bf00      	nop
 8005068:	08007ee4 	.word	0x08007ee4
 800506c:	20000008 	.word	0x20000008
 8005070:	2001443c 	.word	0x2001443c
 8005074:	2001441c 	.word	0x2001441c
 8005078:	200143d8 	.word	0x200143d8
 800507c:	08007f20 	.word	0x08007f20
 8005080:	08005295 	.word	0x08005295
 8005084:	08007f30 	.word	0x08007f30
 8005088:	080052d5 	.word	0x080052d5
 800508c:	20014428 	.word	0x20014428

08005090 <task_rtc>:

    }
}

static void task_rtc(void *params)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af02      	add	r7, sp, #8
 8005096:	6078      	str	r0, [r7, #4]
    while(1)
    {
    	char *msg = "\r\n RTC Menu\r\nChoose 1 or 2 (0 to Exit): ";
 8005098:	4b24      	ldr	r3, [pc, #144]	; (800512c <task_rtc+0x9c>)
 800509a:	60fb      	str	r3, [r7, #12]

        while(1)
        {
        	if(app_state != APP_STATE_RTC)
 800509c:	4b24      	ldr	r3, [pc, #144]	; (8005130 <task_rtc+0xa0>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d009      	beq.n	80050b8 <task_rtc+0x28>
        	{
        		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	2300      	movs	r3, #0
 80050ac:	2200      	movs	r2, #0
 80050ae:	2100      	movs	r1, #0
 80050b0:	2000      	movs	r0, #0
 80050b2:	f7fc fe87 	bl	8001dc4 <xTaskGenericNotifyWait>
 80050b6:	e7f1      	b.n	800509c <task_rtc+0xc>
        	}
        	else
        	{
        		xQueueSend(print_queue,&msg,portMAX_DELAY);
 80050b8:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <task_rtc+0xa4>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	f107 010c 	add.w	r1, r7, #12
 80050c0:	2300      	movs	r3, #0
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c6:	f7fb fbfb 	bl	80008c0 <xQueueGenericSend>
        		HAL_UART_Receive_IT(&huart2,RxBuf,1);
 80050ca:	2201      	movs	r2, #1
 80050cc:	491a      	ldr	r1, [pc, #104]	; (8005138 <task_rtc+0xa8>)
 80050ce:	481b      	ldr	r0, [pc, #108]	; (800513c <task_rtc+0xac>)
 80050d0:	f001 fe71 	bl	8006db6 <HAL_UART_Receive_IT>
        		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80050d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	2200      	movs	r2, #0
 80050de:	2100      	movs	r1, #0
 80050e0:	2000      	movs	r0, #0
 80050e2:	f7fc fe6f 	bl	8001dc4 <xTaskGenericNotifyWait>
        		if((char) RxBuf[0] == '1')
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <task_rtc+0xa8>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b31      	cmp	r3, #49	; 0x31
 80050ec:	d0d6      	beq.n	800509c <task_rtc+0xc>
        		{

        		}
        		else if((char) RxBuf[0] == '2')
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <task_rtc+0xa8>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b32      	cmp	r3, #50	; 0x32
 80050f4:	d0d2      	beq.n	800509c <task_rtc+0xc>
    			{

    			}
        		else if((char) RxBuf[0] == '0')
 80050f6:	4b10      	ldr	r3, [pc, #64]	; (8005138 <task_rtc+0xa8>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b30      	cmp	r3, #48	; 0x30
 80050fc:	d1ce      	bne.n	800509c <task_rtc+0xc>
        		{
        		   //Return to Menu Task
        			app_state = APP_STATE_MENU;
 80050fe:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <task_rtc+0xa0>)
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
        			xTaskNotify(task_handle_menu,0,eNoAction);
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <task_rtc+0xb0>)
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	2300      	movs	r3, #0
 800510e:	2200      	movs	r2, #0
 8005110:	2100      	movs	r1, #0
 8005112:	f7fc fedf 	bl	8001ed4 <xTaskGenericNotify>
        			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8005116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	2200      	movs	r2, #0
 8005120:	2100      	movs	r1, #0
 8005122:	2000      	movs	r0, #0
 8005124:	f7fc fe4e 	bl	8001dc4 <xTaskGenericNotifyWait>
        	if(app_state != APP_STATE_RTC)
 8005128:	e7b8      	b.n	800509c <task_rtc+0xc>
 800512a:	bf00      	nop
 800512c:	08007f40 	.word	0x08007f40
 8005130:	20000008 	.word	0x20000008
 8005134:	2001443c 	.word	0x2001443c
 8005138:	2001441c 	.word	0x2001441c
 800513c:	200143d8 	.word	0x200143d8
 8005140:	20014428 	.word	0x20014428

08005144 <task_cmd>:
        }
    }
}

static void task_cmd(void *params)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af02      	add	r7, sp, #8
 800514a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800514c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	2300      	movs	r3, #0
 8005154:	2200      	movs	r2, #0
 8005156:	2100      	movs	r1, #0
 8005158:	2000      	movs	r0, #0
 800515a:	f7fc fe33 	bl	8001dc4 <xTaskGenericNotifyWait>
		process_cmd();
 800515e:	f000 f801 	bl	8005164 <process_cmd>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8005162:	e7f3      	b.n	800514c <task_cmd+0x8>

08005164 <process_cmd>:
	}
}

static void process_cmd(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af02      	add	r7, sp, #8
	if(app_state == APP_STATE_MENU)
 800516a:	4b27      	ldr	r3, [pc, #156]	; (8005208 <process_cmd+0xa4>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d12b      	bne.n	80051ca <process_cmd+0x66>
	{
		if(RxBuf[0] == '1')
 8005172:	4b26      	ldr	r3, [pc, #152]	; (800520c <process_cmd+0xa8>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b31      	cmp	r3, #49	; 0x31
 8005178:	d10c      	bne.n	8005194 <process_cmd+0x30>
		{
			app_state = APP_STATE_LED;
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <process_cmd+0xa4>)
 800517c:	2202      	movs	r2, #2
 800517e:	701a      	strb	r2, [r3, #0]
			xTaskNotify(task_handle_led,0,eNoAction);
 8005180:	4b23      	ldr	r3, [pc, #140]	; (8005210 <process_cmd+0xac>)
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	2300      	movs	r3, #0
 800518a:	2200      	movs	r2, #0
 800518c:	2100      	movs	r1, #0
 800518e:	f7fc fea1 	bl	8001ed4 <xTaskGenericNotify>
	}
	else if(app_state == APP_STATE_RTC)
	{
		xTaskNotify(task_handle_rtc,0,eNoAction);
	}
}
 8005192:	e035      	b.n	8005200 <process_cmd+0x9c>
		else if(RxBuf[0] == '2')
 8005194:	4b1d      	ldr	r3, [pc, #116]	; (800520c <process_cmd+0xa8>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b32      	cmp	r3, #50	; 0x32
 800519a:	d10c      	bne.n	80051b6 <process_cmd+0x52>
			app_state = APP_STATE_RTC;
 800519c:	4b1a      	ldr	r3, [pc, #104]	; (8005208 <process_cmd+0xa4>)
 800519e:	2203      	movs	r2, #3
 80051a0:	701a      	strb	r2, [r3, #0]
			xTaskNotify(task_handle_rtc,0,eNoAction);
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <process_cmd+0xb0>)
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	2300      	movs	r3, #0
 80051ac:	2200      	movs	r2, #0
 80051ae:	2100      	movs	r1, #0
 80051b0:	f7fc fe90 	bl	8001ed4 <xTaskGenericNotify>
}
 80051b4:	e024      	b.n	8005200 <process_cmd+0x9c>
			xTaskNotify(task_handle_menu,0,eNoAction);
 80051b6:	4b18      	ldr	r3, [pc, #96]	; (8005218 <process_cmd+0xb4>)
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	2300      	movs	r3, #0
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2300      	movs	r3, #0
 80051c0:	2200      	movs	r2, #0
 80051c2:	2100      	movs	r1, #0
 80051c4:	f7fc fe86 	bl	8001ed4 <xTaskGenericNotify>
}
 80051c8:	e01a      	b.n	8005200 <process_cmd+0x9c>
	else if(app_state == APP_STATE_LED)
 80051ca:	4b0f      	ldr	r3, [pc, #60]	; (8005208 <process_cmd+0xa4>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d109      	bne.n	80051e6 <process_cmd+0x82>
		xTaskNotify(task_handle_led,0,eNoAction);
 80051d2:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <process_cmd+0xac>)
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	2300      	movs	r3, #0
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	2300      	movs	r3, #0
 80051dc:	2200      	movs	r2, #0
 80051de:	2100      	movs	r1, #0
 80051e0:	f7fc fe78 	bl	8001ed4 <xTaskGenericNotify>
}
 80051e4:	e00c      	b.n	8005200 <process_cmd+0x9c>
	else if(app_state == APP_STATE_RTC)
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <process_cmd+0xa4>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d108      	bne.n	8005200 <process_cmd+0x9c>
		xTaskNotify(task_handle_rtc,0,eNoAction);
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <process_cmd+0xb0>)
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	2300      	movs	r3, #0
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	2300      	movs	r3, #0
 80051f8:	2200      	movs	r2, #0
 80051fa:	2100      	movs	r1, #0
 80051fc:	f7fc fe6a 	bl	8001ed4 <xTaskGenericNotify>
}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000008 	.word	0x20000008
 800520c:	2001441c 	.word	0x2001441c
 8005210:	2001442c 	.word	0x2001442c
 8005214:	20014430 	.word	0x20014430
 8005218:	20014428 	.word	0x20014428

0800521c <task_print>:

static void task_print(void *params)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]

	uint8_t *msg;

	while(1)
	{
		if(print_queue != NULL)
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <task_print+0x44>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0fb      	beq.n	8005224 <task_print+0x8>
		{
			if(xQueueReceive(print_queue,&msg,portMAX_DELAY) == pdTRUE)
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <task_print+0x44>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f107 010c 	add.w	r1, r7, #12
 8005234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005238:	4618      	mov	r0, r3
 800523a:	f7fb fc4f 	bl	8000adc <xQueueReceive>
 800523e:	4603      	mov	r3, r0
 8005240:	2b01      	cmp	r3, #1
 8005242:	d1ef      	bne.n	8005224 <task_print+0x8>
			{
				HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen((char *)msg),HAL_MAX_DELAY);
 8005244:	68fc      	ldr	r4, [r7, #12]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4618      	mov	r0, r3
 800524a:	f7fb f80b 	bl	8000264 <strlen>
 800524e:	4603      	mov	r3, r0
 8005250:	b29a      	uxth	r2, r3
 8005252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005256:	4621      	mov	r1, r4
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <task_print+0x48>)
 800525a:	f001 fd1a 	bl	8006c92 <HAL_UART_Transmit>
		if(print_queue != NULL)
 800525e:	e7e1      	b.n	8005224 <task_print+0x8>
 8005260:	2001443c 	.word	0x2001443c
 8005264:	200143d8 	.word	0x200143d8

08005268 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af02      	add	r7, sp, #8
 800526e:	6078      	str	r0, [r7, #4]
	xTaskNotifyFromISR(task_handle_cmd,0,eNoAction,NULL);
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <HAL_UART_RxCpltCallback+0x28>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	2300      	movs	r3, #0
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	2300      	movs	r3, #0
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	2300      	movs	r3, #0
 800527e:	2200      	movs	r2, #0
 8005280:	2100      	movs	r1, #0
 8005282:	f7fc ff19 	bl	80020b8 <xTaskGenericNotifyFromISR>
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20014434 	.word	0x20014434

08005294 <task_led_pattern_1>:

static void task_led_pattern_1(void *params)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
 800529c:	2200      	movs	r2, #0
 800529e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052a2:	480b      	ldr	r0, [pc, #44]	; (80052d0 <task_led_pattern_1+0x3c>)
 80052a4:	f000 fcfc 	bl	8005ca0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
 80052a8:	2200      	movs	r2, #0
 80052aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052ae:	4808      	ldr	r0, [pc, #32]	; (80052d0 <task_led_pattern_1+0x3c>)
 80052b0:	f000 fcf6 	bl	8005ca0 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
 80052b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052b8:	4805      	ldr	r0, [pc, #20]	; (80052d0 <task_led_pattern_1+0x3c>)
 80052ba:	f000 fd0a 	bl	8005cd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOD,LD6_Pin);
 80052be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052c2:	4803      	ldr	r0, [pc, #12]	; (80052d0 <task_led_pattern_1+0x3c>)
 80052c4:	f000 fd05 	bl	8005cd2 <HAL_GPIO_TogglePin>
		vTaskDelay(250);
 80052c8:	20fa      	movs	r0, #250	; 0xfa
 80052ca:	f7fb ff73 	bl	80011b4 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
 80052ce:	e7e5      	b.n	800529c <task_led_pattern_1+0x8>
 80052d0:	40020c00 	.word	0x40020c00

080052d4 <task_led_pattern_2>:
	}
}

static void task_led_pattern_2(void *params)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
 80052dc:	2200      	movs	r2, #0
 80052de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052e2:	480b      	ldr	r0, [pc, #44]	; (8005310 <task_led_pattern_2+0x3c>)
 80052e4:	f000 fcdc 	bl	8005ca0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
 80052e8:	2200      	movs	r2, #0
 80052ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052ee:	4808      	ldr	r0, [pc, #32]	; (8005310 <task_led_pattern_2+0x3c>)
 80052f0:	f000 fcd6 	bl	8005ca0 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOD,LD3_Pin);
 80052f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052f8:	4805      	ldr	r0, [pc, #20]	; (8005310 <task_led_pattern_2+0x3c>)
 80052fa:	f000 fcea 	bl	8005cd2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOD,LD5_Pin);
 80052fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005302:	4803      	ldr	r0, [pc, #12]	; (8005310 <task_led_pattern_2+0x3c>)
 8005304:	f000 fce5 	bl	8005cd2 <HAL_GPIO_TogglePin>
		vTaskDelay(250);
 8005308:	20fa      	movs	r0, #250	; 0xfa
 800530a:	f7fb ff53 	bl	80011b4 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
 800530e:	e7e5      	b.n	80052dc <task_led_pattern_2+0x8>
 8005310:	40020c00 	.word	0x40020c00

08005314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a04      	ldr	r2, [pc, #16]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005326:	f000 f98b 	bl	8005640 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40001000 	.word	0x40001000

08005338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800533c:	b672      	cpsid	i
}
 800533e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005340:	e7fe      	b.n	8005340 <Error_Handler+0x8>
	...

08005344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	4b11      	ldr	r3, [pc, #68]	; (8005394 <HAL_MspInit+0x50>)
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	4a10      	ldr	r2, [pc, #64]	; (8005394 <HAL_MspInit+0x50>)
 8005354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005358:	6453      	str	r3, [r2, #68]	; 0x44
 800535a:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <HAL_MspInit+0x50>)
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005366:	2300      	movs	r3, #0
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <HAL_MspInit+0x50>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	4a09      	ldr	r2, [pc, #36]	; (8005394 <HAL_MspInit+0x50>)
 8005370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005374:	6413      	str	r3, [r2, #64]	; 0x40
 8005376:	4b07      	ldr	r3, [pc, #28]	; (8005394 <HAL_MspInit+0x50>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005382:	2003      	movs	r0, #3
 8005384:	f000 fa29 	bl	80057da <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 8005388:	f7fd f956 	bl	8002638 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40023800 	.word	0x40023800

08005398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	; 0x28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a0:	f107 0314 	add.w	r3, r7, #20
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	609a      	str	r2, [r3, #8]
 80053ac:	60da      	str	r2, [r3, #12]
 80053ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	; (800542c <HAL_UART_MspInit+0x94>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d133      	bne.n	8005422 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <HAL_UART_MspInit+0x98>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <HAL_UART_MspInit+0x98>)
 80053c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ca:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_UART_MspInit+0x98>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <HAL_UART_MspInit+0x98>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	4a14      	ldr	r2, [pc, #80]	; (8005430 <HAL_UART_MspInit+0x98>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6313      	str	r3, [r2, #48]	; 0x30
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_UART_MspInit+0x98>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80053f2:	230c      	movs	r3, #12
 80053f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f6:	2302      	movs	r3, #2
 80053f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053fe:	2303      	movs	r3, #3
 8005400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005402:	2307      	movs	r3, #7
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005406:	f107 0314 	add.w	r3, r7, #20
 800540a:	4619      	mov	r1, r3
 800540c:	4809      	ldr	r0, [pc, #36]	; (8005434 <HAL_UART_MspInit+0x9c>)
 800540e:	f000 faab 	bl	8005968 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8005412:	2200      	movs	r2, #0
 8005414:	210f      	movs	r1, #15
 8005416:	2026      	movs	r0, #38	; 0x26
 8005418:	f000 f9ea 	bl	80057f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800541c:	2026      	movs	r0, #38	; 0x26
 800541e:	f000 fa03 	bl	8005828 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005422:	bf00      	nop
 8005424:	3728      	adds	r7, #40	; 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40004400 	.word	0x40004400
 8005430:	40023800 	.word	0x40023800
 8005434:	40020000 	.word	0x40020000

08005438 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08e      	sub	sp, #56	; 0x38
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	4b33      	ldr	r3, [pc, #204]	; (800551c <HAL_InitTick+0xe4>)
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	4a32      	ldr	r2, [pc, #200]	; (800551c <HAL_InitTick+0xe4>)
 8005452:	f043 0310 	orr.w	r3, r3, #16
 8005456:	6413      	str	r3, [r2, #64]	; 0x40
 8005458:	4b30      	ldr	r3, [pc, #192]	; (800551c <HAL_InitTick+0xe4>)
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005464:	f107 0210 	add.w	r2, r7, #16
 8005468:	f107 0314 	add.w	r3, r7, #20
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f001 f8e2 	bl	8006638 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800547e:	f001 f8b3 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 8005482:	6378      	str	r0, [r7, #52]	; 0x34
 8005484:	e004      	b.n	8005490 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005486:	f001 f8af 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 800548a:	4603      	mov	r3, r0
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	4a23      	ldr	r2, [pc, #140]	; (8005520 <HAL_InitTick+0xe8>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	0c9b      	lsrs	r3, r3, #18
 800549a:	3b01      	subs	r3, #1
 800549c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800549e:	4b21      	ldr	r3, [pc, #132]	; (8005524 <HAL_InitTick+0xec>)
 80054a0:	4a21      	ldr	r2, [pc, #132]	; (8005528 <HAL_InitTick+0xf0>)
 80054a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80054a4:	4b1f      	ldr	r3, [pc, #124]	; (8005524 <HAL_InitTick+0xec>)
 80054a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80054aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80054ac:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <HAL_InitTick+0xec>)
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80054b2:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <HAL_InitTick+0xec>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054b8:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <HAL_InitTick+0xec>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054be:	4b19      	ldr	r3, [pc, #100]	; (8005524 <HAL_InitTick+0xec>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80054c4:	4817      	ldr	r0, [pc, #92]	; (8005524 <HAL_InitTick+0xec>)
 80054c6:	f001 f8e9 	bl	800669c <HAL_TIM_Base_Init>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80054d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d11b      	bne.n	8005510 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80054d8:	4812      	ldr	r0, [pc, #72]	; (8005524 <HAL_InitTick+0xec>)
 80054da:	f001 f939 	bl	8006750 <HAL_TIM_Base_Start_IT>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80054e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d111      	bne.n	8005510 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80054ec:	2036      	movs	r0, #54	; 0x36
 80054ee:	f000 f99b 	bl	8005828 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d808      	bhi.n	800550a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80054f8:	2200      	movs	r2, #0
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	2036      	movs	r0, #54	; 0x36
 80054fe:	f000 f977 	bl	80057f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005502:	4a0a      	ldr	r2, [pc, #40]	; (800552c <HAL_InitTick+0xf4>)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	e002      	b.n	8005510 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005510:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005514:	4618      	mov	r0, r3
 8005516:	3738      	adds	r7, #56	; 0x38
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40023800 	.word	0x40023800
 8005520:	431bde83 	.word	0x431bde83
 8005524:	20014440 	.word	0x20014440
 8005528:	40001000 	.word	0x40001000
 800552c:	20000010 	.word	0x20000010

08005530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005534:	e7fe      	b.n	8005534 <NMI_Handler+0x4>

08005536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800553a:	e7fe      	b.n	800553a <HardFault_Handler+0x4>

0800553c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005540:	e7fe      	b.n	8005540 <MemManage_Handler+0x4>

08005542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005546:	e7fe      	b.n	8005546 <BusFault_Handler+0x4>

08005548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800554c:	e7fe      	b.n	800554c <UsageFault_Handler+0x4>

0800554e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800554e:	b480      	push	{r7}
 8005550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005552:	bf00      	nop
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005560:	4802      	ldr	r0, [pc, #8]	; (800556c <USART2_IRQHandler+0x10>)
 8005562:	f001 fc59 	bl	8006e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	200143d8 	.word	0x200143d8

08005570 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005574:	4802      	ldr	r0, [pc, #8]	; (8005580 <TIM6_DAC_IRQHandler+0x10>)
 8005576:	f001 f95b 	bl	8006830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20014440 	.word	0x20014440

08005584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <SystemInit+0x20>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <SystemInit+0x20>)
 8005590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005598:	bf00      	nop
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	e000ed00 	.word	0xe000ed00

080055a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055ac:	480d      	ldr	r0, [pc, #52]	; (80055e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055ae:	490e      	ldr	r1, [pc, #56]	; (80055e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055b0:	4a0e      	ldr	r2, [pc, #56]	; (80055ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055b4:	e002      	b.n	80055bc <LoopCopyDataInit>

080055b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ba:	3304      	adds	r3, #4

080055bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055c0:	d3f9      	bcc.n	80055b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055c2:	4a0b      	ldr	r2, [pc, #44]	; (80055f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055c4:	4c0b      	ldr	r4, [pc, #44]	; (80055f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055c8:	e001      	b.n	80055ce <LoopFillZerobss>

080055ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055cc:	3204      	adds	r2, #4

080055ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055d0:	d3fb      	bcc.n	80055ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055d2:	f7ff ffd7 	bl	8005584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055d6:	f002 fb87 	bl	8007ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055da:	f7ff f98f 	bl	80048fc <main>
  bx  lr    
 80055de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055e8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80055ec:	08007fa8 	.word	0x08007fa8
  ldr r2, =_sbss
 80055f0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80055f4:	2001448c 	.word	0x2001448c

080055f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055f8:	e7fe      	b.n	80055f8 <ADC_IRQHandler>
	...

080055fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <HAL_Init+0x40>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a0d      	ldr	r2, [pc, #52]	; (800563c <HAL_Init+0x40>)
 8005606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800560a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_Init+0x40>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a0a      	ldr	r2, [pc, #40]	; (800563c <HAL_Init+0x40>)
 8005612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <HAL_Init+0x40>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a07      	ldr	r2, [pc, #28]	; (800563c <HAL_Init+0x40>)
 800561e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005624:	2003      	movs	r0, #3
 8005626:	f000 f8d8 	bl	80057da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800562a:	2000      	movs	r0, #0
 800562c:	f7ff ff04 	bl	8005438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005630:	f7ff fe88 	bl	8005344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40023c00 	.word	0x40023c00

08005640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005644:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_IncTick+0x20>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <HAL_IncTick+0x24>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4413      	add	r3, r2
 8005650:	4a04      	ldr	r2, [pc, #16]	; (8005664 <HAL_IncTick+0x24>)
 8005652:	6013      	str	r3, [r2, #0]
}
 8005654:	bf00      	nop
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20000014 	.word	0x20000014
 8005664:	20014488 	.word	0x20014488

08005668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return uwTick;
 800566c:	4b03      	ldr	r3, [pc, #12]	; (800567c <HAL_GetTick+0x14>)
 800566e:	681b      	ldr	r3, [r3, #0]
}
 8005670:	4618      	mov	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20014488 	.word	0x20014488

08005680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005690:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800569c:	4013      	ands	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056b2:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <__NVIC_SetPriorityGrouping+0x44>)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	60d3      	str	r3, [r2, #12]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	e000ed00 	.word	0xe000ed00

080056c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <__NVIC_GetPriorityGrouping+0x18>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	0a1b      	lsrs	r3, r3, #8
 80056d2:	f003 0307 	and.w	r3, r3, #7
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	e000ed00 	.word	0xe000ed00

080056e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	db0b      	blt.n	800570e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	f003 021f 	and.w	r2, r3, #31
 80056fc:	4907      	ldr	r1, [pc, #28]	; (800571c <__NVIC_EnableIRQ+0x38>)
 80056fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	2001      	movs	r0, #1
 8005706:	fa00 f202 	lsl.w	r2, r0, r2
 800570a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	e000e100 	.word	0xe000e100

08005720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	6039      	str	r1, [r7, #0]
 800572a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800572c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005730:	2b00      	cmp	r3, #0
 8005732:	db0a      	blt.n	800574a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	490c      	ldr	r1, [pc, #48]	; (800576c <__NVIC_SetPriority+0x4c>)
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	0112      	lsls	r2, r2, #4
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	440b      	add	r3, r1
 8005744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005748:	e00a      	b.n	8005760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	4908      	ldr	r1, [pc, #32]	; (8005770 <__NVIC_SetPriority+0x50>)
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	3b04      	subs	r3, #4
 8005758:	0112      	lsls	r2, r2, #4
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	440b      	add	r3, r1
 800575e:	761a      	strb	r2, [r3, #24]
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	e000e100 	.word	0xe000e100
 8005770:	e000ed00 	.word	0xe000ed00

08005774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f1c3 0307 	rsb	r3, r3, #7
 800578e:	2b04      	cmp	r3, #4
 8005790:	bf28      	it	cs
 8005792:	2304      	movcs	r3, #4
 8005794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3304      	adds	r3, #4
 800579a:	2b06      	cmp	r3, #6
 800579c:	d902      	bls.n	80057a4 <NVIC_EncodePriority+0x30>
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3b03      	subs	r3, #3
 80057a2:	e000      	b.n	80057a6 <NVIC_EncodePriority+0x32>
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	43da      	mvns	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	401a      	ands	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	fa01 f303 	lsl.w	r3, r1, r3
 80057c6:	43d9      	mvns	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057cc:	4313      	orrs	r3, r2
         );
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3724      	adds	r7, #36	; 0x24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff ff4c 	bl	8005680 <__NVIC_SetPriorityGrouping>
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005802:	f7ff ff61 	bl	80056c8 <__NVIC_GetPriorityGrouping>
 8005806:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	6978      	ldr	r0, [r7, #20]
 800580e:	f7ff ffb1 	bl	8005774 <NVIC_EncodePriority>
 8005812:	4602      	mov	r2, r0
 8005814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005818:	4611      	mov	r1, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff ff80 	bl	8005720 <__NVIC_SetPriority>
}
 8005820:	bf00      	nop
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ff54 	bl	80056e4 <__NVIC_EnableIRQ>
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005850:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005852:	f7ff ff09 	bl	8005668 <HAL_GetTick>
 8005856:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d008      	beq.n	8005876 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2280      	movs	r2, #128	; 0x80
 8005868:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e052      	b.n	800591c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0216 	bic.w	r2, r2, #22
 8005884:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695a      	ldr	r2, [r3, #20]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005894:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d103      	bne.n	80058a6 <HAL_DMA_Abort+0x62>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d007      	beq.n	80058b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0208 	bic.w	r2, r2, #8
 80058b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0201 	bic.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058c6:	e013      	b.n	80058f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058c8:	f7ff fece 	bl	8005668 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b05      	cmp	r3, #5
 80058d4:	d90c      	bls.n	80058f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2203      	movs	r2, #3
 80058e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e015      	b.n	800591c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e4      	bne.n	80058c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005902:	223f      	movs	r2, #63	; 0x3f
 8005904:	409a      	lsls	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d004      	beq.n	8005942 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e00c      	b.n	800595c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2205      	movs	r2, #5
 8005946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	; 0x24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005976:	2300      	movs	r3, #0
 8005978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	e16b      	b.n	8005c5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005984:	2201      	movs	r2, #1
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4013      	ands	r3, r2
 8005996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	429a      	cmp	r2, r3
 800599e:	f040 815a 	bne.w	8005c56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d005      	beq.n	80059ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d130      	bne.n	8005a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	2203      	movs	r2, #3
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059f0:	2201      	movs	r2, #1
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4013      	ands	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 0201 	and.w	r2, r3, #1
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d017      	beq.n	8005a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	2203      	movs	r2, #3
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 0303 	and.w	r3, r3, #3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d123      	bne.n	8005aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	08da      	lsrs	r2, r3, #3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3208      	adds	r2, #8
 8005a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	220f      	movs	r2, #15
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	43db      	mvns	r3, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4013      	ands	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	08da      	lsrs	r2, r3, #3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3208      	adds	r2, #8
 8005aa6:	69b9      	ldr	r1, [r7, #24]
 8005aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43db      	mvns	r3, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f003 0203 	and.w	r2, r3, #3
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80b4 	beq.w	8005c56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	4b60      	ldr	r3, [pc, #384]	; (8005c74 <HAL_GPIO_Init+0x30c>)
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	4a5f      	ldr	r2, [pc, #380]	; (8005c74 <HAL_GPIO_Init+0x30c>)
 8005af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005afc:	6453      	str	r3, [r2, #68]	; 0x44
 8005afe:	4b5d      	ldr	r3, [pc, #372]	; (8005c74 <HAL_GPIO_Init+0x30c>)
 8005b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b0a:	4a5b      	ldr	r2, [pc, #364]	; (8005c78 <HAL_GPIO_Init+0x310>)
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	089b      	lsrs	r3, r3, #2
 8005b10:	3302      	adds	r3, #2
 8005b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	220f      	movs	r2, #15
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	43db      	mvns	r3, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a52      	ldr	r2, [pc, #328]	; (8005c7c <HAL_GPIO_Init+0x314>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d02b      	beq.n	8005b8e <HAL_GPIO_Init+0x226>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a51      	ldr	r2, [pc, #324]	; (8005c80 <HAL_GPIO_Init+0x318>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d025      	beq.n	8005b8a <HAL_GPIO_Init+0x222>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a50      	ldr	r2, [pc, #320]	; (8005c84 <HAL_GPIO_Init+0x31c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01f      	beq.n	8005b86 <HAL_GPIO_Init+0x21e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a4f      	ldr	r2, [pc, #316]	; (8005c88 <HAL_GPIO_Init+0x320>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d019      	beq.n	8005b82 <HAL_GPIO_Init+0x21a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a4e      	ldr	r2, [pc, #312]	; (8005c8c <HAL_GPIO_Init+0x324>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <HAL_GPIO_Init+0x216>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a4d      	ldr	r2, [pc, #308]	; (8005c90 <HAL_GPIO_Init+0x328>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00d      	beq.n	8005b7a <HAL_GPIO_Init+0x212>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a4c      	ldr	r2, [pc, #304]	; (8005c94 <HAL_GPIO_Init+0x32c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d007      	beq.n	8005b76 <HAL_GPIO_Init+0x20e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a4b      	ldr	r2, [pc, #300]	; (8005c98 <HAL_GPIO_Init+0x330>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d101      	bne.n	8005b72 <HAL_GPIO_Init+0x20a>
 8005b6e:	2307      	movs	r3, #7
 8005b70:	e00e      	b.n	8005b90 <HAL_GPIO_Init+0x228>
 8005b72:	2308      	movs	r3, #8
 8005b74:	e00c      	b.n	8005b90 <HAL_GPIO_Init+0x228>
 8005b76:	2306      	movs	r3, #6
 8005b78:	e00a      	b.n	8005b90 <HAL_GPIO_Init+0x228>
 8005b7a:	2305      	movs	r3, #5
 8005b7c:	e008      	b.n	8005b90 <HAL_GPIO_Init+0x228>
 8005b7e:	2304      	movs	r3, #4
 8005b80:	e006      	b.n	8005b90 <HAL_GPIO_Init+0x228>
 8005b82:	2303      	movs	r3, #3
 8005b84:	e004      	b.n	8005b90 <HAL_GPIO_Init+0x228>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e002      	b.n	8005b90 <HAL_GPIO_Init+0x228>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <HAL_GPIO_Init+0x228>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	f002 0203 	and.w	r2, r2, #3
 8005b96:	0092      	lsls	r2, r2, #2
 8005b98:	4093      	lsls	r3, r2
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ba0:	4935      	ldr	r1, [pc, #212]	; (8005c78 <HAL_GPIO_Init+0x310>)
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	089b      	lsrs	r3, r3, #2
 8005ba6:	3302      	adds	r3, #2
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bae:	4b3b      	ldr	r3, [pc, #236]	; (8005c9c <HAL_GPIO_Init+0x334>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bd2:	4a32      	ldr	r2, [pc, #200]	; (8005c9c <HAL_GPIO_Init+0x334>)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bd8:	4b30      	ldr	r3, [pc, #192]	; (8005c9c <HAL_GPIO_Init+0x334>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	43db      	mvns	r3, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4013      	ands	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bfc:	4a27      	ldr	r2, [pc, #156]	; (8005c9c <HAL_GPIO_Init+0x334>)
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c02:	4b26      	ldr	r3, [pc, #152]	; (8005c9c <HAL_GPIO_Init+0x334>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c26:	4a1d      	ldr	r2, [pc, #116]	; (8005c9c <HAL_GPIO_Init+0x334>)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <HAL_GPIO_Init+0x334>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	43db      	mvns	r3, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c50:	4a12      	ldr	r2, [pc, #72]	; (8005c9c <HAL_GPIO_Init+0x334>)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b0f      	cmp	r3, #15
 8005c60:	f67f ae90 	bls.w	8005984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	3724      	adds	r7, #36	; 0x24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40023800 	.word	0x40023800
 8005c78:	40013800 	.word	0x40013800
 8005c7c:	40020000 	.word	0x40020000
 8005c80:	40020400 	.word	0x40020400
 8005c84:	40020800 	.word	0x40020800
 8005c88:	40020c00 	.word	0x40020c00
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	40021400 	.word	0x40021400
 8005c94:	40021800 	.word	0x40021800
 8005c98:	40021c00 	.word	0x40021c00
 8005c9c:	40013c00 	.word	0x40013c00

08005ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	807b      	strh	r3, [r7, #2]
 8005cac:	4613      	mov	r3, r2
 8005cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cb0:	787b      	ldrb	r3, [r7, #1]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cb6:	887a      	ldrh	r2, [r7, #2]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005cbc:	e003      	b.n	8005cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005cbe:	887b      	ldrh	r3, [r7, #2]
 8005cc0:	041a      	lsls	r2, r3, #16
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	619a      	str	r2, [r3, #24]
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ce4:	887a      	ldrh	r2, [r7, #2]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	041a      	lsls	r2, r3, #16
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	43d9      	mvns	r1, r3
 8005cf0:	887b      	ldrh	r3, [r7, #2]
 8005cf2:	400b      	ands	r3, r1
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	619a      	str	r2, [r3, #24]
}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e267      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d075      	beq.n	8005e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d26:	4b88      	ldr	r3, [pc, #544]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d00c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d32:	4b85      	ldr	r3, [pc, #532]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d112      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d3e:	4b82      	ldr	r3, [pc, #520]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	4b7e      	ldr	r3, [pc, #504]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05b      	beq.n	8005e10 <HAL_RCC_OscConfig+0x108>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d157      	bne.n	8005e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e242      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCC_OscConfig+0x74>
 8005d6e:	4b76      	ldr	r3, [pc, #472]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a75      	ldr	r2, [pc, #468]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e01d      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x98>
 8005d86:	4b70      	ldr	r3, [pc, #448]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a6f      	ldr	r2, [pc, #444]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a6c      	ldr	r2, [pc, #432]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e00b      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005da0:	4b69      	ldr	r3, [pc, #420]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a68      	ldr	r2, [pc, #416]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b66      	ldr	r3, [pc, #408]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a65      	ldr	r2, [pc, #404]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc0:	f7ff fc52 	bl	8005668 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7ff fc4e 	bl	8005668 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	; 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e207      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	4b5b      	ldr	r3, [pc, #364]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0xc0>
 8005de6:	e014      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de8:	f7ff fc3e 	bl	8005668 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df0:	f7ff fc3a 	bl	8005668 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	; 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e1f3      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e02:	4b51      	ldr	r3, [pc, #324]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0xe8>
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d063      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e1e:	4b4a      	ldr	r3, [pc, #296]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e2a:	4b47      	ldr	r3, [pc, #284]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d11c      	bne.n	8005e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e36:	4b44      	ldr	r3, [pc, #272]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d116      	bne.n	8005e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e42:	4b41      	ldr	r3, [pc, #260]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_RCC_OscConfig+0x152>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d001      	beq.n	8005e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e1c7      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4937      	ldr	r1, [pc, #220]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6e:	e03a      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d020      	beq.n	8005eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e78:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <HAL_RCC_OscConfig+0x244>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7ff fbf3 	bl	8005668 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e86:	f7ff fbef 	bl	8005668 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e1a8      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e98:	4b2b      	ldr	r3, [pc, #172]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea4:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4925      	ldr	r1, [pc, #148]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	600b      	str	r3, [r1, #0]
 8005eb8:	e015      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eba:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <HAL_RCC_OscConfig+0x244>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7ff fbd2 	bl	8005668 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ec8:	f7ff fbce 	bl	8005668 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e187      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eda:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d036      	beq.n	8005f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <HAL_RCC_OscConfig+0x248>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f00:	f7ff fbb2 	bl	8005668 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f08:	f7ff fbae 	bl	8005668 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e167      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0x200>
 8005f26:	e01b      	b.n	8005f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f28:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCC_OscConfig+0x248>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f2e:	f7ff fb9b 	bl	8005668 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f34:	e00e      	b.n	8005f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f36:	f7ff fb97 	bl	8005668 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d907      	bls.n	8005f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e150      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	42470000 	.word	0x42470000
 8005f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f54:	4b88      	ldr	r3, [pc, #544]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ea      	bne.n	8005f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8097 	beq.w	800609c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f72:	4b81      	ldr	r3, [pc, #516]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10f      	bne.n	8005f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	4b7d      	ldr	r3, [pc, #500]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	4a7c      	ldr	r2, [pc, #496]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f8e:	4b7a      	ldr	r3, [pc, #488]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	4b77      	ldr	r3, [pc, #476]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d118      	bne.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005faa:	4b74      	ldr	r3, [pc, #464]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a73      	ldr	r2, [pc, #460]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb6:	f7ff fb57 	bl	8005668 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbe:	f7ff fb53 	bl	8005668 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e10c      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd0:	4b6a      	ldr	r3, [pc, #424]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x2ea>
 8005fe4:	4b64      	ldr	r3, [pc, #400]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe8:	4a63      	ldr	r2, [pc, #396]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff0:	e01c      	b.n	800602c <HAL_RCC_OscConfig+0x324>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0x30c>
 8005ffa:	4b5f      	ldr	r3, [pc, #380]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	4a5e      	ldr	r2, [pc, #376]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006000:	f043 0304 	orr.w	r3, r3, #4
 8006004:	6713      	str	r3, [r2, #112]	; 0x70
 8006006:	4b5c      	ldr	r3, [pc, #368]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	4a5b      	ldr	r2, [pc, #364]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	6713      	str	r3, [r2, #112]	; 0x70
 8006012:	e00b      	b.n	800602c <HAL_RCC_OscConfig+0x324>
 8006014:	4b58      	ldr	r3, [pc, #352]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	4a57      	ldr	r2, [pc, #348]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	6713      	str	r3, [r2, #112]	; 0x70
 8006020:	4b55      	ldr	r3, [pc, #340]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	4a54      	ldr	r2, [pc, #336]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006026:	f023 0304 	bic.w	r3, r3, #4
 800602a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006034:	f7ff fb18 	bl	8005668 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603a:	e00a      	b.n	8006052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800603c:	f7ff fb14 	bl	8005668 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f241 3288 	movw	r2, #5000	; 0x1388
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e0cb      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006052:	4b49      	ldr	r3, [pc, #292]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ee      	beq.n	800603c <HAL_RCC_OscConfig+0x334>
 800605e:	e014      	b.n	800608a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006060:	f7ff fb02 	bl	8005668 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006066:	e00a      	b.n	800607e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006068:	f7ff fafe 	bl	8005668 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f241 3288 	movw	r2, #5000	; 0x1388
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e0b5      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607e:	4b3e      	ldr	r3, [pc, #248]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1ee      	bne.n	8006068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d105      	bne.n	800609c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006090:	4b39      	ldr	r3, [pc, #228]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	4a38      	ldr	r2, [pc, #224]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 80a1 	beq.w	80061e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060a6:	4b34      	ldr	r3, [pc, #208]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d05c      	beq.n	800616c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d141      	bne.n	800613e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ba:	4b31      	ldr	r3, [pc, #196]	; (8006180 <HAL_RCC_OscConfig+0x478>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c0:	f7ff fad2 	bl	8005668 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060c8:	f7ff face 	bl	8005668 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e087      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	4b27      	ldr	r3, [pc, #156]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	019b      	lsls	r3, r3, #6
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	3b01      	subs	r3, #1
 8006100:	041b      	lsls	r3, r3, #16
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	061b      	lsls	r3, r3, #24
 800610a:	491b      	ldr	r1, [pc, #108]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 800610c:	4313      	orrs	r3, r2
 800610e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <HAL_RCC_OscConfig+0x478>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006116:	f7ff faa7 	bl	8005668 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611e:	f7ff faa3 	bl	8005668 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e05c      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006130:	4b11      	ldr	r3, [pc, #68]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x416>
 800613c:	e054      	b.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <HAL_RCC_OscConfig+0x478>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006144:	f7ff fa90 	bl	8005668 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800614c:	f7ff fa8c 	bl	8005668 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e045      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615e:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x444>
 800616a:	e03d      	b.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d107      	bne.n	8006184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e038      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
 8006178:	40023800 	.word	0x40023800
 800617c:	40007000 	.word	0x40007000
 8006180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006184:	4b1b      	ldr	r3, [pc, #108]	; (80061f4 <HAL_RCC_OscConfig+0x4ec>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d028      	beq.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619c:	429a      	cmp	r2, r3
 800619e:	d121      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d11a      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061bc:	4293      	cmp	r3, r2
 80061be:	d111      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	3b01      	subs	r3, #1
 80061ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d001      	beq.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40023800 	.word	0x40023800

080061f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0cc      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800620c:	4b68      	ldr	r3, [pc, #416]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d90c      	bls.n	8006234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b65      	ldr	r3, [pc, #404]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006222:	4b63      	ldr	r3, [pc, #396]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0b8      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d020      	beq.n	8006282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800624c:	4b59      	ldr	r3, [pc, #356]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4a58      	ldr	r2, [pc, #352]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006264:	4b53      	ldr	r3, [pc, #332]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4a52      	ldr	r2, [pc, #328]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800626e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006270:	4b50      	ldr	r3, [pc, #320]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	494d      	ldr	r1, [pc, #308]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	4313      	orrs	r3, r2
 8006280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d044      	beq.n	8006318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	4b47      	ldr	r3, [pc, #284]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d119      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e07f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d003      	beq.n	80062b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d107      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b6:	4b3f      	ldr	r3, [pc, #252]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e06f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c6:	4b3b      	ldr	r3, [pc, #236]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e067      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062d6:	4b37      	ldr	r3, [pc, #220]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f023 0203 	bic.w	r2, r3, #3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4934      	ldr	r1, [pc, #208]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062e8:	f7ff f9be 	bl	8005668 <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f0:	f7ff f9ba 	bl	8005668 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e04f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006306:	4b2b      	ldr	r3, [pc, #172]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 020c 	and.w	r2, r3, #12
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	429a      	cmp	r2, r3
 8006316:	d1eb      	bne.n	80062f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006318:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d20c      	bcs.n	8006340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006326:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800632e:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d001      	beq.n	8006340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e032      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800634c:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	4916      	ldr	r1, [pc, #88]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	4313      	orrs	r3, r2
 800635c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800636a:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	490e      	ldr	r1, [pc, #56]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	4313      	orrs	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800637e:	f000 f821 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
 8006382:	4602      	mov	r2, r0
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	490a      	ldr	r1, [pc, #40]	; (80063b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006390:	5ccb      	ldrb	r3, [r1, r3]
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <HAL_RCC_ClockConfig+0x1c4>)
 8006398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <HAL_RCC_ClockConfig+0x1c8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff f84a 	bl	8005438 <HAL_InitTick>

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40023c00 	.word	0x40023c00
 80063b4:	40023800 	.word	0x40023800
 80063b8:	08007f80 	.word	0x08007f80
 80063bc:	2000000c 	.word	0x2000000c
 80063c0:	20000010 	.word	0x20000010

080063c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c8:	b094      	sub	sp, #80	; 0x50
 80063ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	647b      	str	r3, [r7, #68]	; 0x44
 80063d0:	2300      	movs	r3, #0
 80063d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d4:	2300      	movs	r3, #0
 80063d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063dc:	4b79      	ldr	r3, [pc, #484]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 030c 	and.w	r3, r3, #12
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d00d      	beq.n	8006404 <HAL_RCC_GetSysClockFreq+0x40>
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	f200 80e1 	bhi.w	80065b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0x34>
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d003      	beq.n	80063fe <HAL_RCC_GetSysClockFreq+0x3a>
 80063f6:	e0db      	b.n	80065b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063f8:	4b73      	ldr	r3, [pc, #460]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80063fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063fc:	e0db      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063fe:	4b73      	ldr	r3, [pc, #460]	; (80065cc <HAL_RCC_GetSysClockFreq+0x208>)
 8006400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006402:	e0d8      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006404:	4b6f      	ldr	r3, [pc, #444]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800640c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800640e:	4b6d      	ldr	r3, [pc, #436]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d063      	beq.n	80064e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800641a:	4b6a      	ldr	r3, [pc, #424]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	2200      	movs	r2, #0
 8006422:	63bb      	str	r3, [r7, #56]	; 0x38
 8006424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	633b      	str	r3, [r7, #48]	; 0x30
 800642e:	2300      	movs	r3, #0
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
 8006432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006436:	4622      	mov	r2, r4
 8006438:	462b      	mov	r3, r5
 800643a:	f04f 0000 	mov.w	r0, #0
 800643e:	f04f 0100 	mov.w	r1, #0
 8006442:	0159      	lsls	r1, r3, #5
 8006444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006448:	0150      	lsls	r0, r2, #5
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4621      	mov	r1, r4
 8006450:	1a51      	subs	r1, r2, r1
 8006452:	6139      	str	r1, [r7, #16]
 8006454:	4629      	mov	r1, r5
 8006456:	eb63 0301 	sbc.w	r3, r3, r1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006468:	4659      	mov	r1, fp
 800646a:	018b      	lsls	r3, r1, #6
 800646c:	4651      	mov	r1, sl
 800646e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006472:	4651      	mov	r1, sl
 8006474:	018a      	lsls	r2, r1, #6
 8006476:	4651      	mov	r1, sl
 8006478:	ebb2 0801 	subs.w	r8, r2, r1
 800647c:	4659      	mov	r1, fp
 800647e:	eb63 0901 	sbc.w	r9, r3, r1
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800648e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006496:	4690      	mov	r8, r2
 8006498:	4699      	mov	r9, r3
 800649a:	4623      	mov	r3, r4
 800649c:	eb18 0303 	adds.w	r3, r8, r3
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	462b      	mov	r3, r5
 80064a4:	eb49 0303 	adc.w	r3, r9, r3
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064b6:	4629      	mov	r1, r5
 80064b8:	024b      	lsls	r3, r1, #9
 80064ba:	4621      	mov	r1, r4
 80064bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064c0:	4621      	mov	r1, r4
 80064c2:	024a      	lsls	r2, r1, #9
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ca:	2200      	movs	r2, #0
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064d4:	f7f9 fece 	bl	8000274 <__aeabi_uldivmod>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4613      	mov	r3, r2
 80064de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e0:	e058      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064e2:	4b38      	ldr	r3, [pc, #224]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	2200      	movs	r2, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	4611      	mov	r1, r2
 80064ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	2300      	movs	r3, #0
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
 80064f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	f04f 0000 	mov.w	r0, #0
 8006504:	f04f 0100 	mov.w	r1, #0
 8006508:	0159      	lsls	r1, r3, #5
 800650a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800650e:	0150      	lsls	r0, r2, #5
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4641      	mov	r1, r8
 8006516:	ebb2 0a01 	subs.w	sl, r2, r1
 800651a:	4649      	mov	r1, r9
 800651c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800652c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006534:	ebb2 040a 	subs.w	r4, r2, sl
 8006538:	eb63 050b 	sbc.w	r5, r3, fp
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	00eb      	lsls	r3, r5, #3
 8006546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800654a:	00e2      	lsls	r2, r4, #3
 800654c:	4614      	mov	r4, r2
 800654e:	461d      	mov	r5, r3
 8006550:	4643      	mov	r3, r8
 8006552:	18e3      	adds	r3, r4, r3
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	464b      	mov	r3, r9
 8006558:	eb45 0303 	adc.w	r3, r5, r3
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800656a:	4629      	mov	r1, r5
 800656c:	028b      	lsls	r3, r1, #10
 800656e:	4621      	mov	r1, r4
 8006570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006574:	4621      	mov	r1, r4
 8006576:	028a      	lsls	r2, r1, #10
 8006578:	4610      	mov	r0, r2
 800657a:	4619      	mov	r1, r3
 800657c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657e:	2200      	movs	r2, #0
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	61fa      	str	r2, [r7, #28]
 8006584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006588:	f7f9 fe74 	bl	8000274 <__aeabi_uldivmod>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4613      	mov	r3, r2
 8006592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006594:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	0c1b      	lsrs	r3, r3, #16
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	3301      	adds	r3, #1
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065ae:	e002      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065b0:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80065b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3750      	adds	r7, #80	; 0x50
 80065bc:	46bd      	mov	sp, r7
 80065be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800
 80065c8:	00f42400 	.word	0x00f42400
 80065cc:	007a1200 	.word	0x007a1200

080065d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065d4:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065d6:	681b      	ldr	r3, [r3, #0]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	2000000c 	.word	0x2000000c

080065e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065ec:	f7ff fff0 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	0a9b      	lsrs	r3, r3, #10
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	4903      	ldr	r1, [pc, #12]	; (800660c <HAL_RCC_GetPCLK1Freq+0x24>)
 80065fe:	5ccb      	ldrb	r3, [r1, r3]
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006604:	4618      	mov	r0, r3
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40023800 	.word	0x40023800
 800660c:	08007f90 	.word	0x08007f90

08006610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006614:	f7ff ffdc 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 8006618:	4602      	mov	r2, r0
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	0b5b      	lsrs	r3, r3, #13
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	4903      	ldr	r1, [pc, #12]	; (8006634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006626:	5ccb      	ldrb	r3, [r1, r3]
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800662c:	4618      	mov	r0, r3
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40023800 	.word	0x40023800
 8006634:	08007f90 	.word	0x08007f90

08006638 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	220f      	movs	r2, #15
 8006646:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006648:	4b12      	ldr	r3, [pc, #72]	; (8006694 <HAL_RCC_GetClockConfig+0x5c>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0203 	and.w	r2, r3, #3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006654:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <HAL_RCC_GetClockConfig+0x5c>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006660:	4b0c      	ldr	r3, [pc, #48]	; (8006694 <HAL_RCC_GetClockConfig+0x5c>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <HAL_RCC_GetClockConfig+0x5c>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	08db      	lsrs	r3, r3, #3
 8006672:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <HAL_RCC_GetClockConfig+0x60>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0207 	and.w	r2, r3, #7
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	601a      	str	r2, [r3, #0]
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40023800 	.word	0x40023800
 8006698:	40023c00 	.word	0x40023c00

0800669c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e041      	b.n	8006732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f839 	bl	800673a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f000 f9d8 	bl	8006a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	d001      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e04e      	b.n	8006806 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a23      	ldr	r2, [pc, #140]	; (8006814 <HAL_TIM_Base_Start_IT+0xc4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d022      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d01d      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1f      	ldr	r2, [pc, #124]	; (8006818 <HAL_TIM_Base_Start_IT+0xc8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d018      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1e      	ldr	r2, [pc, #120]	; (800681c <HAL_TIM_Base_Start_IT+0xcc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d013      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1c      	ldr	r2, [pc, #112]	; (8006820 <HAL_TIM_Base_Start_IT+0xd0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00e      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1b      	ldr	r2, [pc, #108]	; (8006824 <HAL_TIM_Base_Start_IT+0xd4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d009      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a19      	ldr	r2, [pc, #100]	; (8006828 <HAL_TIM_Base_Start_IT+0xd8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d004      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a18      	ldr	r2, [pc, #96]	; (800682c <HAL_TIM_Base_Start_IT+0xdc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d111      	bne.n	80067f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b06      	cmp	r3, #6
 80067e0:	d010      	beq.n	8006804 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f042 0201 	orr.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f2:	e007      	b.n	8006804 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40010000 	.word	0x40010000
 8006818:	40000400 	.word	0x40000400
 800681c:	40000800 	.word	0x40000800
 8006820:	40000c00 	.word	0x40000c00
 8006824:	40010400 	.word	0x40010400
 8006828:	40014000 	.word	0x40014000
 800682c:	40001800 	.word	0x40001800

08006830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b02      	cmp	r3, #2
 8006844:	d122      	bne.n	800688c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b02      	cmp	r3, #2
 8006852:	d11b      	bne.n	800688c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0202 	mvn.w	r2, #2
 800685c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f8ee 	bl	8006a54 <HAL_TIM_IC_CaptureCallback>
 8006878:	e005      	b.n	8006886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f8e0 	bl	8006a40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f8f1 	bl	8006a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b04      	cmp	r3, #4
 8006898:	d122      	bne.n	80068e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d11b      	bne.n	80068e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0204 	mvn.w	r2, #4
 80068b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f8c4 	bl	8006a54 <HAL_TIM_IC_CaptureCallback>
 80068cc:	e005      	b.n	80068da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8b6 	bl	8006a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f8c7 	bl	8006a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d122      	bne.n	8006934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d11b      	bne.n	8006934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0208 	mvn.w	r2, #8
 8006904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2204      	movs	r2, #4
 800690a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f89a 	bl	8006a54 <HAL_TIM_IC_CaptureCallback>
 8006920:	e005      	b.n	800692e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f88c 	bl	8006a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f89d 	bl	8006a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0310 	and.w	r3, r3, #16
 800693e:	2b10      	cmp	r3, #16
 8006940:	d122      	bne.n	8006988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b10      	cmp	r3, #16
 800694e:	d11b      	bne.n	8006988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f06f 0210 	mvn.w	r2, #16
 8006958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2208      	movs	r2, #8
 800695e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f870 	bl	8006a54 <HAL_TIM_IC_CaptureCallback>
 8006974:	e005      	b.n	8006982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f862 	bl	8006a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f873 	bl	8006a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10e      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d107      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0201 	mvn.w	r2, #1
 80069ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fe fcb0 	bl	8005314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069be:	2b80      	cmp	r3, #128	; 0x80
 80069c0:	d10e      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069cc:	2b80      	cmp	r3, #128	; 0x80
 80069ce:	d107      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f902 	bl	8006be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ea:	2b40      	cmp	r3, #64	; 0x40
 80069ec:	d10e      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d107      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f838 	bl	8006a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	d10e      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d107      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0220 	mvn.w	r2, #32
 8006a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8cc 	bl	8006bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a38:	bf00      	nop
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a40      	ldr	r2, [pc, #256]	; (8006ba4 <TIM_Base_SetConfig+0x114>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aae:	d00f      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a3d      	ldr	r2, [pc, #244]	; (8006ba8 <TIM_Base_SetConfig+0x118>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00b      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a3c      	ldr	r2, [pc, #240]	; (8006bac <TIM_Base_SetConfig+0x11c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a3b      	ldr	r2, [pc, #236]	; (8006bb0 <TIM_Base_SetConfig+0x120>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a3a      	ldr	r2, [pc, #232]	; (8006bb4 <TIM_Base_SetConfig+0x124>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d108      	bne.n	8006ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2f      	ldr	r2, [pc, #188]	; (8006ba4 <TIM_Base_SetConfig+0x114>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d02b      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af0:	d027      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2c      	ldr	r2, [pc, #176]	; (8006ba8 <TIM_Base_SetConfig+0x118>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d023      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2b      	ldr	r2, [pc, #172]	; (8006bac <TIM_Base_SetConfig+0x11c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d01f      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a2a      	ldr	r2, [pc, #168]	; (8006bb0 <TIM_Base_SetConfig+0x120>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01b      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a29      	ldr	r2, [pc, #164]	; (8006bb4 <TIM_Base_SetConfig+0x124>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d017      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a28      	ldr	r2, [pc, #160]	; (8006bb8 <TIM_Base_SetConfig+0x128>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a27      	ldr	r2, [pc, #156]	; (8006bbc <TIM_Base_SetConfig+0x12c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00f      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a26      	ldr	r2, [pc, #152]	; (8006bc0 <TIM_Base_SetConfig+0x130>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00b      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a25      	ldr	r2, [pc, #148]	; (8006bc4 <TIM_Base_SetConfig+0x134>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d007      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a24      	ldr	r2, [pc, #144]	; (8006bc8 <TIM_Base_SetConfig+0x138>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d003      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a23      	ldr	r2, [pc, #140]	; (8006bcc <TIM_Base_SetConfig+0x13c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d108      	bne.n	8006b54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ba4 <TIM_Base_SetConfig+0x114>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_Base_SetConfig+0xf8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a0c      	ldr	r2, [pc, #48]	; (8006bb4 <TIM_Base_SetConfig+0x124>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d103      	bne.n	8006b90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	615a      	str	r2, [r3, #20]
}
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40000400 	.word	0x40000400
 8006bac:	40000800 	.word	0x40000800
 8006bb0:	40000c00 	.word	0x40000c00
 8006bb4:	40010400 	.word	0x40010400
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40014400 	.word	0x40014400
 8006bc0:	40014800 	.word	0x40014800
 8006bc4:	40001800 	.word	0x40001800
 8006bc8:	40001c00 	.word	0x40001c00
 8006bcc:	40002000 	.word	0x40002000

08006bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e03f      	b.n	8006c8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7fe fbba 	bl	8005398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2224      	movs	r2, #36	; 0x24
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fddf 	bl	8007800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691a      	ldr	r2, [r3, #16]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695a      	ldr	r2, [r3, #20]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b08a      	sub	sp, #40	; 0x28
 8006c96:	af02      	add	r7, sp, #8
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	603b      	str	r3, [r7, #0]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d17c      	bne.n	8006dac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_UART_Transmit+0x2c>
 8006cb8:	88fb      	ldrh	r3, [r7, #6]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e075      	b.n	8006dae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_UART_Transmit+0x3e>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e06e      	b.n	8006dae <HAL_UART_Transmit+0x11c>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2221      	movs	r2, #33	; 0x21
 8006ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ce6:	f7fe fcbf 	bl	8005668 <HAL_GetTick>
 8006cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	88fa      	ldrh	r2, [r7, #6]
 8006cf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	88fa      	ldrh	r2, [r7, #6]
 8006cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d00:	d108      	bne.n	8006d14 <HAL_UART_Transmit+0x82>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d104      	bne.n	8006d14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	e003      	b.n	8006d1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d24:	e02a      	b.n	8006d7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2180      	movs	r1, #128	; 0x80
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fb1f 	bl	8007374 <UART_WaitOnFlagUntilTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e036      	b.n	8006dae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10b      	bne.n	8006d5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	3302      	adds	r3, #2
 8006d5a:	61bb      	str	r3, [r7, #24]
 8006d5c:	e007      	b.n	8006d6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	781a      	ldrb	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1cf      	bne.n	8006d26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2140      	movs	r1, #64	; 0x40
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 faef 	bl	8007374 <UART_WaitOnFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e006      	b.n	8006dae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	e000      	b.n	8006dae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006dac:	2302      	movs	r3, #2
  }
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3720      	adds	r7, #32
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d11d      	bne.n	8006e0c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <HAL_UART_Receive_IT+0x26>
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e016      	b.n	8006e0e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d101      	bne.n	8006dee <HAL_UART_Receive_IT+0x38>
 8006dea:	2302      	movs	r3, #2
 8006dec:	e00f      	b.n	8006e0e <HAL_UART_Receive_IT+0x58>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fb24 	bl	8007450 <UART_Start_Receive_IT>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	e000      	b.n	8006e0e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e0c:	2302      	movs	r3, #2
  }
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b0ba      	sub	sp, #232	; 0xe8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10f      	bne.n	8006e7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <HAL_UART_IRQHandler+0x66>
 8006e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fc07 	bl	800768a <UART_Receive_IT>
      return;
 8006e7c:	e256      	b.n	800732c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80de 	beq.w	8007044 <HAL_UART_IRQHandler+0x22c>
 8006e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 80d1 	beq.w	8007044 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00b      	beq.n	8006ec6 <HAL_UART_IRQHandler+0xae>
 8006eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d005      	beq.n	8006ec6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	f043 0201 	orr.w	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00b      	beq.n	8006eea <HAL_UART_IRQHandler+0xd2>
 8006ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	f043 0202 	orr.w	r2, r3, #2
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00b      	beq.n	8006f0e <HAL_UART_IRQHandler+0xf6>
 8006ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d005      	beq.n	8006f0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	f043 0204 	orr.w	r2, r3, #4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f12:	f003 0308 	and.w	r3, r3, #8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d011      	beq.n	8006f3e <HAL_UART_IRQHandler+0x126>
 8006f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d105      	bne.n	8006f32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f043 0208 	orr.w	r2, r3, #8
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 81ed 	beq.w	8007322 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d008      	beq.n	8006f66 <HAL_UART_IRQHandler+0x14e>
 8006f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fb92 	bl	800768a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f70:	2b40      	cmp	r3, #64	; 0x40
 8006f72:	bf0c      	ite	eq
 8006f74:	2301      	moveq	r3, #1
 8006f76:	2300      	movne	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <HAL_UART_IRQHandler+0x17a>
 8006f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d04f      	beq.n	8007032 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa9a 	bl	80074cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d141      	bne.n	800702a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3314      	adds	r3, #20
 8006fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1d9      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d013      	beq.n	8007022 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	4a7d      	ldr	r2, [pc, #500]	; (80071f4 <HAL_UART_IRQHandler+0x3dc>)
 8007000:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fc8c 	bl	8005924 <HAL_DMA_Abort_IT>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d016      	beq.n	8007040 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007020:	e00e      	b.n	8007040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f990 	bl	8007348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007028:	e00a      	b.n	8007040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f98c 	bl	8007348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007030:	e006      	b.n	8007040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f988 	bl	8007348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800703e:	e170      	b.n	8007322 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007040:	bf00      	nop
    return;
 8007042:	e16e      	b.n	8007322 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	2b01      	cmp	r3, #1
 800704a:	f040 814a 	bne.w	80072e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800704e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8143 	beq.w	80072e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800705c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 813c 	beq.w	80072e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800706a:	2300      	movs	r3, #0
 800706c:	60bb      	str	r3, [r7, #8]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	60bb      	str	r3, [r7, #8]
 800707e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708a:	2b40      	cmp	r3, #64	; 0x40
 800708c:	f040 80b4 	bne.w	80071f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800709c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 8140 	beq.w	8007326 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ae:	429a      	cmp	r2, r3
 80070b0:	f080 8139 	bcs.w	8007326 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c6:	f000 8088 	beq.w	80071da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
 80070d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	330c      	adds	r3, #12
 80070f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80070f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007102:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800710e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1d9      	bne.n	80070ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3314      	adds	r3, #20
 800711c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3314      	adds	r3, #20
 8007136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800713a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800713e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007142:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800714c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e1      	bne.n	8007116 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3314      	adds	r3, #20
 8007158:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007176:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007178:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800717c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e3      	bne.n	8007152 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	330c      	adds	r3, #12
 800719e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071aa:	f023 0310 	bic.w	r3, r3, #16
 80071ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80071bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80071be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e3      	bne.n	8007198 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fb35 	bl	8005844 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f8b6 	bl	800735c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071f0:	e099      	b.n	8007326 <HAL_UART_IRQHandler+0x50e>
 80071f2:	bf00      	nop
 80071f4:	08007593 	.word	0x08007593
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007200:	b29b      	uxth	r3, r3
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800720c:	b29b      	uxth	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 808b 	beq.w	800732a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8086 	beq.w	800732a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	330c      	adds	r3, #12
 8007224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800722e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	330c      	adds	r3, #12
 800723e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007242:	647a      	str	r2, [r7, #68]	; 0x44
 8007244:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e3      	bne.n	800721e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3314      	adds	r3, #20
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	623b      	str	r3, [r7, #32]
   return(result);
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3314      	adds	r3, #20
 8007276:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800727a:	633a      	str	r2, [r7, #48]	; 0x30
 800727c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e3      	bne.n	8007256 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	330c      	adds	r3, #12
 80072a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0310 	bic.w	r3, r3, #16
 80072b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80072c0:	61fa      	str	r2, [r7, #28]
 80072c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	69b9      	ldr	r1, [r7, #24]
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	617b      	str	r3, [r7, #20]
   return(result);
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e3      	bne.n	800729c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f83e 	bl	800735c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072e0:	e023      	b.n	800732a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d009      	beq.n	8007302 <HAL_UART_IRQHandler+0x4ea>
 80072ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f95d 	bl	80075ba <UART_Transmit_IT>
    return;
 8007300:	e014      	b.n	800732c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00e      	beq.n	800732c <HAL_UART_IRQHandler+0x514>
 800730e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f99d 	bl	800765a <UART_EndTransmit_IT>
    return;
 8007320:	e004      	b.n	800732c <HAL_UART_IRQHandler+0x514>
    return;
 8007322:	bf00      	nop
 8007324:	e002      	b.n	800732c <HAL_UART_IRQHandler+0x514>
      return;
 8007326:	bf00      	nop
 8007328:	e000      	b.n	800732c <HAL_UART_IRQHandler+0x514>
      return;
 800732a:	bf00      	nop
  }
}
 800732c:	37e8      	adds	r7, #232	; 0xe8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop

08007334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b090      	sub	sp, #64	; 0x40
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007384:	e050      	b.n	8007428 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800738c:	d04c      	beq.n	8007428 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800738e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007394:	f7fe f968 	bl	8005668 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d241      	bcs.n	8007428 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	330c      	adds	r3, #12
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	330c      	adds	r3, #12
 80073c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073c4:	637a      	str	r2, [r7, #52]	; 0x34
 80073c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e5      	bne.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3314      	adds	r3, #20
 80073de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	613b      	str	r3, [r7, #16]
   return(result);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f023 0301 	bic.w	r3, r3, #1
 80073ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3314      	adds	r3, #20
 80073f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073f8:	623a      	str	r2, [r7, #32]
 80073fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	69f9      	ldr	r1, [r7, #28]
 80073fe:	6a3a      	ldr	r2, [r7, #32]
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	61bb      	str	r3, [r7, #24]
   return(result);
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e5      	bne.n	80073d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e00f      	b.n	8007448 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4013      	ands	r3, r2
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	429a      	cmp	r2, r3
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	461a      	mov	r2, r3
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	429a      	cmp	r2, r3
 8007444:	d09f      	beq.n	8007386 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3740      	adds	r7, #64	; 0x40
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	88fa      	ldrh	r2, [r7, #6]
 8007468:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	88fa      	ldrh	r2, [r7, #6]
 800746e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2222      	movs	r2, #34	; 0x22
 800747a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800749c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0201 	orr.w	r2, r2, #1
 80074ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0220 	orr.w	r2, r2, #32
 80074bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b095      	sub	sp, #84	; 0x54
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	330c      	adds	r3, #12
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074de:	e853 3f00 	ldrex	r3, [r3]
 80074e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	330c      	adds	r3, #12
 80074f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074f4:	643a      	str	r2, [r7, #64]	; 0x40
 80074f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e5      	bne.n	80074d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3314      	adds	r3, #20
 800750e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	61fb      	str	r3, [r7, #28]
   return(result);
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3314      	adds	r3, #20
 8007526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800752a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800752e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e5      	bne.n	8007508 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	2b01      	cmp	r3, #1
 8007542:	d119      	bne.n	8007578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	330c      	adds	r3, #12
 800754a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	60bb      	str	r3, [r7, #8]
   return(result);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f023 0310 	bic.w	r3, r3, #16
 800755a:	647b      	str	r3, [r7, #68]	; 0x44
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	330c      	adds	r3, #12
 8007562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007564:	61ba      	str	r2, [r7, #24]
 8007566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	6979      	ldr	r1, [r7, #20]
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	613b      	str	r3, [r7, #16]
   return(result);
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e5      	bne.n	8007544 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007586:	bf00      	nop
 8007588:	3754      	adds	r7, #84	; 0x54
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f7ff fecb 	bl	8007348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075b2:	bf00      	nop
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b21      	cmp	r3, #33	; 0x21
 80075cc:	d13e      	bne.n	800764c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d6:	d114      	bne.n	8007602 <UART_Transmit_IT+0x48>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d110      	bne.n	8007602 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	1c9a      	adds	r2, r3, #2
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	621a      	str	r2, [r3, #32]
 8007600:	e008      	b.n	8007614 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	1c59      	adds	r1, r3, #1
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6211      	str	r1, [r2, #32]
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29b      	uxth	r3, r3
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	4619      	mov	r1, r3
 8007622:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10f      	bne.n	8007648 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007636:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007646:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	e000      	b.n	800764e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800764c:	2302      	movs	r3, #2
  }
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007670:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2220      	movs	r2, #32
 8007676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff fe5a 	bl	8007334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b08c      	sub	sp, #48	; 0x30
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b22      	cmp	r3, #34	; 0x22
 800769c:	f040 80ab 	bne.w	80077f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a8:	d117      	bne.n	80076da <UART_Receive_IT+0x50>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d113      	bne.n	80076da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	1c9a      	adds	r2, r3, #2
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	629a      	str	r2, [r3, #40]	; 0x28
 80076d8:	e026      	b.n	8007728 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ec:	d007      	beq.n	80076fe <UART_Receive_IT+0x74>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <UART_Receive_IT+0x82>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	b2da      	uxtb	r2, r3
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	e008      	b.n	800771e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007718:	b2da      	uxtb	r2, r3
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29b      	uxth	r3, r3
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	4619      	mov	r1, r3
 8007736:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007738:	2b00      	cmp	r3, #0
 800773a:	d15a      	bne.n	80077f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0220 	bic.w	r2, r2, #32
 800774a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800775a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695a      	ldr	r2, [r3, #20]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0201 	bic.w	r2, r2, #1
 800776a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	2b01      	cmp	r3, #1
 800777a:	d135      	bne.n	80077e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	330c      	adds	r3, #12
 8007788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	613b      	str	r3, [r7, #16]
   return(result);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f023 0310 	bic.w	r3, r3, #16
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	330c      	adds	r3, #12
 80077a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a2:	623a      	str	r2, [r7, #32]
 80077a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	69f9      	ldr	r1, [r7, #28]
 80077a8:	6a3a      	ldr	r2, [r7, #32]
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e5      	bne.n	8007782 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b10      	cmp	r3, #16
 80077c2:	d10a      	bne.n	80077da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff fdbb 	bl	800735c <HAL_UARTEx_RxEventCallback>
 80077e6:	e002      	b.n	80077ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7fd fd3d 	bl	8005268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	e002      	b.n	80077f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e000      	b.n	80077f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80077f6:	2302      	movs	r3, #2
  }
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3730      	adds	r7, #48	; 0x30
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007804:	b0c0      	sub	sp, #256	; 0x100
 8007806:	af00      	add	r7, sp, #0
 8007808:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800780c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800781c:	68d9      	ldr	r1, [r3, #12]
 800781e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	ea40 0301 	orr.w	r3, r0, r1
 8007828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800782a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	431a      	orrs	r2, r3
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	431a      	orrs	r2, r3
 8007840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	4313      	orrs	r3, r2
 8007848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800784c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007858:	f021 010c 	bic.w	r1, r1, #12
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007866:	430b      	orrs	r3, r1
 8007868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800786a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800787a:	6999      	ldr	r1, [r3, #24]
 800787c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	ea40 0301 	orr.w	r3, r0, r1
 8007886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	4b8f      	ldr	r3, [pc, #572]	; (8007acc <UART_SetConfig+0x2cc>)
 8007890:	429a      	cmp	r2, r3
 8007892:	d005      	beq.n	80078a0 <UART_SetConfig+0xa0>
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4b8d      	ldr	r3, [pc, #564]	; (8007ad0 <UART_SetConfig+0x2d0>)
 800789c:	429a      	cmp	r2, r3
 800789e:	d104      	bne.n	80078aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078a0:	f7fe feb6 	bl	8006610 <HAL_RCC_GetPCLK2Freq>
 80078a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80078a8:	e003      	b.n	80078b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078aa:	f7fe fe9d 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 80078ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078bc:	f040 810c 	bne.w	8007ad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80078ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80078d2:	4622      	mov	r2, r4
 80078d4:	462b      	mov	r3, r5
 80078d6:	1891      	adds	r1, r2, r2
 80078d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80078da:	415b      	adcs	r3, r3
 80078dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80078e2:	4621      	mov	r1, r4
 80078e4:	eb12 0801 	adds.w	r8, r2, r1
 80078e8:	4629      	mov	r1, r5
 80078ea:	eb43 0901 	adc.w	r9, r3, r1
 80078ee:	f04f 0200 	mov.w	r2, #0
 80078f2:	f04f 0300 	mov.w	r3, #0
 80078f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007902:	4690      	mov	r8, r2
 8007904:	4699      	mov	r9, r3
 8007906:	4623      	mov	r3, r4
 8007908:	eb18 0303 	adds.w	r3, r8, r3
 800790c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007910:	462b      	mov	r3, r5
 8007912:	eb49 0303 	adc.w	r3, r9, r3
 8007916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800791a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007926:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800792a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800792e:	460b      	mov	r3, r1
 8007930:	18db      	adds	r3, r3, r3
 8007932:	653b      	str	r3, [r7, #80]	; 0x50
 8007934:	4613      	mov	r3, r2
 8007936:	eb42 0303 	adc.w	r3, r2, r3
 800793a:	657b      	str	r3, [r7, #84]	; 0x54
 800793c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007944:	f7f8 fc96 	bl	8000274 <__aeabi_uldivmod>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4b61      	ldr	r3, [pc, #388]	; (8007ad4 <UART_SetConfig+0x2d4>)
 800794e:	fba3 2302 	umull	r2, r3, r3, r2
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	011c      	lsls	r4, r3, #4
 8007956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800795a:	2200      	movs	r2, #0
 800795c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007960:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	1891      	adds	r1, r2, r2
 800796e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007970:	415b      	adcs	r3, r3
 8007972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007978:	4641      	mov	r1, r8
 800797a:	eb12 0a01 	adds.w	sl, r2, r1
 800797e:	4649      	mov	r1, r9
 8007980:	eb43 0b01 	adc.w	fp, r3, r1
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007998:	4692      	mov	sl, r2
 800799a:	469b      	mov	fp, r3
 800799c:	4643      	mov	r3, r8
 800799e:	eb1a 0303 	adds.w	r3, sl, r3
 80079a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079a6:	464b      	mov	r3, r9
 80079a8:	eb4b 0303 	adc.w	r3, fp, r3
 80079ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80079c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80079c4:	460b      	mov	r3, r1
 80079c6:	18db      	adds	r3, r3, r3
 80079c8:	643b      	str	r3, [r7, #64]	; 0x40
 80079ca:	4613      	mov	r3, r2
 80079cc:	eb42 0303 	adc.w	r3, r2, r3
 80079d0:	647b      	str	r3, [r7, #68]	; 0x44
 80079d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80079da:	f7f8 fc4b 	bl	8000274 <__aeabi_uldivmod>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4611      	mov	r1, r2
 80079e4:	4b3b      	ldr	r3, [pc, #236]	; (8007ad4 <UART_SetConfig+0x2d4>)
 80079e6:	fba3 2301 	umull	r2, r3, r3, r1
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	2264      	movs	r2, #100	; 0x64
 80079ee:	fb02 f303 	mul.w	r3, r2, r3
 80079f2:	1acb      	subs	r3, r1, r3
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80079fa:	4b36      	ldr	r3, [pc, #216]	; (8007ad4 <UART_SetConfig+0x2d4>)
 80079fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a08:	441c      	add	r4, r3
 8007a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	464b      	mov	r3, r9
 8007a20:	1891      	adds	r1, r2, r2
 8007a22:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a24:	415b      	adcs	r3, r3
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a2c:	4641      	mov	r1, r8
 8007a2e:	1851      	adds	r1, r2, r1
 8007a30:	6339      	str	r1, [r7, #48]	; 0x30
 8007a32:	4649      	mov	r1, r9
 8007a34:	414b      	adcs	r3, r1
 8007a36:	637b      	str	r3, [r7, #52]	; 0x34
 8007a38:	f04f 0200 	mov.w	r2, #0
 8007a3c:	f04f 0300 	mov.w	r3, #0
 8007a40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a44:	4659      	mov	r1, fp
 8007a46:	00cb      	lsls	r3, r1, #3
 8007a48:	4651      	mov	r1, sl
 8007a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a4e:	4651      	mov	r1, sl
 8007a50:	00ca      	lsls	r2, r1, #3
 8007a52:	4610      	mov	r0, r2
 8007a54:	4619      	mov	r1, r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	4642      	mov	r2, r8
 8007a5a:	189b      	adds	r3, r3, r2
 8007a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a60:	464b      	mov	r3, r9
 8007a62:	460a      	mov	r2, r1
 8007a64:	eb42 0303 	adc.w	r3, r2, r3
 8007a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a80:	460b      	mov	r3, r1
 8007a82:	18db      	adds	r3, r3, r3
 8007a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a86:	4613      	mov	r3, r2
 8007a88:	eb42 0303 	adc.w	r3, r2, r3
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007a96:	f7f8 fbed 	bl	8000274 <__aeabi_uldivmod>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <UART_SetConfig+0x2d4>)
 8007aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	2164      	movs	r1, #100	; 0x64
 8007aa8:	fb01 f303 	mul.w	r3, r1, r3
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	3332      	adds	r3, #50	; 0x32
 8007ab2:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <UART_SetConfig+0x2d4>)
 8007ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	f003 0207 	and.w	r2, r3, #7
 8007abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4422      	add	r2, r4
 8007ac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ac8:	e105      	b.n	8007cd6 <UART_SetConfig+0x4d6>
 8007aca:	bf00      	nop
 8007acc:	40011000 	.word	0x40011000
 8007ad0:	40011400 	.word	0x40011400
 8007ad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ae2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007aea:	4642      	mov	r2, r8
 8007aec:	464b      	mov	r3, r9
 8007aee:	1891      	adds	r1, r2, r2
 8007af0:	6239      	str	r1, [r7, #32]
 8007af2:	415b      	adcs	r3, r3
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
 8007af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007afa:	4641      	mov	r1, r8
 8007afc:	1854      	adds	r4, r2, r1
 8007afe:	4649      	mov	r1, r9
 8007b00:	eb43 0501 	adc.w	r5, r3, r1
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	00eb      	lsls	r3, r5, #3
 8007b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b12:	00e2      	lsls	r2, r4, #3
 8007b14:	4614      	mov	r4, r2
 8007b16:	461d      	mov	r5, r3
 8007b18:	4643      	mov	r3, r8
 8007b1a:	18e3      	adds	r3, r4, r3
 8007b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b20:	464b      	mov	r3, r9
 8007b22:	eb45 0303 	adc.w	r3, r5, r3
 8007b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b46:	4629      	mov	r1, r5
 8007b48:	008b      	lsls	r3, r1, #2
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b50:	4621      	mov	r1, r4
 8007b52:	008a      	lsls	r2, r1, #2
 8007b54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b58:	f7f8 fb8c 	bl	8000274 <__aeabi_uldivmod>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4b60      	ldr	r3, [pc, #384]	; (8007ce4 <UART_SetConfig+0x4e4>)
 8007b62:	fba3 2302 	umull	r2, r3, r3, r2
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	011c      	lsls	r4, r3, #4
 8007b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	1891      	adds	r1, r2, r2
 8007b82:	61b9      	str	r1, [r7, #24]
 8007b84:	415b      	adcs	r3, r3
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	1851      	adds	r1, r2, r1
 8007b90:	6139      	str	r1, [r7, #16]
 8007b92:	4649      	mov	r1, r9
 8007b94:	414b      	adcs	r3, r1
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ba4:	4659      	mov	r1, fp
 8007ba6:	00cb      	lsls	r3, r1, #3
 8007ba8:	4651      	mov	r1, sl
 8007baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bae:	4651      	mov	r1, sl
 8007bb0:	00ca      	lsls	r2, r1, #3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4642      	mov	r2, r8
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bc0:	464b      	mov	r3, r9
 8007bc2:	460a      	mov	r2, r1
 8007bc4:	eb42 0303 	adc.w	r3, r2, r3
 8007bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007be4:	4649      	mov	r1, r9
 8007be6:	008b      	lsls	r3, r1, #2
 8007be8:	4641      	mov	r1, r8
 8007bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bee:	4641      	mov	r1, r8
 8007bf0:	008a      	lsls	r2, r1, #2
 8007bf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007bf6:	f7f8 fb3d 	bl	8000274 <__aeabi_uldivmod>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4b39      	ldr	r3, [pc, #228]	; (8007ce4 <UART_SetConfig+0x4e4>)
 8007c00:	fba3 1302 	umull	r1, r3, r3, r2
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	2164      	movs	r1, #100	; 0x64
 8007c08:	fb01 f303 	mul.w	r3, r1, r3
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	3332      	adds	r3, #50	; 0x32
 8007c12:	4a34      	ldr	r2, [pc, #208]	; (8007ce4 <UART_SetConfig+0x4e4>)
 8007c14:	fba2 2303 	umull	r2, r3, r2, r3
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c1e:	441c      	add	r4, r3
 8007c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c24:	2200      	movs	r2, #0
 8007c26:	673b      	str	r3, [r7, #112]	; 0x70
 8007c28:	677a      	str	r2, [r7, #116]	; 0x74
 8007c2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c2e:	4642      	mov	r2, r8
 8007c30:	464b      	mov	r3, r9
 8007c32:	1891      	adds	r1, r2, r2
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	415b      	adcs	r3, r3
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c3e:	4641      	mov	r1, r8
 8007c40:	1851      	adds	r1, r2, r1
 8007c42:	6039      	str	r1, [r7, #0]
 8007c44:	4649      	mov	r1, r9
 8007c46:	414b      	adcs	r3, r1
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c56:	4659      	mov	r1, fp
 8007c58:	00cb      	lsls	r3, r1, #3
 8007c5a:	4651      	mov	r1, sl
 8007c5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c60:	4651      	mov	r1, sl
 8007c62:	00ca      	lsls	r2, r1, #3
 8007c64:	4610      	mov	r0, r2
 8007c66:	4619      	mov	r1, r3
 8007c68:	4603      	mov	r3, r0
 8007c6a:	4642      	mov	r2, r8
 8007c6c:	189b      	adds	r3, r3, r2
 8007c6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c70:	464b      	mov	r3, r9
 8007c72:	460a      	mov	r2, r1
 8007c74:	eb42 0303 	adc.w	r3, r2, r3
 8007c78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	663b      	str	r3, [r7, #96]	; 0x60
 8007c84:	667a      	str	r2, [r7, #100]	; 0x64
 8007c86:	f04f 0200 	mov.w	r2, #0
 8007c8a:	f04f 0300 	mov.w	r3, #0
 8007c8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007c92:	4649      	mov	r1, r9
 8007c94:	008b      	lsls	r3, r1, #2
 8007c96:	4641      	mov	r1, r8
 8007c98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	008a      	lsls	r2, r1, #2
 8007ca0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ca4:	f7f8 fae6 	bl	8000274 <__aeabi_uldivmod>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <UART_SetConfig+0x4e4>)
 8007cae:	fba3 1302 	umull	r1, r3, r3, r2
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	2164      	movs	r1, #100	; 0x64
 8007cb6:	fb01 f303 	mul.w	r3, r1, r3
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	3332      	adds	r3, #50	; 0x32
 8007cc0:	4a08      	ldr	r2, [pc, #32]	; (8007ce4 <UART_SetConfig+0x4e4>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	f003 020f 	and.w	r2, r3, #15
 8007ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4422      	add	r2, r4
 8007cd4:	609a      	str	r2, [r3, #8]
}
 8007cd6:	bf00      	nop
 8007cd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ce2:	bf00      	nop
 8007ce4:	51eb851f 	.word	0x51eb851f

08007ce8 <__libc_init_array>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	4d0d      	ldr	r5, [pc, #52]	; (8007d20 <__libc_init_array+0x38>)
 8007cec:	4c0d      	ldr	r4, [pc, #52]	; (8007d24 <__libc_init_array+0x3c>)
 8007cee:	1b64      	subs	r4, r4, r5
 8007cf0:	10a4      	asrs	r4, r4, #2
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	42a6      	cmp	r6, r4
 8007cf6:	d109      	bne.n	8007d0c <__libc_init_array+0x24>
 8007cf8:	4d0b      	ldr	r5, [pc, #44]	; (8007d28 <__libc_init_array+0x40>)
 8007cfa:	4c0c      	ldr	r4, [pc, #48]	; (8007d2c <__libc_init_array+0x44>)
 8007cfc:	f000 f83e 	bl	8007d7c <_init>
 8007d00:	1b64      	subs	r4, r4, r5
 8007d02:	10a4      	asrs	r4, r4, #2
 8007d04:	2600      	movs	r6, #0
 8007d06:	42a6      	cmp	r6, r4
 8007d08:	d105      	bne.n	8007d16 <__libc_init_array+0x2e>
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d10:	4798      	blx	r3
 8007d12:	3601      	adds	r6, #1
 8007d14:	e7ee      	b.n	8007cf4 <__libc_init_array+0xc>
 8007d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1a:	4798      	blx	r3
 8007d1c:	3601      	adds	r6, #1
 8007d1e:	e7f2      	b.n	8007d06 <__libc_init_array+0x1e>
 8007d20:	08007fa0 	.word	0x08007fa0
 8007d24:	08007fa0 	.word	0x08007fa0
 8007d28:	08007fa0 	.word	0x08007fa0
 8007d2c:	08007fa4 	.word	0x08007fa4

08007d30 <memcmp>:
 8007d30:	b510      	push	{r4, lr}
 8007d32:	3901      	subs	r1, #1
 8007d34:	4402      	add	r2, r0
 8007d36:	4290      	cmp	r0, r2
 8007d38:	d101      	bne.n	8007d3e <memcmp+0xe>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e005      	b.n	8007d4a <memcmp+0x1a>
 8007d3e:	7803      	ldrb	r3, [r0, #0]
 8007d40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	d001      	beq.n	8007d4c <memcmp+0x1c>
 8007d48:	1b18      	subs	r0, r3, r4
 8007d4a:	bd10      	pop	{r4, pc}
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	e7f2      	b.n	8007d36 <memcmp+0x6>

08007d50 <memcpy>:
 8007d50:	440a      	add	r2, r1
 8007d52:	4291      	cmp	r1, r2
 8007d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d58:	d100      	bne.n	8007d5c <memcpy+0xc>
 8007d5a:	4770      	bx	lr
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d66:	4291      	cmp	r1, r2
 8007d68:	d1f9      	bne.n	8007d5e <memcpy+0xe>
 8007d6a:	bd10      	pop	{r4, pc}

08007d6c <memset>:
 8007d6c:	4402      	add	r2, r0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d100      	bne.n	8007d76 <memset+0xa>
 8007d74:	4770      	bx	lr
 8007d76:	f803 1b01 	strb.w	r1, [r3], #1
 8007d7a:	e7f9      	b.n	8007d70 <memset+0x4>

08007d7c <_init>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	bf00      	nop
 8007d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d82:	bc08      	pop	{r3}
 8007d84:	469e      	mov	lr, r3
 8007d86:	4770      	bx	lr

08007d88 <_fini>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	bf00      	nop
 8007d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8e:	bc08      	pop	{r3}
 8007d90:	469e      	mov	lr, r3
 8007d92:	4770      	bx	lr
