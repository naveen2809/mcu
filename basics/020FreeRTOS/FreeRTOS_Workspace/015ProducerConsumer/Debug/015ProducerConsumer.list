
015ProducerConsumer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ecc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061cc  080061cc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d4  080061d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080061dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00015020  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20015034  20015034  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000131fc  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aed  00000000  00000000  00033240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00035d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00036f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002093c  00000000  00000000  00037f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013edb  00000000  00000000  000588d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c7b  00000000  00000000  0006c7af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014342a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ae4  00000000  00000000  0014347c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006044 	.word	0x08006044

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006044 	.word	0x08006044

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e00 	.word	0x20012e00

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f103 0208 	add.w	r2, r3, #8
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000580:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f103 0208 	add.w	r2, r3, #8
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f103 0208 	add.w	r2, r3, #8
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689a      	ldr	r2, [r3, #8]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	601a      	str	r2, [r3, #0]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000620:	d103      	bne.n	800062a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e00c      	b.n	8000644 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3308      	adds	r3, #8
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e002      	b.n	8000638 <vListInsert+0x2e>
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	429a      	cmp	r2, r3
 8000642:	d2f6      	bcs.n	8000632 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	6892      	ldr	r2, [r2, #8]
 8000692:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	6852      	ldr	r2, [r2, #4]
 800069c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d103      	bne.n	80006b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1e5a      	subs	r2, r3, #1
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10a      	bne.n	80006fa <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e8:	f383 8811 	msr	BASEPRI, r3
 80006ec:	f3bf 8f6f 	isb	sy
 80006f0:	f3bf 8f4f 	dsb	sy
 80006f4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006f6:	bf00      	nop
 80006f8:	e7fe      	b.n	80006f8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80006fa:	f001 fd43 	bl	8002184 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000706:	68f9      	ldr	r1, [r7, #12]
 8000708:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	441a      	add	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800072a:	3b01      	subs	r3, #1
 800072c:	68f9      	ldr	r1, [r7, #12]
 800072e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000730:	fb01 f303 	mul.w	r3, r1, r3
 8000734:	441a      	add	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	22ff      	movs	r2, #255	; 0xff
 800073e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d114      	bne.n	800077a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d01a      	beq.n	800078e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3310      	adds	r3, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f000 ffa5 	bl	80016ac <xTaskRemoveFromEventList>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d012      	beq.n	800078e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <xQueueGenericReset+0xcc>)
 800076a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	f3bf 8f6f 	isb	sy
 8000778:	e009      	b.n	800078e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3310      	adds	r3, #16
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fef2 	bl	8000568 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3324      	adds	r3, #36	; 0x24
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff feed 	bl	8000568 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800078e:	f001 fd29 	bl	80021e4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	e000ed04 	.word	0xe000ed04

080007a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	4613      	mov	r3, r2
 80007ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10a      	bne.n	80007ca <xQueueGenericCreate+0x2a>
        __asm volatile
 80007b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b8:	f383 8811 	msr	BASEPRI, r3
 80007bc:	f3bf 8f6f 	isb	sy
 80007c0:	f3bf 8f4f 	dsb	sy
 80007c4:	61bb      	str	r3, [r7, #24]
    }
 80007c6:	bf00      	nop
 80007c8:	e7fe      	b.n	80007c8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	fb02 f303 	mul.w	r3, r2, r3
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d006      	beq.n	80007e8 <xQueueGenericCreate+0x48>
 80007da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d101      	bne.n	80007ec <xQueueGenericCreate+0x4c>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e000      	b.n	80007ee <xQueueGenericCreate+0x4e>
 80007ec:	2300      	movs	r3, #0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10a      	bne.n	8000808 <xQueueGenericCreate+0x68>
        __asm volatile
 80007f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f6:	f383 8811 	msr	BASEPRI, r3
 80007fa:	f3bf 8f6f 	isb	sy
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	617b      	str	r3, [r7, #20]
    }
 8000804:	bf00      	nop
 8000806:	e7fe      	b.n	8000806 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800080e:	d90a      	bls.n	8000826 <xQueueGenericCreate+0x86>
        __asm volatile
 8000810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000814:	f383 8811 	msr	BASEPRI, r3
 8000818:	f3bf 8f6f 	isb	sy
 800081c:	f3bf 8f4f 	dsb	sy
 8000820:	613b      	str	r3, [r7, #16]
    }
 8000822:	bf00      	nop
 8000824:	e7fe      	b.n	8000824 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	3350      	adds	r3, #80	; 0x50
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fdd6 	bl	80023dc <pvPortMalloc>
 8000830:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00d      	beq.n	8000854 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000838:	6a3b      	ldr	r3, [r7, #32]
 800083a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	3350      	adds	r3, #80	; 0x50
 8000840:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	4613      	mov	r3, r2
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f000 f805 	bl	800085e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000854:	6a3b      	ldr	r3, [r7, #32]
    }
 8000856:	4618      	mov	r0, r3
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b084      	sub	sp, #16
 8000862:	af00      	add	r7, sp, #0
 8000864:	60f8      	str	r0, [r7, #12]
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d103      	bne.n	800087a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e002      	b.n	8000880 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800088c:	2101      	movs	r1, #1
 800088e:	69b8      	ldr	r0, [r7, #24]
 8000890:	f7ff ff1e 	bl	80006d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	78fa      	ldrb	r2, [r7, #3]
 8000898:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	68f9      	ldr	r1, [r7, #12]
 80008a2:	2073      	movs	r0, #115	; 0x73
 80008a4:	f002 fe8e 	bl	80035c4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80008c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10a      	bne.n	80008e2 <xQueueGenericSend+0x32>
        __asm volatile
 80008cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d0:	f383 8811 	msr	BASEPRI, r3
 80008d4:	f3bf 8f6f 	isb	sy
 80008d8:	f3bf 8f4f 	dsb	sy
 80008dc:	623b      	str	r3, [r7, #32]
    }
 80008de:	bf00      	nop
 80008e0:	e7fe      	b.n	80008e0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d103      	bne.n	80008f0 <xQueueGenericSend+0x40>
 80008e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d101      	bne.n	80008f4 <xQueueGenericSend+0x44>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e000      	b.n	80008f6 <xQueueGenericSend+0x46>
 80008f4:	2300      	movs	r3, #0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10a      	bne.n	8000910 <xQueueGenericSend+0x60>
        __asm volatile
 80008fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008fe:	f383 8811 	msr	BASEPRI, r3
 8000902:	f3bf 8f6f 	isb	sy
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	61fb      	str	r3, [r7, #28]
    }
 800090c:	bf00      	nop
 800090e:	e7fe      	b.n	800090e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d103      	bne.n	800091e <xQueueGenericSend+0x6e>
 8000916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800091a:	2b01      	cmp	r3, #1
 800091c:	d101      	bne.n	8000922 <xQueueGenericSend+0x72>
 800091e:	2301      	movs	r3, #1
 8000920:	e000      	b.n	8000924 <xQueueGenericSend+0x74>
 8000922:	2300      	movs	r3, #0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d10a      	bne.n	800093e <xQueueGenericSend+0x8e>
        __asm volatile
 8000928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800092c:	f383 8811 	msr	BASEPRI, r3
 8000930:	f3bf 8f6f 	isb	sy
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	61bb      	str	r3, [r7, #24]
    }
 800093a:	bf00      	nop
 800093c:	e7fe      	b.n	800093c <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800093e:	f001 fc21 	bl	8002184 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094a:	429a      	cmp	r2, r3
 800094c:	d302      	bcc.n	8000954 <xQueueGenericSend+0xa4>
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2b02      	cmp	r3, #2
 8000952:	d136      	bne.n	80009c2 <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 8000954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000956:	4618      	mov	r0, r3
 8000958:	f003 fbc0 	bl	80040dc <SEGGER_SYSVIEW_ShrinkId>
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	460b      	mov	r3, r1
 8000966:	4601      	mov	r1, r0
 8000968:	205a      	movs	r0, #90	; 0x5a
 800096a:	f002 fea1 	bl	80036b0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000974:	f000 f9e6 	bl	8000d44 <prvCopyDataToQueue>
 8000978:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097e:	2b00      	cmp	r3, #0
 8000980:	d010      	beq.n	80009a4 <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000984:	3324      	adds	r3, #36	; 0x24
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fe90 	bl	80016ac <xTaskRemoveFromEventList>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d013      	beq.n	80009ba <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000992:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <xQueueGenericSend+0x218>)
 8000994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	f3bf 8f4f 	dsb	sy
 800099e:	f3bf 8f6f 	isb	sy
 80009a2:	e00a      	b.n	80009ba <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d007      	beq.n	80009ba <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009aa:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <xQueueGenericSend+0x218>)
 80009ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	f3bf 8f4f 	dsb	sy
 80009b6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009ba:	f001 fc13 	bl	80021e4 <vPortExitCritical>
                return pdPASS;
 80009be:	2301      	movs	r3, #1
 80009c0:	e07d      	b.n	8000abe <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d110      	bne.n	80009ea <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009c8:	f001 fc0c 	bl	80021e4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80009cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fb84 	bl	80040dc <SEGGER_SYSVIEW_ShrinkId>
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	460b      	mov	r3, r1
 80009de:	4601      	mov	r1, r0
 80009e0:	205a      	movs	r0, #90	; 0x5a
 80009e2:	f002 fe65 	bl	80036b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e069      	b.n	8000abe <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d106      	bne.n	80009fe <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 febf 	bl	8001778 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009fa:	2301      	movs	r3, #1
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009fe:	f001 fbf1 	bl	80021e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a02:	f000 fc49 	bl	8001298 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a06:	f001 fbbd 	bl	8002184 <vPortEnterCritical>
 8000a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a16:	d103      	bne.n	8000a20 <xQueueGenericSend+0x170>
 8000a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a2c:	d103      	bne.n	8000a36 <xQueueGenericSend+0x186>
 8000a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a36:	f001 fbd5 	bl	80021e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a3a:	1d3a      	adds	r2, r7, #4
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 feae 	bl	80017a4 <xTaskCheckForTimeOut>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d124      	bne.n	8000a98 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a50:	f000 fa4a 	bl	8000ee8 <prvIsQueueFull>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d018      	beq.n	8000a8c <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5c:	3310      	adds	r3, #16
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fdfe 	bl	8001664 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a6a:	f000 f9d5 	bl	8000e18 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a6e:	f000 fc21 	bl	80012b4 <xTaskResumeAll>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f47f af62 	bne.w	800093e <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <xQueueGenericSend+0x218>)
 8000a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	f3bf 8f4f 	dsb	sy
 8000a86:	f3bf 8f6f 	isb	sy
 8000a8a:	e758      	b.n	800093e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a8e:	f000 f9c3 	bl	8000e18 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a92:	f000 fc0f 	bl	80012b4 <xTaskResumeAll>
 8000a96:	e752      	b.n	800093e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a9a:	f000 f9bd 	bl	8000e18 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a9e:	f000 fc09 	bl	80012b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fb19 	bl	80040dc <SEGGER_SYSVIEW_ShrinkId>
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	205a      	movs	r0, #90	; 0x5a
 8000ab8:	f002 fdfa 	bl	80036b0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000abc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3730      	adds	r7, #48	; 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000ed04 	.word	0xe000ed04

08000acc <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08f      	sub	sp, #60	; 0x3c
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10a      	bne.n	8000afe <xQueueSemaphoreTake+0x32>
        __asm volatile
 8000ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aec:	f383 8811 	msr	BASEPRI, r3
 8000af0:	f3bf 8f6f 	isb	sy
 8000af4:	f3bf 8f4f 	dsb	sy
 8000af8:	61bb      	str	r3, [r7, #24]
    }
 8000afa:	bf00      	nop
 8000afc:	e7fe      	b.n	8000afc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00a      	beq.n	8000b1c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8000b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b0a:	f383 8811 	msr	BASEPRI, r3
 8000b0e:	f3bf 8f6f 	isb	sy
 8000b12:	f3bf 8f4f 	dsb	sy
 8000b16:	617b      	str	r3, [r7, #20]
    }
 8000b18:	bf00      	nop
 8000b1a:	e7fe      	b.n	8000b1a <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b1c:	f001 fb32 	bl	8002184 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b24:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d034      	beq.n	8000b96 <xQueueSemaphoreTake+0xca>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fad4 	bl	80040dc <SEGGER_SYSVIEW_ShrinkId>
 8000b34:	4604      	mov	r4, r0
 8000b36:	2000      	movs	r0, #0
 8000b38:	f003 fad0 	bl	80040dc <SEGGER_SYSVIEW_ShrinkId>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2101      	movs	r1, #1
 8000b42:	9100      	str	r1, [sp, #0]
 8000b44:	4621      	mov	r1, r4
 8000b46:	205c      	movs	r0, #92	; 0x5c
 8000b48:	f002 fdb2 	bl	80036b0 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	1e5a      	subs	r2, r3, #1
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d104      	bne.n	8000b66 <xQueueSemaphoreTake+0x9a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000b5c:	f001 f8d8 	bl	8001d10 <pvTaskIncrementMutexHeldCount>
 8000b60:	4602      	mov	r2, r0
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00f      	beq.n	8000b8e <xQueueSemaphoreTake+0xc2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	3310      	adds	r3, #16
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fd9a 	bl	80016ac <xTaskRemoveFromEventList>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d007      	beq.n	8000b8e <xQueueSemaphoreTake+0xc2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b7e:	4b64      	ldr	r3, [pc, #400]	; (8000d10 <xQueueSemaphoreTake+0x244>)
 8000b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	f3bf 8f4f 	dsb	sy
 8000b8a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000b8e:	f001 fb29 	bl	80021e4 <vPortExitCritical>
                return pdPASS;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0b7      	b.n	8000d06 <xQueueSemaphoreTake+0x23a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d121      	bne.n	8000be0 <xQueueSemaphoreTake+0x114>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8000b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00a      	beq.n	8000bb8 <xQueueSemaphoreTake+0xec>
        __asm volatile
 8000ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba6:	f383 8811 	msr	BASEPRI, r3
 8000baa:	f3bf 8f6f 	isb	sy
 8000bae:	f3bf 8f4f 	dsb	sy
 8000bb2:	613b      	str	r3, [r7, #16]
    }
 8000bb4:	bf00      	nop
 8000bb6:	e7fe      	b.n	8000bb6 <xQueueSemaphoreTake+0xea>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000bb8:	f001 fb14 	bl	80021e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 fa8c 	bl	80040dc <SEGGER_SYSVIEW_ShrinkId>
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f003 fa88 	bl	80040dc <SEGGER_SYSVIEW_ShrinkId>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	9100      	str	r1, [sp, #0]
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	205c      	movs	r0, #92	; 0x5c
 8000bd8:	f002 fd6a 	bl	80036b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e092      	b.n	8000d06 <xQueueSemaphoreTake+0x23a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d106      	bne.n	8000bf4 <xQueueSemaphoreTake+0x128>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fdc4 	bl	8001778 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000bf4:	f001 faf6 	bl	80021e4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000bf8:	f000 fb4e 	bl	8001298 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bfc:	f001 fac2 	bl	8002184 <vPortEnterCritical>
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c0c:	d103      	bne.n	8000c16 <xQueueSemaphoreTake+0x14a>
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c22:	d103      	bne.n	8000c2c <xQueueSemaphoreTake+0x160>
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c2c:	f001 fada 	bl	80021e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c30:	463a      	mov	r2, r7
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fdb3 	bl	80017a4 <xTaskCheckForTimeOut>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d132      	bne.n	8000caa <xQueueSemaphoreTake+0x1de>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c46:	f000 f939 	bl	8000ebc <prvIsQueueEmpty>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d026      	beq.n	8000c9e <xQueueSemaphoreTake+0x1d2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d109      	bne.n	8000c6c <xQueueSemaphoreTake+0x1a0>
                        {
                            taskENTER_CRITICAL();
 8000c58:	f001 fa94 	bl	8002184 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fec3 	bl	80019ec <xTaskPriorityInherit>
 8000c66:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 8000c68:	f001 fabc 	bl	80021e4 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	3324      	adds	r3, #36	; 0x24
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fcf5 	bl	8001664 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c7c:	f000 f8cc 	bl	8000e18 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c80:	f000 fb18 	bl	80012b4 <xTaskResumeAll>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f47f af48 	bne.w	8000b1c <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <xQueueSemaphoreTake+0x244>)
 8000c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	f3bf 8f4f 	dsb	sy
 8000c98:	f3bf 8f6f 	isb	sy
 8000c9c:	e73e      	b.n	8000b1c <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ca0:	f000 f8ba 	bl	8000e18 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ca4:	f000 fb06 	bl	80012b4 <xTaskResumeAll>
 8000ca8:	e738      	b.n	8000b1c <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cac:	f000 f8b4 	bl	8000e18 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000cb0:	f000 fb00 	bl	80012b4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000cb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cb6:	f000 f901 	bl	8000ebc <prvIsQueueEmpty>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f43f af2d 	beq.w	8000b1c <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8000cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00d      	beq.n	8000ce4 <xQueueSemaphoreTake+0x218>
                        {
                            taskENTER_CRITICAL();
 8000cc8:	f001 fa5c 	bl	8002184 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cce:	f000 f821 	bl	8000d14 <prvGetDisinheritPriorityAfterTimeout>
 8000cd2:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	69f9      	ldr	r1, [r7, #28]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 ff80 	bl	8001be0 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8000ce0:	f001 fa80 	bl	80021e4 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 f9f8 	bl	80040dc <SEGGER_SYSVIEW_ShrinkId>
 8000cec:	4604      	mov	r4, r0
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f003 f9f4 	bl	80040dc <SEGGER_SYSVIEW_ShrinkId>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	9100      	str	r1, [sp, #0]
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	205c      	movs	r0, #92	; 0x5c
 8000d00:	f002 fcd6 	bl	80036b0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000d04:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3734      	adds	r7, #52	; 0x34
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd90      	pop	{r4, r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000ed04 	.word	0xe000ed04

08000d14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f1c3 0305 	rsb	r3, r3, #5
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	e001      	b.n	8000d36 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000d36:	68fb      	ldr	r3, [r7, #12]
    }
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d58:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10d      	bne.n	8000d7e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d14d      	bne.n	8000e06 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 feb6 	bl	8001ae0 <xTaskPriorityDisinherit>
 8000d74:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	e043      	b.n	8000e06 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d119      	bne.n	8000db8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6858      	ldr	r0, [r3, #4]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	f005 f942 	bl	8006018 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	441a      	add	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d32b      	bcc.n	8000e06 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	e026      	b.n	8000e06 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	68d8      	ldr	r0, [r3, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	f005 f928 	bl	8006018 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	425b      	negs	r3, r3
 8000dd2:	441a      	add	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	425b      	negs	r3, r3
 8000dee:	441a      	add	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d105      	bne.n	8000e06 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000e0e:	697b      	ldr	r3, [r7, #20]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000e20:	f001 f9b0 	bl	8002184 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e2a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e2c:	e011      	b.n	8000e52 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d012      	beq.n	8000e5c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3324      	adds	r3, #36	; 0x24
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fc36 	bl	80016ac <xTaskRemoveFromEventList>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000e46:	f000 fd13 	bl	8001870 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	dce9      	bgt.n	8000e2e <prvUnlockQueue+0x16>
 8000e5a:	e000      	b.n	8000e5e <prvUnlockQueue+0x46>
                        break;
 8000e5c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	22ff      	movs	r2, #255	; 0xff
 8000e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000e66:	f001 f9bd 	bl	80021e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000e6a:	f001 f98b 	bl	8002184 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e74:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e76:	e011      	b.n	8000e9c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d012      	beq.n	8000ea6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3310      	adds	r3, #16
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fc11 	bl	80016ac <xTaskRemoveFromEventList>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000e90:	f000 fcee 	bl	8001870 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	dce9      	bgt.n	8000e78 <prvUnlockQueue+0x60>
 8000ea4:	e000      	b.n	8000ea8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000ea6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000eb0:	f001 f998 	bl	80021e4 <vPortExitCritical>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ec4:	f001 f95e 	bl	8002184 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	e001      	b.n	8000eda <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000eda:	f001 f983 	bl	80021e4 <vPortExitCritical>

    return xReturn;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ef0:	f001 f948 	bl	8002184 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d102      	bne.n	8000f06 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000f00:	2301      	movs	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e001      	b.n	8000f0a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f0a:	f001 f96b 	bl	80021e4 <vPortExitCritical>

    return xReturn;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	4613      	mov	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fa55 	bl	80023dc <pvPortMalloc>
 8000f32:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00e      	beq.n	8000f58 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000f3a:	2058      	movs	r0, #88	; 0x58
 8000f3c:	f001 fa4e 	bl	80023dc <pvPortMalloc>
 8000f40:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f4e:	e005      	b.n	8000f5c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f001 fb23 	bl	800259c <vPortFree>
 8000f56:	e001      	b.n	8000f5c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d013      	beq.n	8000f8a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000f62:	88fa      	ldrh	r2, [r7, #6]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9303      	str	r3, [sp, #12]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f000 f80e 	bl	8000f9a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000f7e:	69f8      	ldr	r0, [r7, #28]
 8000f80:	f000 f8a2 	bl	80010c8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	e002      	b.n	8000f90 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f8e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000f90:	69bb      	ldr	r3, [r7, #24]
    }
 8000f92:	4618      	mov	r0, r3
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b088      	sub	sp, #32
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000faa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	21a5      	movs	r1, #165	; 0xa5
 8000fb4:	f005 f83e 	bl	8006034 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	f023 0307 	bic.w	r3, r3, #7
 8000fd0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00a      	beq.n	8000ff2 <prvInitialiseNewTask+0x58>
        __asm volatile
 8000fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe0:	f383 8811 	msr	BASEPRI, r3
 8000fe4:	f3bf 8f6f 	isb	sy
 8000fe8:	f3bf 8f4f 	dsb	sy
 8000fec:	617b      	str	r3, [r7, #20]
    }
 8000fee:	bf00      	nop
 8000ff0:	e7fe      	b.n	8000ff0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d01f      	beq.n	8001038 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	e012      	b.n	8001024 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	4413      	add	r3, r2
 8001004:	7819      	ldrb	r1, [r3, #0]
 8001006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	4413      	add	r3, r2
 800100c:	3334      	adds	r3, #52	; 0x34
 800100e:	460a      	mov	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b09      	cmp	r3, #9
 8001028:	d9e9      	bls.n	8000ffe <prvInitialiseNewTask+0x64>
 800102a:	e000      	b.n	800102e <prvInitialiseNewTask+0x94>
            {
                break;
 800102c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800102e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001030:	2200      	movs	r2, #0
 8001032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001036:	e003      	b.n	8001040 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001042:	2b04      	cmp	r3, #4
 8001044:	d901      	bls.n	800104a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001046:	2304      	movs	r3, #4
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800104c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001054:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	2200      	movs	r2, #0
 800105a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800105c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800105e:	3304      	adds	r3, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff faa1 	bl	80005a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001068:	3318      	adds	r3, #24
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa9c 	bl	80005a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001074:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	f1c3 0205 	rsb	r2, r3, #5
 800107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001088:	3350      	adds	r3, #80	; 0x50
 800108a:	2204      	movs	r2, #4
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f004 ffd0 	bl	8006034 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001096:	3354      	adds	r3, #84	; 0x54
 8001098:	2201      	movs	r2, #1
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f004 ffc9 	bl	8006034 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	69b8      	ldr	r0, [r7, #24]
 80010a8:	f000 febe 	bl	8001e28 <pxPortInitialiseStack>
 80010ac:	4602      	mov	r2, r0
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80010b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80010b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80010be:	bf00      	nop
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80010d0:	f001 f858 	bl	8002184 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80010d4:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <prvAddNewTaskToReadyList+0xfc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a3a      	ldr	r2, [pc, #232]	; (80011c4 <prvAddNewTaskToReadyList+0xfc>)
 80010dc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80010de:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <prvAddNewTaskToReadyList+0x100>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80010e6:	4a38      	ldr	r2, [pc, #224]	; (80011c8 <prvAddNewTaskToReadyList+0x100>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <prvAddNewTaskToReadyList+0xfc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d110      	bne.n	8001116 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80010f4:	f000 fbe0 	bl	80018b8 <prvInitialiseTaskLists>
 80010f8:	e00d      	b.n	8001116 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80010fa:	4b34      	ldr	r3, [pc, #208]	; (80011cc <prvAddNewTaskToReadyList+0x104>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <prvAddNewTaskToReadyList+0x100>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	429a      	cmp	r2, r3
 800110e:	d802      	bhi.n	8001116 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001110:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <prvAddNewTaskToReadyList+0x100>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <prvAddNewTaskToReadyList+0x108>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	4a2c      	ldr	r2, [pc, #176]	; (80011d0 <prvAddNewTaskToReadyList+0x108>)
 800111e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <prvAddNewTaskToReadyList+0x108>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d016      	beq.n	800115c <prvAddNewTaskToReadyList+0x94>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fead 	bl	8003e90 <SEGGER_SYSVIEW_OnTaskCreate>
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	461d      	mov	r5, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	461c      	mov	r4, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	1ae3      	subs	r3, r4, r3
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	462b      	mov	r3, r5
 8001158:	f001 fbee 	bl	8002938 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f002 ff1a 	bl	8003f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2201      	movs	r2, #1
 800116a:	409a      	lsls	r2, r3
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <prvAddNewTaskToReadyList+0x10c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4313      	orrs	r3, r2
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <prvAddNewTaskToReadyList+0x10c>)
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <prvAddNewTaskToReadyList+0x110>)
 8001184:	441a      	add	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3304      	adds	r3, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f7ff fa18 	bl	80005c2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001192:	f001 f827 	bl	80021e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <prvAddNewTaskToReadyList+0x104>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00e      	beq.n	80011bc <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <prvAddNewTaskToReadyList+0x100>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <prvAddNewTaskToReadyList+0x114>)
 80011ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	f3bf 8f4f 	dsb	sy
 80011b8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bdb0      	pop	{r4, r5, r7, pc}
 80011c4:	20000108 	.word	0x20000108
 80011c8:	20000030 	.word	0x20000030
 80011cc:	20000114 	.word	0x20000114
 80011d0:	20000124 	.word	0x20000124
 80011d4:	20000110 	.word	0x20000110
 80011d8:	20000034 	.word	0x20000034
 80011dc:	e000ed04 	.word	0xe000ed04

080011e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <vTaskStartScheduler+0x98>)
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2300      	movs	r3, #0
 80011f0:	2282      	movs	r2, #130	; 0x82
 80011f2:	4922      	ldr	r1, [pc, #136]	; (800127c <vTaskStartScheduler+0x9c>)
 80011f4:	4822      	ldr	r0, [pc, #136]	; (8001280 <vTaskStartScheduler+0xa0>)
 80011f6:	f7ff fe8f 	bl	8000f18 <xTaskCreate>
 80011fa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d124      	bne.n	800124c <vTaskStartScheduler+0x6c>
        __asm volatile
 8001202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001206:	f383 8811 	msr	BASEPRI, r3
 800120a:	f3bf 8f6f 	isb	sy
 800120e:	f3bf 8f4f 	dsb	sy
 8001212:	60bb      	str	r3, [r7, #8]
    }
 8001214:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <vTaskStartScheduler+0xa4>)
 8001218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800121c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <vTaskStartScheduler+0xa8>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <vTaskStartScheduler+0xac>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <vTaskStartScheduler+0xb0>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <vTaskStartScheduler+0x98>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d102      	bne.n	800123c <vTaskStartScheduler+0x5c>
 8001236:	f002 fe0f 	bl	8003e58 <SEGGER_SYSVIEW_OnIdle>
 800123a:	e004      	b.n	8001246 <vTaskStartScheduler+0x66>
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <vTaskStartScheduler+0xb0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f002 fe67 	bl	8003f14 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001246:	f000 fe7d 	bl	8001f44 <xPortStartScheduler>
 800124a:	e00e      	b.n	800126a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001252:	d10a      	bne.n	800126a <vTaskStartScheduler+0x8a>
        __asm volatile
 8001254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001258:	f383 8811 	msr	BASEPRI, r3
 800125c:	f3bf 8f6f 	isb	sy
 8001260:	f3bf 8f4f 	dsb	sy
 8001264:	607b      	str	r3, [r7, #4]
    }
 8001266:	bf00      	nop
 8001268:	e7fe      	b.n	8001268 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <vTaskStartScheduler+0xb4>)
 800126c:	681b      	ldr	r3, [r3, #0]
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000012c 	.word	0x2000012c
 800127c:	0800605c 	.word	0x0800605c
 8001280:	08001889 	.word	0x08001889
 8001284:	20000128 	.word	0x20000128
 8001288:	20000114 	.word	0x20000114
 800128c:	2000010c 	.word	0x2000010c
 8001290:	20000030 	.word	0x20000030
 8001294:	20000000 	.word	0x20000000

08001298 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <vTaskSuspendAll+0x18>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <vTaskSuspendAll+0x18>)
 80012a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	20000130 	.word	0x20000130

080012b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80012c2:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <xTaskResumeAll+0x11c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10a      	bne.n	80012e0 <xTaskResumeAll+0x2c>
        __asm volatile
 80012ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ce:	f383 8811 	msr	BASEPRI, r3
 80012d2:	f3bf 8f6f 	isb	sy
 80012d6:	f3bf 8f4f 	dsb	sy
 80012da:	603b      	str	r3, [r7, #0]
    }
 80012dc:	bf00      	nop
 80012de:	e7fe      	b.n	80012de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80012e0:	f000 ff50 	bl	8002184 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <xTaskResumeAll+0x11c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	4a39      	ldr	r2, [pc, #228]	; (80013d0 <xTaskResumeAll+0x11c>)
 80012ec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012ee:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <xTaskResumeAll+0x11c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d165      	bne.n	80013c2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <xTaskResumeAll+0x120>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d061      	beq.n	80013c2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80012fe:	e032      	b.n	8001366 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <xTaskResumeAll+0x124>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3318      	adds	r3, #24
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f9b5 	bl	800067c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3304      	adds	r3, #4
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f9b0 	bl	800067c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fe3a 	bl	8003f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	2201      	movs	r2, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <xTaskResumeAll+0x128>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4313      	orrs	r3, r2
 8001332:	4a2a      	ldr	r2, [pc, #168]	; (80013dc <xTaskResumeAll+0x128>)
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <xTaskResumeAll+0x12c>)
 8001344:	441a      	add	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3304      	adds	r3, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4610      	mov	r0, r2
 800134e:	f7ff f938 	bl	80005c2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <xTaskResumeAll+0x130>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	429a      	cmp	r2, r3
 800135e:	d302      	bcc.n	8001366 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <xTaskResumeAll+0x134>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <xTaskResumeAll+0x124>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1c8      	bne.n	8001300 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001374:	f000 fb1e 	bl	80019b4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <xTaskResumeAll+0x138>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d010      	beq.n	80013a6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001384:	f000 f848 	bl	8001418 <xTaskIncrementTick>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <xTaskResumeAll+0x134>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f1      	bne.n	8001384 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <xTaskResumeAll+0x138>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <xTaskResumeAll+0x134>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <xTaskResumeAll+0x13c>)
 80013b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	f3bf 8f4f 	dsb	sy
 80013be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80013c2:	f000 ff0f 	bl	80021e4 <vPortExitCritical>

    return xAlreadyYielded;
 80013c6:	68bb      	ldr	r3, [r7, #8]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000130 	.word	0x20000130
 80013d4:	20000108 	.word	0x20000108
 80013d8:	200000c8 	.word	0x200000c8
 80013dc:	20000110 	.word	0x20000110
 80013e0:	20000034 	.word	0x20000034
 80013e4:	20000030 	.word	0x20000030
 80013e8:	2000011c 	.word	0x2000011c
 80013ec:	20000118 	.word	0x20000118
 80013f0:	e000ed04 	.word	0xe000ed04

080013f4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80013fa:	f000 ffaf 	bl	800235c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <xTaskGetTickCountFromISR+0x20>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001408:	683b      	ldr	r3, [r7, #0]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000010c 	.word	0x2000010c

08001418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001422:	4b50      	ldr	r3, [pc, #320]	; (8001564 <xTaskIncrementTick+0x14c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 8092 	bne.w	8001550 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800142c:	4b4e      	ldr	r3, [pc, #312]	; (8001568 <xTaskIncrementTick+0x150>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001434:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <xTaskIncrementTick+0x150>)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d120      	bne.n	8001482 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001440:	4b4a      	ldr	r3, [pc, #296]	; (800156c <xTaskIncrementTick+0x154>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00a      	beq.n	8001460 <xTaskIncrementTick+0x48>
        __asm volatile
 800144a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800144e:	f383 8811 	msr	BASEPRI, r3
 8001452:	f3bf 8f6f 	isb	sy
 8001456:	f3bf 8f4f 	dsb	sy
 800145a:	603b      	str	r3, [r7, #0]
    }
 800145c:	bf00      	nop
 800145e:	e7fe      	b.n	800145e <xTaskIncrementTick+0x46>
 8001460:	4b42      	ldr	r3, [pc, #264]	; (800156c <xTaskIncrementTick+0x154>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b42      	ldr	r3, [pc, #264]	; (8001570 <xTaskIncrementTick+0x158>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a40      	ldr	r2, [pc, #256]	; (800156c <xTaskIncrementTick+0x154>)
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4a40      	ldr	r2, [pc, #256]	; (8001570 <xTaskIncrementTick+0x158>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <xTaskIncrementTick+0x15c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	4a3e      	ldr	r2, [pc, #248]	; (8001574 <xTaskIncrementTick+0x15c>)
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	f000 fa99 	bl	80019b4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <xTaskIncrementTick+0x160>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d34c      	bcc.n	8001526 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800148c:	4b37      	ldr	r3, [pc, #220]	; (800156c <xTaskIncrementTick+0x154>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d104      	bne.n	80014a0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <xTaskIncrementTick+0x160>)
 8001498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800149c:	601a      	str	r2, [r3, #0]
                    break;
 800149e:	e042      	b.n	8001526 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <xTaskIncrementTick+0x154>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d203      	bcs.n	80014c0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80014b8:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <xTaskIncrementTick+0x160>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80014be:	e032      	b.n	8001526 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3304      	adds	r3, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f8d9 	bl	800067c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	3318      	adds	r3, #24
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f8d0 	bl	800067c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fd5a 	bl	8003f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	2201      	movs	r2, #1
 80014ea:	409a      	lsls	r2, r3
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <xTaskIncrementTick+0x164>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	4a22      	ldr	r2, [pc, #136]	; (800157c <xTaskIncrementTick+0x164>)
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <xTaskIncrementTick+0x168>)
 8001504:	441a      	add	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	3304      	adds	r3, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4610      	mov	r0, r2
 800150e:	f7ff f858 	bl	80005c2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <xTaskIncrementTick+0x16c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	429a      	cmp	r2, r3
 800151e:	d3b5      	bcc.n	800148c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001524:	e7b2      	b.n	800148c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <xTaskIncrementTick+0x16c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152c:	4914      	ldr	r1, [pc, #80]	; (8001580 <xTaskIncrementTick+0x168>)
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d901      	bls.n	8001542 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800153e:	2301      	movs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <xTaskIncrementTick+0x170>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800154a:	2301      	movs	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e004      	b.n	800155a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <xTaskIncrementTick+0x174>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	4a0d      	ldr	r2, [pc, #52]	; (800158c <xTaskIncrementTick+0x174>)
 8001558:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800155a:	697b      	ldr	r3, [r7, #20]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000130 	.word	0x20000130
 8001568:	2000010c 	.word	0x2000010c
 800156c:	200000c0 	.word	0x200000c0
 8001570:	200000c4 	.word	0x200000c4
 8001574:	20000120 	.word	0x20000120
 8001578:	20000128 	.word	0x20000128
 800157c:	20000110 	.word	0x20000110
 8001580:	20000034 	.word	0x20000034
 8001584:	20000030 	.word	0x20000030
 8001588:	2000011c 	.word	0x2000011c
 800158c:	20000118 	.word	0x20000118

08001590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <vTaskSwitchContext+0xbc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800159e:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <vTaskSwitchContext+0xc0>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80015a4:	e04d      	b.n	8001642 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <vTaskSwitchContext+0xc0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <vTaskSwitchContext+0xc4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	f1c3 031f 	rsb	r3, r3, #31
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	4925      	ldr	r1, [pc, #148]	; (8001658 <vTaskSwitchContext+0xc8>)
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10a      	bne.n	80015ec <vTaskSwitchContext+0x5c>
        __asm volatile
 80015d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015da:	f383 8811 	msr	BASEPRI, r3
 80015de:	f3bf 8f6f 	isb	sy
 80015e2:	f3bf 8f4f 	dsb	sy
 80015e6:	607b      	str	r3, [r7, #4]
    }
 80015e8:	bf00      	nop
 80015ea:	e7fe      	b.n	80015ea <vTaskSwitchContext+0x5a>
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <vTaskSwitchContext+0xc8>)
 80015f8:	4413      	add	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	3308      	adds	r3, #8
 800160e:	429a      	cmp	r2, r3
 8001610:	d104      	bne.n	800161c <vTaskSwitchContext+0x8c>
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <vTaskSwitchContext+0xcc>)
 8001624:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <vTaskSwitchContext+0xcc>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <vTaskSwitchContext+0xd0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d102      	bne.n	8001638 <vTaskSwitchContext+0xa8>
 8001632:	f002 fc11 	bl	8003e58 <SEGGER_SYSVIEW_OnIdle>
}
 8001636:	e004      	b.n	8001642 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <vTaskSwitchContext+0xcc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f002 fc69 	bl	8003f14 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000130 	.word	0x20000130
 8001650:	2000011c 	.word	0x2000011c
 8001654:	20000110 	.word	0x20000110
 8001658:	20000034 	.word	0x20000034
 800165c:	20000030 	.word	0x20000030
 8001660:	2000012c 	.word	0x2000012c

08001664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10a      	bne.n	800168a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001678:	f383 8811 	msr	BASEPRI, r3
 800167c:	f3bf 8f6f 	isb	sy
 8001680:	f3bf 8f4f 	dsb	sy
 8001684:	60fb      	str	r3, [r7, #12]
    }
 8001686:	bf00      	nop
 8001688:	e7fe      	b.n	8001688 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <vTaskPlaceOnEventList+0x44>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3318      	adds	r3, #24
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ffb9 	bl	800060a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001698:	2101      	movs	r1, #1
 800169a:	6838      	ldr	r0, [r7, #0]
 800169c:	f000 fb4c 	bl	8001d38 <prvAddCurrentTaskToDelayedList>
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000030 	.word	0x20000030

080016ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10a      	bne.n	80016d8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80016c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c6:	f383 8811 	msr	BASEPRI, r3
 80016ca:	f3bf 8f6f 	isb	sy
 80016ce:	f3bf 8f4f 	dsb	sy
 80016d2:	60fb      	str	r3, [r7, #12]
    }
 80016d4:	bf00      	nop
 80016d6:	e7fe      	b.n	80016d6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	3318      	adds	r3, #24
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ffcd 	bl	800067c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <xTaskRemoveFromEventList+0xb4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d120      	bne.n	800172c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	3304      	adds	r3, #4
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ffc4 	bl	800067c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fc4e 	bl	8003f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	2201      	movs	r2, #1
 8001702:	409a      	lsls	r2, r3
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <xTaskRemoveFromEventList+0xb8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4313      	orrs	r3, r2
 800170a:	4a16      	ldr	r2, [pc, #88]	; (8001764 <xTaskRemoveFromEventList+0xb8>)
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <xTaskRemoveFromEventList+0xbc>)
 800171c:	441a      	add	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	3304      	adds	r3, #4
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f7fe ff4c 	bl	80005c2 <vListInsertEnd>
 800172a:	e005      	b.n	8001738 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	3318      	adds	r3, #24
 8001730:	4619      	mov	r1, r3
 8001732:	480e      	ldr	r0, [pc, #56]	; (800176c <xTaskRemoveFromEventList+0xc0>)
 8001734:	f7fe ff45 	bl	80005c2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <xTaskRemoveFromEventList+0xc4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	429a      	cmp	r2, r3
 8001744:	d905      	bls.n	8001752 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001746:	2301      	movs	r3, #1
 8001748:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <xTaskRemoveFromEventList+0xc8>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e001      	b.n	8001756 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001756:	697b      	ldr	r3, [r7, #20]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000130 	.word	0x20000130
 8001764:	20000110 	.word	0x20000110
 8001768:	20000034 	.word	0x20000034
 800176c:	200000c8 	.word	0x200000c8
 8001770:	20000030 	.word	0x20000030
 8001774:	2000011c 	.word	0x2000011c

08001778 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <vTaskInternalSetTimeOutState+0x24>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <vTaskInternalSetTimeOutState+0x28>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	605a      	str	r2, [r3, #4]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	20000120 	.word	0x20000120
 80017a0:	2000010c 	.word	0x2000010c

080017a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10a      	bne.n	80017ca <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80017b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b8:	f383 8811 	msr	BASEPRI, r3
 80017bc:	f3bf 8f6f 	isb	sy
 80017c0:	f3bf 8f4f 	dsb	sy
 80017c4:	613b      	str	r3, [r7, #16]
    }
 80017c6:	bf00      	nop
 80017c8:	e7fe      	b.n	80017c8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10a      	bne.n	80017e6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80017d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d4:	f383 8811 	msr	BASEPRI, r3
 80017d8:	f3bf 8f6f 	isb	sy
 80017dc:	f3bf 8f4f 	dsb	sy
 80017e0:	60fb      	str	r3, [r7, #12]
    }
 80017e2:	bf00      	nop
 80017e4:	e7fe      	b.n	80017e4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80017e6:	f000 fccd 	bl	8002184 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <xTaskCheckForTimeOut+0xc4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001802:	d102      	bne.n	800180a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	e026      	b.n	8001858 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <xTaskCheckForTimeOut+0xc8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d00a      	beq.n	800182c <xTaskCheckForTimeOut+0x88>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	429a      	cmp	r2, r3
 800181e:	d305      	bcc.n	800182c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001820:	2301      	movs	r3, #1
 8001822:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e015      	b.n	8001858 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	429a      	cmp	r2, r3
 8001834:	d20b      	bcs.n	800184e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	1ad2      	subs	r2, r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ff98 	bl	8001778 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	e004      	b.n	8001858 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001854:	2301      	movs	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001858:	f000 fcc4 	bl	80021e4 <vPortExitCritical>

    return xReturn;
 800185c:	69fb      	ldr	r3, [r7, #28]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000010c 	.word	0x2000010c
 800186c:	20000120 	.word	0x20000120

08001870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <vTaskMissedYield+0x14>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	2000011c 	.word	0x2000011c

08001888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001890:	f000 f852 	bl	8001938 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <prvIdleTask+0x28>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d9f9      	bls.n	8001890 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <prvIdleTask+0x2c>)
 800189e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	f3bf 8f4f 	dsb	sy
 80018a8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80018ac:	e7f0      	b.n	8001890 <prvIdleTask+0x8>
 80018ae:	bf00      	nop
 80018b0:	20000034 	.word	0x20000034
 80018b4:	e000ed04 	.word	0xe000ed04

080018b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	e00c      	b.n	80018de <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <prvInitialiseTaskLists+0x60>)
 80018d0:	4413      	add	r3, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe48 	bl	8000568 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3301      	adds	r3, #1
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d9ef      	bls.n	80018c4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <prvInitialiseTaskLists+0x64>)
 80018e6:	f7fe fe3f 	bl	8000568 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <prvInitialiseTaskLists+0x68>)
 80018ec:	f7fe fe3c 	bl	8000568 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <prvInitialiseTaskLists+0x6c>)
 80018f2:	f7fe fe39 	bl	8000568 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80018f6:	480c      	ldr	r0, [pc, #48]	; (8001928 <prvInitialiseTaskLists+0x70>)
 80018f8:	f7fe fe36 	bl	8000568 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <prvInitialiseTaskLists+0x74>)
 80018fe:	f7fe fe33 	bl	8000568 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <prvInitialiseTaskLists+0x78>)
 8001904:	4a05      	ldr	r2, [pc, #20]	; (800191c <prvInitialiseTaskLists+0x64>)
 8001906:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <prvInitialiseTaskLists+0x7c>)
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <prvInitialiseTaskLists+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000034 	.word	0x20000034
 800191c:	20000098 	.word	0x20000098
 8001920:	200000ac 	.word	0x200000ac
 8001924:	200000c8 	.word	0x200000c8
 8001928:	200000dc 	.word	0x200000dc
 800192c:	200000f4 	.word	0x200000f4
 8001930:	200000c0 	.word	0x200000c0
 8001934:	200000c4 	.word	0x200000c4

08001938 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800193e:	e019      	b.n	8001974 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001940:	f000 fc20 	bl	8002184 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <prvCheckTasksWaitingTermination+0x50>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3304      	adds	r3, #4
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe93 	bl	800067c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <prvCheckTasksWaitingTermination+0x54>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3b01      	subs	r3, #1
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <prvCheckTasksWaitingTermination+0x54>)
 800195e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <prvCheckTasksWaitingTermination+0x58>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3b01      	subs	r3, #1
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <prvCheckTasksWaitingTermination+0x58>)
 8001968:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800196a:	f000 fc3b 	bl	80021e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f810 	bl	8001994 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <prvCheckTasksWaitingTermination+0x58>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e1      	bne.n	8001940 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200000dc 	.word	0x200000dc
 800198c:	20000108 	.word	0x20000108
 8001990:	200000f0 	.word	0x200000f0

08001994 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fdfb 	bl	800259c <vPortFree>
                vPortFree( pxTCB );
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fdf8 	bl	800259c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <prvResetNextTaskUnblockTime+0x30>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d104      	bne.n	80019cc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <prvResetNextTaskUnblockTime+0x34>)
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019c8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80019ca:	e005      	b.n	80019d8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <prvResetNextTaskUnblockTime+0x30>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <prvResetNextTaskUnblockTime+0x34>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	200000c0 	.word	0x200000c0
 80019e8:	20000128 	.word	0x20000128

080019ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d063      	beq.n	8001aca <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a06:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <xTaskPriorityInherit+0xe8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d253      	bcs.n	8001ab8 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db06      	blt.n	8001a26 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a18:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <xTaskPriorityInherit+0xe8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f1c3 0205 	rsb	r2, r3, #5
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	6959      	ldr	r1, [r3, #20]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <xTaskPriorityInherit+0xec>)
 8001a38:	4413      	add	r3, r2
 8001a3a:	4299      	cmp	r1, r3
 8001a3c:	d12f      	bne.n	8001a9e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	3304      	adds	r3, #4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fe1a 	bl	800067c <uxListRemove>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10a      	bne.n	8001a64 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	2201      	movs	r2, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <xTaskPriorityInherit+0xf0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <xTaskPriorityInherit+0xf0>)
 8001a62:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <xTaskPriorityInherit+0xe8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	2201      	movs	r2, #1
 8001a74:	409a      	lsls	r2, r3
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <xTaskPriorityInherit+0xf0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <xTaskPriorityInherit+0xf0>)
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <xTaskPriorityInherit+0xec>)
 8001a8e:	441a      	add	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	3304      	adds	r3, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f7fe fd93 	bl	80005c2 <vListInsertEnd>
 8001a9c:	e004      	b.n	8001aa8 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <xTaskPriorityInherit+0xe8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	2049      	movs	r0, #73	; 0x49
 8001aae:	f001 fcf3 	bl	8003498 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e008      	b.n	8001aca <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <xTaskPriorityInherit+0xe8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d201      	bcs.n	8001aca <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001aca:	68fb      	ldr	r3, [r7, #12]
    }
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000030 	.word	0x20000030
 8001ad8:	20000034 	.word	0x20000034
 8001adc:	20000110 	.word	0x20000110

08001ae0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d068      	beq.n	8001bc8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001af6:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <xTaskPriorityDisinherit+0xf4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d00a      	beq.n	8001b16 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b04:	f383 8811 	msr	BASEPRI, r3
 8001b08:	f3bf 8f6f 	isb	sy
 8001b0c:	f3bf 8f4f 	dsb	sy
 8001b10:	60fb      	str	r3, [r7, #12]
    }
 8001b12:	bf00      	nop
 8001b14:	e7fe      	b.n	8001b14 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b22:	f383 8811 	msr	BASEPRI, r3
 8001b26:	f3bf 8f6f 	isb	sy
 8001b2a:	f3bf 8f4f 	dsb	sy
 8001b2e:	60bb      	str	r3, [r7, #8]
    }
 8001b30:	bf00      	nop
 8001b32:	e7fe      	b.n	8001b32 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d03e      	beq.n	8001bc8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d13a      	bne.n	8001bc8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	3304      	adds	r3, #4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fd90 	bl	800067c <uxListRemove>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	2201      	movs	r2, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43da      	mvns	r2, r3
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <xTaskPriorityDisinherit+0xf8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4013      	ands	r3, r2
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <xTaskPriorityDisinherit+0xf8>)
 8001b76:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	204a      	movs	r0, #74	; 0x4a
 8001b7e:	f001 fc8b 	bl	8003498 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f1c3 0205 	rsb	r2, r3, #5
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <xTaskPriorityDisinherit+0xf8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <xTaskPriorityDisinherit+0xf8>)
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <xTaskPriorityDisinherit+0xfc>)
 8001bb6:	441a      	add	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	f7fe fcff 	bl	80005c2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001bc8:	697b      	ldr	r3, [r7, #20]
    }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000030 	.word	0x20000030
 8001bd8:	20000110 	.word	0x20000110
 8001bdc:	20000034 	.word	0x20000034

08001be0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8081 	beq.w	8001cfc <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8001c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c06:	f383 8811 	msr	BASEPRI, r3
 8001c0a:	f3bf 8f6f 	isb	sy
 8001c0e:	f3bf 8f4f 	dsb	sy
 8001c12:	60fb      	str	r3, [r7, #12]
    }
 8001c14:	bf00      	nop
 8001c16:	e7fe      	b.n	8001c16 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d902      	bls.n	8001c28 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e002      	b.n	8001c2e <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2c:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d061      	beq.n	8001cfc <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d15c      	bne.n	8001cfc <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d10a      	bne.n	8001c62 <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c50:	f383 8811 	msr	BASEPRI, r3
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	f3bf 8f4f 	dsb	sy
 8001c5c:	60bb      	str	r3, [r7, #8]
    }
 8001c5e:	bf00      	nop
 8001c60:	e7fe      	b.n	8001c60 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4619      	mov	r1, r3
 8001c66:	204a      	movs	r0, #74	; 0x4a
 8001c68:	f001 fc16 	bl	8003498 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db04      	blt.n	8001c8a <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0205 	rsb	r2, r3, #5
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6959      	ldr	r1, [r3, #20]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4299      	cmp	r1, r3
 8001c9e:	d12d      	bne.n	8001cfc <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fce9 	bl	800067c <uxListRemove>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10a      	bne.n	8001cc6 <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8001cc4:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 f965 	bl	8003f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8001cee:	441a      	add	r2, r3
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f7fe fc63 	bl	80005c2 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000030 	.word	0x20000030
 8001d08:	20000034 	.word	0x20000034
 8001d0c:	20000110 	.word	0x20000110

08001d10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <pvTaskIncrementMutexHeldCount+0x24>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <pvTaskIncrementMutexHeldCount+0x24>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d22:	3201      	adds	r2, #1
 8001d24:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8001d26:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <pvTaskIncrementMutexHeldCount+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
    }
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	20000030 	.word	0x20000030

08001d38 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d42:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <prvAddCurrentTaskToDelayedList+0xd4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fc94 	bl	800067c <uxListRemove>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10b      	bne.n	8001d72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	2201      	movs	r2, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001d70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d78:	d110      	bne.n	8001d9c <prvAddCurrentTaskToDelayedList+0x64>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00d      	beq.n	8001d9c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001d80:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	211b      	movs	r1, #27
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 f948 	bl	800401c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d8c:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3304      	adds	r3, #4
 8001d92:	4619      	mov	r1, r3
 8001d94:	4820      	ldr	r0, [pc, #128]	; (8001e18 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001d96:	f7fe fc14 	bl	80005c2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001d9a:	e032      	b.n	8001e02 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d20f      	bcs.n	8001dd4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2104      	movs	r1, #4
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 f92e 	bl	800401c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4610      	mov	r0, r2
 8001dce:	f7fe fc1c 	bl	800060a <vListInsert>
}
 8001dd2:	e016      	b.n	8001e02 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2104      	movs	r1, #4
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 f91e 	bl	800401c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3304      	adds	r3, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4610      	mov	r0, r2
 8001dee:	f7fe fc0c 	bl	800060a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <prvAddCurrentTaskToDelayedList+0xec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d202      	bcs.n	8001e02 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001dfc:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <prvAddCurrentTaskToDelayedList+0xec>)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	6013      	str	r3, [r2, #0]
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000010c 	.word	0x2000010c
 8001e10:	20000030 	.word	0x20000030
 8001e14:	20000110 	.word	0x20000110
 8001e18:	200000f4 	.word	0x200000f4
 8001e1c:	200000c4 	.word	0x200000c4
 8001e20:	200000c0 	.word	0x200000c0
 8001e24:	20000128 	.word	0x20000128

08001e28 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3b04      	subs	r3, #4
 8001e38:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3b04      	subs	r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f023 0201 	bic.w	r2, r3, #1
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3b04      	subs	r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001e58:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <pxPortInitialiseStack+0x64>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3b14      	subs	r3, #20
 8001e62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3b04      	subs	r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f06f 0202 	mvn.w	r2, #2
 8001e76:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3b20      	subs	r3, #32
 8001e7c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	08001e91 	.word	0x08001e91

08001e90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <prvTaskExitError+0x54>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea2:	d00a      	beq.n	8001eba <prvTaskExitError+0x2a>
        __asm volatile
 8001ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	60fb      	str	r3, [r7, #12]
    }
 8001eb6:	bf00      	nop
 8001eb8:	e7fe      	b.n	8001eb8 <prvTaskExitError+0x28>
        __asm volatile
 8001eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ebe:	f383 8811 	msr	BASEPRI, r3
 8001ec2:	f3bf 8f6f 	isb	sy
 8001ec6:	f3bf 8f4f 	dsb	sy
 8001eca:	60bb      	str	r3, [r7, #8]
    }
 8001ecc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001ece:	bf00      	nop
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0fc      	beq.n	8001ed0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	20000004 	.word	0x20000004
	...

08001ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <pxCurrentTCBConst2>)
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	6808      	ldr	r0, [r1, #0]
 8001ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001efa:	f380 8809 	msr	PSP, r0
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f380 8811 	msr	BASEPRI, r0
 8001f0a:	4770      	bx	lr
 8001f0c:	f3af 8000 	nop.w

08001f10 <pxCurrentTCBConst2>:
 8001f10:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop

08001f18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <prvPortStartFirstTask+0x24>)
 8001f1a:	6800      	ldr	r0, [r0, #0]
 8001f1c:	6800      	ldr	r0, [r0, #0]
 8001f1e:	f380 8808 	msr	MSP, r0
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f380 8814 	msr	CONTROL, r0
 8001f2a:	b662      	cpsie	i
 8001f2c:	b661      	cpsie	f
 8001f2e:	f3bf 8f4f 	dsb	sy
 8001f32:	f3bf 8f6f 	isb	sy
 8001f36:	df00      	svc	0
 8001f38:	bf00      	nop
 8001f3a:	0000      	.short	0x0000
 8001f3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop

08001f44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <xPortStartScheduler+0x120>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a46      	ldr	r2, [pc, #280]	; (8002068 <xPortStartScheduler+0x124>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10a      	bne.n	8001f6a <xPortStartScheduler+0x26>
        __asm volatile
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	613b      	str	r3, [r7, #16]
    }
 8001f66:	bf00      	nop
 8001f68:	e7fe      	b.n	8001f68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	; (8002064 <xPortStartScheduler+0x120>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a3f      	ldr	r2, [pc, #252]	; (800206c <xPortStartScheduler+0x128>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10a      	bne.n	8001f8a <xPortStartScheduler+0x46>
        __asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	60fb      	str	r3, [r7, #12]
    }
 8001f86:	bf00      	nop
 8001f88:	e7fe      	b.n	8001f88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <xPortStartScheduler+0x12c>)
 8001f8c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <xPortStartScheduler+0x130>)
 8001fb0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001fb2:	4b31      	ldr	r3, [pc, #196]	; (8002078 <xPortStartScheduler+0x134>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fb8:	e009      	b.n	8001fce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8001fba:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <xPortStartScheduler+0x134>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <xPortStartScheduler+0x134>)
 8001fc2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b80      	cmp	r3, #128	; 0x80
 8001fd8:	d0ef      	beq.n	8001fba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001fda:	4b27      	ldr	r3, [pc, #156]	; (8002078 <xPortStartScheduler+0x134>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f1c3 0307 	rsb	r3, r3, #7
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00a      	beq.n	8001ffc <xPortStartScheduler+0xb8>
        __asm volatile
 8001fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fea:	f383 8811 	msr	BASEPRI, r3
 8001fee:	f3bf 8f6f 	isb	sy
 8001ff2:	f3bf 8f4f 	dsb	sy
 8001ff6:	60bb      	str	r3, [r7, #8]
    }
 8001ff8:	bf00      	nop
 8001ffa:	e7fe      	b.n	8001ffa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <xPortStartScheduler+0x134>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <xPortStartScheduler+0x134>)
 8002004:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <xPortStartScheduler+0x134>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800200e:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <xPortStartScheduler+0x134>)
 8002010:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <xPortStartScheduler+0x138>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a17      	ldr	r2, [pc, #92]	; (800207c <xPortStartScheduler+0x138>)
 8002020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002024:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <xPortStartScheduler+0x138>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a14      	ldr	r2, [pc, #80]	; (800207c <xPortStartScheduler+0x138>)
 800202c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002030:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002032:	f000 f963 	bl	80022fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <xPortStartScheduler+0x13c>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800203c:	f000 f982 	bl	8002344 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <xPortStartScheduler+0x140>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <xPortStartScheduler+0x140>)
 8002046:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800204a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800204c:	f7ff ff64 	bl	8001f18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002050:	f7ff fa9e 	bl	8001590 <vTaskSwitchContext>
    prvTaskExitError();
 8002054:	f7ff ff1c 	bl	8001e90 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00
 8002068:	410fc271 	.word	0x410fc271
 800206c:	410fc270 	.word	0x410fc270
 8002070:	e000e400 	.word	0xe000e400
 8002074:	20000134 	.word	0x20000134
 8002078:	20000138 	.word	0x20000138
 800207c:	e000ed20 	.word	0xe000ed20
 8002080:	20000004 	.word	0x20000004
 8002084:	e000ef34 	.word	0xe000ef34

08002088 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800208e:	4b37      	ldr	r3, [pc, #220]	; (800216c <vInitPrioGroupValue+0xe4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a37      	ldr	r2, [pc, #220]	; (8002170 <vInitPrioGroupValue+0xe8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d10a      	bne.n	80020ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	613b      	str	r3, [r7, #16]
    }
 80020aa:	bf00      	nop
 80020ac:	e7fe      	b.n	80020ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <vInitPrioGroupValue+0xe4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a30      	ldr	r2, [pc, #192]	; (8002174 <vInitPrioGroupValue+0xec>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d10a      	bne.n	80020ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	60fb      	str	r3, [r7, #12]
    }
 80020ca:	bf00      	nop
 80020cc:	e7fe      	b.n	80020cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <vInitPrioGroupValue+0xf0>)
 80020d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	22ff      	movs	r2, #255	; 0xff
 80020de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <vInitPrioGroupValue+0xf4>)
 80020f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <vInitPrioGroupValue+0xf8>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80020fc:	e009      	b.n	8002112 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <vInitPrioGroupValue+0xf8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3b01      	subs	r3, #1
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <vInitPrioGroupValue+0xf8>)
 8002106:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	2b80      	cmp	r3, #128	; 0x80
 800211c:	d0ef      	beq.n	80020fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <vInitPrioGroupValue+0xf8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	d00a      	beq.n	8002140 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800212a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212e:	f383 8811 	msr	BASEPRI, r3
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	f3bf 8f4f 	dsb	sy
 800213a:	60bb      	str	r3, [r7, #8]
    }
 800213c:	bf00      	nop
 800213e:	e7fe      	b.n	800213e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <vInitPrioGroupValue+0xf8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <vInitPrioGroupValue+0xf8>)
 8002148:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <vInitPrioGroupValue+0xf8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002152:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <vInitPrioGroupValue+0xf8>)
 8002154:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00
 8002170:	410fc271 	.word	0x410fc271
 8002174:	410fc270 	.word	0x410fc270
 8002178:	e000e400 	.word	0xe000e400
 800217c:	20000134 	.word	0x20000134
 8002180:	20000138 	.word	0x20000138

08002184 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
        __asm volatile
 800218a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218e:	f383 8811 	msr	BASEPRI, r3
 8002192:	f3bf 8f6f 	isb	sy
 8002196:	f3bf 8f4f 	dsb	sy
 800219a:	607b      	str	r3, [r7, #4]
    }
 800219c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <vPortEnterCritical+0x58>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <vPortEnterCritical+0x58>)
 80021a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <vPortEnterCritical+0x58>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10f      	bne.n	80021d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <vPortEnterCritical+0x5c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80021ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	603b      	str	r3, [r7, #0]
    }
 80021cc:	bf00      	nop
 80021ce:	e7fe      	b.n	80021ce <vPortEnterCritical+0x4a>
    }
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	20000004 	.word	0x20000004
 80021e0:	e000ed04 	.word	0xe000ed04

080021e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <vPortExitCritical+0x50>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10a      	bne.n	8002208 <vPortExitCritical+0x24>
        __asm volatile
 80021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	607b      	str	r3, [r7, #4]
    }
 8002204:	bf00      	nop
 8002206:	e7fe      	b.n	8002206 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <vPortExitCritical+0x50>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3b01      	subs	r3, #1
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <vPortExitCritical+0x50>)
 8002210:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <vPortExitCritical+0x50>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <vPortExitCritical+0x42>
 800221a:	2300      	movs	r3, #0
 800221c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002224:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000004 	.word	0x20000004
	...

08002240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002240:	f3ef 8009 	mrs	r0, PSP
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <pxCurrentTCBConst>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	f01e 0f10 	tst.w	lr, #16
 8002250:	bf08      	it	eq
 8002252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800225a:	6010      	str	r0, [r2, #0]
 800225c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002264:	f380 8811 	msr	BASEPRI, r0
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f7ff f98e 	bl	8001590 <vTaskSwitchContext>
 8002274:	f04f 0000 	mov.w	r0, #0
 8002278:	f380 8811 	msr	BASEPRI, r0
 800227c:	bc09      	pop	{r0, r3}
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	6808      	ldr	r0, [r1, #0]
 8002282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002286:	f01e 0f10 	tst.w	lr, #16
 800228a:	bf08      	it	eq
 800228c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002290:	f380 8809 	msr	PSP, r0
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	f3af 8000 	nop.w

080022a0 <pxCurrentTCBConst>:
 80022a0:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop

080022a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
        __asm volatile
 80022ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	607b      	str	r3, [r7, #4]
    }
 80022c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80022c2:	f001 fd4f 	bl	8003d64 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80022c6:	f7ff f8a7 	bl	8001418 <xTaskIncrementTick>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80022d0:	f001 fda6 	bl	8003e20 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <SysTick_Handler+0x50>)
 80022d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e001      	b.n	80022e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80022de:	f001 fd83 	bl	8003de8 <SEGGER_SYSVIEW_RecordExitISR>
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f383 8811 	msr	BASEPRI, r3
    }
 80022ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000ed04 	.word	0xe000ed04

080022fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <vPortSetupTimerInterrupt+0x34>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <vPortSetupTimerInterrupt+0x38>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <vPortSetupTimerInterrupt+0x3c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <vPortSetupTimerInterrupt+0x40>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	4a09      	ldr	r2, [pc, #36]	; (8002340 <vPortSetupTimerInterrupt+0x44>)
 800231a:	3b01      	subs	r3, #1
 800231c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <vPortSetupTimerInterrupt+0x34>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010
 8002334:	e000e018 	.word	0xe000e018
 8002338:	20000008 	.word	0x20000008
 800233c:	10624dd3 	.word	0x10624dd3
 8002340:	e000e014 	.word	0xe000e014

08002344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002354 <vPortEnableVFP+0x10>
 8002348:	6801      	ldr	r1, [r0, #0]
 800234a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800234e:	6001      	str	r1, [r0, #0]
 8002350:	4770      	bx	lr
 8002352:	0000      	.short	0x0000
 8002354:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop

0800235c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002362:	f3ef 8305 	mrs	r3, IPSR
 8002366:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	d914      	bls.n	8002398 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <vPortValidateInterruptPriority+0x70>)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <vPortValidateInterruptPriority+0x74>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	7afa      	ldrb	r2, [r7, #11]
 800237e:	429a      	cmp	r2, r3
 8002380:	d20a      	bcs.n	8002398 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	607b      	str	r3, [r7, #4]
    }
 8002394:	bf00      	nop
 8002396:	e7fe      	b.n	8002396 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <vPortValidateInterruptPriority+0x78>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <vPortValidateInterruptPriority+0x7c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d90a      	bls.n	80023be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	603b      	str	r3, [r7, #0]
    }
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <vPortValidateInterruptPriority+0x60>
    }
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e3f0 	.word	0xe000e3f0
 80023d0:	20000134 	.word	0x20000134
 80023d4:	e000ed0c 	.word	0xe000ed0c
 80023d8:	20000138 	.word	0x20000138

080023dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80023e8:	f7fe ff56 	bl	8001298 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80023ec:	4b65      	ldr	r3, [pc, #404]	; (8002584 <pvPortMalloc+0x1a8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80023f4:	f000 f934 	bl	8002660 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80023f8:	4b63      	ldr	r3, [pc, #396]	; (8002588 <pvPortMalloc+0x1ac>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 80a7 	bne.w	8002554 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02d      	beq.n	8002468 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800240c:	2208      	movs	r2, #8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d227      	bcs.n	8002468 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002418:	2208      	movs	r2, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	2b00      	cmp	r3, #0
 8002428:	d021      	beq.n	800246e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f023 0307 	bic.w	r3, r3, #7
 8002430:	3308      	adds	r3, #8
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d214      	bcs.n	8002462 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f023 0307 	bic.w	r3, r3, #7
 800243e:	3308      	adds	r3, #8
 8002440:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <pvPortMalloc+0x92>
        __asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	617b      	str	r3, [r7, #20]
    }
 800245e:	bf00      	nop
 8002460:	e7fe      	b.n	8002460 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002466:	e002      	b.n	800246e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	e000      	b.n	8002470 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800246e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d06e      	beq.n	8002554 <pvPortMalloc+0x178>
 8002476:	4b45      	ldr	r3, [pc, #276]	; (800258c <pvPortMalloc+0x1b0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d869      	bhi.n	8002554 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002480:	4b43      	ldr	r3, [pc, #268]	; (8002590 <pvPortMalloc+0x1b4>)
 8002482:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002484:	4b42      	ldr	r3, [pc, #264]	; (8002590 <pvPortMalloc+0x1b4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800248a:	e004      	b.n	8002496 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d903      	bls.n	80024a8 <pvPortMalloc+0xcc>
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f1      	bne.n	800248c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80024a8:	4b36      	ldr	r3, [pc, #216]	; (8002584 <pvPortMalloc+0x1a8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d050      	beq.n	8002554 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2208      	movs	r2, #8
 80024b8:	4413      	add	r3, r2
 80024ba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	1ad2      	subs	r2, r2, r3
 80024cc:	2308      	movs	r3, #8
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d91f      	bls.n	8002514 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80024d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <pvPortMalloc+0x120>
        __asm volatile
 80024e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ea:	f383 8811 	msr	BASEPRI, r3
 80024ee:	f3bf 8f6f 	isb	sy
 80024f2:	f3bf 8f4f 	dsb	sy
 80024f6:	613b      	str	r3, [r7, #16]
    }
 80024f8:	bf00      	nop
 80024fa:	e7fe      	b.n	80024fa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f000 f908 	bl	8002724 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <pvPortMalloc+0x1b0>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	4a1b      	ldr	r2, [pc, #108]	; (800258c <pvPortMalloc+0x1b0>)
 8002520:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <pvPortMalloc+0x1b0>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <pvPortMalloc+0x1b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d203      	bcs.n	8002536 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <pvPortMalloc+0x1b0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a18      	ldr	r2, [pc, #96]	; (8002594 <pvPortMalloc+0x1b8>)
 8002534:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <pvPortMalloc+0x1ac>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	431a      	orrs	r2, r3
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <pvPortMalloc+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <pvPortMalloc+0x1bc>)
 8002552:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002554:	f7fe feae 	bl	80012b4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <pvPortMalloc+0x19c>
        __asm volatile
 8002562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	60fb      	str	r3, [r7, #12]
    }
 8002574:	bf00      	nop
 8002576:	e7fe      	b.n	8002576 <pvPortMalloc+0x19a>
    return pvReturn;
 8002578:	69fb      	ldr	r3, [r7, #28]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3728      	adds	r7, #40	; 0x28
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20012d44 	.word	0x20012d44
 8002588:	20012d58 	.word	0x20012d58
 800258c:	20012d48 	.word	0x20012d48
 8002590:	20012d3c 	.word	0x20012d3c
 8002594:	20012d4c 	.word	0x20012d4c
 8002598:	20012d50 	.word	0x20012d50

0800259c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d04d      	beq.n	800264a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80025ae:	2308      	movs	r3, #8
 80025b0:	425b      	negs	r3, r3
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4413      	add	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <vPortFree+0xb8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <vPortFree+0x44>
        __asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	60fb      	str	r3, [r7, #12]
    }
 80025dc:	bf00      	nop
 80025de:	e7fe      	b.n	80025de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <vPortFree+0x62>
        __asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	60bb      	str	r3, [r7, #8]
    }
 80025fa:	bf00      	nop
 80025fc:	e7fe      	b.n	80025fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <vPortFree+0xb8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01e      	beq.n	800264a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d11a      	bne.n	800264a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <vPortFree+0xb8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	43db      	mvns	r3, r3
 800261e:	401a      	ands	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002624:	f7fe fe38 	bl	8001298 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <vPortFree+0xbc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4413      	add	r3, r2
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <vPortFree+0xbc>)
 8002634:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002636:	6938      	ldr	r0, [r7, #16]
 8002638:	f000 f874 	bl	8002724 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <vPortFree+0xc0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	4a06      	ldr	r2, [pc, #24]	; (800265c <vPortFree+0xc0>)
 8002644:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002646:	f7fe fe35 	bl	80012b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20012d58 	.word	0x20012d58
 8002658:	20012d48 	.word	0x20012d48
 800265c:	20012d54 	.word	0x20012d54

08002660 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002666:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800266a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <prvHeapInit+0xac>)
 800266e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00c      	beq.n	8002694 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3307      	adds	r3, #7
 800267e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0307 	bic.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	4a1f      	ldr	r2, [pc, #124]	; (800270c <prvHeapInit+0xac>)
 8002690:	4413      	add	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <prvHeapInit+0xb0>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <prvHeapInit+0xb0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4413      	add	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80026ac:	2208      	movs	r2, #8
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0307 	bic.w	r3, r3, #7
 80026ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a15      	ldr	r2, [pc, #84]	; (8002714 <prvHeapInit+0xb4>)
 80026c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <prvHeapInit+0xb4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <prvHeapInit+0xb4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	1ad2      	subs	r2, r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <prvHeapInit+0xb4>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <prvHeapInit+0xb8>)
 80026ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a09      	ldr	r2, [pc, #36]	; (800271c <prvHeapInit+0xbc>)
 80026f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <prvHeapInit+0xc0>)
 80026fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80026fe:	601a      	str	r2, [r3, #0]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	2000013c 	.word	0x2000013c
 8002710:	20012d3c 	.word	0x20012d3c
 8002714:	20012d44 	.word	0x20012d44
 8002718:	20012d4c 	.word	0x20012d4c
 800271c:	20012d48 	.word	0x20012d48
 8002720:	20012d58 	.word	0x20012d58

08002724 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <prvInsertBlockIntoFreeList+0xac>)
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e002      	b.n	8002738 <prvInsertBlockIntoFreeList+0x14>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	d8f7      	bhi.n	8002732 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	4413      	add	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	d108      	bne.n	8002766 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	441a      	add	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	441a      	add	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d118      	bne.n	80027ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <prvInsertBlockIntoFreeList+0xb0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d00d      	beq.n	80027a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	441a      	add	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e008      	b.n	80027b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <prvInsertBlockIntoFreeList+0xb0>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e003      	b.n	80027b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d002      	beq.n	80027c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20012d3c 	.word	0x20012d3c
 80027d4:	20012d44 	.word	0x20012d44

080027d8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <_cbSendSystemDesc+0x14>)
 80027de:	f001 fa6b 	bl	8003cb8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80027e2:	4803      	ldr	r0, [pc, #12]	; (80027f0 <_cbSendSystemDesc+0x18>)
 80027e4:	f001 fa68 	bl	8003cb8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	08006064 	.word	0x08006064
 80027f0:	080060ac 	.word	0x080060ac

080027f4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <SEGGER_SYSVIEW_Conf+0x20>)
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SEGGER_SYSVIEW_Conf+0x20>)
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <SEGGER_SYSVIEW_Conf+0x24>)
 8002802:	4a06      	ldr	r2, [pc, #24]	; (800281c <SEGGER_SYSVIEW_Conf+0x28>)
 8002804:	f000 fdd6 	bl	80033b4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002808:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800280c:	f000 fe16 	bl	800343c <SEGGER_SYSVIEW_SetRAMBase>
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000008 	.word	0x20000008
 8002818:	080027d9 	.word	0x080027d9
 800281c:	080061a0 	.word	0x080061a0

08002820 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002822:	b085      	sub	sp, #20
 8002824:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	e033      	b.n	8002894 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800282c:	491e      	ldr	r1, [pc, #120]	; (80028a8 <_cbSendTaskList+0x88>)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	491a      	ldr	r1, [pc, #104]	; (80028a8 <_cbSendTaskList+0x88>)
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3304      	adds	r3, #4
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	4c16      	ldr	r4, [pc, #88]	; (80028a8 <_cbSendTaskList+0x88>)
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4423      	add	r3, r4
 800285c:	3308      	adds	r3, #8
 800285e:	681c      	ldr	r4, [r3, #0]
 8002860:	4d11      	ldr	r5, [pc, #68]	; (80028a8 <_cbSendTaskList+0x88>)
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	442b      	add	r3, r5
 800286e:	330c      	adds	r3, #12
 8002870:	681d      	ldr	r5, [r3, #0]
 8002872:	4e0d      	ldr	r6, [pc, #52]	; (80028a8 <_cbSendTaskList+0x88>)
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4433      	add	r3, r6
 8002880:	3310      	adds	r3, #16
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	462b      	mov	r3, r5
 8002888:	4622      	mov	r2, r4
 800288a:	f000 f8bd 	bl	8002a08 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3301      	adds	r3, #1
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <_cbSendTaskList+0x8c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	429a      	cmp	r2, r3
 800289c:	d3c6      	bcc.n	800282c <_cbSendTaskList+0xc>
  }
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a8:	20012d5c 	.word	0x20012d5c
 80028ac:	20012dfc 	.word	0x20012dfc

080028b0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80028b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80028b8:	f7fe fd9c 	bl	80013f4 <xTaskGetTickCountFromISR>
 80028bc:	4603      	mov	r3, r0
 80028be:	2200      	movs	r2, #0
 80028c0:	469a      	mov	sl, r3
 80028c2:	4693      	mov	fp, r2
 80028c4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80028c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	f04f 0a00 	mov.w	sl, #0
 80028d4:	f04f 0b00 	mov.w	fp, #0
 80028d8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80028dc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80028e0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80028e4:	4652      	mov	r2, sl
 80028e6:	465b      	mov	r3, fp
 80028e8:	1a14      	subs	r4, r2, r0
 80028ea:	eb63 0501 	sbc.w	r5, r3, r1
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	00ab      	lsls	r3, r5, #2
 80028f8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80028fc:	00a2      	lsls	r2, r4, #2
 80028fe:	4614      	mov	r4, r2
 8002900:	461d      	mov	r5, r3
 8002902:	eb14 0800 	adds.w	r8, r4, r0
 8002906:	eb45 0901 	adc.w	r9, r5, r1
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800291a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291e:	4690      	mov	r8, r2
 8002920:	4699      	mov	r9, r3
 8002922:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002926:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002938 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002946:	2205      	movs	r2, #5
 8002948:	492b      	ldr	r1, [pc, #172]	; (80029f8 <SYSVIEW_AddTask+0xc0>)
 800294a:	68b8      	ldr	r0, [r7, #8]
 800294c:	f003 fb54 	bl	8005ff8 <memcmp>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d04b      	beq.n	80029ee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002956:	4b29      	ldr	r3, [pc, #164]	; (80029fc <SYSVIEW_AddTask+0xc4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b07      	cmp	r3, #7
 800295c:	d903      	bls.n	8002966 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800295e:	4828      	ldr	r0, [pc, #160]	; (8002a00 <SYSVIEW_AddTask+0xc8>)
 8002960:	f001 fcbc 	bl	80042dc <SEGGER_SYSVIEW_Warn>
    return;
 8002964:	e044      	b.n	80029f0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002966:	4b25      	ldr	r3, [pc, #148]	; (80029fc <SYSVIEW_AddTask+0xc4>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4926      	ldr	r1, [pc, #152]	; (8002a04 <SYSVIEW_AddTask+0xcc>)
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <SYSVIEW_AddTask+0xc4>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4921      	ldr	r1, [pc, #132]	; (8002a04 <SYSVIEW_AddTask+0xcc>)
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	3304      	adds	r3, #4
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002990:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <SYSVIEW_AddTask+0xc4>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	491b      	ldr	r1, [pc, #108]	; (8002a04 <SYSVIEW_AddTask+0xcc>)
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3308      	adds	r3, #8
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <SYSVIEW_AddTask+0xc4>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4916      	ldr	r1, [pc, #88]	; (8002a04 <SYSVIEW_AddTask+0xcc>)
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	330c      	adds	r3, #12
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <SYSVIEW_AddTask+0xc4>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4910      	ldr	r1, [pc, #64]	; (8002a04 <SYSVIEW_AddTask+0xcc>)
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3310      	adds	r3, #16
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <SYSVIEW_AddTask+0xc4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3301      	adds	r3, #1
 80029d8:	4a08      	ldr	r2, [pc, #32]	; (80029fc <SYSVIEW_AddTask+0xc4>)
 80029da:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f80e 	bl	8002a08 <SYSVIEW_SendTaskInfo>
 80029ec:	e000      	b.n	80029f0 <SYSVIEW_AddTask+0xb8>
    return;
 80029ee:	bf00      	nop

}
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	080060bc 	.word	0x080060bc
 80029fc:	20012dfc 	.word	0x20012dfc
 8002a00:	080060c4 	.word	0x080060c4
 8002a04:	20012d5c 	.word	0x20012d5c

08002a08 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	2214      	movs	r2, #20
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 fb08 	bl	8006034 <memset>
  TaskInfo.TaskID     = TaskID;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f001 f843 	bl	8003ac8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002a42:	bf00      	nop
 8002a44:	3728      	adds	r7, #40	; 0x28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <_DoInit+0x98>)
 8002a54:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2203      	movs	r2, #3
 8002a60:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <_DoInit+0x9c>)
 8002a66:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a20      	ldr	r2, [pc, #128]	; (8002aec <_DoInit+0xa0>)
 8002a6c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a74:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <_DoInit+0x9c>)
 8002a8c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <_DoInit+0xa4>)
 8002a92:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2210      	movs	r2, #16
 8002a98:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3307      	adds	r3, #7
 8002ab0:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <_DoInit+0xa8>)
 8002ab2:	6810      	ldr	r0, [r2, #0]
 8002ab4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002ab6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <_DoInit+0xac>)
 8002abe:	6810      	ldr	r0, [r2, #0]
 8002ac0:	6018      	str	r0, [r3, #0]
 8002ac2:	8891      	ldrh	r1, [r2, #4]
 8002ac4:	7992      	ldrb	r2, [r2, #6]
 8002ac6:	8099      	strh	r1, [r3, #4]
 8002ac8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002aca:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002ad4:	f3bf 8f5f 	dmb	sy
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	20012e00 	.word	0x20012e00
 8002ae8:	08006114 	.word	0x08006114
 8002aec:	20012ea8 	.word	0x20012ea8
 8002af0:	20013ea8 	.word	0x20013ea8
 8002af4:	08006120 	.word	0x08006120
 8002af8:	08006124 	.word	0x08006124

08002afc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002b08:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <SEGGER_RTT_ReadNoLock+0x108>)
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <SEGGER_RTT_ReadNoLock+0x1e>
 8002b16:	f7ff ff99 	bl	8002a4c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	3360      	adds	r3, #96	; 0x60
 8002b26:	4a37      	ldr	r2, [pc, #220]	; (8002c04 <SEGGER_RTT_ReadNoLock+0x108>)
 8002b28:	4413      	add	r3, r2
 8002b2a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d92b      	bls.n	8002ba0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4293      	cmp	r3, r2
 8002b58:	bf28      	it	cs
 8002b5a:	4613      	movcs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	4413      	add	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	6939      	ldr	r1, [r7, #16]
 8002b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b6e:	f003 fa53 	bl	8006018 <memcpy>
    NumBytesRead += NumBytesRem;
 8002b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	4413      	add	r3, r2
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4413      	add	r3, r2
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	4413      	add	r3, r2
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d101      	bne.n	8002ba0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	bf28      	it	cs
 8002bb0:	4613      	movcs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d019      	beq.n	8002bee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	4413      	add	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	6939      	ldr	r1, [r7, #16]
 8002bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bca:	f003 fa25 	bl	8006018 <memcpy>
    NumBytesRead += NumBytesRem;
 8002bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	4413      	add	r3, r2
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	4413      	add	r3, r2
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3730      	adds	r7, #48	; 0x30
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20012e00 	.word	0x20012e00

08002c08 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002c24:	f7ff ff12 	bl	8002a4c <_DoInit>
  SEGGER_RTT_LOCK();
 8002c28:	f3ef 8311 	mrs	r3, BASEPRI
 8002c2c:	f04f 0120 	mov.w	r1, #32
 8002c30:	f381 8811 	msr	BASEPRI, r1
 8002c34:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002c36:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002c38:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002c3e:	6939      	ldr	r1, [r7, #16]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3304      	adds	r3, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	dbeb      	blt.n	8002c3e <SEGGER_RTT_AllocUpBuffer+0x36>
 8002c66:	e000      	b.n	8002c6a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002c68:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	da3f      	bge.n	8002cf4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002c74:	6939      	ldr	r1, [r7, #16]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002c88:	6939      	ldr	r1, [r7, #16]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	3304      	adds	r3, #4
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002c9e:	6939      	ldr	r1, [r7, #16]
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	3320      	adds	r3, #32
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8002cb2:	6939      	ldr	r1, [r7, #16]
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3328      	adds	r3, #40	; 0x28
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8002cc6:	6939      	ldr	r1, [r7, #16]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3324      	adds	r3, #36	; 0x24
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002cda:	6939      	ldr	r1, [r7, #16]
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	332c      	adds	r3, #44	; 0x2c
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002cee:	f3bf 8f5f 	dmb	sy
 8002cf2:	e002      	b.n	8002cfa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cf8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002d00:	69fb      	ldr	r3, [r7, #28]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20012e00 	.word	0x20012e00

08002d10 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002d1e:	4b33      	ldr	r3, [pc, #204]	; (8002dec <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002d2c:	f7ff fe8e 	bl	8002a4c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002d30:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8002d32:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d24d      	bcs.n	8002ddc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8002d40:	f3ef 8311 	mrs	r3, BASEPRI
 8002d44:	f04f 0120 	mov.w	r1, #32
 8002d48:	f381 8811 	msr	BASEPRI, r1
 8002d4c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d031      	beq.n	8002db8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8002d54:	6979      	ldr	r1, [r7, #20]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	3360      	adds	r3, #96	; 0x60
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002d68:	6979      	ldr	r1, [r7, #20]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	3364      	adds	r3, #100	; 0x64
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002d7c:	6979      	ldr	r1, [r7, #20]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	3368      	adds	r3, #104	; 0x68
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8002d90:	6979      	ldr	r1, [r7, #20]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3370      	adds	r3, #112	; 0x70
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8002da4:	6979      	ldr	r1, [r7, #20]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	336c      	adds	r3, #108	; 0x6c
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8002db8:	6979      	ldr	r1, [r7, #20]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3374      	adds	r3, #116	; 0x74
 8002dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dca:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002dcc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e002      	b.n	8002de2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002de0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8002de2:	69fb      	ldr	r3, [r7, #28]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20012e00 	.word	0x20012e00

08002df0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002e00:	e002      	b.n	8002e08 <_EncodeStr+0x18>
    Len++;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	3301      	adds	r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f6      	bne.n	8002e02 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d901      	bls.n	8002e20 <_EncodeStr+0x30>
    Len = Limit;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2bfe      	cmp	r3, #254	; 0xfe
 8002e24:	d806      	bhi.n	8002e34 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	60fa      	str	r2, [r7, #12]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	e011      	b.n	8002e58 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60fa      	str	r2, [r7, #12]
 8002e3a:	22ff      	movs	r2, #255	; 0xff
 8002e3c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	60fa      	str	r2, [r7, #12]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	0a19      	lsrs	r1, r3, #8
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	60fa      	str	r2, [r7, #12]
 8002e54:	b2ca      	uxtb	r2, r1
 8002e56:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002e5c:	e00a      	b.n	8002e74 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	1c53      	adds	r3, r2, #1
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1c59      	adds	r1, r3, #1
 8002e68:	60f9      	str	r1, [r7, #12]
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	701a      	strb	r2, [r3, #0]
    n++;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3301      	adds	r3, #1
 8002e72:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d3f0      	bcc.n	8002e5e <_EncodeStr+0x6e>
  }
  return pPayload;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3304      	adds	r3, #4
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002eaa:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <_HandleIncomingPacket+0xe0>)
 8002eac:	7e1b      	ldrb	r3, [r3, #24]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	1cfb      	adds	r3, r7, #3
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f7ff fe21 	bl	8002afc <SEGGER_RTT_ReadNoLock>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	dd54      	ble.n	8002f6e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	2b80      	cmp	r3, #128	; 0x80
 8002ec8:	d032      	beq.n	8002f30 <_HandleIncomingPacket+0x8c>
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	dc42      	bgt.n	8002f54 <_HandleIncomingPacket+0xb0>
 8002ece:	2b07      	cmp	r3, #7
 8002ed0:	dc16      	bgt.n	8002f00 <_HandleIncomingPacket+0x5c>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	dd3e      	ble.n	8002f54 <_HandleIncomingPacket+0xb0>
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	2b06      	cmp	r3, #6
 8002eda:	d83b      	bhi.n	8002f54 <_HandleIncomingPacket+0xb0>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <_HandleIncomingPacket+0x40>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002f07 	.word	0x08002f07
 8002ee8:	08002f0d 	.word	0x08002f0d
 8002eec:	08002f13 	.word	0x08002f13
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	08002f1f 	.word	0x08002f1f
 8002ef8:	08002f25 	.word	0x08002f25
 8002efc:	08002f2b 	.word	0x08002f2b
 8002f00:	2b7f      	cmp	r3, #127	; 0x7f
 8002f02:	d036      	beq.n	8002f72 <_HandleIncomingPacket+0xce>
 8002f04:	e026      	b.n	8002f54 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002f06:	f000 fc65 	bl	80037d4 <SEGGER_SYSVIEW_Start>
      break;
 8002f0a:	e037      	b.n	8002f7c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002f0c:	f000 fd1c 	bl	8003948 <SEGGER_SYSVIEW_Stop>
      break;
 8002f10:	e034      	b.n	8002f7c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002f12:	f000 fef5 	bl	8003d00 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002f16:	e031      	b.n	8002f7c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002f18:	f000 feba 	bl	8003c90 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002f1c:	e02e      	b.n	8002f7c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002f1e:	f000 fd39 	bl	8003994 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002f22:	e02b      	b.n	8002f7c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002f24:	f001 f988 	bl	8004238 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002f28:	e028      	b.n	8002f7c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002f2a:	f001 f967 	bl	80041fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002f2e:	e025      	b.n	8002f7c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <_HandleIncomingPacket+0xe0>)
 8002f32:	7e1b      	ldrb	r3, [r3, #24]
 8002f34:	4618      	mov	r0, r3
 8002f36:	1cfb      	adds	r3, r7, #3
 8002f38:	2201      	movs	r2, #1
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7ff fdde 	bl	8002afc <SEGGER_RTT_ReadNoLock>
 8002f40:	4603      	mov	r3, r0
 8002f42:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	dd15      	ble.n	8002f76 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 f8d5 	bl	80040fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002f52:	e010      	b.n	8002f76 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	b25b      	sxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da0e      	bge.n	8002f7a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <_HandleIncomingPacket+0xe0>)
 8002f5e:	7e1b      	ldrb	r3, [r3, #24]
 8002f60:	4618      	mov	r0, r3
 8002f62:	1cfb      	adds	r3, r7, #3
 8002f64:	2201      	movs	r2, #1
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7ff fdc8 	bl	8002afc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002f6c:	e005      	b.n	8002f7a <_HandleIncomingPacket+0xd6>
    }
  }
 8002f6e:	bf00      	nop
 8002f70:	e004      	b.n	8002f7c <_HandleIncomingPacket+0xd8>
      break;
 8002f72:	bf00      	nop
 8002f74:	e002      	b.n	8002f7c <_HandleIncomingPacket+0xd8>
      break;
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <_HandleIncomingPacket+0xd8>
      break;
 8002f7a:	bf00      	nop
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20014ec0 	.word	0x20014ec0

08002f88 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	; 0x30
 8002f8c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002f8e:	2301      	movs	r3, #1
 8002f90:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	3301      	adds	r3, #1
 8002f96:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f9c:	4b31      	ldr	r3, [pc, #196]	; (8003064 <_TrySendOverflowPacket+0xdc>)
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa2:	e00b      	b.n	8002fbc <_TrySendOverflowPacket+0x34>
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	1c59      	adds	r1, r3, #1
 8002fac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002fae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	09db      	lsrs	r3, r3, #7
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8002fc0:	d8f0      	bhi.n	8002fa4 <_TrySendOverflowPacket+0x1c>
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002fd2:	4b25      	ldr	r3, [pc, #148]	; (8003068 <_TrySendOverflowPacket+0xe0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <_TrySendOverflowPacket+0xdc>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	623b      	str	r3, [r7, #32]
 8002fea:	e00b      	b.n	8003004 <_TrySendOverflowPacket+0x7c>
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	1c59      	adds	r1, r3, #1
 8002ff4:	6279      	str	r1, [r7, #36]	; 0x24
 8002ff6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	09db      	lsrs	r3, r3, #7
 8003002:	623b      	str	r3, [r7, #32]
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2b7f      	cmp	r3, #127	; 0x7f
 8003008:	d8f0      	bhi.n	8002fec <_TrySendOverflowPacket+0x64>
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	627a      	str	r2, [r7, #36]	; 0x24
 8003010:	6a3a      	ldr	r2, [r7, #32]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <_TrySendOverflowPacket+0xdc>)
 800301c:	785b      	ldrb	r3, [r3, #1]
 800301e:	4618      	mov	r0, r3
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	461a      	mov	r2, r3
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	4619      	mov	r1, r3
 800302c:	f7fd f8d0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003030:	4603      	mov	r3, r0
 8003032:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <_TrySendOverflowPacket+0xdc>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <_TrySendOverflowPacket+0xdc>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	3b01      	subs	r3, #1
 8003046:	b2da      	uxtb	r2, r3
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <_TrySendOverflowPacket+0xdc>)
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e004      	b.n	8003058 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <_TrySendOverflowPacket+0xdc>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	3301      	adds	r3, #1
 8003054:	4a03      	ldr	r2, [pc, #12]	; (8003064 <_TrySendOverflowPacket+0xdc>)
 8003056:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003058:	693b      	ldr	r3, [r7, #16]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3730      	adds	r7, #48	; 0x30
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20014ec0 	.word	0x20014ec0
 8003068:	e0001004 	.word	0xe0001004

0800306c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003078:	4b6c      	ldr	r3, [pc, #432]	; (800322c <_SendPacket+0x1c0>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d010      	beq.n	80030a2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003080:	4b6a      	ldr	r3, [pc, #424]	; (800322c <_SendPacket+0x1c0>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80a3 	beq.w	80031d0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800308a:	4b68      	ldr	r3, [pc, #416]	; (800322c <_SendPacket+0x1c0>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d109      	bne.n	80030a6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003092:	f7ff ff79 	bl	8002f88 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003096:	4b65      	ldr	r3, [pc, #404]	; (800322c <_SendPacket+0x1c0>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	f040 809a 	bne.w	80031d4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80030a0:	e001      	b.n	80030a6 <_SendPacket+0x3a>
    goto Send;
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <_SendPacket+0x3c>
Send:
 80030a6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b1f      	cmp	r3, #31
 80030ac:	d809      	bhi.n	80030c2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80030ae:	4b5f      	ldr	r3, [pc, #380]	; (800322c <_SendPacket+0x1c0>)
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 808b 	bne.w	80031d8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b17      	cmp	r3, #23
 80030c6:	d807      	bhi.n	80030d8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e03d      	b.n	8003154 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b7f      	cmp	r3, #127	; 0x7f
 80030e4:	d912      	bls.n	800310c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	09da      	lsrs	r2, r3, #7
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	3a01      	subs	r2, #1
 80030fe:	60fa      	str	r2, [r7, #12]
 8003100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e006      	b.n	800311a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3b01      	subs	r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b7f      	cmp	r3, #127	; 0x7f
 800311e:	d912      	bls.n	8003146 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	09da      	lsrs	r2, r3, #7
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3b01      	subs	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	3a01      	subs	r2, #1
 8003138:	60fa      	str	r2, [r7, #12]
 800313a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e006      	b.n	8003154 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3b01      	subs	r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003154:	4b36      	ldr	r3, [pc, #216]	; (8003230 <_SendPacket+0x1c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800315a:	4b34      	ldr	r3, [pc, #208]	; (800322c <_SendPacket+0x1c0>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	e00b      	b.n	8003186 <_SendPacket+0x11a>
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	1c59      	adds	r1, r3, #1
 8003176:	6279      	str	r1, [r7, #36]	; 0x24
 8003178:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	09db      	lsrs	r3, r3, #7
 8003184:	623b      	str	r3, [r7, #32]
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	2b7f      	cmp	r3, #127	; 0x7f
 800318a:	d8f0      	bhi.n	800316e <_SendPacket+0x102>
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	627a      	str	r2, [r7, #36]	; 0x24
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800319c:	4b23      	ldr	r3, [pc, #140]	; (800322c <_SendPacket+0x1c0>)
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	4618      	mov	r0, r3
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	68f9      	ldr	r1, [r7, #12]
 80031ac:	f7fd f810 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80031b0:	4603      	mov	r3, r0
 80031b2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80031ba:	4a1c      	ldr	r2, [pc, #112]	; (800322c <_SendPacket+0x1c0>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	60d3      	str	r3, [r2, #12]
 80031c0:	e00b      	b.n	80031da <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80031c2:	4b1a      	ldr	r3, [pc, #104]	; (800322c <_SendPacket+0x1c0>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <_SendPacket+0x1c0>)
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e004      	b.n	80031da <_SendPacket+0x16e>
    goto SendDone;
 80031d0:	bf00      	nop
 80031d2:	e002      	b.n	80031da <_SendPacket+0x16e>
      goto SendDone;
 80031d4:	bf00      	nop
 80031d6:	e000      	b.n	80031da <_SendPacket+0x16e>
      goto SendDone;
 80031d8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <_SendPacket+0x1c0>)
 80031dc:	7e1b      	ldrb	r3, [r3, #24]
 80031de:	4619      	mov	r1, r3
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <_SendPacket+0x1c8>)
 80031e2:	460b      	mov	r3, r1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	440b      	add	r3, r1
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	336c      	adds	r3, #108	; 0x6c
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <_SendPacket+0x1c0>)
 80031f2:	7e1b      	ldrb	r3, [r3, #24]
 80031f4:	4618      	mov	r0, r3
 80031f6:	490f      	ldr	r1, [pc, #60]	; (8003234 <_SendPacket+0x1c8>)
 80031f8:	4603      	mov	r3, r0
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4403      	add	r3, r0
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	3370      	adds	r3, #112	; 0x70
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d00b      	beq.n	8003222 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <_SendPacket+0x1c0>)
 800320c:	789b      	ldrb	r3, [r3, #2]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <_SendPacket+0x1c0>)
 8003214:	2201      	movs	r2, #1
 8003216:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003218:	f7ff fe44 	bl	8002ea4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <_SendPacket+0x1c0>)
 800321e:	2200      	movs	r2, #0
 8003220:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003222:	bf00      	nop
 8003224:	3728      	adds	r7, #40	; 0x28
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20014ec0 	.word	0x20014ec0
 8003230:	e0001004 	.word	0xe0001004
 8003234:	20012e00 	.word	0x20012e00

08003238 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b0a2      	sub	sp, #136	; 0x88
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800324e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 800325a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01d      	beq.n	800329e <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8003262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003266:	2b25      	cmp	r3, #37	; 0x25
 8003268:	d1f1      	bne.n	800324e <_VPrintHost+0x16>
      c = *p;
 800326a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	1d19      	adds	r1, r3, #4
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6011      	str	r1, [r2, #0]
 800327c:	6819      	ldr	r1, [r3, #0]
 800327e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003288:	460a      	mov	r2, r1
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	3388      	adds	r3, #136	; 0x88
 800328e:	443b      	add	r3, r7
 8003290:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8003294:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003298:	2b10      	cmp	r3, #16
 800329a:	d002      	beq.n	80032a2 <_VPrintHost+0x6a>
    c = *p++;
 800329c:	e7d7      	b.n	800324e <_VPrintHost+0x16>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <_VPrintHost+0x6c>
        break;
 80032a2:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 80032a4:	f3ef 8311 	mrs	r3, BASEPRI
 80032a8:	f04f 0120 	mov.w	r1, #32
 80032ac:	f381 8811 	msr	BASEPRI, r1
 80032b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80032b2:	483f      	ldr	r0, [pc, #252]	; (80033b0 <_VPrintHost+0x178>)
 80032b4:	f7ff fde9 	bl	8002e8a <_PreparePacket>
 80032b8:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80032ba:	2280      	movs	r2, #128	; 0x80
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80032c0:	f7ff fd96 	bl	8002df0 <_EncodeStr>
 80032c4:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 80032c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c8:	677b      	str	r3, [r7, #116]	; 0x74
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	673b      	str	r3, [r7, #112]	; 0x70
 80032ce:	e00b      	b.n	80032e8 <_VPrintHost+0xb0>
 80032d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d6:	1c59      	adds	r1, r3, #1
 80032d8:	6779      	str	r1, [r7, #116]	; 0x74
 80032da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e4:	09db      	lsrs	r3, r3, #7
 80032e6:	673b      	str	r3, [r7, #112]	; 0x70
 80032e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032ea:	2b7f      	cmp	r3, #127	; 0x7f
 80032ec:	d8f0      	bhi.n	80032d0 <_VPrintHost+0x98>
 80032ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	677a      	str	r2, [r7, #116]	; 0x74
 80032f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032fc:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 80032fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003300:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003302:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003306:	66bb      	str	r3, [r7, #104]	; 0x68
 8003308:	e00b      	b.n	8003322 <_VPrintHost+0xea>
 800330a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800330c:	b2da      	uxtb	r2, r3
 800330e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	66f9      	str	r1, [r7, #108]	; 0x6c
 8003314:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800331e:	09db      	lsrs	r3, r3, #7
 8003320:	66bb      	str	r3, [r7, #104]	; 0x68
 8003322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003324:	2b7f      	cmp	r3, #127	; 0x7f
 8003326:	d8f0      	bhi.n	800330a <_VPrintHost+0xd2>
 8003328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800332e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003336:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8003340:	e022      	b.n	8003388 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8003342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003344:	667b      	str	r3, [r7, #100]	; 0x64
 8003346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	663b      	str	r3, [r7, #96]	; 0x60
 800334e:	e00b      	b.n	8003368 <_VPrintHost+0x130>
 8003350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003352:	b2da      	uxtb	r2, r3
 8003354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003356:	1c59      	adds	r1, r3, #1
 8003358:	6679      	str	r1, [r7, #100]	; 0x64
 800335a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003364:	09db      	lsrs	r3, r3, #7
 8003366:	663b      	str	r3, [r7, #96]	; 0x60
 8003368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800336a:	2b7f      	cmp	r3, #127	; 0x7f
 800336c:	d8f0      	bhi.n	8003350 <_VPrintHost+0x118>
 800336e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	667a      	str	r2, [r7, #100]	; 0x64
 8003374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800337c:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800337e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003382:	3304      	adds	r3, #4
 8003384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8003388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800338c:	1e5a      	subs	r2, r3, #1
 800338e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1d5      	bne.n	8003342 <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003396:	221a      	movs	r2, #26
 8003398:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800339a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800339c:	f7ff fe66 	bl	800306c <_SendPacket>
    RECORD_END();
 80033a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a2:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3788      	adds	r7, #136	; 0x88
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20014ef0 	.word	0x20014ef0

080033b4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80033c2:	2300      	movs	r3, #0
 80033c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033c8:	4917      	ldr	r1, [pc, #92]	; (8003428 <SEGGER_SYSVIEW_Init+0x74>)
 80033ca:	4818      	ldr	r0, [pc, #96]	; (800342c <SEGGER_SYSVIEW_Init+0x78>)
 80033cc:	f7ff fc1c 	bl	8002c08 <SEGGER_RTT_AllocUpBuffer>
 80033d0:	4603      	mov	r3, r0
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	4b16      	ldr	r3, [pc, #88]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 80033d6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80033d8:	4b15      	ldr	r3, [pc, #84]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 80033da:	785a      	ldrb	r2, [r3, #1]
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 80033de:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 80033e2:	7e1b      	ldrb	r3, [r3, #24]
 80033e4:	4618      	mov	r0, r3
 80033e6:	2300      	movs	r3, #0
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2308      	movs	r3, #8
 80033ec:	4a11      	ldr	r2, [pc, #68]	; (8003434 <SEGGER_SYSVIEW_Init+0x80>)
 80033ee:	490f      	ldr	r1, [pc, #60]	; (800342c <SEGGER_SYSVIEW_Init+0x78>)
 80033f0:	f7ff fc8e 	bl	8002d10 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80033f4:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80033fa:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <SEGGER_SYSVIEW_Init+0x84>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 8003400:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003402:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003408:	4a09      	ldr	r2, [pc, #36]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800340e:	4a08      	ldr	r2, [pc, #32]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003414:	4a06      	ldr	r2, [pc, #24]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <SEGGER_SYSVIEW_Init+0x7c>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20013eb8 	.word	0x20013eb8
 800342c:	0800612c 	.word	0x0800612c
 8003430:	20014ec0 	.word	0x20014ec0
 8003434:	20014eb8 	.word	0x20014eb8
 8003438:	e0001004 	.word	0xe0001004

0800343c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6113      	str	r3, [r2, #16]
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20014ec0 	.word	0x20014ec0

0800345c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003464:	f3ef 8311 	mrs	r3, BASEPRI
 8003468:	f04f 0120 	mov.w	r1, #32
 800346c:	f381 8811 	msr	BASEPRI, r1
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4808      	ldr	r0, [pc, #32]	; (8003494 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003474:	f7ff fd09 	bl	8002e8a <_PreparePacket>
 8003478:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	f7ff fdf4 	bl	800306c <_SendPacket>
  RECORD_END();
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f383 8811 	msr	BASEPRI, r3
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20014ef0 	.word	0x20014ef0

08003498 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80034a2:	f3ef 8311 	mrs	r3, BASEPRI
 80034a6:	f04f 0120 	mov.w	r1, #32
 80034aa:	f381 8811 	msr	BASEPRI, r1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	4816      	ldr	r0, [pc, #88]	; (800350c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80034b2:	f7ff fcea 	bl	8002e8a <_PreparePacket>
 80034b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	e00b      	b.n	80034de <SEGGER_SYSVIEW_RecordU32+0x46>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	1c59      	adds	r1, r3, #1
 80034ce:	61f9      	str	r1, [r7, #28]
 80034d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	09db      	lsrs	r3, r3, #7
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b7f      	cmp	r3, #127	; 0x7f
 80034e2:	d8f0      	bhi.n	80034c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	61fa      	str	r2, [r7, #28]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	6938      	ldr	r0, [r7, #16]
 80034fa:	f7ff fdb7 	bl	800306c <_SendPacket>
  RECORD_END();
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f383 8811 	msr	BASEPRI, r3
}
 8003504:	bf00      	nop
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20014ef0 	.word	0x20014ef0

08003510 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	; 0x30
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800351c:	f3ef 8311 	mrs	r3, BASEPRI
 8003520:	f04f 0120 	mov.w	r1, #32
 8003524:	f381 8811 	msr	BASEPRI, r1
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	4825      	ldr	r0, [pc, #148]	; (80035c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800352c:	f7ff fcad 	bl	8002e8a <_PreparePacket>
 8003530:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
 800353e:	e00b      	b.n	8003558 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	b2da      	uxtb	r2, r3
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	1c59      	adds	r1, r3, #1
 8003548:	62f9      	str	r1, [r7, #44]	; 0x2c
 800354a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	09db      	lsrs	r3, r3, #7
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	2b7f      	cmp	r3, #127	; 0x7f
 800355c:	d8f0      	bhi.n	8003540 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	623b      	str	r3, [r7, #32]
 8003576:	e00b      	b.n	8003590 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	6279      	str	r1, [r7, #36]	; 0x24
 8003582:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	09db      	lsrs	r3, r3, #7
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	2b7f      	cmp	r3, #127	; 0x7f
 8003594:	d8f0      	bhi.n	8003578 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	627a      	str	r2, [r7, #36]	; 0x24
 800359c:	6a3a      	ldr	r2, [r7, #32]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	6979      	ldr	r1, [r7, #20]
 80035aa:	69b8      	ldr	r0, [r7, #24]
 80035ac:	f7ff fd5e 	bl	800306c <_SendPacket>
  RECORD_END();
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f383 8811 	msr	BASEPRI, r3
}
 80035b6:	bf00      	nop
 80035b8:	3730      	adds	r7, #48	; 0x30
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20014ef0 	.word	0x20014ef0

080035c4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08e      	sub	sp, #56	; 0x38
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80035d2:	f3ef 8311 	mrs	r3, BASEPRI
 80035d6:	f04f 0120 	mov.w	r1, #32
 80035da:	f381 8811 	msr	BASEPRI, r1
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	4832      	ldr	r0, [pc, #200]	; (80036ac <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80035e2:	f7ff fc52 	bl	8002e8a <_PreparePacket>
 80035e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
 80035f4:	e00b      	b.n	800360e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fc:	1c59      	adds	r1, r3, #1
 80035fe:	6379      	str	r1, [r7, #52]	; 0x34
 8003600:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	09db      	lsrs	r3, r3, #7
 800360c:	633b      	str	r3, [r7, #48]	; 0x30
 800360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003610:	2b7f      	cmp	r3, #127	; 0x7f
 8003612:	d8f0      	bhi.n	80035f6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	637a      	str	r2, [r7, #52]	; 0x34
 800361a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
 800362c:	e00b      	b.n	8003646 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	b2da      	uxtb	r2, r3
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	1c59      	adds	r1, r3, #1
 8003636:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	09db      	lsrs	r3, r3, #7
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	2b7f      	cmp	r3, #127	; 0x7f
 800364a:	d8f0      	bhi.n	800362e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	623b      	str	r3, [r7, #32]
 8003664:	e00b      	b.n	800367e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	1c59      	adds	r1, r3, #1
 800366e:	6279      	str	r1, [r7, #36]	; 0x24
 8003670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	09db      	lsrs	r3, r3, #7
 800367c:	623b      	str	r3, [r7, #32]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	2b7f      	cmp	r3, #127	; 0x7f
 8003682:	d8f0      	bhi.n	8003666 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	627a      	str	r2, [r7, #36]	; 0x24
 800368a:	6a3a      	ldr	r2, [r7, #32]
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	6979      	ldr	r1, [r7, #20]
 8003698:	69b8      	ldr	r0, [r7, #24]
 800369a:	f7ff fce7 	bl	800306c <_SendPacket>
  RECORD_END();
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f383 8811 	msr	BASEPRI, r3
}
 80036a4:	bf00      	nop
 80036a6:	3738      	adds	r7, #56	; 0x38
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20014ef0 	.word	0x20014ef0

080036b0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b090      	sub	sp, #64	; 0x40
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80036be:	f3ef 8311 	mrs	r3, BASEPRI
 80036c2:	f04f 0120 	mov.w	r1, #32
 80036c6:	f381 8811 	msr	BASEPRI, r1
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	4840      	ldr	r0, [pc, #256]	; (80037d0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80036ce:	f7ff fbdc 	bl	8002e8a <_PreparePacket>
 80036d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e0:	e00b      	b.n	80036fa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e8:	1c59      	adds	r1, r3, #1
 80036ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80036ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f6:	09db      	lsrs	r3, r3, #7
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	2b7f      	cmp	r3, #127	; 0x7f
 80036fe:	d8f0      	bhi.n	80036e2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
 8003718:	e00b      	b.n	8003732 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	b2da      	uxtb	r2, r3
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	1c59      	adds	r1, r3, #1
 8003722:	6379      	str	r1, [r7, #52]	; 0x34
 8003724:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	09db      	lsrs	r3, r3, #7
 8003730:	633b      	str	r3, [r7, #48]	; 0x30
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	2b7f      	cmp	r3, #127	; 0x7f
 8003736:	d8f0      	bhi.n	800371a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	637a      	str	r2, [r7, #52]	; 0x34
 800373e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003750:	e00b      	b.n	800376a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	b2da      	uxtb	r2, r3
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	1c59      	adds	r1, r3, #1
 800375a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800375c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	09db      	lsrs	r3, r3, #7
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	2b7f      	cmp	r3, #127	; 0x7f
 800376e:	d8f0      	bhi.n	8003752 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	e00b      	b.n	80037a2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	1c59      	adds	r1, r3, #1
 8003792:	6279      	str	r1, [r7, #36]	; 0x24
 8003794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	09db      	lsrs	r3, r3, #7
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	2b7f      	cmp	r3, #127	; 0x7f
 80037a6:	d8f0      	bhi.n	800378a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	627a      	str	r2, [r7, #36]	; 0x24
 80037ae:	6a3a      	ldr	r2, [r7, #32]
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	6979      	ldr	r1, [r7, #20]
 80037bc:	69b8      	ldr	r0, [r7, #24]
 80037be:	f7ff fc55 	bl	800306c <_SendPacket>
  RECORD_END();
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f383 8811 	msr	BASEPRI, r3
}
 80037c8:	bf00      	nop
 80037ca:	3740      	adds	r7, #64	; 0x40
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20014ef0 	.word	0x20014ef0

080037d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	; 0x30
 80037d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80037da:	4b58      	ldr	r3, [pc, #352]	; (800393c <SEGGER_SYSVIEW_Start+0x168>)
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80037e0:	f3ef 8311 	mrs	r3, BASEPRI
 80037e4:	f04f 0120 	mov.w	r1, #32
 80037e8:	f381 8811 	msr	BASEPRI, r1
 80037ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80037ee:	4b53      	ldr	r3, [pc, #332]	; (800393c <SEGGER_SYSVIEW_Start+0x168>)
 80037f0:	785b      	ldrb	r3, [r3, #1]
 80037f2:	220a      	movs	r2, #10
 80037f4:	4952      	ldr	r1, [pc, #328]	; (8003940 <SEGGER_SYSVIEW_Start+0x16c>)
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc fcea 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003802:	200a      	movs	r0, #10
 8003804:	f7ff fe2a 	bl	800345c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003808:	f3ef 8311 	mrs	r3, BASEPRI
 800380c:	f04f 0120 	mov.w	r1, #32
 8003810:	f381 8811 	msr	BASEPRI, r1
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	484b      	ldr	r0, [pc, #300]	; (8003944 <SEGGER_SYSVIEW_Start+0x170>)
 8003818:	f7ff fb37 	bl	8002e8a <_PreparePacket>
 800381c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	4b45      	ldr	r3, [pc, #276]	; (800393c <SEGGER_SYSVIEW_Start+0x168>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
 800382c:	e00b      	b.n	8003846 <SEGGER_SYSVIEW_Start+0x72>
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	b2da      	uxtb	r2, r3
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	1c59      	adds	r1, r3, #1
 8003836:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	09db      	lsrs	r3, r3, #7
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	2b7f      	cmp	r3, #127	; 0x7f
 800384a:	d8f0      	bhi.n	800382e <SEGGER_SYSVIEW_Start+0x5a>
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <SEGGER_SYSVIEW_Start+0x168>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	623b      	str	r3, [r7, #32]
 8003866:	e00b      	b.n	8003880 <SEGGER_SYSVIEW_Start+0xac>
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	6279      	str	r1, [r7, #36]	; 0x24
 8003872:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	09db      	lsrs	r3, r3, #7
 800387e:	623b      	str	r3, [r7, #32]
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	2b7f      	cmp	r3, #127	; 0x7f
 8003884:	d8f0      	bhi.n	8003868 <SEGGER_SYSVIEW_Start+0x94>
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	627a      	str	r2, [r7, #36]	; 0x24
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	4b28      	ldr	r3, [pc, #160]	; (800393c <SEGGER_SYSVIEW_Start+0x168>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e00b      	b.n	80038ba <SEGGER_SYSVIEW_Start+0xe6>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	61f9      	str	r1, [r7, #28]
 80038ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	09db      	lsrs	r3, r3, #7
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b7f      	cmp	r3, #127	; 0x7f
 80038be:	d8f0      	bhi.n	80038a2 <SEGGER_SYSVIEW_Start+0xce>
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	61fa      	str	r2, [r7, #28]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	e00b      	b.n	80038f2 <SEGGER_SYSVIEW_Start+0x11e>
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	1c59      	adds	r1, r3, #1
 80038e2:	6179      	str	r1, [r7, #20]
 80038e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	09db      	lsrs	r3, r3, #7
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b7f      	cmp	r3, #127	; 0x7f
 80038f6:	d8f0      	bhi.n	80038da <SEGGER_SYSVIEW_Start+0x106>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	617a      	str	r2, [r7, #20]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003908:	2218      	movs	r2, #24
 800390a:	6839      	ldr	r1, [r7, #0]
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff fbad 	bl	800306c <_SendPacket>
      RECORD_END();
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <SEGGER_SYSVIEW_Start+0x168>)
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <SEGGER_SYSVIEW_Start+0x168>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003926:	f000 f9eb 	bl	8003d00 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800392a:	f000 f9b1 	bl	8003c90 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800392e:	f000 fc83 	bl	8004238 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003932:	bf00      	nop
 8003934:	3730      	adds	r7, #48	; 0x30
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20014ec0 	.word	0x20014ec0
 8003940:	080061a8 	.word	0x080061a8
 8003944:	20014ef0 	.word	0x20014ef0

08003948 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800394e:	f3ef 8311 	mrs	r3, BASEPRI
 8003952:	f04f 0120 	mov.w	r1, #32
 8003956:	f381 8811 	msr	BASEPRI, r1
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	480b      	ldr	r0, [pc, #44]	; (800398c <SEGGER_SYSVIEW_Stop+0x44>)
 800395e:	f7ff fa94 	bl	8002e8a <_PreparePacket>
 8003962:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <SEGGER_SYSVIEW_Stop+0x48>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800396c:	220b      	movs	r2, #11
 800396e:	6839      	ldr	r1, [r7, #0]
 8003970:	6838      	ldr	r0, [r7, #0]
 8003972:	f7ff fb7b 	bl	800306c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <SEGGER_SYSVIEW_Stop+0x48>)
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f383 8811 	msr	BASEPRI, r3
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20014ef0 	.word	0x20014ef0
 8003990:	20014ec0 	.word	0x20014ec0

08003994 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800399a:	f3ef 8311 	mrs	r3, BASEPRI
 800399e:	f04f 0120 	mov.w	r1, #32
 80039a2:	f381 8811 	msr	BASEPRI, r1
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	4845      	ldr	r0, [pc, #276]	; (8003ac0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80039aa:	f7ff fa6e 	bl	8002e8a <_PreparePacket>
 80039ae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b8:	4b42      	ldr	r3, [pc, #264]	; (8003ac4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039be:	e00b      	b.n	80039d8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	1c59      	adds	r1, r3, #1
 80039c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	09db      	lsrs	r3, r3, #7
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	2b7f      	cmp	r3, #127	; 0x7f
 80039dc:	d8f0      	bhi.n	80039c0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	e00b      	b.n	8003a12 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	1c59      	adds	r1, r3, #1
 8003a02:	6279      	str	r1, [r7, #36]	; 0x24
 8003a04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	09db      	lsrs	r3, r3, #7
 8003a10:	623b      	str	r3, [r7, #32]
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	2b7f      	cmp	r3, #127	; 0x7f
 8003a16:	d8f0      	bhi.n	80039fa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	e00b      	b.n	8003a4c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	1c59      	adds	r1, r3, #1
 8003a3c:	61f9      	str	r1, [r7, #28]
 8003a3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	09db      	lsrs	r3, r3, #7
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a50:	d8f0      	bhi.n	8003a34 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	61fa      	str	r2, [r7, #28]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	e00b      	b.n	8003a84 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1c59      	adds	r1, r3, #1
 8003a74:	6179      	str	r1, [r7, #20]
 8003a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	09db      	lsrs	r3, r3, #7
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b7f      	cmp	r3, #127	; 0x7f
 8003a88:	d8f0      	bhi.n	8003a6c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	617a      	str	r2, [r7, #20]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003a9a:	2218      	movs	r2, #24
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	68b8      	ldr	r0, [r7, #8]
 8003aa0:	f7ff fae4 	bl	800306c <_SendPacket>
  RECORD_END();
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003ab2:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	4798      	blx	r3
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3730      	adds	r7, #48	; 0x30
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20014ef0 	.word	0x20014ef0
 8003ac4:	20014ec0 	.word	0x20014ec0

08003ac8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b092      	sub	sp, #72	; 0x48
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003ad0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad4:	f04f 0120 	mov.w	r1, #32
 8003ad8:	f381 8811 	msr	BASEPRI, r1
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	486a      	ldr	r0, [pc, #424]	; (8003c88 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003ae0:	f7ff f9d3 	bl	8002e8a <_PreparePacket>
 8003ae4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	647b      	str	r3, [r7, #68]	; 0x44
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b66      	ldr	r3, [pc, #408]	; (8003c8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	643b      	str	r3, [r7, #64]	; 0x40
 8003afa:	e00b      	b.n	8003b14 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b02:	1c59      	adds	r1, r3, #1
 8003b04:	6479      	str	r1, [r7, #68]	; 0x44
 8003b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b10:	09db      	lsrs	r3, r3, #7
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40
 8003b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b16:	2b7f      	cmp	r3, #127	; 0x7f
 8003b18:	d8f0      	bhi.n	8003afc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	647a      	str	r2, [r7, #68]	; 0x44
 8003b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b34:	e00b      	b.n	8003b4e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3c:	1c59      	adds	r1, r3, #1
 8003b3e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003b40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	09db      	lsrs	r3, r3, #7
 8003b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2b7f      	cmp	r3, #127	; 0x7f
 8003b52:	d8f0      	bhi.n	8003b36 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b62:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7ff f93f 	bl	8002df0 <_EncodeStr>
 8003b72:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003b74:	2209      	movs	r2, #9
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	6938      	ldr	r0, [r7, #16]
 8003b7a:	f7ff fa77 	bl	800306c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b40      	ldr	r3, [pc, #256]	; (8003c8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	633b      	str	r3, [r7, #48]	; 0x30
 8003b92:	e00b      	b.n	8003bac <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9a:	1c59      	adds	r1, r3, #1
 8003b9c:	6379      	str	r1, [r7, #52]	; 0x34
 8003b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	09db      	lsrs	r3, r3, #7
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	2b7f      	cmp	r3, #127	; 0x7f
 8003bb0:	d8f0      	bhi.n	8003b94 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	637a      	str	r2, [r7, #52]	; 0x34
 8003bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bcc:	e00b      	b.n	8003be6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	1c59      	adds	r1, r3, #1
 8003bd6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	09db      	lsrs	r3, r3, #7
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	2b7f      	cmp	r3, #127	; 0x7f
 8003bea:	d8f0      	bhi.n	8003bce <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	e00b      	b.n	8003c20 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	1c59      	adds	r1, r3, #1
 8003c10:	6279      	str	r1, [r7, #36]	; 0x24
 8003c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	09db      	lsrs	r3, r3, #7
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	2b7f      	cmp	r3, #127	; 0x7f
 8003c24:	d8f0      	bhi.n	8003c08 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	627a      	str	r2, [r7, #36]	; 0x24
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	e00b      	b.n	8003c58 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	1c59      	adds	r1, r3, #1
 8003c48:	61f9      	str	r1, [r7, #28]
 8003c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	09db      	lsrs	r3, r3, #7
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c5c:	d8f0      	bhi.n	8003c40 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	61fa      	str	r2, [r7, #28]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003c6e:	2215      	movs	r2, #21
 8003c70:	68f9      	ldr	r1, [r7, #12]
 8003c72:	6938      	ldr	r0, [r7, #16]
 8003c74:	f7ff f9fa 	bl	800306c <_SendPacket>
  RECORD_END();
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f383 8811 	msr	BASEPRI, r3
}
 8003c7e:	bf00      	nop
 8003c80:	3748      	adds	r7, #72	; 0x48
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20014ef0 	.word	0x20014ef0
 8003c8c:	20014ec0 	.word	0x20014ec0

08003c90 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003c94:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003ca6:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4798      	blx	r3
  }
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20014ec0 	.word	0x20014ec0

08003cb8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8003cc4:	f04f 0120 	mov.w	r1, #32
 8003cc8:	f381 8811 	msr	BASEPRI, r1
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	480b      	ldr	r0, [pc, #44]	; (8003cfc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003cd0:	f7ff f8db 	bl	8002e8a <_PreparePacket>
 8003cd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	6938      	ldr	r0, [r7, #16]
 8003cdc:	f7ff f888 	bl	8002df0 <_EncodeStr>
 8003ce0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003ce2:	220e      	movs	r2, #14
 8003ce4:	68f9      	ldr	r1, [r7, #12]
 8003ce6:	6938      	ldr	r0, [r7, #16]
 8003ce8:	f7ff f9c0 	bl	800306c <_SendPacket>
  RECORD_END();
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f383 8811 	msr	BASEPRI, r3
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20014ef0 	.word	0x20014ef0

08003d00 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003d06:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01a      	beq.n	8003d44 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003d18:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4798      	blx	r3
 8003d20:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003d24:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	000a      	movs	r2, r1
 8003d34:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003d36:	4613      	mov	r3, r2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	200d      	movs	r0, #13
 8003d3e:	f7ff fbe7 	bl	8003510 <SEGGER_SYSVIEW_RecordU32x2>
 8003d42:	e006      	b.n	8003d52 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	200c      	movs	r0, #12
 8003d4c:	f7ff fba4 	bl	8003498 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd90      	pop	{r4, r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20014ec0 	.word	0x20014ec0
 8003d60:	e0001004 	.word	0xe0001004

08003d64 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d6e:	f04f 0120 	mov.w	r1, #32
 8003d72:	f381 8811 	msr	BASEPRI, r1
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	4819      	ldr	r0, [pc, #100]	; (8003de0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003d7a:	f7ff f886 	bl	8002e8a <_PreparePacket>
 8003d7e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003d84:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e00b      	b.n	8003db0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	6179      	str	r1, [r7, #20]
 8003da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	09db      	lsrs	r3, r3, #7
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b7f      	cmp	r3, #127	; 0x7f
 8003db4:	d8f0      	bhi.n	8003d98 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	617a      	str	r2, [r7, #20]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	68b8      	ldr	r0, [r7, #8]
 8003dcc:	f7ff f94e 	bl	800306c <_SendPacket>
  RECORD_END();
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f383 8811 	msr	BASEPRI, r3
}
 8003dd6:	bf00      	nop
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20014ef0 	.word	0x20014ef0
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003dee:	f3ef 8311 	mrs	r3, BASEPRI
 8003df2:	f04f 0120 	mov.w	r1, #32
 8003df6:	f381 8811 	msr	BASEPRI, r1
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	4807      	ldr	r0, [pc, #28]	; (8003e1c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003dfe:	f7ff f844 	bl	8002e8a <_PreparePacket>
 8003e02:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003e04:	2203      	movs	r2, #3
 8003e06:	6839      	ldr	r1, [r7, #0]
 8003e08:	6838      	ldr	r0, [r7, #0]
 8003e0a:	f7ff f92f 	bl	800306c <_SendPacket>
  RECORD_END();
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f383 8811 	msr	BASEPRI, r3
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20014ef0 	.word	0x20014ef0

08003e20 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e26:	f3ef 8311 	mrs	r3, BASEPRI
 8003e2a:	f04f 0120 	mov.w	r1, #32
 8003e2e:	f381 8811 	msr	BASEPRI, r1
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	4807      	ldr	r0, [pc, #28]	; (8003e54 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003e36:	f7ff f828 	bl	8002e8a <_PreparePacket>
 8003e3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003e3c:	2212      	movs	r2, #18
 8003e3e:	6839      	ldr	r1, [r7, #0]
 8003e40:	6838      	ldr	r0, [r7, #0]
 8003e42:	f7ff f913 	bl	800306c <_SendPacket>
  RECORD_END();
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f383 8811 	msr	BASEPRI, r3
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20014ef0 	.word	0x20014ef0

08003e58 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e62:	f04f 0120 	mov.w	r1, #32
 8003e66:	f381 8811 	msr	BASEPRI, r1
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	4807      	ldr	r0, [pc, #28]	; (8003e8c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003e6e:	f7ff f80c 	bl	8002e8a <_PreparePacket>
 8003e72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003e74:	2211      	movs	r2, #17
 8003e76:	6839      	ldr	r1, [r7, #0]
 8003e78:	6838      	ldr	r0, [r7, #0]
 8003e7a:	f7ff f8f7 	bl	800306c <_SendPacket>
  RECORD_END();
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f383 8811 	msr	BASEPRI, r3
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20014ef0 	.word	0x20014ef0

08003e90 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003e98:	f3ef 8311 	mrs	r3, BASEPRI
 8003e9c:	f04f 0120 	mov.w	r1, #32
 8003ea0:	f381 8811 	msr	BASEPRI, r1
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	4819      	ldr	r0, [pc, #100]	; (8003f0c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003ea8:	f7fe ffef 	bl	8002e8a <_PreparePacket>
 8003eac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003eb2:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e00b      	b.n	8003ede <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	1c59      	adds	r1, r3, #1
 8003ece:	61f9      	str	r1, [r7, #28]
 8003ed0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	09db      	lsrs	r3, r3, #7
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee2:	d8f0      	bhi.n	8003ec6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	61fa      	str	r2, [r7, #28]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	6938      	ldr	r0, [r7, #16]
 8003efa:	f7ff f8b7 	bl	800306c <_SendPacket>
  RECORD_END();
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f383 8811 	msr	BASEPRI, r3
}
 8003f04:	bf00      	nop
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20014ef0 	.word	0x20014ef0
 8003f10:	20014ec0 	.word	0x20014ec0

08003f14 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f20:	f04f 0120 	mov.w	r1, #32
 8003f24:	f381 8811 	msr	BASEPRI, r1
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	4819      	ldr	r0, [pc, #100]	; (8003f90 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003f2c:	f7fe ffad 	bl	8002e8a <_PreparePacket>
 8003f30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	e00b      	b.n	8003f62 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	1c59      	adds	r1, r3, #1
 8003f52:	61f9      	str	r1, [r7, #28]
 8003f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	09db      	lsrs	r3, r3, #7
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b7f      	cmp	r3, #127	; 0x7f
 8003f66:	d8f0      	bhi.n	8003f4a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	61fa      	str	r2, [r7, #28]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003f78:	2204      	movs	r2, #4
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	6938      	ldr	r0, [r7, #16]
 8003f7e:	f7ff f875 	bl	800306c <_SendPacket>
  RECORD_END();
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f383 8811 	msr	BASEPRI, r3
}
 8003f88:	bf00      	nop
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20014ef0 	.word	0x20014ef0
 8003f94:	20014ec0 	.word	0x20014ec0

08003f98 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8003fa4:	f04f 0120 	mov.w	r1, #32
 8003fa8:	f381 8811 	msr	BASEPRI, r1
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	4819      	ldr	r0, [pc, #100]	; (8004014 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003fb0:	f7fe ff6b 	bl	8002e8a <_PreparePacket>
 8003fb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003fba:	4b17      	ldr	r3, [pc, #92]	; (8004018 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	e00b      	b.n	8003fe6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	1c59      	adds	r1, r3, #1
 8003fd6:	61f9      	str	r1, [r7, #28]
 8003fd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	09db      	lsrs	r3, r3, #7
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8003fea:	d8f0      	bhi.n	8003fce <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	61fa      	str	r2, [r7, #28]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003ffc:	2206      	movs	r2, #6
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	6938      	ldr	r0, [r7, #16]
 8004002:	f7ff f833 	bl	800306c <_SendPacket>
  RECORD_END();
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f383 8811 	msr	BASEPRI, r3
}
 800400c:	bf00      	nop
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20014ef0 	.word	0x20014ef0
 8004018:	20014ec0 	.word	0x20014ec0

0800401c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004026:	f3ef 8311 	mrs	r3, BASEPRI
 800402a:	f04f 0120 	mov.w	r1, #32
 800402e:	f381 8811 	msr	BASEPRI, r1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	4827      	ldr	r0, [pc, #156]	; (80040d4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004036:	f7fe ff28 	bl	8002e8a <_PreparePacket>
 800403a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004040:	4b25      	ldr	r3, [pc, #148]	; (80040d8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	623b      	str	r3, [r7, #32]
 8004052:	e00b      	b.n	800406c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	b2da      	uxtb	r2, r3
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	6279      	str	r1, [r7, #36]	; 0x24
 800405e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	09db      	lsrs	r3, r3, #7
 800406a:	623b      	str	r3, [r7, #32]
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2b7f      	cmp	r3, #127	; 0x7f
 8004070:	d8f0      	bhi.n	8004054 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	627a      	str	r2, [r7, #36]	; 0x24
 8004078:	6a3a      	ldr	r2, [r7, #32]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e00b      	b.n	80040a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	61f9      	str	r1, [r7, #28]
 8004096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	09db      	lsrs	r3, r3, #7
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b7f      	cmp	r3, #127	; 0x7f
 80040a8:	d8f0      	bhi.n	800408c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	61fa      	str	r2, [r7, #28]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80040ba:	2207      	movs	r2, #7
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	6938      	ldr	r0, [r7, #16]
 80040c0:	f7fe ffd4 	bl	800306c <_SendPacket>
  RECORD_END();
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f383 8811 	msr	BASEPRI, r3
}
 80040ca:	bf00      	nop
 80040cc:	3728      	adds	r7, #40	; 0x28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20014ef0 	.word	0x20014ef0
 80040d8:	20014ec0 	.word	0x20014ec0

080040dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80040e4:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	1ad3      	subs	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	20014ec0 	.word	0x20014ec0

080040fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08c      	sub	sp, #48	; 0x30
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004106:	4b3b      	ldr	r3, [pc, #236]	; (80041f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d06d      	beq.n	80041ea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800410e:	4b39      	ldr	r3, [pc, #228]	; (80041f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004114:	2300      	movs	r3, #0
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
 8004118:	e008      	b.n	800412c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	3301      	adds	r3, #1
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004130:	429a      	cmp	r2, r3
 8004132:	d3f2      	bcc.n	800411a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004134:	e000      	b.n	8004138 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004136:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d055      	beq.n	80041ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800413e:	f3ef 8311 	mrs	r3, BASEPRI
 8004142:	f04f 0120 	mov.w	r1, #32
 8004146:	f381 8811 	msr	BASEPRI, r1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	482a      	ldr	r0, [pc, #168]	; (80041f8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800414e:	f7fe fe9c 	bl	8002e8a <_PreparePacket>
 8004152:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	e00b      	b.n	800417a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	1c59      	adds	r1, r3, #1
 800416a:	6279      	str	r1, [r7, #36]	; 0x24
 800416c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	09db      	lsrs	r3, r3, #7
 8004178:	623b      	str	r3, [r7, #32]
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	2b7f      	cmp	r3, #127	; 0x7f
 800417e:	d8f0      	bhi.n	8004162 <SEGGER_SYSVIEW_SendModule+0x66>
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	627a      	str	r2, [r7, #36]	; 0x24
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	e00b      	b.n	80041b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	1c59      	adds	r1, r3, #1
 80041a4:	61f9      	str	r1, [r7, #28]
 80041a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	09db      	lsrs	r3, r3, #7
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b7f      	cmp	r3, #127	; 0x7f
 80041b8:	d8f0      	bhi.n	800419c <SEGGER_SYSVIEW_SendModule+0xa0>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	61fa      	str	r2, [r7, #28]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	4619      	mov	r1, r3
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7fe fe0c 	bl	8002df0 <_EncodeStr>
 80041d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80041da:	2216      	movs	r2, #22
 80041dc:	68f9      	ldr	r1, [r7, #12]
 80041de:	6938      	ldr	r0, [r7, #16]
 80041e0:	f7fe ff44 	bl	800306c <_SendPacket>
      RECORD_END();
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80041ea:	bf00      	nop
 80041ec:	3730      	adds	r7, #48	; 0x30
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20014ee8 	.word	0x20014ee8
 80041f8:	20014ef0 	.word	0x20014ef0

080041fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004202:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00f      	beq.n	800422a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800420a:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f2      	bne.n	8004210 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20014ee8 	.word	0x20014ee8

08004238 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800423e:	f3ef 8311 	mrs	r3, BASEPRI
 8004242:	f04f 0120 	mov.w	r1, #32
 8004246:	f381 8811 	msr	BASEPRI, r1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	4817      	ldr	r0, [pc, #92]	; (80042ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800424e:	f7fe fe1c 	bl	8002e8a <_PreparePacket>
 8004252:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	e00b      	b.n	800427c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	6179      	str	r1, [r7, #20]
 800426e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	09db      	lsrs	r3, r3, #7
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b7f      	cmp	r3, #127	; 0x7f
 8004280:	d8f0      	bhi.n	8004264 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	617a      	str	r2, [r7, #20]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004292:	221b      	movs	r2, #27
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	68b8      	ldr	r0, [r7, #8]
 8004298:	f7fe fee8 	bl	800306c <_SendPacket>
  RECORD_END();
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f383 8811 	msr	BASEPRI, r3
}
 80042a2:	bf00      	nop
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20014ef0 	.word	0x20014ef0
 80042b0:	20014eec 	.word	0x20014eec

080042b4 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80042b4:	b40f      	push	{r0, r1, r2, r3}
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	461a      	mov	r2, r3
 80042c6:	2100      	movs	r1, #0
 80042c8:	6938      	ldr	r0, [r7, #16]
 80042ca:	f7fe ffb5 	bl	8003238 <_VPrintHost>
  va_end(ParamList);
#endif
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042d8:	b004      	add	sp, #16
 80042da:	4770      	bx	lr

080042dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042e4:	f3ef 8311 	mrs	r3, BASEPRI
 80042e8:	f04f 0120 	mov.w	r1, #32
 80042ec:	f381 8811 	msr	BASEPRI, r1
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	4827      	ldr	r0, [pc, #156]	; (8004390 <SEGGER_SYSVIEW_Warn+0xb4>)
 80042f4:	f7fe fdc9 	bl	8002e8a <_PreparePacket>
 80042f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042fa:	2280      	movs	r2, #128	; 0x80
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	6938      	ldr	r0, [r7, #16]
 8004300:	f7fe fd76 	bl	8002df0 <_EncodeStr>
 8004304:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
 800430a:	2301      	movs	r3, #1
 800430c:	623b      	str	r3, [r7, #32]
 800430e:	e00b      	b.n	8004328 <SEGGER_SYSVIEW_Warn+0x4c>
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	1c59      	adds	r1, r3, #1
 8004318:	6279      	str	r1, [r7, #36]	; 0x24
 800431a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	09db      	lsrs	r3, r3, #7
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	2b7f      	cmp	r3, #127	; 0x7f
 800432c:	d8f0      	bhi.n	8004310 <SEGGER_SYSVIEW_Warn+0x34>
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	627a      	str	r2, [r7, #36]	; 0x24
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	e00b      	b.n	8004360 <SEGGER_SYSVIEW_Warn+0x84>
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	b2da      	uxtb	r2, r3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	1c59      	adds	r1, r3, #1
 8004350:	61f9      	str	r1, [r7, #28]
 8004352:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	09db      	lsrs	r3, r3, #7
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b7f      	cmp	r3, #127	; 0x7f
 8004364:	d8f0      	bhi.n	8004348 <SEGGER_SYSVIEW_Warn+0x6c>
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	61fa      	str	r2, [r7, #28]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004376:	221a      	movs	r2, #26
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	6938      	ldr	r0, [r7, #16]
 800437c:	f7fe fe76 	bl	800306c <_SendPacket>
  RECORD_END();
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f383 8811 	msr	BASEPRI, r3
}
 8004386:	bf00      	nop
 8004388:	3728      	adds	r7, #40	; 0x28
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20014ef0 	.word	0x20014ef0

08004394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800439a:	f000 fbcb 	bl	8004b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800439e:	f000 f899 	bl	80044d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043a2:	f000 f901 	bl	80045a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Enable the DWT (Data Watch Point) Cycle Count Feature
  DWT_CTRL |= (1 << 0);
 80043a6:	4b42      	ldr	r3, [pc, #264]	; (80044b0 <main+0x11c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a41      	ldr	r2, [pc, #260]	; (80044b0 <main+0x11c>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	6013      	str	r3, [r2, #0]

  //Enabling SEGGER SYSVIEW event tracing
  SEGGER_SYSVIEW_Conf();
 80043b2:	f7fe fa1f 	bl	80027f4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80043b6:	f7ff fa0d 	bl	80037d4 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task_producer,"producer",1024,NULL,2,&task_handle_producer);
 80043ba:	4b3e      	ldr	r3, [pc, #248]	; (80044b4 <main+0x120>)
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	2302      	movs	r3, #2
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	2300      	movs	r3, #0
 80043c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043c8:	493b      	ldr	r1, [pc, #236]	; (80044b8 <main+0x124>)
 80043ca:	483c      	ldr	r0, [pc, #240]	; (80044bc <main+0x128>)
 80043cc:	f7fc fda4 	bl	8000f18 <xTaskCreate>
 80043d0:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d00a      	beq.n	80043ee <main+0x5a>
        __asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	613b      	str	r3, [r7, #16]
    }
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <main+0x58>

  status = xTaskCreate(task_consumer,"consumer",1024,NULL,2,&task_handle_consumer);
 80043ee:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <main+0x12c>)
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	2302      	movs	r3, #2
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2300      	movs	r3, #0
 80043f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043fc:	4931      	ldr	r1, [pc, #196]	; (80044c4 <main+0x130>)
 80043fe:	4832      	ldr	r0, [pc, #200]	; (80044c8 <main+0x134>)
 8004400:	f7fc fd8a 	bl	8000f18 <xTaskCreate>
 8004404:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d00a      	beq.n	8004422 <main+0x8e>
        __asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	60fb      	str	r3, [r7, #12]
    }
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <main+0x8c>

  ReadSemaphore = xSemaphoreCreateBinary();
 8004422:	2203      	movs	r2, #3
 8004424:	2100      	movs	r1, #0
 8004426:	2001      	movs	r0, #1
 8004428:	f7fc f9ba 	bl	80007a0 <xQueueGenericCreate>
 800442c:	4603      	mov	r3, r0
 800442e:	4a27      	ldr	r2, [pc, #156]	; (80044cc <main+0x138>)
 8004430:	6013      	str	r3, [r2, #0]
  configASSERT(ReadSemaphore != NULL);
 8004432:	4b26      	ldr	r3, [pc, #152]	; (80044cc <main+0x138>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <main+0xbc>
        __asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60bb      	str	r3, [r7, #8]
    }
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <main+0xba>

  WriteSemaphore = xSemaphoreCreateBinary();
 8004450:	2203      	movs	r2, #3
 8004452:	2100      	movs	r1, #0
 8004454:	2001      	movs	r0, #1
 8004456:	f7fc f9a3 	bl	80007a0 <xQueueGenericCreate>
 800445a:	4603      	mov	r3, r0
 800445c:	4a1c      	ldr	r2, [pc, #112]	; (80044d0 <main+0x13c>)
 800445e:	6013      	str	r3, [r2, #0]
  configASSERT(WriteSemaphore != NULL);
 8004460:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <main+0x13c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <main+0xea>
        __asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	607b      	str	r3, [r7, #4]
    }
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <main+0xe8>

  status = xSemaphoreGive(WriteSemaphore);
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <main+0x13c>)
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	2300      	movs	r3, #0
 8004484:	2200      	movs	r2, #0
 8004486:	2100      	movs	r1, #0
 8004488:	f7fc fa12 	bl	80008b0 <xQueueGenericSend>
 800448c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d00a      	beq.n	80044aa <main+0x116>
        __asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	603b      	str	r3, [r7, #0]
    }
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <main+0x114>

  vTaskStartScheduler();
 80044aa:	f7fc fe99 	bl	80011e0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80044ae:	e7fe      	b.n	80044ae <main+0x11a>
 80044b0:	e0001000 	.word	0xe0001000
 80044b4:	20014fd4 	.word	0x20014fd4
 80044b8:	08006134 	.word	0x08006134
 80044bc:	08004865 	.word	0x08004865
 80044c0:	20014fd8 	.word	0x20014fd8
 80044c4:	08006140 	.word	0x08006140
 80044c8:	080048b9 	.word	0x080048b9
 80044cc:	20014fdc 	.word	0x20014fdc
 80044d0:	20014fe0 	.word	0x20014fe0

080044d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b094      	sub	sp, #80	; 0x50
 80044d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044da:	f107 0320 	add.w	r3, r7, #32
 80044de:	2230      	movs	r2, #48	; 0x30
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 fda6 	bl	8006034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044e8:	f107 030c 	add.w	r3, r7, #12
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	60da      	str	r2, [r3, #12]
 80044f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044f8:	2300      	movs	r3, #0
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <SystemClock_Config+0xcc>)
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <SystemClock_Config+0xcc>)
 8004502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004506:	6413      	str	r3, [r2, #64]	; 0x40
 8004508:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <SystemClock_Config+0xcc>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004514:	2300      	movs	r3, #0
 8004516:	607b      	str	r3, [r7, #4]
 8004518:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <SystemClock_Config+0xd0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <SystemClock_Config+0xd0>)
 800451e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <SystemClock_Config+0xd0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004530:	2302      	movs	r3, #2
 8004532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004534:	2301      	movs	r3, #1
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004538:	2310      	movs	r3, #16
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800453c:	2302      	movs	r3, #2
 800453e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004540:	2300      	movs	r3, #0
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004544:	2308      	movs	r3, #8
 8004546:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004548:	2332      	movs	r3, #50	; 0x32
 800454a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800454c:	2304      	movs	r3, #4
 800454e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004550:	2307      	movs	r3, #7
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004554:	f107 0320 	add.w	r3, r7, #32
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fdc5 	bl	80050e8 <HAL_RCC_OscConfig>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004564:	f000 f9de 	bl	8004924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004568:	230f      	movs	r3, #15
 800456a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800456c:	2302      	movs	r3, #2
 800456e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004574:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800457a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800457e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f826 	bl	80055d8 <HAL_RCC_ClockConfig>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004592:	f000 f9c7 	bl	8004924 <Error_Handler>
  }
}
 8004596:	bf00      	nop
 8004598:	3750      	adds	r7, #80	; 0x50
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40007000 	.word	0x40007000

080045a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08c      	sub	sp, #48	; 0x30
 80045ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ae:	f107 031c 	add.w	r3, r7, #28
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	605a      	str	r2, [r3, #4]
 80045b8:	609a      	str	r2, [r3, #8]
 80045ba:	60da      	str	r2, [r3, #12]
 80045bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	4ba2      	ldr	r3, [pc, #648]	; (800484c <MX_GPIO_Init+0x2a4>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	4aa1      	ldr	r2, [pc, #644]	; (800484c <MX_GPIO_Init+0x2a4>)
 80045c8:	f043 0310 	orr.w	r3, r3, #16
 80045cc:	6313      	str	r3, [r2, #48]	; 0x30
 80045ce:	4b9f      	ldr	r3, [pc, #636]	; (800484c <MX_GPIO_Init+0x2a4>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	4b9b      	ldr	r3, [pc, #620]	; (800484c <MX_GPIO_Init+0x2a4>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	4a9a      	ldr	r2, [pc, #616]	; (800484c <MX_GPIO_Init+0x2a4>)
 80045e4:	f043 0304 	orr.w	r3, r3, #4
 80045e8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ea:	4b98      	ldr	r3, [pc, #608]	; (800484c <MX_GPIO_Init+0x2a4>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	4b94      	ldr	r3, [pc, #592]	; (800484c <MX_GPIO_Init+0x2a4>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	4a93      	ldr	r2, [pc, #588]	; (800484c <MX_GPIO_Init+0x2a4>)
 8004600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004604:	6313      	str	r3, [r2, #48]	; 0x30
 8004606:	4b91      	ldr	r3, [pc, #580]	; (800484c <MX_GPIO_Init+0x2a4>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	4b8d      	ldr	r3, [pc, #564]	; (800484c <MX_GPIO_Init+0x2a4>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	4a8c      	ldr	r2, [pc, #560]	; (800484c <MX_GPIO_Init+0x2a4>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6313      	str	r3, [r2, #48]	; 0x30
 8004622:	4b8a      	ldr	r3, [pc, #552]	; (800484c <MX_GPIO_Init+0x2a4>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	4b86      	ldr	r3, [pc, #536]	; (800484c <MX_GPIO_Init+0x2a4>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	4a85      	ldr	r2, [pc, #532]	; (800484c <MX_GPIO_Init+0x2a4>)
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	6313      	str	r3, [r2, #48]	; 0x30
 800463e:	4b83      	ldr	r3, [pc, #524]	; (800484c <MX_GPIO_Init+0x2a4>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	4b7f      	ldr	r3, [pc, #508]	; (800484c <MX_GPIO_Init+0x2a4>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	4a7e      	ldr	r2, [pc, #504]	; (800484c <MX_GPIO_Init+0x2a4>)
 8004654:	f043 0308 	orr.w	r3, r3, #8
 8004658:	6313      	str	r3, [r2, #48]	; 0x30
 800465a:	4b7c      	ldr	r3, [pc, #496]	; (800484c <MX_GPIO_Init+0x2a4>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004666:	2200      	movs	r2, #0
 8004668:	2108      	movs	r1, #8
 800466a:	4879      	ldr	r0, [pc, #484]	; (8004850 <MX_GPIO_Init+0x2a8>)
 800466c:	f000 fd22 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004670:	2201      	movs	r2, #1
 8004672:	2101      	movs	r1, #1
 8004674:	4877      	ldr	r0, [pc, #476]	; (8004854 <MX_GPIO_Init+0x2ac>)
 8004676:	f000 fd1d 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800467a:	2200      	movs	r2, #0
 800467c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8004680:	4875      	ldr	r0, [pc, #468]	; (8004858 <MX_GPIO_Init+0x2b0>)
 8004682:	f000 fd17 	bl	80050b4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004686:	2308      	movs	r3, #8
 8004688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800468a:	2301      	movs	r3, #1
 800468c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004692:	2300      	movs	r3, #0
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004696:	f107 031c 	add.w	r3, r7, #28
 800469a:	4619      	mov	r1, r3
 800469c:	486c      	ldr	r0, [pc, #432]	; (8004850 <MX_GPIO_Init+0x2a8>)
 800469e:	f000 fb6d 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80046a2:	2301      	movs	r3, #1
 80046a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a6:	2301      	movs	r3, #1
 80046a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ae:	2300      	movs	r3, #0
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80046b2:	f107 031c 	add.w	r3, r7, #28
 80046b6:	4619      	mov	r1, r3
 80046b8:	4866      	ldr	r0, [pc, #408]	; (8004854 <MX_GPIO_Init+0x2ac>)
 80046ba:	f000 fb5f 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80046be:	2308      	movs	r3, #8
 80046c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c2:	2302      	movs	r3, #2
 80046c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ca:	2300      	movs	r3, #0
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046ce:	2305      	movs	r3, #5
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80046d2:	f107 031c 	add.w	r3, r7, #28
 80046d6:	4619      	mov	r1, r3
 80046d8:	485e      	ldr	r0, [pc, #376]	; (8004854 <MX_GPIO_Init+0x2ac>)
 80046da:	f000 fb4f 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80046de:	2301      	movs	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80046e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80046e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80046ec:	f107 031c 	add.w	r3, r7, #28
 80046f0:	4619      	mov	r1, r3
 80046f2:	485a      	ldr	r0, [pc, #360]	; (800485c <MX_GPIO_Init+0x2b4>)
 80046f4:	f000 fb42 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80046f8:	2310      	movs	r3, #16
 80046fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fc:	2302      	movs	r3, #2
 80046fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004700:	2300      	movs	r3, #0
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004704:	2300      	movs	r3, #0
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004708:	2306      	movs	r3, #6
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800470c:	f107 031c 	add.w	r3, r7, #28
 8004710:	4619      	mov	r1, r3
 8004712:	4852      	ldr	r0, [pc, #328]	; (800485c <MX_GPIO_Init+0x2b4>)
 8004714:	f000 fb32 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004718:	23e0      	movs	r3, #224	; 0xe0
 800471a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471c:	2302      	movs	r3, #2
 800471e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004720:	2300      	movs	r3, #0
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004724:	2300      	movs	r3, #0
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004728:	2305      	movs	r3, #5
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800472c:	f107 031c 	add.w	r3, r7, #28
 8004730:	4619      	mov	r1, r3
 8004732:	484a      	ldr	r0, [pc, #296]	; (800485c <MX_GPIO_Init+0x2b4>)
 8004734:	f000 fb22 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004738:	2304      	movs	r3, #4
 800473a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800473c:	2300      	movs	r3, #0
 800473e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004740:	2300      	movs	r3, #0
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004744:	f107 031c 	add.w	r3, r7, #28
 8004748:	4619      	mov	r1, r3
 800474a:	4845      	ldr	r0, [pc, #276]	; (8004860 <MX_GPIO_Init+0x2b8>)
 800474c:	f000 fb16 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004756:	2302      	movs	r3, #2
 8004758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475e:	2300      	movs	r3, #0
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004762:	2305      	movs	r3, #5
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8004766:	f107 031c 	add.w	r3, r7, #28
 800476a:	4619      	mov	r1, r3
 800476c:	483c      	ldr	r0, [pc, #240]	; (8004860 <MX_GPIO_Init+0x2b8>)
 800476e:	f000 fb05 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004772:	f24f 0310 	movw	r3, #61456	; 0xf010
 8004776:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004778:	2301      	movs	r3, #1
 800477a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004780:	2300      	movs	r3, #0
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004784:	f107 031c 	add.w	r3, r7, #28
 8004788:	4619      	mov	r1, r3
 800478a:	4833      	ldr	r0, [pc, #204]	; (8004858 <MX_GPIO_Init+0x2b0>)
 800478c:	f000 faf6 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004790:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8004794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004796:	2302      	movs	r3, #2
 8004798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479a:	2300      	movs	r3, #0
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479e:	2300      	movs	r3, #0
 80047a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80047a2:	2306      	movs	r3, #6
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047a6:	f107 031c 	add.w	r3, r7, #28
 80047aa:	4619      	mov	r1, r3
 80047ac:	4829      	ldr	r0, [pc, #164]	; (8004854 <MX_GPIO_Init+0x2ac>)
 80047ae:	f000 fae5 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80047b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b8:	2300      	movs	r3, #0
 80047ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80047c0:	f107 031c 	add.w	r3, r7, #28
 80047c4:	4619      	mov	r1, r3
 80047c6:	4825      	ldr	r0, [pc, #148]	; (800485c <MX_GPIO_Init+0x2b4>)
 80047c8:	f000 fad8 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80047cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80047d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d2:	2302      	movs	r3, #2
 80047d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047da:	2300      	movs	r3, #0
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80047de:	230a      	movs	r3, #10
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e2:	f107 031c 	add.w	r3, r7, #28
 80047e6:	4619      	mov	r1, r3
 80047e8:	481c      	ldr	r0, [pc, #112]	; (800485c <MX_GPIO_Init+0x2b4>)
 80047ea:	f000 fac7 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80047ee:	2320      	movs	r3, #32
 80047f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047f2:	2300      	movs	r3, #0
 80047f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80047fa:	f107 031c 	add.w	r3, r7, #28
 80047fe:	4619      	mov	r1, r3
 8004800:	4815      	ldr	r0, [pc, #84]	; (8004858 <MX_GPIO_Init+0x2b0>)
 8004802:	f000 fabb 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004806:	f44f 7310 	mov.w	r3, #576	; 0x240
 800480a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800480c:	2312      	movs	r3, #18
 800480e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004814:	2300      	movs	r3, #0
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004818:	2304      	movs	r3, #4
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800481c:	f107 031c 	add.w	r3, r7, #28
 8004820:	4619      	mov	r1, r3
 8004822:	480f      	ldr	r0, [pc, #60]	; (8004860 <MX_GPIO_Init+0x2b8>)
 8004824:	f000 faaa 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004828:	2302      	movs	r3, #2
 800482a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800482c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004832:	2300      	movs	r3, #0
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004836:	f107 031c 	add.w	r3, r7, #28
 800483a:	4619      	mov	r1, r3
 800483c:	4804      	ldr	r0, [pc, #16]	; (8004850 <MX_GPIO_Init+0x2a8>)
 800483e:	f000 fa9d 	bl	8004d7c <HAL_GPIO_Init>

}
 8004842:	bf00      	nop
 8004844:	3730      	adds	r7, #48	; 0x30
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800
 8004850:	40021000 	.word	0x40021000
 8004854:	40020800 	.word	0x40020800
 8004858:	40020c00 	.word	0x40020c00
 800485c:	40020000 	.word	0x40020000
 8004860:	40020400 	.word	0x40020400

08004864 <task_producer>:

/* USER CODE BEGIN 4 */
static void task_producer(void *params)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(xSemaphoreTake(WriteSemaphore,SEM_TAKE_WAIT) == pdTRUE)
 800486c:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <task_producer+0x44>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004874:	4618      	mov	r0, r3
 8004876:	f7fc f929 	bl	8000acc <xQueueSemaphoreTake>
 800487a:	4603      	mov	r3, r0
 800487c:	2b01      	cmp	r3, #1
 800487e:	d1f5      	bne.n	800486c <task_producer+0x8>
		{
			shared_data++;
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <task_producer+0x48>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	4a09      	ldr	r2, [pc, #36]	; (80048ac <task_producer+0x48>)
 8004888:	6013      	str	r3, [r2, #0]
			SEGGER_SYSVIEW_PrintfHost("Producer: Shared Data Written. Value: %d",shared_data);
 800488a:	4b08      	ldr	r3, [pc, #32]	; (80048ac <task_producer+0x48>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4619      	mov	r1, r3
 8004890:	4807      	ldr	r0, [pc, #28]	; (80048b0 <task_producer+0x4c>)
 8004892:	f7ff fd0f 	bl	80042b4 <SEGGER_SYSVIEW_PrintfHost>
			xSemaphoreGive(ReadSemaphore);
 8004896:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <task_producer+0x50>)
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	2200      	movs	r2, #0
 800489e:	2100      	movs	r1, #0
 80048a0:	f7fc f806 	bl	80008b0 <xQueueGenericSend>
		if(xSemaphoreTake(WriteSemaphore,SEM_TAKE_WAIT) == pdTRUE)
 80048a4:	e7e2      	b.n	800486c <task_producer+0x8>
 80048a6:	bf00      	nop
 80048a8:	20014fe0 	.word	0x20014fe0
 80048ac:	20014fe4 	.word	0x20014fe4
 80048b0:	0800614c 	.word	0x0800614c
 80048b4:	20014fdc 	.word	0x20014fdc

080048b8 <task_consumer>:
		}
	}
}

static void task_consumer(void *params)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(xSemaphoreTake(ReadSemaphore,SEM_TAKE_WAIT) == pdTRUE)
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <task_consumer+0x38>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fc f8ff 	bl	8000acc <xQueueSemaphoreTake>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d1f5      	bne.n	80048c0 <task_consumer+0x8>
		{
			SEGGER_SYSVIEW_PrintfHost("Consumer: Shared Data Read. Value: %d",shared_data);
 80048d4:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <task_consumer+0x3c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	4807      	ldr	r0, [pc, #28]	; (80048f8 <task_consumer+0x40>)
 80048dc:	f7ff fcea 	bl	80042b4 <SEGGER_SYSVIEW_PrintfHost>
			xSemaphoreGive(WriteSemaphore);
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <task_consumer+0x44>)
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	2200      	movs	r2, #0
 80048e8:	2100      	movs	r1, #0
 80048ea:	f7fb ffe1 	bl	80008b0 <xQueueGenericSend>
		if(xSemaphoreTake(ReadSemaphore,SEM_TAKE_WAIT) == pdTRUE)
 80048ee:	e7e7      	b.n	80048c0 <task_consumer+0x8>
 80048f0:	20014fdc 	.word	0x20014fdc
 80048f4:	20014fe4 	.word	0x20014fe4
 80048f8:	08006178 	.word	0x08006178
 80048fc:	20014fe0 	.word	0x20014fe0

08004900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d101      	bne.n	8004916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004912:	f000 f931 	bl	8004b78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40001000 	.word	0x40001000

08004924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004928:	b672      	cpsid	i
}
 800492a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800492c:	e7fe      	b.n	800492c <Error_Handler+0x8>
	...

08004930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <HAL_MspInit+0x50>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	4a10      	ldr	r2, [pc, #64]	; (8004980 <HAL_MspInit+0x50>)
 8004940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004944:	6453      	str	r3, [r2, #68]	; 0x44
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <HAL_MspInit+0x50>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_MspInit+0x50>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	4a09      	ldr	r2, [pc, #36]	; (8004980 <HAL_MspInit+0x50>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	6413      	str	r3, [r2, #64]	; 0x40
 8004962:	4b07      	ldr	r3, [pc, #28]	; (8004980 <HAL_MspInit+0x50>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800496e:	2003      	movs	r0, #3
 8004970:	f000 f9cf 	bl	8004d12 <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 8004974:	f7fd fb88 	bl	8002088 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800

08004984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08e      	sub	sp, #56	; 0x38
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	4b33      	ldr	r3, [pc, #204]	; (8004a68 <HAL_InitTick+0xe4>)
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	4a32      	ldr	r2, [pc, #200]	; (8004a68 <HAL_InitTick+0xe4>)
 800499e:	f043 0310 	orr.w	r3, r3, #16
 80049a2:	6413      	str	r3, [r2, #64]	; 0x40
 80049a4:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <HAL_InitTick+0xe4>)
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049b0:	f107 0210 	add.w	r2, r7, #16
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f001 f818 	bl	80059f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80049ca:	f000 fffd 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 80049ce:	6378      	str	r0, [r7, #52]	; 0x34
 80049d0:	e004      	b.n	80049dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80049d2:	f000 fff9 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 80049d6:	4603      	mov	r3, r0
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <HAL_InitTick+0xe8>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	0c9b      	lsrs	r3, r3, #18
 80049e6:	3b01      	subs	r3, #1
 80049e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80049ea:	4b21      	ldr	r3, [pc, #132]	; (8004a70 <HAL_InitTick+0xec>)
 80049ec:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <HAL_InitTick+0xf0>)
 80049ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <HAL_InitTick+0xec>)
 80049f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80049f8:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <HAL_InitTick+0xec>)
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80049fe:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <HAL_InitTick+0xec>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <HAL_InitTick+0xec>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a0a:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <HAL_InitTick+0xec>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004a10:	4817      	ldr	r0, [pc, #92]	; (8004a70 <HAL_InitTick+0xec>)
 8004a12:	f001 f81f 	bl	8005a54 <HAL_TIM_Base_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11b      	bne.n	8004a5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004a24:	4812      	ldr	r0, [pc, #72]	; (8004a70 <HAL_InitTick+0xec>)
 8004a26:	f001 f86f 	bl	8005b08 <HAL_TIM_Base_Start_IT>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d111      	bne.n	8004a5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a38:	2036      	movs	r0, #54	; 0x36
 8004a3a:	f000 f991 	bl	8004d60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b0f      	cmp	r3, #15
 8004a42:	d808      	bhi.n	8004a56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004a44:	2200      	movs	r2, #0
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	2036      	movs	r0, #54	; 0x36
 8004a4a:	f000 f96d 	bl	8004d28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <HAL_InitTick+0xf4>)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e002      	b.n	8004a5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3738      	adds	r7, #56	; 0x38
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	431bde83 	.word	0x431bde83
 8004a70:	20014fe8 	.word	0x20014fe8
 8004a74:	40001000 	.word	0x40001000
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a80:	e7fe      	b.n	8004a80 <NMI_Handler+0x4>

08004a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a86:	e7fe      	b.n	8004a86 <HardFault_Handler+0x4>

08004a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a8c:	e7fe      	b.n	8004a8c <MemManage_Handler+0x4>

08004a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a92:	e7fe      	b.n	8004a92 <BusFault_Handler+0x4>

08004a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a98:	e7fe      	b.n	8004a98 <UsageFault_Handler+0x4>

08004a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <TIM6_DAC_IRQHandler+0x10>)
 8004aae:	f001 f89b 	bl	8005be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20014fe8 	.word	0x20014fe8

08004abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ac0:	4b06      	ldr	r3, [pc, #24]	; (8004adc <SystemInit+0x20>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	4a05      	ldr	r2, [pc, #20]	; (8004adc <SystemInit+0x20>)
 8004ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ae4:	480d      	ldr	r0, [pc, #52]	; (8004b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ae6:	490e      	ldr	r1, [pc, #56]	; (8004b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ae8:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004aec:	e002      	b.n	8004af4 <LoopCopyDataInit>

08004aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004af2:	3304      	adds	r3, #4

08004af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004af8:	d3f9      	bcc.n	8004aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004afa:	4a0b      	ldr	r2, [pc, #44]	; (8004b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004afc:	4c0b      	ldr	r4, [pc, #44]	; (8004b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b00:	e001      	b.n	8004b06 <LoopFillZerobss>

08004b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b04:	3204      	adds	r2, #4

08004b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b08:	d3fb      	bcc.n	8004b02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b0a:	f7ff ffd7 	bl	8004abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b0e:	f001 fa4f 	bl	8005fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b12:	f7ff fc3f 	bl	8004394 <main>
  bx  lr    
 8004b16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b20:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8004b24:	080061dc 	.word	0x080061dc
  ldr r2, =_sbss
 8004b28:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8004b2c:	20015034 	.word	0x20015034

08004b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b30:	e7fe      	b.n	8004b30 <ADC_IRQHandler>
	...

08004b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <HAL_Init+0x40>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a0d      	ldr	r2, [pc, #52]	; (8004b74 <HAL_Init+0x40>)
 8004b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_Init+0x40>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <HAL_Init+0x40>)
 8004b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b50:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <HAL_Init+0x40>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <HAL_Init+0x40>)
 8004b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b5c:	2003      	movs	r0, #3
 8004b5e:	f000 f8d8 	bl	8004d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b62:	2000      	movs	r0, #0
 8004b64:	f7ff ff0e 	bl	8004984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b68:	f7ff fee2 	bl	8004930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40023c00 	.word	0x40023c00

08004b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_IncTick+0x20>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_IncTick+0x24>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4413      	add	r3, r2
 8004b88:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <HAL_IncTick+0x24>)
 8004b8a:	6013      	str	r3, [r2, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000010 	.word	0x20000010
 8004b9c:	20015030 	.word	0x20015030

08004ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <HAL_GetTick+0x14>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20015030 	.word	0x20015030

08004bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <__NVIC_SetPriorityGrouping+0x44>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bea:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <__NVIC_SetPriorityGrouping+0x44>)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	60d3      	str	r3, [r2, #12]
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	e000ed00 	.word	0xe000ed00

08004c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <__NVIC_GetPriorityGrouping+0x18>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	f003 0307 	and.w	r3, r3, #7
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	db0b      	blt.n	8004c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	f003 021f 	and.w	r2, r3, #31
 8004c34:	4907      	ldr	r1, [pc, #28]	; (8004c54 <__NVIC_EnableIRQ+0x38>)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	e000e100 	.word	0xe000e100

08004c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	6039      	str	r1, [r7, #0]
 8004c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	db0a      	blt.n	8004c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	490c      	ldr	r1, [pc, #48]	; (8004ca4 <__NVIC_SetPriority+0x4c>)
 8004c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c76:	0112      	lsls	r2, r2, #4
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c80:	e00a      	b.n	8004c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	4908      	ldr	r1, [pc, #32]	; (8004ca8 <__NVIC_SetPriority+0x50>)
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	3b04      	subs	r3, #4
 8004c90:	0112      	lsls	r2, r2, #4
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	440b      	add	r3, r1
 8004c96:	761a      	strb	r2, [r3, #24]
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	e000e100 	.word	0xe000e100
 8004ca8:	e000ed00 	.word	0xe000ed00

08004cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b089      	sub	sp, #36	; 0x24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f1c3 0307 	rsb	r3, r3, #7
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	bf28      	it	cs
 8004cca:	2304      	movcs	r3, #4
 8004ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d902      	bls.n	8004cdc <NVIC_EncodePriority+0x30>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3b03      	subs	r3, #3
 8004cda:	e000      	b.n	8004cde <NVIC_EncodePriority+0x32>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43da      	mvns	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	401a      	ands	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfe:	43d9      	mvns	r1, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d04:	4313      	orrs	r3, r2
         );
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3724      	adds	r7, #36	; 0x24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ff4c 	bl	8004bb8 <__NVIC_SetPriorityGrouping>
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d3a:	f7ff ff61 	bl	8004c00 <__NVIC_GetPriorityGrouping>
 8004d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	6978      	ldr	r0, [r7, #20]
 8004d46:	f7ff ffb1 	bl	8004cac <NVIC_EncodePriority>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff ff80 	bl	8004c58 <__NVIC_SetPriority>
}
 8004d58:	bf00      	nop
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff ff54 	bl	8004c1c <__NVIC_EnableIRQ>
}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	e16b      	b.n	8005070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d98:	2201      	movs	r2, #1
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4013      	ands	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	f040 815a 	bne.w	800506a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d005      	beq.n	8004dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d130      	bne.n	8004e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	2203      	movs	r2, #3
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4013      	ands	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e04:	2201      	movs	r2, #1
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	f003 0201 	and.w	r2, r3, #1
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d017      	beq.n	8004e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	2203      	movs	r2, #3
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d123      	bne.n	8004ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	08da      	lsrs	r2, r3, #3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3208      	adds	r2, #8
 8004e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	220f      	movs	r2, #15
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	08da      	lsrs	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3208      	adds	r2, #8
 8004eba:	69b9      	ldr	r1, [r7, #24]
 8004ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	2203      	movs	r2, #3
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 0203 	and.w	r2, r3, #3
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80b4 	beq.w	800506a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	4b60      	ldr	r3, [pc, #384]	; (8005088 <HAL_GPIO_Init+0x30c>)
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	4a5f      	ldr	r2, [pc, #380]	; (8005088 <HAL_GPIO_Init+0x30c>)
 8004f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f10:	6453      	str	r3, [r2, #68]	; 0x44
 8004f12:	4b5d      	ldr	r3, [pc, #372]	; (8005088 <HAL_GPIO_Init+0x30c>)
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f1e:	4a5b      	ldr	r2, [pc, #364]	; (800508c <HAL_GPIO_Init+0x310>)
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	3302      	adds	r3, #2
 8004f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	220f      	movs	r2, #15
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a52      	ldr	r2, [pc, #328]	; (8005090 <HAL_GPIO_Init+0x314>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d02b      	beq.n	8004fa2 <HAL_GPIO_Init+0x226>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a51      	ldr	r2, [pc, #324]	; (8005094 <HAL_GPIO_Init+0x318>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d025      	beq.n	8004f9e <HAL_GPIO_Init+0x222>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a50      	ldr	r2, [pc, #320]	; (8005098 <HAL_GPIO_Init+0x31c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01f      	beq.n	8004f9a <HAL_GPIO_Init+0x21e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a4f      	ldr	r2, [pc, #316]	; (800509c <HAL_GPIO_Init+0x320>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d019      	beq.n	8004f96 <HAL_GPIO_Init+0x21a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a4e      	ldr	r2, [pc, #312]	; (80050a0 <HAL_GPIO_Init+0x324>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_GPIO_Init+0x216>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a4d      	ldr	r2, [pc, #308]	; (80050a4 <HAL_GPIO_Init+0x328>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00d      	beq.n	8004f8e <HAL_GPIO_Init+0x212>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a4c      	ldr	r2, [pc, #304]	; (80050a8 <HAL_GPIO_Init+0x32c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d007      	beq.n	8004f8a <HAL_GPIO_Init+0x20e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a4b      	ldr	r2, [pc, #300]	; (80050ac <HAL_GPIO_Init+0x330>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <HAL_GPIO_Init+0x20a>
 8004f82:	2307      	movs	r3, #7
 8004f84:	e00e      	b.n	8004fa4 <HAL_GPIO_Init+0x228>
 8004f86:	2308      	movs	r3, #8
 8004f88:	e00c      	b.n	8004fa4 <HAL_GPIO_Init+0x228>
 8004f8a:	2306      	movs	r3, #6
 8004f8c:	e00a      	b.n	8004fa4 <HAL_GPIO_Init+0x228>
 8004f8e:	2305      	movs	r3, #5
 8004f90:	e008      	b.n	8004fa4 <HAL_GPIO_Init+0x228>
 8004f92:	2304      	movs	r3, #4
 8004f94:	e006      	b.n	8004fa4 <HAL_GPIO_Init+0x228>
 8004f96:	2303      	movs	r3, #3
 8004f98:	e004      	b.n	8004fa4 <HAL_GPIO_Init+0x228>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e002      	b.n	8004fa4 <HAL_GPIO_Init+0x228>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <HAL_GPIO_Init+0x228>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	f002 0203 	and.w	r2, r2, #3
 8004faa:	0092      	lsls	r2, r2, #2
 8004fac:	4093      	lsls	r3, r2
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fb4:	4935      	ldr	r1, [pc, #212]	; (800508c <HAL_GPIO_Init+0x310>)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	089b      	lsrs	r3, r3, #2
 8004fba:	3302      	adds	r3, #2
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fc2:	4b3b      	ldr	r3, [pc, #236]	; (80050b0 <HAL_GPIO_Init+0x334>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fe6:	4a32      	ldr	r2, [pc, #200]	; (80050b0 <HAL_GPIO_Init+0x334>)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fec:	4b30      	ldr	r3, [pc, #192]	; (80050b0 <HAL_GPIO_Init+0x334>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005010:	4a27      	ldr	r2, [pc, #156]	; (80050b0 <HAL_GPIO_Init+0x334>)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005016:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <HAL_GPIO_Init+0x334>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800503a:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <HAL_GPIO_Init+0x334>)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005040:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <HAL_GPIO_Init+0x334>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005064:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <HAL_GPIO_Init+0x334>)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	3301      	adds	r3, #1
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b0f      	cmp	r3, #15
 8005074:	f67f ae90 	bls.w	8004d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	3724      	adds	r7, #36	; 0x24
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800
 800508c:	40013800 	.word	0x40013800
 8005090:	40020000 	.word	0x40020000
 8005094:	40020400 	.word	0x40020400
 8005098:	40020800 	.word	0x40020800
 800509c:	40020c00 	.word	0x40020c00
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40021400 	.word	0x40021400
 80050a8:	40021800 	.word	0x40021800
 80050ac:	40021c00 	.word	0x40021c00
 80050b0:	40013c00 	.word	0x40013c00

080050b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	807b      	strh	r3, [r7, #2]
 80050c0:	4613      	mov	r3, r2
 80050c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050c4:	787b      	ldrb	r3, [r7, #1]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050d0:	e003      	b.n	80050da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050d2:	887b      	ldrh	r3, [r7, #2]
 80050d4:	041a      	lsls	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	619a      	str	r2, [r3, #24]
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e267      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d075      	beq.n	80051f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005106:	4b88      	ldr	r3, [pc, #544]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b04      	cmp	r3, #4
 8005110:	d00c      	beq.n	800512c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005112:	4b85      	ldr	r3, [pc, #532]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800511a:	2b08      	cmp	r3, #8
 800511c:	d112      	bne.n	8005144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800511e:	4b82      	ldr	r3, [pc, #520]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800512a:	d10b      	bne.n	8005144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800512c:	4b7e      	ldr	r3, [pc, #504]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d05b      	beq.n	80051f0 <HAL_RCC_OscConfig+0x108>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d157      	bne.n	80051f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e242      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514c:	d106      	bne.n	800515c <HAL_RCC_OscConfig+0x74>
 800514e:	4b76      	ldr	r3, [pc, #472]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a75      	ldr	r2, [pc, #468]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e01d      	b.n	8005198 <HAL_RCC_OscConfig+0xb0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005164:	d10c      	bne.n	8005180 <HAL_RCC_OscConfig+0x98>
 8005166:	4b70      	ldr	r3, [pc, #448]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a6f      	ldr	r2, [pc, #444]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 800516c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	4b6d      	ldr	r3, [pc, #436]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a6c      	ldr	r2, [pc, #432]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	e00b      	b.n	8005198 <HAL_RCC_OscConfig+0xb0>
 8005180:	4b69      	ldr	r3, [pc, #420]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a68      	ldr	r2, [pc, #416]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4b66      	ldr	r3, [pc, #408]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a65      	ldr	r2, [pc, #404]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d013      	beq.n	80051c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a0:	f7ff fcfe 	bl	8004ba0 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a8:	f7ff fcfa 	bl	8004ba0 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b64      	cmp	r3, #100	; 0x64
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e207      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ba:	4b5b      	ldr	r3, [pc, #364]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <HAL_RCC_OscConfig+0xc0>
 80051c6:	e014      	b.n	80051f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7ff fcea 	bl	8004ba0 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d0:	f7ff fce6 	bl	8004ba0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	; 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e1f3      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051e2:	4b51      	ldr	r3, [pc, #324]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0xe8>
 80051ee:	e000      	b.n	80051f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d063      	beq.n	80052c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051fe:	4b4a      	ldr	r3, [pc, #296]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520a:	4b47      	ldr	r3, [pc, #284]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005212:	2b08      	cmp	r3, #8
 8005214:	d11c      	bne.n	8005250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005216:	4b44      	ldr	r3, [pc, #272]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d116      	bne.n	8005250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005222:	4b41      	ldr	r3, [pc, #260]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_RCC_OscConfig+0x152>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d001      	beq.n	800523a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e1c7      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523a:	4b3b      	ldr	r3, [pc, #236]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4937      	ldr	r1, [pc, #220]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 800524a:	4313      	orrs	r3, r2
 800524c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524e:	e03a      	b.n	80052c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d020      	beq.n	800529a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005258:	4b34      	ldr	r3, [pc, #208]	; (800532c <HAL_RCC_OscConfig+0x244>)
 800525a:	2201      	movs	r2, #1
 800525c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525e:	f7ff fc9f 	bl	8004ba0 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005266:	f7ff fc9b 	bl	8004ba0 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e1a8      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005278:	4b2b      	ldr	r3, [pc, #172]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0f0      	beq.n	8005266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005284:	4b28      	ldr	r3, [pc, #160]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	4925      	ldr	r1, [pc, #148]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 8005294:	4313      	orrs	r3, r2
 8005296:	600b      	str	r3, [r1, #0]
 8005298:	e015      	b.n	80052c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800529a:	4b24      	ldr	r3, [pc, #144]	; (800532c <HAL_RCC_OscConfig+0x244>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7ff fc7e 	bl	8004ba0 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052a8:	f7ff fc7a 	bl	8004ba0 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e187      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ba:	4b1b      	ldr	r3, [pc, #108]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d036      	beq.n	8005340 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d016      	beq.n	8005308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <HAL_RCC_OscConfig+0x248>)
 80052dc:	2201      	movs	r2, #1
 80052de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e0:	f7ff fc5e 	bl	8004ba0 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052e8:	f7ff fc5a 	bl	8004ba0 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e167      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052fa:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCC_OscConfig+0x240>)
 80052fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x200>
 8005306:	e01b      	b.n	8005340 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005308:	4b09      	ldr	r3, [pc, #36]	; (8005330 <HAL_RCC_OscConfig+0x248>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530e:	f7ff fc47 	bl	8004ba0 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005314:	e00e      	b.n	8005334 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005316:	f7ff fc43 	bl	8004ba0 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d907      	bls.n	8005334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e150      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
 8005328:	40023800 	.word	0x40023800
 800532c:	42470000 	.word	0x42470000
 8005330:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005334:	4b88      	ldr	r3, [pc, #544]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1ea      	bne.n	8005316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8097 	beq.w	800547c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005352:	4b81      	ldr	r3, [pc, #516]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10f      	bne.n	800537e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	4b7d      	ldr	r3, [pc, #500]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	4a7c      	ldr	r2, [pc, #496]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800536c:	6413      	str	r3, [r2, #64]	; 0x40
 800536e:	4b7a      	ldr	r3, [pc, #488]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005376:	60bb      	str	r3, [r7, #8]
 8005378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800537a:	2301      	movs	r3, #1
 800537c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537e:	4b77      	ldr	r3, [pc, #476]	; (800555c <HAL_RCC_OscConfig+0x474>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005386:	2b00      	cmp	r3, #0
 8005388:	d118      	bne.n	80053bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800538a:	4b74      	ldr	r3, [pc, #464]	; (800555c <HAL_RCC_OscConfig+0x474>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a73      	ldr	r2, [pc, #460]	; (800555c <HAL_RCC_OscConfig+0x474>)
 8005390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005396:	f7ff fc03 	bl	8004ba0 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539e:	f7ff fbff 	bl	8004ba0 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e10c      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b0:	4b6a      	ldr	r3, [pc, #424]	; (800555c <HAL_RCC_OscConfig+0x474>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0f0      	beq.n	800539e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d106      	bne.n	80053d2 <HAL_RCC_OscConfig+0x2ea>
 80053c4:	4b64      	ldr	r3, [pc, #400]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	4a63      	ldr	r2, [pc, #396]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	6713      	str	r3, [r2, #112]	; 0x70
 80053d0:	e01c      	b.n	800540c <HAL_RCC_OscConfig+0x324>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCC_OscConfig+0x30c>
 80053da:	4b5f      	ldr	r3, [pc, #380]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	4a5e      	ldr	r2, [pc, #376]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 80053e0:	f043 0304 	orr.w	r3, r3, #4
 80053e4:	6713      	str	r3, [r2, #112]	; 0x70
 80053e6:	4b5c      	ldr	r3, [pc, #368]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	4a5b      	ldr	r2, [pc, #364]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6713      	str	r3, [r2, #112]	; 0x70
 80053f2:	e00b      	b.n	800540c <HAL_RCC_OscConfig+0x324>
 80053f4:	4b58      	ldr	r3, [pc, #352]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f8:	4a57      	ldr	r2, [pc, #348]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 80053fa:	f023 0301 	bic.w	r3, r3, #1
 80053fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005400:	4b55      	ldr	r3, [pc, #340]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005404:	4a54      	ldr	r2, [pc, #336]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005406:	f023 0304 	bic.w	r3, r3, #4
 800540a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d015      	beq.n	8005440 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005414:	f7ff fbc4 	bl	8004ba0 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541a:	e00a      	b.n	8005432 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800541c:	f7ff fbc0 	bl	8004ba0 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	f241 3288 	movw	r2, #5000	; 0x1388
 800542a:	4293      	cmp	r3, r2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e0cb      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005432:	4b49      	ldr	r3, [pc, #292]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0ee      	beq.n	800541c <HAL_RCC_OscConfig+0x334>
 800543e:	e014      	b.n	800546a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005440:	f7ff fbae 	bl	8004ba0 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005446:	e00a      	b.n	800545e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005448:	f7ff fbaa 	bl	8004ba0 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f241 3288 	movw	r2, #5000	; 0x1388
 8005456:	4293      	cmp	r3, r2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e0b5      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800545e:	4b3e      	ldr	r3, [pc, #248]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1ee      	bne.n	8005448 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800546a:	7dfb      	ldrb	r3, [r7, #23]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d105      	bne.n	800547c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005470:	4b39      	ldr	r3, [pc, #228]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	4a38      	ldr	r2, [pc, #224]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80a1 	beq.w	80055c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005486:	4b34      	ldr	r3, [pc, #208]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b08      	cmp	r3, #8
 8005490:	d05c      	beq.n	800554c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d141      	bne.n	800551e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549a:	4b31      	ldr	r3, [pc, #196]	; (8005560 <HAL_RCC_OscConfig+0x478>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a0:	f7ff fb7e 	bl	8004ba0 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a8:	f7ff fb7a 	bl	8004ba0 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e087      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ba:	4b27      	ldr	r3, [pc, #156]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	019b      	lsls	r3, r3, #6
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	3b01      	subs	r3, #1
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	061b      	lsls	r3, r3, #24
 80054ea:	491b      	ldr	r1, [pc, #108]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054f0:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <HAL_RCC_OscConfig+0x478>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f6:	f7ff fb53 	bl	8004ba0 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054fe:	f7ff fb4f 	bl	8004ba0 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e05c      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005510:	4b11      	ldr	r3, [pc, #68]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x416>
 800551c:	e054      	b.n	80055c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551e:	4b10      	ldr	r3, [pc, #64]	; (8005560 <HAL_RCC_OscConfig+0x478>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005524:	f7ff fb3c 	bl	8004ba0 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800552c:	f7ff fb38 	bl	8004ba0 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e045      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553e:	4b06      	ldr	r3, [pc, #24]	; (8005558 <HAL_RCC_OscConfig+0x470>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f0      	bne.n	800552c <HAL_RCC_OscConfig+0x444>
 800554a:	e03d      	b.n	80055c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d107      	bne.n	8005564 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e038      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
 8005558:	40023800 	.word	0x40023800
 800555c:	40007000 	.word	0x40007000
 8005560:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <HAL_RCC_OscConfig+0x4ec>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d028      	beq.n	80055c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800557c:	429a      	cmp	r2, r3
 800557e:	d121      	bne.n	80055c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558a:	429a      	cmp	r2, r3
 800558c:	d11a      	bne.n	80055c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005594:	4013      	ands	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800559a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800559c:	4293      	cmp	r3, r2
 800559e:	d111      	bne.n	80055c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	3b01      	subs	r3, #1
 80055ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d107      	bne.n	80055c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d001      	beq.n	80055c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40023800 	.word	0x40023800

080055d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0cc      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055ec:	4b68      	ldr	r3, [pc, #416]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d90c      	bls.n	8005614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fa:	4b65      	ldr	r3, [pc, #404]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005602:	4b63      	ldr	r3, [pc, #396]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d001      	beq.n	8005614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0b8      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d020      	beq.n	8005662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800562c:	4b59      	ldr	r3, [pc, #356]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4a58      	ldr	r2, [pc, #352]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005644:	4b53      	ldr	r3, [pc, #332]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	4a52      	ldr	r2, [pc, #328]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800564e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005650:	4b50      	ldr	r3, [pc, #320]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	494d      	ldr	r1, [pc, #308]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d044      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d107      	bne.n	8005686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005676:	4b47      	ldr	r3, [pc, #284]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d119      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e07f      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d003      	beq.n	8005696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005692:	2b03      	cmp	r3, #3
 8005694:	d107      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005696:	4b3f      	ldr	r3, [pc, #252]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e06f      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a6:	4b3b      	ldr	r3, [pc, #236]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e067      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056b6:	4b37      	ldr	r3, [pc, #220]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f023 0203 	bic.w	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4934      	ldr	r1, [pc, #208]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c8:	f7ff fa6a 	bl	8004ba0 <HAL_GetTick>
 80056cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ce:	e00a      	b.n	80056e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d0:	f7ff fa66 	bl	8004ba0 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	; 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e04f      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e6:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 020c 	and.w	r2, r3, #12
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d1eb      	bne.n	80056d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d20c      	bcs.n	8005720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b22      	ldr	r3, [pc, #136]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b20      	ldr	r3, [pc, #128]	; (8005790 <HAL_RCC_ClockConfig+0x1b8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e032      	b.n	8005786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800572c:	4b19      	ldr	r3, [pc, #100]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4916      	ldr	r1, [pc, #88]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	490e      	ldr	r1, [pc, #56]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800575e:	f000 f821 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8005762:	4602      	mov	r2, r0
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	490a      	ldr	r1, [pc, #40]	; (8005798 <HAL_RCC_ClockConfig+0x1c0>)
 8005770:	5ccb      	ldrb	r3, [r1, r3]
 8005772:	fa22 f303 	lsr.w	r3, r2, r3
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_ClockConfig+0x1c4>)
 8005778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCC_ClockConfig+0x1c8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff f900 	bl	8004984 <HAL_InitTick>

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40023c00 	.word	0x40023c00
 8005794:	40023800 	.word	0x40023800
 8005798:	080061b4 	.word	0x080061b4
 800579c:	20000008 	.word	0x20000008
 80057a0:	2000000c 	.word	0x2000000c

080057a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a8:	b094      	sub	sp, #80	; 0x50
 80057aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	647b      	str	r3, [r7, #68]	; 0x44
 80057b0:	2300      	movs	r3, #0
 80057b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b4:	2300      	movs	r3, #0
 80057b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057bc:	4b79      	ldr	r3, [pc, #484]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 030c 	and.w	r3, r3, #12
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d00d      	beq.n	80057e4 <HAL_RCC_GetSysClockFreq+0x40>
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	f200 80e1 	bhi.w	8005990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <HAL_RCC_GetSysClockFreq+0x34>
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d003      	beq.n	80057de <HAL_RCC_GetSysClockFreq+0x3a>
 80057d6:	e0db      	b.n	8005990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057d8:	4b73      	ldr	r3, [pc, #460]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80057da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057dc:	e0db      	b.n	8005996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057de:	4b73      	ldr	r3, [pc, #460]	; (80059ac <HAL_RCC_GetSysClockFreq+0x208>)
 80057e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057e2:	e0d8      	b.n	8005996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057e4:	4b6f      	ldr	r3, [pc, #444]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ee:	4b6d      	ldr	r3, [pc, #436]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d063      	beq.n	80058c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057fa:	4b6a      	ldr	r3, [pc, #424]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	099b      	lsrs	r3, r3, #6
 8005800:	2200      	movs	r2, #0
 8005802:	63bb      	str	r3, [r7, #56]	; 0x38
 8005804:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580c:	633b      	str	r3, [r7, #48]	; 0x30
 800580e:	2300      	movs	r3, #0
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
 8005812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005816:	4622      	mov	r2, r4
 8005818:	462b      	mov	r3, r5
 800581a:	f04f 0000 	mov.w	r0, #0
 800581e:	f04f 0100 	mov.w	r1, #0
 8005822:	0159      	lsls	r1, r3, #5
 8005824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005828:	0150      	lsls	r0, r2, #5
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4621      	mov	r1, r4
 8005830:	1a51      	subs	r1, r2, r1
 8005832:	6139      	str	r1, [r7, #16]
 8005834:	4629      	mov	r1, r5
 8005836:	eb63 0301 	sbc.w	r3, r3, r1
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005848:	4659      	mov	r1, fp
 800584a:	018b      	lsls	r3, r1, #6
 800584c:	4651      	mov	r1, sl
 800584e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005852:	4651      	mov	r1, sl
 8005854:	018a      	lsls	r2, r1, #6
 8005856:	4651      	mov	r1, sl
 8005858:	ebb2 0801 	subs.w	r8, r2, r1
 800585c:	4659      	mov	r1, fp
 800585e:	eb63 0901 	sbc.w	r9, r3, r1
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800586e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005876:	4690      	mov	r8, r2
 8005878:	4699      	mov	r9, r3
 800587a:	4623      	mov	r3, r4
 800587c:	eb18 0303 	adds.w	r3, r8, r3
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	462b      	mov	r3, r5
 8005884:	eb49 0303 	adc.w	r3, r9, r3
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005896:	4629      	mov	r1, r5
 8005898:	024b      	lsls	r3, r1, #9
 800589a:	4621      	mov	r1, r4
 800589c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058a0:	4621      	mov	r1, r4
 80058a2:	024a      	lsls	r2, r1, #9
 80058a4:	4610      	mov	r0, r2
 80058a6:	4619      	mov	r1, r3
 80058a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058aa:	2200      	movs	r2, #0
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058b4:	f7fa fcd6 	bl	8000264 <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4613      	mov	r3, r2
 80058be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058c0:	e058      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c2:	4b38      	ldr	r3, [pc, #224]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	099b      	lsrs	r3, r3, #6
 80058c8:	2200      	movs	r2, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	4611      	mov	r1, r2
 80058ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058d2:	623b      	str	r3, [r7, #32]
 80058d4:	2300      	movs	r3, #0
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
 80058d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058dc:	4642      	mov	r2, r8
 80058de:	464b      	mov	r3, r9
 80058e0:	f04f 0000 	mov.w	r0, #0
 80058e4:	f04f 0100 	mov.w	r1, #0
 80058e8:	0159      	lsls	r1, r3, #5
 80058ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ee:	0150      	lsls	r0, r2, #5
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4641      	mov	r1, r8
 80058f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80058fa:	4649      	mov	r1, r9
 80058fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800590c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005914:	ebb2 040a 	subs.w	r4, r2, sl
 8005918:	eb63 050b 	sbc.w	r5, r3, fp
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	00eb      	lsls	r3, r5, #3
 8005926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800592a:	00e2      	lsls	r2, r4, #3
 800592c:	4614      	mov	r4, r2
 800592e:	461d      	mov	r5, r3
 8005930:	4643      	mov	r3, r8
 8005932:	18e3      	adds	r3, r4, r3
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	464b      	mov	r3, r9
 8005938:	eb45 0303 	adc.w	r3, r5, r3
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800594a:	4629      	mov	r1, r5
 800594c:	028b      	lsls	r3, r1, #10
 800594e:	4621      	mov	r1, r4
 8005950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005954:	4621      	mov	r1, r4
 8005956:	028a      	lsls	r2, r1, #10
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800595e:	2200      	movs	r2, #0
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	61fa      	str	r2, [r7, #28]
 8005964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005968:	f7fa fc7c 	bl	8000264 <__aeabi_uldivmod>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4613      	mov	r3, r2
 8005972:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005974:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	0c1b      	lsrs	r3, r3, #16
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	3301      	adds	r3, #1
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800598e:	e002      	b.n	8005996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005992:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005998:	4618      	mov	r0, r3
 800599a:	3750      	adds	r7, #80	; 0x50
 800599c:	46bd      	mov	sp, r7
 800599e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059a2:	bf00      	nop
 80059a4:	40023800 	.word	0x40023800
 80059a8:	00f42400 	.word	0x00f42400
 80059ac:	007a1200 	.word	0x007a1200

080059b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b4:	4b03      	ldr	r3, [pc, #12]	; (80059c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059b6:	681b      	ldr	r3, [r3, #0]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000008 	.word	0x20000008

080059c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059cc:	f7ff fff0 	bl	80059b0 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	0a9b      	lsrs	r3, r3, #10
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	; (80059ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40023800 	.word	0x40023800
 80059ec:	080061c4 	.word	0x080061c4

080059f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	220f      	movs	r2, #15
 80059fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a00:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <HAL_RCC_GetClockConfig+0x5c>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 0203 	and.w	r2, r3, #3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <HAL_RCC_GetClockConfig+0x5c>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <HAL_RCC_GetClockConfig+0x5c>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a24:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <HAL_RCC_GetClockConfig+0x5c>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	08db      	lsrs	r3, r3, #3
 8005a2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a32:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <HAL_RCC_GetClockConfig+0x60>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0207 	and.w	r2, r3, #7
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	601a      	str	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40023c00 	.word	0x40023c00

08005a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e041      	b.n	8005aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f839 	bl	8005af2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	4619      	mov	r1, r3
 8005a92:	4610      	mov	r0, r2
 8005a94:	f000 f9d8 	bl	8005e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d001      	beq.n	8005b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e04e      	b.n	8005bbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a23      	ldr	r2, [pc, #140]	; (8005bcc <HAL_TIM_Base_Start_IT+0xc4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d022      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x80>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4a:	d01d      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x80>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1f      	ldr	r2, [pc, #124]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d018      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x80>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1e      	ldr	r2, [pc, #120]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x80>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1c      	ldr	r2, [pc, #112]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00e      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x80>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1b      	ldr	r2, [pc, #108]	; (8005bdc <HAL_TIM_Base_Start_IT+0xd4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d009      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x80>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a19      	ldr	r2, [pc, #100]	; (8005be0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x80>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a18      	ldr	r2, [pc, #96]	; (8005be4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d111      	bne.n	8005bac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b06      	cmp	r3, #6
 8005b98:	d010      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	e007      	b.n	8005bbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40010400 	.word	0x40010400
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40001800 	.word	0x40001800

08005be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d122      	bne.n	8005c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d11b      	bne.n	8005c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0202 	mvn.w	r2, #2
 8005c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f8ee 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005c30:	e005      	b.n	8005c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f8e0 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f8f1 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d122      	bne.n	8005c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d11b      	bne.n	8005c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0204 	mvn.w	r2, #4
 8005c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f8c4 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005c84:	e005      	b.n	8005c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f8b6 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f8c7 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b08      	cmp	r3, #8
 8005ca4:	d122      	bne.n	8005cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d11b      	bne.n	8005cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0208 	mvn.w	r2, #8
 8005cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f89a 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005cd8:	e005      	b.n	8005ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f88c 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f89d 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0310 	and.w	r3, r3, #16
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d122      	bne.n	8005d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d11b      	bne.n	8005d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0210 	mvn.w	r2, #16
 8005d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2208      	movs	r2, #8
 8005d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f870 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005d2c:	e005      	b.n	8005d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f862 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f873 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d10e      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d107      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f06f 0201 	mvn.w	r2, #1
 8005d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fe fdca 	bl	8004900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d76:	2b80      	cmp	r3, #128	; 0x80
 8005d78:	d10e      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d84:	2b80      	cmp	r3, #128	; 0x80
 8005d86:	d107      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f902 	bl	8005f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	d10e      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d107      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f838 	bl	8005e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d10e      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	d107      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0220 	mvn.w	r2, #32
 8005de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f8cc 	bl	8005f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a40      	ldr	r2, [pc, #256]	; (8005f5c <TIM_Base_SetConfig+0x114>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d013      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e66:	d00f      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a3d      	ldr	r2, [pc, #244]	; (8005f60 <TIM_Base_SetConfig+0x118>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00b      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a3c      	ldr	r2, [pc, #240]	; (8005f64 <TIM_Base_SetConfig+0x11c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d007      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a3b      	ldr	r2, [pc, #236]	; (8005f68 <TIM_Base_SetConfig+0x120>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a3a      	ldr	r2, [pc, #232]	; (8005f6c <TIM_Base_SetConfig+0x124>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d108      	bne.n	8005e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2f      	ldr	r2, [pc, #188]	; (8005f5c <TIM_Base_SetConfig+0x114>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d02b      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea8:	d027      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a2c      	ldr	r2, [pc, #176]	; (8005f60 <TIM_Base_SetConfig+0x118>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d023      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2b      	ldr	r2, [pc, #172]	; (8005f64 <TIM_Base_SetConfig+0x11c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01f      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <TIM_Base_SetConfig+0x120>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01b      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a29      	ldr	r2, [pc, #164]	; (8005f6c <TIM_Base_SetConfig+0x124>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d017      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <TIM_Base_SetConfig+0x128>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a27      	ldr	r2, [pc, #156]	; (8005f74 <TIM_Base_SetConfig+0x12c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00f      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a26      	ldr	r2, [pc, #152]	; (8005f78 <TIM_Base_SetConfig+0x130>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00b      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a25      	ldr	r2, [pc, #148]	; (8005f7c <TIM_Base_SetConfig+0x134>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d007      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a24      	ldr	r2, [pc, #144]	; (8005f80 <TIM_Base_SetConfig+0x138>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a23      	ldr	r2, [pc, #140]	; (8005f84 <TIM_Base_SetConfig+0x13c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <TIM_Base_SetConfig+0x114>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_Base_SetConfig+0xf8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a0c      	ldr	r2, [pc, #48]	; (8005f6c <TIM_Base_SetConfig+0x124>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d103      	bne.n	8005f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	615a      	str	r2, [r3, #20]
}
 8005f4e:	bf00      	nop
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40010400 	.word	0x40010400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800
 8005f7c:	40001800 	.word	0x40001800
 8005f80:	40001c00 	.word	0x40001c00
 8005f84:	40002000 	.word	0x40002000

08005f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <__libc_init_array>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4d0d      	ldr	r5, [pc, #52]	; (8005fe8 <__libc_init_array+0x38>)
 8005fb4:	4c0d      	ldr	r4, [pc, #52]	; (8005fec <__libc_init_array+0x3c>)
 8005fb6:	1b64      	subs	r4, r4, r5
 8005fb8:	10a4      	asrs	r4, r4, #2
 8005fba:	2600      	movs	r6, #0
 8005fbc:	42a6      	cmp	r6, r4
 8005fbe:	d109      	bne.n	8005fd4 <__libc_init_array+0x24>
 8005fc0:	4d0b      	ldr	r5, [pc, #44]	; (8005ff0 <__libc_init_array+0x40>)
 8005fc2:	4c0c      	ldr	r4, [pc, #48]	; (8005ff4 <__libc_init_array+0x44>)
 8005fc4:	f000 f83e 	bl	8006044 <_init>
 8005fc8:	1b64      	subs	r4, r4, r5
 8005fca:	10a4      	asrs	r4, r4, #2
 8005fcc:	2600      	movs	r6, #0
 8005fce:	42a6      	cmp	r6, r4
 8005fd0:	d105      	bne.n	8005fde <__libc_init_array+0x2e>
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd8:	4798      	blx	r3
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7ee      	b.n	8005fbc <__libc_init_array+0xc>
 8005fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe2:	4798      	blx	r3
 8005fe4:	3601      	adds	r6, #1
 8005fe6:	e7f2      	b.n	8005fce <__libc_init_array+0x1e>
 8005fe8:	080061d4 	.word	0x080061d4
 8005fec:	080061d4 	.word	0x080061d4
 8005ff0:	080061d4 	.word	0x080061d4
 8005ff4:	080061d8 	.word	0x080061d8

08005ff8 <memcmp>:
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	3901      	subs	r1, #1
 8005ffc:	4402      	add	r2, r0
 8005ffe:	4290      	cmp	r0, r2
 8006000:	d101      	bne.n	8006006 <memcmp+0xe>
 8006002:	2000      	movs	r0, #0
 8006004:	e005      	b.n	8006012 <memcmp+0x1a>
 8006006:	7803      	ldrb	r3, [r0, #0]
 8006008:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800600c:	42a3      	cmp	r3, r4
 800600e:	d001      	beq.n	8006014 <memcmp+0x1c>
 8006010:	1b18      	subs	r0, r3, r4
 8006012:	bd10      	pop	{r4, pc}
 8006014:	3001      	adds	r0, #1
 8006016:	e7f2      	b.n	8005ffe <memcmp+0x6>

08006018 <memcpy>:
 8006018:	440a      	add	r2, r1
 800601a:	4291      	cmp	r1, r2
 800601c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006020:	d100      	bne.n	8006024 <memcpy+0xc>
 8006022:	4770      	bx	lr
 8006024:	b510      	push	{r4, lr}
 8006026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800602a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800602e:	4291      	cmp	r1, r2
 8006030:	d1f9      	bne.n	8006026 <memcpy+0xe>
 8006032:	bd10      	pop	{r4, pc}

08006034 <memset>:
 8006034:	4402      	add	r2, r0
 8006036:	4603      	mov	r3, r0
 8006038:	4293      	cmp	r3, r2
 800603a:	d100      	bne.n	800603e <memset+0xa>
 800603c:	4770      	bx	lr
 800603e:	f803 1b01 	strb.w	r1, [r3], #1
 8006042:	e7f9      	b.n	8006038 <memset+0x4>

08006044 <_init>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	bf00      	nop
 8006048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604a:	bc08      	pop	{r3}
 800604c:	469e      	mov	lr, r3
 800604e:	4770      	bx	lr

08006050 <_fini>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	bf00      	nop
 8006054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006056:	bc08      	pop	{r3}
 8006058:	469e      	mov	lr, r3
 800605a:	4770      	bx	lr
