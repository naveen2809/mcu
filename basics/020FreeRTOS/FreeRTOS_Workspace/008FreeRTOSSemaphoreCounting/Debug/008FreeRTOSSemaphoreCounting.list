
008FreeRTOSSemaphoreCounting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000814c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  080082dc  080082dc  000182dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008628  08008628  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008628  08008628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008630  08008630  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008634  08008634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000150b4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001512c  2001512c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153ba  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003230  00000000  00000000  00035462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  00038698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  00039a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e02  00000000  00000000  0003acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016399  00000000  00000000  0005cac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9bae  00000000  00000000  00072e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ca09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c1c  00000000  00000000  0014ca5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082c4 	.word	0x080082c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080082c4 	.word	0x080082c4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ee0 	.word	0x20012ee0
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f103 0208 	add.w	r2, r3, #8
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800062c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0208 	add.w	r2, r3, #8
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f103 0208 	add.w	r2, r3, #8
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800066e:	b480      	push	{r7}
 8000670:	b085      	sub	sp, #20
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006b6:	b480      	push	{r7}
 80006b8:	b085      	sub	sp, #20
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006cc:	d103      	bne.n	80006d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e00c      	b.n	80006f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3308      	adds	r3, #8
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	e002      	b.n	80006e4 <vListInsert+0x2e>
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d2f6      	bcs.n	80006de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	685a      	ldr	r2, [r3, #4]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	6892      	ldr	r2, [r2, #8]
 800073e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	6852      	ldr	r2, [r2, #4]
 8000748:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	d103      	bne.n	800075c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689a      	ldr	r2, [r3, #8]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1e5a      	subs	r2, r3, #1
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10a      	bne.n	80007a6 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007a2:	bf00      	nop
 80007a4:	e7fe      	b.n	80007a4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80007a6:	f002 fbcd 	bl	8002f44 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007b2:	68f9      	ldr	r1, [r7, #12]
 80007b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007b6:	fb01 f303 	mul.w	r3, r1, r3
 80007ba:	441a      	add	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2200      	movs	r2, #0
 80007c4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	68f9      	ldr	r1, [r7, #12]
 80007da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007dc:	fb01 f303 	mul.w	r3, r1, r3
 80007e0:	441a      	add	r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	22ff      	movs	r2, #255	; 0xff
 80007ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	22ff      	movs	r2, #255	; 0xff
 80007f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d114      	bne.n	8000826 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d01a      	beq.n	800083a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3310      	adds	r3, #16
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fafd 	bl	8001e08 <xTaskRemoveFromEventList>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d012      	beq.n	800083a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <xQueueGenericReset+0xcc>)
 8000816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	f3bf 8f4f 	dsb	sy
 8000820:	f3bf 8f6f 	isb	sy
 8000824:	e009      	b.n	800083a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	3310      	adds	r3, #16
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fef2 	bl	8000614 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3324      	adds	r3, #36	; 0x24
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff feed 	bl	8000614 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800083a:	f002 fbb3 	bl	8002fa4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	e000ed04 	.word	0xe000ed04

0800084c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af02      	add	r7, sp, #8
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	4613      	mov	r3, r2
 8000858:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10a      	bne.n	8000876 <xQueueGenericCreate+0x2a>
        __asm volatile
 8000860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000864:	f383 8811 	msr	BASEPRI, r3
 8000868:	f3bf 8f6f 	isb	sy
 800086c:	f3bf 8f4f 	dsb	sy
 8000870:	61bb      	str	r3, [r7, #24]
    }
 8000872:	bf00      	nop
 8000874:	e7fe      	b.n	8000874 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	fb02 f303 	mul.w	r3, r2, r3
 800087e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d006      	beq.n	8000894 <xQueueGenericCreate+0x48>
 8000886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	429a      	cmp	r2, r3
 8000892:	d101      	bne.n	8000898 <xQueueGenericCreate+0x4c>
 8000894:	2301      	movs	r3, #1
 8000896:	e000      	b.n	800089a <xQueueGenericCreate+0x4e>
 8000898:	2300      	movs	r3, #0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10a      	bne.n	80008b4 <xQueueGenericCreate+0x68>
        __asm volatile
 800089e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	617b      	str	r3, [r7, #20]
    }
 80008b0:	bf00      	nop
 80008b2:	e7fe      	b.n	80008b2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80008ba:	d90a      	bls.n	80008d2 <xQueueGenericCreate+0x86>
        __asm volatile
 80008bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c0:	f383 8811 	msr	BASEPRI, r3
 80008c4:	f3bf 8f6f 	isb	sy
 80008c8:	f3bf 8f4f 	dsb	sy
 80008cc:	613b      	str	r3, [r7, #16]
    }
 80008ce:	bf00      	nop
 80008d0:	e7fe      	b.n	80008d0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	3350      	adds	r3, #80	; 0x50
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fc60 	bl	800319c <pvPortMalloc>
 80008dc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80008de:	6a3b      	ldr	r3, [r7, #32]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00d      	beq.n	8000900 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	3350      	adds	r3, #80	; 0x50
 80008ec:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	4613      	mov	r3, r2
 80008f6:	69fa      	ldr	r2, [r7, #28]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f000 f805 	bl	800090a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000900:	6a3b      	ldr	r3, [r7, #32]
    }
 8000902:	4618      	mov	r0, r3
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d103      	bne.n	8000926 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	e002      	b.n	800092c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000938:	2101      	movs	r1, #1
 800093a:	69b8      	ldr	r0, [r7, #24]
 800093c:	f7ff ff1e 	bl	800077c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	78fa      	ldrb	r2, [r7, #3]
 8000944:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	68f9      	ldr	r1, [r7, #12]
 800094e:	2073      	movs	r0, #115	; 0x73
 8000950:	f003 fe56 	bl	8004600 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10a      	bne.n	8000982 <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 800096c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000970:	f383 8811 	msr	BASEPRI, r3
 8000974:	f3bf 8f6f 	isb	sy
 8000978:	f3bf 8f4f 	dsb	sy
 800097c:	613b      	str	r3, [r7, #16]
    }
 800097e:	bf00      	nop
 8000980:	e7fe      	b.n	8000980 <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	429a      	cmp	r2, r3
 8000988:	d90a      	bls.n	80009a0 <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 800098a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800098e:	f383 8811 	msr	BASEPRI, r3
 8000992:	f3bf 8f6f 	isb	sy
 8000996:	f3bf 8f4f 	dsb	sy
 800099a:	60fb      	str	r3, [r7, #12]
    }
 800099c:	bf00      	nop
 800099e:	e7fe      	b.n	800099e <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80009a0:	2202      	movs	r2, #2
 80009a2:	2100      	movs	r1, #0
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff51 	bl	800084c <xQueueGenericCreate>
 80009aa:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 80009b8:	697b      	ldr	r3, [r7, #20]
    }
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b090      	sub	sp, #64	; 0x40
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80009da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10a      	bne.n	80009f6 <xQueueGenericSend+0x32>
        __asm volatile
 80009e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e4:	f383 8811 	msr	BASEPRI, r3
 80009e8:	f3bf 8f6f 	isb	sy
 80009ec:	f3bf 8f4f 	dsb	sy
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80009f2:	bf00      	nop
 80009f4:	e7fe      	b.n	80009f4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d103      	bne.n	8000a04 <xQueueGenericSend+0x40>
 80009fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d101      	bne.n	8000a08 <xQueueGenericSend+0x44>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <xQueueGenericSend+0x46>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10a      	bne.n	8000a24 <xQueueGenericSend+0x60>
        __asm volatile
 8000a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a12:	f383 8811 	msr	BASEPRI, r3
 8000a16:	f3bf 8f6f 	isb	sy
 8000a1a:	f3bf 8f4f 	dsb	sy
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000a20:	bf00      	nop
 8000a22:	e7fe      	b.n	8000a22 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d103      	bne.n	8000a32 <xQueueGenericSend+0x6e>
 8000a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d101      	bne.n	8000a36 <xQueueGenericSend+0x72>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <xQueueGenericSend+0x74>
 8000a36:	2300      	movs	r3, #0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10a      	bne.n	8000a52 <xQueueGenericSend+0x8e>
        __asm volatile
 8000a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a40:	f383 8811 	msr	BASEPRI, r3
 8000a44:	f3bf 8f6f 	isb	sy
 8000a48:	f3bf 8f4f 	dsb	sy
 8000a4c:	623b      	str	r3, [r7, #32]
    }
 8000a4e:	bf00      	nop
 8000a50:	e7fe      	b.n	8000a50 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a52:	f001 fb79 	bl	8002148 <xTaskGetSchedulerState>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <xQueueGenericSend+0x9e>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <xQueueGenericSend+0xa2>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <xQueueGenericSend+0xa4>
 8000a66:	2300      	movs	r3, #0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10a      	bne.n	8000a82 <xQueueGenericSend+0xbe>
        __asm volatile
 8000a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a70:	f383 8811 	msr	BASEPRI, r3
 8000a74:	f3bf 8f6f 	isb	sy
 8000a78:	f3bf 8f4f 	dsb	sy
 8000a7c:	61fb      	str	r3, [r7, #28]
    }
 8000a7e:	bf00      	nop
 8000a80:	e7fe      	b.n	8000a80 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a82:	f002 fa5f 	bl	8002f44 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d302      	bcc.n	8000a98 <xQueueGenericSend+0xd4>
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d136      	bne.n	8000b06 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8000a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 fb3c 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	4601      	mov	r1, r0
 8000aac:	205a      	movs	r0, #90	; 0x5a
 8000aae:	f003 fe1d 	bl	80046ec <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ab8:	f000 fbea 	bl	8001290 <prvCopyDataToQueue>
 8000abc:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d010      	beq.n	8000ae8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac8:	3324      	adds	r3, #36	; 0x24
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 f99c 	bl	8001e08 <xTaskRemoveFromEventList>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d013      	beq.n	8000afe <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000ad6:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <xQueueGenericSend+0x248>)
 8000ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	f3bf 8f4f 	dsb	sy
 8000ae2:	f3bf 8f6f 	isb	sy
 8000ae6:	e00a      	b.n	8000afe <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d007      	beq.n	8000afe <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000aee:	4b47      	ldr	r3, [pc, #284]	; (8000c0c <xQueueGenericSend+0x248>)
 8000af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	f3bf 8f4f 	dsb	sy
 8000afa:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000afe:	f002 fa51 	bl	8002fa4 <vPortExitCritical>
                return pdPASS;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e07d      	b.n	8000c02 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d110      	bne.n	8000b2e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b0c:	f002 fa4a 	bl	8002fa4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 fb00 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	460b      	mov	r3, r1
 8000b22:	4601      	mov	r1, r0
 8000b24:	205a      	movs	r0, #90	; 0x5a
 8000b26:	f003 fde1 	bl	80046ec <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e069      	b.n	8000c02 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d106      	bne.n	8000b42 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 f9cb 	bl	8001ed4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b42:	f002 fa2f 	bl	8002fa4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b46:	f000 ff17 	bl	8001978 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b4a:	f002 f9fb 	bl	8002f44 <vPortEnterCritical>
 8000b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b5a:	d103      	bne.n	8000b64 <xQueueGenericSend+0x1a0>
 8000b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b70:	d103      	bne.n	8000b7a <xQueueGenericSend+0x1b6>
 8000b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b7a:	f002 fa13 	bl	8002fa4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b7e:	1d3a      	adds	r2, r7, #4
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 f9ba 	bl	8001f00 <xTaskCheckForTimeOut>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d124      	bne.n	8000bdc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b94:	f000 fc74 	bl	8001480 <prvIsQueueFull>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d018      	beq.n	8000bd0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 f8dc 	bl	8001d64 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bae:	f000 fbff 	bl	80013b0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000bb2:	f000 feef 	bl	8001994 <xTaskResumeAll>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f47f af62 	bne.w	8000a82 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <xQueueGenericSend+0x248>)
 8000bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	f3bf 8f4f 	dsb	sy
 8000bca:	f3bf 8f6f 	isb	sy
 8000bce:	e758      	b.n	8000a82 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bd2:	f000 fbed 	bl	80013b0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000bd6:	f000 fedd 	bl	8001994 <xTaskResumeAll>
 8000bda:	e752      	b.n	8000a82 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bde:	f000 fbe7 	bl	80013b0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000be2:	f000 fed7 	bl	8001994 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 fa95 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4601      	mov	r1, r0
 8000bfa:	205a      	movs	r0, #90	; 0x5a
 8000bfc:	f003 fd76 	bl	80046ec <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000c00:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3738      	adds	r7, #56	; 0x38
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000ed04 	.word	0xe000ed04

08000c10 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b090      	sub	sp, #64	; 0x40
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10a      	bne.n	8000c3e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2c:	f383 8811 	msr	BASEPRI, r3
 8000c30:	f3bf 8f6f 	isb	sy
 8000c34:	f3bf 8f4f 	dsb	sy
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000c3a:	bf00      	nop
 8000c3c:	e7fe      	b.n	8000c3c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d103      	bne.n	8000c4c <xQueueGenericSendFromISR+0x3c>
 8000c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <xQueueGenericSendFromISR+0x40>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <xQueueGenericSendFromISR+0x42>
 8000c50:	2300      	movs	r3, #0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10a      	bne.n	8000c6c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c5a:	f383 8811 	msr	BASEPRI, r3
 8000c5e:	f3bf 8f6f 	isb	sy
 8000c62:	f3bf 8f4f 	dsb	sy
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000c68:	bf00      	nop
 8000c6a:	e7fe      	b.n	8000c6a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d103      	bne.n	8000c7a <xQueueGenericSendFromISR+0x6a>
 8000c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <xQueueGenericSendFromISR+0x6e>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <xQueueGenericSendFromISR+0x70>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10a      	bne.n	8000c9a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c88:	f383 8811 	msr	BASEPRI, r3
 8000c8c:	f3bf 8f6f 	isb	sy
 8000c90:	f3bf 8f4f 	dsb	sy
 8000c94:	623b      	str	r3, [r7, #32]
    }
 8000c96:	bf00      	nop
 8000c98:	e7fe      	b.n	8000c98 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c9a:	f002 fa3f 	bl	800311c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8000ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca6:	f383 8811 	msr	BASEPRI, r3
 8000caa:	f3bf 8f6f 	isb	sy
 8000cae:	f3bf 8f4f 	dsb	sy
 8000cb2:	61fa      	str	r2, [r7, #28]
 8000cb4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d302      	bcc.n	8000ccc <xQueueGenericSendFromISR+0xbc>
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d148      	bne.n	8000d5e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 fa1a 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2060      	movs	r0, #96	; 0x60
 8000cec:	f003 fc2e 	bl	800454c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000cf6:	f000 facb 	bl	8001290 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000cfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d02:	d112      	bne.n	8000d2a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d025      	beq.n	8000d58 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d0e:	3324      	adds	r3, #36	; 0x24
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 f879 	bl	8001e08 <xTaskRemoveFromEventList>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d01d      	beq.n	8000d58 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d01a      	beq.n	8000d58 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e016      	b.n	8000d58 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000d2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d30:	d10a      	bne.n	8000d48 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d36:	f383 8811 	msr	BASEPRI, r3
 8000d3a:	f3bf 8f6f 	isb	sy
 8000d3e:	f3bf 8f4f 	dsb	sy
 8000d42:	617b      	str	r3, [r7, #20]
    }
 8000d44:	bf00      	nop
 8000d46:	e7fe      	b.n	8000d46 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000d48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	b25a      	sxtb	r2, r3
 8000d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000d5c:	e00b      	b.n	8000d76 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 f9d9 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000d66:	4601      	mov	r1, r0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	2060      	movs	r0, #96	; 0x60
 8000d6e:	f003 fbed 	bl	800454c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d78:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000d80:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3740      	adds	r7, #64	; 0x40
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b08f      	sub	sp, #60	; 0x3c
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10a      	bne.n	8000dbc <xQueueReceive+0x30>
        __asm volatile
 8000da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000daa:	f383 8811 	msr	BASEPRI, r3
 8000dae:	f3bf 8f6f 	isb	sy
 8000db2:	f3bf 8f4f 	dsb	sy
 8000db6:	623b      	str	r3, [r7, #32]
    }
 8000db8:	bf00      	nop
 8000dba:	e7fe      	b.n	8000dba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d103      	bne.n	8000dca <xQueueReceive+0x3e>
 8000dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <xQueueReceive+0x42>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <xQueueReceive+0x44>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10a      	bne.n	8000dea <xQueueReceive+0x5e>
        __asm volatile
 8000dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd8:	f383 8811 	msr	BASEPRI, r3
 8000ddc:	f3bf 8f6f 	isb	sy
 8000de0:	f3bf 8f4f 	dsb	sy
 8000de4:	61fb      	str	r3, [r7, #28]
    }
 8000de6:	bf00      	nop
 8000de8:	e7fe      	b.n	8000de8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dea:	f001 f9ad 	bl	8002148 <xTaskGetSchedulerState>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <xQueueReceive+0x6e>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <xQueueReceive+0x72>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <xQueueReceive+0x74>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10a      	bne.n	8000e1a <xQueueReceive+0x8e>
        __asm volatile
 8000e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e08:	f383 8811 	msr	BASEPRI, r3
 8000e0c:	f3bf 8f6f 	isb	sy
 8000e10:	f3bf 8f4f 	dsb	sy
 8000e14:	61bb      	str	r3, [r7, #24]
    }
 8000e16:	bf00      	nop
 8000e18:	e7fe      	b.n	8000e18 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000e1a:	f002 f893 	bl	8002f44 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d02f      	beq.n	8000e8a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e2e:	f000 fa99 	bl	8001364 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e34:	4618      	mov	r0, r3
 8000e36:	f004 f96f 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f004 f96b 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000e42:	4602      	mov	r2, r0
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2101      	movs	r1, #1
 8000e48:	9100      	str	r1, [sp, #0]
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	205c      	movs	r0, #92	; 0x5c
 8000e4e:	f003 fc4d 	bl	80046ec <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00f      	beq.n	8000e82 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e64:	3310      	adds	r3, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 ffce 	bl	8001e08 <xTaskRemoveFromEventList>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000e72:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <xQueueReceive+0x21c>)
 8000e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	f3bf 8f4f 	dsb	sy
 8000e7e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000e82:	f002 f88f 	bl	8002fa4 <vPortExitCritical>
                return pdPASS;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e08a      	b.n	8000fa0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d113      	bne.n	8000eb8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000e90:	f002 f888 	bl	8002fa4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 f93e 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f004 f93a 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	9100      	str	r1, [sp, #0]
 8000eac:	4621      	mov	r1, r4
 8000eae:	205c      	movs	r0, #92	; 0x5c
 8000eb0:	f003 fc1c 	bl	80046ec <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e073      	b.n	8000fa0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d106      	bne.n	8000ecc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 f806 	bl	8001ed4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000ecc:	f002 f86a 	bl	8002fa4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ed0:	f000 fd52 	bl	8001978 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000ed4:	f002 f836 	bl	8002f44 <vPortEnterCritical>
 8000ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ee4:	d103      	bne.n	8000eee <xQueueReceive+0x162>
 8000ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000efa:	d103      	bne.n	8000f04 <xQueueReceive+0x178>
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f04:	f002 f84e 	bl	8002fa4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f08:	1d3a      	adds	r2, r7, #4
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fff5 	bl	8001f00 <xTaskCheckForTimeOut>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d124      	bne.n	8000f66 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f1e:	f000 fa99 	bl	8001454 <prvIsQueueEmpty>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d018      	beq.n	8000f5a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2a:	3324      	adds	r3, #36	; 0x24
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 ff17 	bl	8001d64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f38:	f000 fa3a 	bl	80013b0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000f3c:	f000 fd2a 	bl	8001994 <xTaskResumeAll>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f47f af69 	bne.w	8000e1a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <xQueueReceive+0x21c>)
 8000f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	f3bf 8f4f 	dsb	sy
 8000f54:	f3bf 8f6f 	isb	sy
 8000f58:	e75f      	b.n	8000e1a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f5c:	f000 fa28 	bl	80013b0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000f60:	f000 fd18 	bl	8001994 <xTaskResumeAll>
 8000f64:	e759      	b.n	8000e1a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f68:	f000 fa22 	bl	80013b0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000f6c:	f000 fd12 	bl	8001994 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f72:	f000 fa6f 	bl	8001454 <prvIsQueueEmpty>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f43f af4e 	beq.w	8000e1a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 f8c9 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000f86:	4604      	mov	r4, r0
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f004 f8c5 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2101      	movs	r1, #1
 8000f94:	9100      	str	r1, [sp, #0]
 8000f96:	4621      	mov	r1, r4
 8000f98:	205c      	movs	r0, #92	; 0x5c
 8000f9a:	f003 fba7 	bl	80046ec <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000f9e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3734      	adds	r7, #52	; 0x34
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	e000ed04 	.word	0xe000ed04

08000fac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b091      	sub	sp, #68	; 0x44
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10a      	bne.n	8000fde <xQueueSemaphoreTake+0x32>
        __asm volatile
 8000fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fcc:	f383 8811 	msr	BASEPRI, r3
 8000fd0:	f3bf 8f6f 	isb	sy
 8000fd4:	f3bf 8f4f 	dsb	sy
 8000fd8:	623b      	str	r3, [r7, #32]
    }
 8000fda:	bf00      	nop
 8000fdc:	e7fe      	b.n	8000fdc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00a      	beq.n	8000ffc <xQueueSemaphoreTake+0x50>
        __asm volatile
 8000fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fea:	f383 8811 	msr	BASEPRI, r3
 8000fee:	f3bf 8f6f 	isb	sy
 8000ff2:	f3bf 8f4f 	dsb	sy
 8000ff6:	61fb      	str	r3, [r7, #28]
    }
 8000ff8:	bf00      	nop
 8000ffa:	e7fe      	b.n	8000ffa <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ffc:	f001 f8a4 	bl	8002148 <xTaskGetSchedulerState>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <xQueueSemaphoreTake+0x60>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <xQueueSemaphoreTake+0x64>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <xQueueSemaphoreTake+0x66>
 8001010:	2300      	movs	r3, #0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10a      	bne.n	800102c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8001016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101a:	f383 8811 	msr	BASEPRI, r3
 800101e:	f3bf 8f6f 	isb	sy
 8001022:	f3bf 8f4f 	dsb	sy
 8001026:	61bb      	str	r3, [r7, #24]
    }
 8001028:	bf00      	nop
 800102a:	e7fe      	b.n	800102a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800102c:	f001 ff8a 	bl	8002f44 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001038:	2b00      	cmp	r3, #0
 800103a:	d034      	beq.n	80010a6 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103e:	4618      	mov	r0, r3
 8001040:	f004 f86a 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8001044:	4604      	mov	r4, r0
 8001046:	2000      	movs	r0, #0
 8001048:	f004 f866 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 800104c:	4602      	mov	r2, r0
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	9100      	str	r1, [sp, #0]
 8001054:	4621      	mov	r1, r4
 8001056:	205c      	movs	r0, #92	; 0x5c
 8001058:	f003 fb48 	bl	80046ec <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	1e5a      	subs	r2, r3, #1
 8001060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001062:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d104      	bne.n	8001076 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800106c:	f001 fa1c 	bl	80024a8 <pvTaskIncrementMutexHeldCount>
 8001070:	4602      	mov	r2, r0
 8001072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001074:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00f      	beq.n	800109e <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	3310      	adds	r3, #16
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fec0 	bl	8001e08 <xTaskRemoveFromEventList>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800108e:	4b64      	ldr	r3, [pc, #400]	; (8001220 <xQueueSemaphoreTake+0x274>)
 8001090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	f3bf 8f4f 	dsb	sy
 800109a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800109e:	f001 ff81 	bl	8002fa4 <vPortExitCritical>
                return pdPASS;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e0b7      	b.n	8001216 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d121      	bne.n	80010f0 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80010ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00a      	beq.n	80010c8 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 80010b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b6:	f383 8811 	msr	BASEPRI, r3
 80010ba:	f3bf 8f6f 	isb	sy
 80010be:	f3bf 8f4f 	dsb	sy
 80010c2:	617b      	str	r3, [r7, #20]
    }
 80010c4:	bf00      	nop
 80010c6:	e7fe      	b.n	80010c6 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80010c8:	f001 ff6c 	bl	8002fa4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80010cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 f822 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 80010d4:	4604      	mov	r4, r0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f004 f81e 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 80010dc:	4602      	mov	r2, r0
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	9100      	str	r1, [sp, #0]
 80010e4:	4621      	mov	r1, r4
 80010e6:	205c      	movs	r0, #92	; 0x5c
 80010e8:	f003 fb00 	bl	80046ec <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e092      	b.n	8001216 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80010f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d106      	bne.n	8001104 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 feea 	bl	8001ed4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001100:	2301      	movs	r3, #1
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001104:	f001 ff4e 	bl	8002fa4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001108:	f000 fc36 	bl	8001978 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800110c:	f001 ff1a 	bl	8002f44 <vPortEnterCritical>
 8001110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800111c:	d103      	bne.n	8001126 <xQueueSemaphoreTake+0x17a>
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800112c:	b25b      	sxtb	r3, r3
 800112e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001132:	d103      	bne.n	800113c <xQueueSemaphoreTake+0x190>
 8001134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800113c:	f001 ff32 	bl	8002fa4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001140:	463a      	mov	r2, r7
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fed9 	bl	8001f00 <xTaskCheckForTimeOut>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d132      	bne.n	80011ba <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001154:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001156:	f000 f97d 	bl	8001454 <prvIsQueueEmpty>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d026      	beq.n	80011ae <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8001168:	f001 feec 	bl	8002f44 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4618      	mov	r0, r3
 8001172:	f001 f807 	bl	8002184 <xTaskPriorityInherit>
 8001176:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8001178:	f001 ff14 	bl	8002fa4 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117e:	3324      	adds	r3, #36	; 0x24
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fded 	bl	8001d64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800118a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800118c:	f000 f910 	bl	80013b0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001190:	f000 fc00 	bl	8001994 <xTaskResumeAll>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	f47f af48 	bne.w	800102c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800119c:	4b20      	ldr	r3, [pc, #128]	; (8001220 <xQueueSemaphoreTake+0x274>)
 800119e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	f3bf 8f4f 	dsb	sy
 80011a8:	f3bf 8f6f 	isb	sy
 80011ac:	e73e      	b.n	800102c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80011ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011b0:	f000 f8fe 	bl	80013b0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80011b4:	f000 fbee 	bl	8001994 <xTaskResumeAll>
 80011b8:	e738      	b.n	800102c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80011ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011bc:	f000 f8f8 	bl	80013b0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80011c0:	f000 fbe8 	bl	8001994 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011c6:	f000 f945 	bl	8001454 <prvIsQueueEmpty>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f43f af2d 	beq.w	800102c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80011d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00d      	beq.n	80011f4 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 80011d8:	f001 feb4 	bl	8002f44 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80011dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011de:	f000 f83f 	bl	8001260 <prvGetDisinheritPriorityAfterTimeout>
 80011e2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80011e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 f8c4 	bl	8002378 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80011f0:	f001 fed8 	bl	8002fa4 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80011f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 ff8e 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 80011fc:	4604      	mov	r4, r0
 80011fe:	2000      	movs	r0, #0
 8001200:	f003 ff8a 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 8001204:	4602      	mov	r2, r0
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	9100      	str	r1, [sp, #0]
 800120c:	4621      	mov	r1, r4
 800120e:	205c      	movs	r0, #92	; 0x5c
 8001210:	f003 fa6c 	bl	80046ec <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001214:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001216:	4618      	mov	r0, r3
 8001218:	373c      	adds	r7, #60	; 0x3c
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	bf00      	nop
 8001220:	e000ed04 	.word	0xe000ed04

08001224 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10a      	bne.n	8001248 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8001232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001236:	f383 8811 	msr	BASEPRI, r3
 800123a:	f3bf 8f6f 	isb	sy
 800123e:	f3bf 8f4f 	dsb	sy
 8001242:	60bb      	str	r3, [r7, #8]
    }
 8001244:	bf00      	nop
 8001246:	e7fe      	b.n	8001246 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8001248:	f001 fe7c 	bl	8002f44 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001250:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8001252:	f001 fea7 	bl	8002fa4 <vPortExitCritical>

    return uxReturn;
 8001256:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f1c3 0305 	rsb	r3, r3, #5
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e001      	b.n	8001282 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001282:	68fb      	ldr	r3, [r7, #12]
    }
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10d      	bne.n	80012ca <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d14d      	bne.n	8001352 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 ffdc 	bl	8002278 <xTaskPriorityDisinherit>
 80012c0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	e043      	b.n	8001352 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d119      	bne.n	8001304 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6858      	ldr	r0, [r3, #4]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	461a      	mov	r2, r3
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	f005 ffb6 	bl	800724c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	441a      	add	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d32b      	bcc.n	8001352 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	e026      	b.n	8001352 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	68d8      	ldr	r0, [r3, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	461a      	mov	r2, r3
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	f005 ff9c 	bl	800724c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	425b      	negs	r3, r3
 800131e:	441a      	add	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	425b      	negs	r3, r3
 800133a:	441a      	add	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d105      	bne.n	8001352 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	3b01      	subs	r3, #1
 8001350:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800135a:	697b      	ldr	r3, [r7, #20]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	2b00      	cmp	r3, #0
 8001374:	d018      	beq.n	80013a8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	441a      	add	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	429a      	cmp	r2, r3
 800138e:	d303      	bcc.n	8001398 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68d9      	ldr	r1, [r3, #12]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	461a      	mov	r2, r3
 80013a2:	6838      	ldr	r0, [r7, #0]
 80013a4:	f005 ff52 	bl	800724c <memcpy>
    }
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80013b8:	f001 fdc4 	bl	8002f44 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013c2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80013c4:	e011      	b.n	80013ea <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d012      	beq.n	80013f4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3324      	adds	r3, #36	; 0x24
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fd18 	bl	8001e08 <xTaskRemoveFromEventList>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80013de:	f000 fdf5 	bl	8001fcc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	dce9      	bgt.n	80013c6 <prvUnlockQueue+0x16>
 80013f2:	e000      	b.n	80013f6 <prvUnlockQueue+0x46>
                        break;
 80013f4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	22ff      	movs	r2, #255	; 0xff
 80013fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80013fe:	f001 fdd1 	bl	8002fa4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001402:	f001 fd9f 	bl	8002f44 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800140c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800140e:	e011      	b.n	8001434 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d012      	beq.n	800143e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3310      	adds	r3, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fcf3 	bl	8001e08 <xTaskRemoveFromEventList>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001428:	f000 fdd0 	bl	8001fcc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	3b01      	subs	r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001438:	2b00      	cmp	r3, #0
 800143a:	dce9      	bgt.n	8001410 <prvUnlockQueue+0x60>
 800143c:	e000      	b.n	8001440 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800143e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	22ff      	movs	r2, #255	; 0xff
 8001444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001448:	f001 fdac 	bl	8002fa4 <vPortExitCritical>
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800145c:	f001 fd72 	bl	8002f44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001468:	2301      	movs	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e001      	b.n	8001472 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001472:	f001 fd97 	bl	8002fa4 <vPortExitCritical>

    return xReturn;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001488:	f001 fd5c 	bl	8002f44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001494:	429a      	cmp	r2, r3
 8001496:	d102      	bne.n	800149e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001498:	2301      	movs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	e001      	b.n	80014a2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80014a2:	f001 fd7f 	bl	8002fa4 <vPortExitCritical>

    return xReturn;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	e01e      	b.n	80014fe <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80014c0:	4a13      	ldr	r2, [pc, #76]	; (8001510 <vQueueAddToRegistry+0x60>)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d115      	bne.n	80014f8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80014cc:	4910      	ldr	r1, [pc, #64]	; (8001510 <vQueueAddToRegistry+0x60>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <vQueueAddToRegistry+0x60>)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4413      	add	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fe17 	bl	8005118 <SEGGER_SYSVIEW_ShrinkId>
 80014ea:	4601      	mov	r1, r0
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	2071      	movs	r0, #113	; 0x71
 80014f2:	f003 f82b 	bl	800454c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80014f6:	e006      	b.n	8001506 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3301      	adds	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b07      	cmp	r3, #7
 8001502:	d9dd      	bls.n	80014c0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000094 	.word	0x20000094

08001514 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001524:	f001 fd0e 	bl	8002f44 <vPortEnterCritical>
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800152e:	b25b      	sxtb	r3, r3
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001534:	d103      	bne.n	800153e <vQueueWaitForMessageRestricted+0x2a>
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001544:	b25b      	sxtb	r3, r3
 8001546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800154a:	d103      	bne.n	8001554 <vQueueWaitForMessageRestricted+0x40>
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001554:	f001 fd26 	bl	8002fa4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3324      	adds	r3, #36	; 0x24
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fc1f 	bl	8001dac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff1e 	bl	80013b0 <prvUnlockQueue>
    }
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	; 0x30
 8001580:	af04      	add	r7, sp, #16
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	4613      	mov	r3, r2
 800158a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4618      	mov	r0, r3
 8001592:	f001 fe03 	bl	800319c <pvPortMalloc>
 8001596:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00e      	beq.n	80015bc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800159e:	2058      	movs	r0, #88	; 0x58
 80015a0:	f001 fdfc 	bl	800319c <pvPortMalloc>
 80015a4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
 80015b2:	e005      	b.n	80015c0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80015b4:	6978      	ldr	r0, [r7, #20]
 80015b6:	f001 fed1 	bl	800335c <vPortFree>
 80015ba:	e001      	b.n	80015c0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d013      	beq.n	80015ee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80015c6:	88fa      	ldrh	r2, [r7, #6]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9303      	str	r3, [sp, #12]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f80e 	bl	80015fe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80015e2:	69f8      	ldr	r0, [r7, #28]
 80015e4:	f000 f8a2 	bl	800172c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	e002      	b.n	80015f4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015f2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80015f4:	69bb      	ldr	r3, [r7, #24]
    }
 80015f6:	4618      	mov	r0, r3
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b088      	sub	sp, #32
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	461a      	mov	r2, r3
 8001616:	21a5      	movs	r1, #165	; 0xa5
 8001618:	f005 fe26 	bl	8007268 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800161c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001626:	3b01      	subs	r3, #1
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f023 0307 	bic.w	r3, r3, #7
 8001634:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00a      	beq.n	8001656 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001644:	f383 8811 	msr	BASEPRI, r3
 8001648:	f3bf 8f6f 	isb	sy
 800164c:	f3bf 8f4f 	dsb	sy
 8001650:	617b      	str	r3, [r7, #20]
    }
 8001652:	bf00      	nop
 8001654:	e7fe      	b.n	8001654 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01f      	beq.n	800169c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	e012      	b.n	8001688 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	7819      	ldrb	r1, [r3, #0]
 800166a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	4413      	add	r3, r2
 8001670:	3334      	adds	r3, #52	; 0x34
 8001672:	460a      	mov	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b09      	cmp	r3, #9
 800168c:	d9e9      	bls.n	8001662 <prvInitialiseNewTask+0x64>
 800168e:	e000      	b.n	8001692 <prvInitialiseNewTask+0x94>
            {
                break;
 8001690:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800169a:	e003      	b.n	80016a4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d901      	bls.n	80016ae <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80016aa:	2304      	movs	r3, #4
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80016ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80016b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80016ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016bc:	2200      	movs	r2, #0
 80016be:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80016c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c2:	3304      	adds	r3, #4
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ffc5 	bl	8000654 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80016ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016cc:	3318      	adds	r3, #24
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ffc0 	bl	8000654 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80016d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016dc:	f1c3 0205 	rsb	r2, r3, #5
 80016e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80016e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80016ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ec:	3350      	adds	r3, #80	; 0x50
 80016ee:	2204      	movs	r2, #4
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 fdb8 	bl	8007268 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80016f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fa:	3354      	adds	r3, #84	; 0x54
 80016fc:	2201      	movs	r2, #1
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f005 fdb1 	bl	8007268 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	69b8      	ldr	r0, [r7, #24]
 800170c:	f001 fa6a 	bl	8002be4 <pxPortInitialiseStack>
 8001710:	4602      	mov	r2, r0
 8001712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001714:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001720:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800172c:	b5b0      	push	{r4, r5, r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af02      	add	r7, sp, #8
 8001732:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001734:	f001 fc06 	bl	8002f44 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001738:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <prvAddNewTaskToReadyList+0xfc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	4a3a      	ldr	r2, [pc, #232]	; (8001828 <prvAddNewTaskToReadyList+0xfc>)
 8001740:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <prvAddNewTaskToReadyList+0x100>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800174a:	4a38      	ldr	r2, [pc, #224]	; (800182c <prvAddNewTaskToReadyList+0x100>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001750:	4b35      	ldr	r3, [pc, #212]	; (8001828 <prvAddNewTaskToReadyList+0xfc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d110      	bne.n	800177a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001758:	f000 fc5c 	bl	8002014 <prvInitialiseTaskLists>
 800175c:	e00d      	b.n	800177a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800175e:	4b34      	ldr	r3, [pc, #208]	; (8001830 <prvAddNewTaskToReadyList+0x104>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <prvAddNewTaskToReadyList+0x100>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	429a      	cmp	r2, r3
 8001772:	d802      	bhi.n	800177a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001774:	4a2d      	ldr	r2, [pc, #180]	; (800182c <prvAddNewTaskToReadyList+0x100>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <prvAddNewTaskToReadyList+0x108>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a2c      	ldr	r2, [pc, #176]	; (8001834 <prvAddNewTaskToReadyList+0x108>)
 8001782:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <prvAddNewTaskToReadyList+0x108>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d016      	beq.n	80017c0 <prvAddNewTaskToReadyList+0x94>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	f003 fb99 	bl	8004ecc <SEGGER_SYSVIEW_OnTaskCreate>
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	461d      	mov	r5, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	461c      	mov	r4, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	1ae3      	subs	r3, r4, r3
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	462b      	mov	r3, r5
 80017bc:	f001 ff9c 	bl	80036f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fc06 	bl	8004fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	2201      	movs	r2, #1
 80017ce:	409a      	lsls	r2, r3
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <prvAddNewTaskToReadyList+0x10c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <prvAddNewTaskToReadyList+0x10c>)
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4a15      	ldr	r2, [pc, #84]	; (800183c <prvAddNewTaskToReadyList+0x110>)
 80017e8:	441a      	add	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3304      	adds	r3, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4610      	mov	r0, r2
 80017f2:	f7fe ff3c 	bl	800066e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80017f6:	f001 fbd5 	bl	8002fa4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <prvAddNewTaskToReadyList+0x104>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00e      	beq.n	8001820 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <prvAddNewTaskToReadyList+0x100>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <prvAddNewTaskToReadyList+0x114>)
 8001812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bdb0      	pop	{r4, r5, r7, pc}
 8001828:	200001ac 	.word	0x200001ac
 800182c:	200000d4 	.word	0x200000d4
 8001830:	200001b8 	.word	0x200001b8
 8001834:	200001c8 	.word	0x200001c8
 8001838:	200001b4 	.word	0x200001b4
 800183c:	200000d8 	.word	0x200000d8
 8001840:	e000ed04 	.word	0xe000ed04

08001844 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d01b      	beq.n	800188e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <vTaskDelay+0x68>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00a      	beq.n	8001874 <vTaskDelay+0x30>
        __asm volatile
 800185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001862:	f383 8811 	msr	BASEPRI, r3
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	f3bf 8f4f 	dsb	sy
 800186e:	60bb      	str	r3, [r7, #8]
    }
 8001870:	bf00      	nop
 8001872:	e7fe      	b.n	8001872 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001874:	f000 f880 	bl	8001978 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	2023      	movs	r0, #35	; 0x23
 800187c:	f002 fe2a 	bl	80044d4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001880:	2100      	movs	r1, #0
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fe24 	bl	80024d0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001888:	f000 f884 	bl	8001994 <xTaskResumeAll>
 800188c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d107      	bne.n	80018a4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <vTaskDelay+0x6c>)
 8001896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	f3bf 8f4f 	dsb	sy
 80018a0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200001d4 	.word	0x200001d4
 80018b0:	e000ed04 	.word	0xe000ed04

080018b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80018ba:	4b27      	ldr	r3, [pc, #156]	; (8001958 <vTaskStartScheduler+0xa4>)
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2300      	movs	r3, #0
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2282      	movs	r2, #130	; 0x82
 80018c6:	4925      	ldr	r1, [pc, #148]	; (800195c <vTaskStartScheduler+0xa8>)
 80018c8:	4825      	ldr	r0, [pc, #148]	; (8001960 <vTaskStartScheduler+0xac>)
 80018ca:	f7ff fe57 	bl	800157c <xTaskCreate>
 80018ce:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d102      	bne.n	80018dc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80018d6:	f000 fe73 	bl	80025c0 <xTimerCreateTimerTask>
 80018da:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d124      	bne.n	800192c <vTaskStartScheduler+0x78>
        __asm volatile
 80018e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e6:	f383 8811 	msr	BASEPRI, r3
 80018ea:	f3bf 8f6f 	isb	sy
 80018ee:	f3bf 8f4f 	dsb	sy
 80018f2:	60bb      	str	r3, [r7, #8]
    }
 80018f4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <vTaskStartScheduler+0xb0>)
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <vTaskStartScheduler+0xb4>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <vTaskStartScheduler+0xb8>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <vTaskStartScheduler+0xbc>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <vTaskStartScheduler+0xa4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d102      	bne.n	800191c <vTaskStartScheduler+0x68>
 8001916:	f003 fabd 	bl	8004e94 <SEGGER_SYSVIEW_OnIdle>
 800191a:	e004      	b.n	8001926 <vTaskStartScheduler+0x72>
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <vTaskStartScheduler+0xbc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fb15 	bl	8004f50 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001926:	f001 f9ed 	bl	8002d04 <xPortStartScheduler>
 800192a:	e00e      	b.n	800194a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001932:	d10a      	bne.n	800194a <vTaskStartScheduler+0x96>
        __asm volatile
 8001934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001938:	f383 8811 	msr	BASEPRI, r3
 800193c:	f3bf 8f6f 	isb	sy
 8001940:	f3bf 8f4f 	dsb	sy
 8001944:	607b      	str	r3, [r7, #4]
    }
 8001946:	bf00      	nop
 8001948:	e7fe      	b.n	8001948 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <vTaskStartScheduler+0xc0>)
 800194c:	681b      	ldr	r3, [r3, #0]
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200001d0 	.word	0x200001d0
 800195c:	080082dc 	.word	0x080082dc
 8001960:	08001fe5 	.word	0x08001fe5
 8001964:	200001cc 	.word	0x200001cc
 8001968:	200001b8 	.word	0x200001b8
 800196c:	200001b0 	.word	0x200001b0
 8001970:	200000d4 	.word	0x200000d4
 8001974:	20000000 	.word	0x20000000

08001978 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <vTaskSuspendAll+0x18>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	4a03      	ldr	r2, [pc, #12]	; (8001990 <vTaskSuspendAll+0x18>)
 8001984:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	200001d4 	.word	0x200001d4

08001994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80019a2:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <xTaskResumeAll+0x11c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10a      	bne.n	80019c0 <xTaskResumeAll+0x2c>
        __asm volatile
 80019aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ae:	f383 8811 	msr	BASEPRI, r3
 80019b2:	f3bf 8f6f 	isb	sy
 80019b6:	f3bf 8f4f 	dsb	sy
 80019ba:	603b      	str	r3, [r7, #0]
    }
 80019bc:	bf00      	nop
 80019be:	e7fe      	b.n	80019be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80019c0:	f001 fac0 	bl	8002f44 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <xTaskResumeAll+0x11c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	4a39      	ldr	r2, [pc, #228]	; (8001ab0 <xTaskResumeAll+0x11c>)
 80019cc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <xTaskResumeAll+0x11c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d165      	bne.n	8001aa2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <xTaskResumeAll+0x120>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d061      	beq.n	8001aa2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019de:	e032      	b.n	8001a46 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <xTaskResumeAll+0x124>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3318      	adds	r3, #24
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fe9b 	bl	8000728 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3304      	adds	r3, #4
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fe96 	bl	8000728 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fae8 	bl	8004fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	2201      	movs	r2, #1
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <xTaskResumeAll+0x128>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	4a2a      	ldr	r2, [pc, #168]	; (8001abc <xTaskResumeAll+0x128>)
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <xTaskResumeAll+0x12c>)
 8001a24:	441a      	add	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	f7fe fe1e 	bl	800066e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <xTaskResumeAll+0x130>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d302      	bcc.n	8001a46 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <xTaskResumeAll+0x134>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <xTaskResumeAll+0x124>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1c8      	bne.n	80019e0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001a54:	f000 fb5c 	bl	8002110 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a58:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <xTaskResumeAll+0x138>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001a64:	f000 f858 	bl	8001b18 <xTaskIncrementTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <xTaskResumeAll+0x134>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f1      	bne.n	8001a64 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <xTaskResumeAll+0x138>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <xTaskResumeAll+0x134>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <xTaskResumeAll+0x13c>)
 8001a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	f3bf 8f4f 	dsb	sy
 8001a9e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001aa2:	f001 fa7f 	bl	8002fa4 <vPortExitCritical>

    return xAlreadyYielded;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200001d4 	.word	0x200001d4
 8001ab4:	200001ac 	.word	0x200001ac
 8001ab8:	2000016c 	.word	0x2000016c
 8001abc:	200001b4 	.word	0x200001b4
 8001ac0:	200000d8 	.word	0x200000d8
 8001ac4:	200000d4 	.word	0x200000d4
 8001ac8:	200001c0 	.word	0x200001c0
 8001acc:	200001bc 	.word	0x200001bc
 8001ad0:	e000ed04 	.word	0xe000ed04

08001ad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <xTaskGetTickCount+0x1c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200001b0 	.word	0x200001b0

08001af4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001afa:	f001 fb0f 	bl	800311c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <xTaskGetTickCountFromISR+0x20>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001b08:	683b      	ldr	r3, [r7, #0]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200001b0 	.word	0x200001b0

08001b18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b22:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <xTaskIncrementTick+0x14c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f040 8092 	bne.w	8001c50 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b2c:	4b4e      	ldr	r3, [pc, #312]	; (8001c68 <xTaskIncrementTick+0x150>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3301      	adds	r3, #1
 8001b32:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001b34:	4a4c      	ldr	r2, [pc, #304]	; (8001c68 <xTaskIncrementTick+0x150>)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d120      	bne.n	8001b82 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <xTaskIncrementTick+0x154>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00a      	beq.n	8001b60 <xTaskIncrementTick+0x48>
        __asm volatile
 8001b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	603b      	str	r3, [r7, #0]
    }
 8001b5c:	bf00      	nop
 8001b5e:	e7fe      	b.n	8001b5e <xTaskIncrementTick+0x46>
 8001b60:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <xTaskIncrementTick+0x154>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <xTaskIncrementTick+0x158>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a40      	ldr	r2, [pc, #256]	; (8001c6c <xTaskIncrementTick+0x154>)
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <xTaskIncrementTick+0x158>)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <xTaskIncrementTick+0x15c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a3e      	ldr	r2, [pc, #248]	; (8001c74 <xTaskIncrementTick+0x15c>)
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	f000 fac7 	bl	8002110 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <xTaskIncrementTick+0x160>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d34c      	bcc.n	8001c26 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b8c:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <xTaskIncrementTick+0x154>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d104      	bne.n	8001ba0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <xTaskIncrementTick+0x160>)
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b9c:	601a      	str	r2, [r3, #0]
                    break;
 8001b9e:	e042      	b.n	8001c26 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <xTaskIncrementTick+0x154>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d203      	bcs.n	8001bc0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001bb8:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <xTaskIncrementTick+0x160>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001bbe:	e032      	b.n	8001c26 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fdaf 	bl	8000728 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fda6 	bl	8000728 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 f9f8 	bl	8004fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	2201      	movs	r2, #1
 8001bea:	409a      	lsls	r2, r3
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <xTaskIncrementTick+0x164>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <xTaskIncrementTick+0x164>)
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <xTaskIncrementTick+0x168>)
 8001c04:	441a      	add	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	f7fe fd2e 	bl	800066e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <xTaskIncrementTick+0x16c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3b5      	bcc.n	8001b8c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c24:	e7b2      	b.n	8001b8c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <xTaskIncrementTick+0x16c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	4914      	ldr	r1, [pc, #80]	; (8001c80 <xTaskIncrementTick+0x168>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d901      	bls.n	8001c42 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <xTaskIncrementTick+0x170>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e004      	b.n	8001c5a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <xTaskIncrementTick+0x174>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <xTaskIncrementTick+0x174>)
 8001c58:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001c5a:	697b      	ldr	r3, [r7, #20]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	200001d4 	.word	0x200001d4
 8001c68:	200001b0 	.word	0x200001b0
 8001c6c:	20000164 	.word	0x20000164
 8001c70:	20000168 	.word	0x20000168
 8001c74:	200001c4 	.word	0x200001c4
 8001c78:	200001cc 	.word	0x200001cc
 8001c7c:	200001b4 	.word	0x200001b4
 8001c80:	200000d8 	.word	0x200000d8
 8001c84:	200000d4 	.word	0x200000d4
 8001c88:	200001c0 	.word	0x200001c0
 8001c8c:	200001bc 	.word	0x200001bc

08001c90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <vTaskSwitchContext+0xbc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <vTaskSwitchContext+0xc0>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001ca4:	e04d      	b.n	8001d42 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <vTaskSwitchContext+0xc0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <vTaskSwitchContext+0xc4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	f1c3 031f 	rsb	r3, r3, #31
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	4925      	ldr	r1, [pc, #148]	; (8001d58 <vTaskSwitchContext+0xc8>)
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10a      	bne.n	8001cec <vTaskSwitchContext+0x5c>
        __asm volatile
 8001cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
 8001ce6:	607b      	str	r3, [r7, #4]
    }
 8001ce8:	bf00      	nop
 8001cea:	e7fe      	b.n	8001cea <vTaskSwitchContext+0x5a>
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <vTaskSwitchContext+0xc8>)
 8001cf8:	4413      	add	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	3308      	adds	r3, #8
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d104      	bne.n	8001d1c <vTaskSwitchContext+0x8c>
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <vTaskSwitchContext+0xcc>)
 8001d24:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <vTaskSwitchContext+0xcc>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <vTaskSwitchContext+0xd0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d102      	bne.n	8001d38 <vTaskSwitchContext+0xa8>
 8001d32:	f003 f8af 	bl	8004e94 <SEGGER_SYSVIEW_OnIdle>
}
 8001d36:	e004      	b.n	8001d42 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <vTaskSwitchContext+0xcc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 f907 	bl	8004f50 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200001d4 	.word	0x200001d4
 8001d50:	200001c0 	.word	0x200001c0
 8001d54:	200001b4 	.word	0x200001b4
 8001d58:	200000d8 	.word	0x200000d8
 8001d5c:	200000d4 	.word	0x200000d4
 8001d60:	200001d0 	.word	0x200001d0

08001d64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10a      	bne.n	8001d8a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d78:	f383 8811 	msr	BASEPRI, r3
 8001d7c:	f3bf 8f6f 	isb	sy
 8001d80:	f3bf 8f4f 	dsb	sy
 8001d84:	60fb      	str	r3, [r7, #12]
    }
 8001d86:	bf00      	nop
 8001d88:	e7fe      	b.n	8001d88 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <vTaskPlaceOnEventList+0x44>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	3318      	adds	r3, #24
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fc8f 	bl	80006b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d98:	2101      	movs	r1, #1
 8001d9a:	6838      	ldr	r0, [r7, #0]
 8001d9c:	f000 fb98 	bl	80024d0 <prvAddCurrentTaskToDelayedList>
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200000d4 	.word	0x200000d4

08001dac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc2:	f383 8811 	msr	BASEPRI, r3
 8001dc6:	f3bf 8f6f 	isb	sy
 8001dca:	f3bf 8f4f 	dsb	sy
 8001dce:	617b      	str	r3, [r7, #20]
    }
 8001dd0:	bf00      	nop
 8001dd2:	e7fe      	b.n	8001dd2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <vTaskPlaceOnEventListRestricted+0x58>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3318      	adds	r3, #24
 8001dda:	4619      	mov	r1, r3
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7fe fc46 	bl	800066e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001dee:	2024      	movs	r0, #36	; 0x24
 8001df0:	f002 fb52 	bl	8004498 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	68b8      	ldr	r0, [r7, #8]
 8001df8:	f000 fb6a 	bl	80024d0 <prvAddCurrentTaskToDelayedList>
    }
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200000d4 	.word	0x200000d4

08001e08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10a      	bne.n	8001e34 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e22:	f383 8811 	msr	BASEPRI, r3
 8001e26:	f3bf 8f6f 	isb	sy
 8001e2a:	f3bf 8f4f 	dsb	sy
 8001e2e:	60fb      	str	r3, [r7, #12]
    }
 8001e30:	bf00      	nop
 8001e32:	e7fe      	b.n	8001e32 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	3318      	adds	r3, #24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fc75 	bl	8000728 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <xTaskRemoveFromEventList+0xb4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d120      	bne.n	8001e88 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fc6c 	bl	8000728 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 f8be 	bl	8004fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <xTaskRemoveFromEventList+0xb8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <xTaskRemoveFromEventList+0xb8>)
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <xTaskRemoveFromEventList+0xbc>)
 8001e78:	441a      	add	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4610      	mov	r0, r2
 8001e82:	f7fe fbf4 	bl	800066e <vListInsertEnd>
 8001e86:	e005      	b.n	8001e94 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	3318      	adds	r3, #24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <xTaskRemoveFromEventList+0xc0>)
 8001e90:	f7fe fbed 	bl	800066e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <xTaskRemoveFromEventList+0xc4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d905      	bls.n	8001eae <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <xTaskRemoveFromEventList+0xc8>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e001      	b.n	8001eb2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001eb2:	697b      	ldr	r3, [r7, #20]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200001d4 	.word	0x200001d4
 8001ec0:	200001b4 	.word	0x200001b4
 8001ec4:	200000d8 	.word	0x200000d8
 8001ec8:	2000016c 	.word	0x2000016c
 8001ecc:	200000d4 	.word	0x200000d4
 8001ed0:	200001c0 	.word	0x200001c0

08001ed4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <vTaskInternalSetTimeOutState+0x24>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <vTaskInternalSetTimeOutState+0x28>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	605a      	str	r2, [r3, #4]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	200001c4 	.word	0x200001c4
 8001efc:	200001b0 	.word	0x200001b0

08001f00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f14:	f383 8811 	msr	BASEPRI, r3
 8001f18:	f3bf 8f6f 	isb	sy
 8001f1c:	f3bf 8f4f 	dsb	sy
 8001f20:	613b      	str	r3, [r7, #16]
    }
 8001f22:	bf00      	nop
 8001f24:	e7fe      	b.n	8001f24 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10a      	bne.n	8001f42 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f30:	f383 8811 	msr	BASEPRI, r3
 8001f34:	f3bf 8f6f 	isb	sy
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	60fb      	str	r3, [r7, #12]
    }
 8001f3e:	bf00      	nop
 8001f40:	e7fe      	b.n	8001f40 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001f42:	f000 ffff 	bl	8002f44 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <xTaskCheckForTimeOut+0xc4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f5e:	d102      	bne.n	8001f66 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	e026      	b.n	8001fb4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <xTaskCheckForTimeOut+0xc8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d00a      	beq.n	8001f88 <xTaskCheckForTimeOut+0x88>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d305      	bcc.n	8001f88 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e015      	b.n	8001fb4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d20b      	bcs.n	8001faa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	1ad2      	subs	r2, r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff98 	bl	8001ed4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	e004      	b.n	8001fb4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001fb4:	f000 fff6 	bl	8002fa4 <vPortExitCritical>

    return xReturn;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200001b0 	.word	0x200001b0
 8001fc8:	200001c4 	.word	0x200001c4

08001fcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <vTaskMissedYield+0x14>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	200001c0 	.word	0x200001c0

08001fe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001fec:	f000 f852 	bl	8002094 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <prvIdleTask+0x28>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d9f9      	bls.n	8001fec <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <prvIdleTask+0x2c>)
 8001ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002008:	e7f0      	b.n	8001fec <prvIdleTask+0x8>
 800200a:	bf00      	nop
 800200c:	200000d8 	.word	0x200000d8
 8002010:	e000ed04 	.word	0xe000ed04

08002014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	e00c      	b.n	800203a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <prvInitialiseTaskLists+0x60>)
 800202c:	4413      	add	r3, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe faf0 	bl	8000614 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3301      	adds	r3, #1
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d9ef      	bls.n	8002020 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <prvInitialiseTaskLists+0x64>)
 8002042:	f7fe fae7 	bl	8000614 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002046:	480d      	ldr	r0, [pc, #52]	; (800207c <prvInitialiseTaskLists+0x68>)
 8002048:	f7fe fae4 	bl	8000614 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <prvInitialiseTaskLists+0x6c>)
 800204e:	f7fe fae1 	bl	8000614 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <prvInitialiseTaskLists+0x70>)
 8002054:	f7fe fade 	bl	8000614 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002058:	480b      	ldr	r0, [pc, #44]	; (8002088 <prvInitialiseTaskLists+0x74>)
 800205a:	f7fe fadb 	bl	8000614 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <prvInitialiseTaskLists+0x78>)
 8002060:	4a05      	ldr	r2, [pc, #20]	; (8002078 <prvInitialiseTaskLists+0x64>)
 8002062:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <prvInitialiseTaskLists+0x7c>)
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <prvInitialiseTaskLists+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200000d8 	.word	0x200000d8
 8002078:	2000013c 	.word	0x2000013c
 800207c:	20000150 	.word	0x20000150
 8002080:	2000016c 	.word	0x2000016c
 8002084:	20000180 	.word	0x20000180
 8002088:	20000198 	.word	0x20000198
 800208c:	20000164 	.word	0x20000164
 8002090:	20000168 	.word	0x20000168

08002094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800209a:	e019      	b.n	80020d0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800209c:	f000 ff52 	bl	8002f44 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <prvCheckTasksWaitingTermination+0x50>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3304      	adds	r3, #4
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fb3b 	bl	8000728 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <prvCheckTasksWaitingTermination+0x54>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <prvCheckTasksWaitingTermination+0x54>)
 80020ba:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <prvCheckTasksWaitingTermination+0x58>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <prvCheckTasksWaitingTermination+0x58>)
 80020c4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80020c6:	f000 ff6d 	bl	8002fa4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f810 	bl	80020f0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <prvCheckTasksWaitingTermination+0x58>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e1      	bne.n	800209c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000180 	.word	0x20000180
 80020e8:	200001ac 	.word	0x200001ac
 80020ec:	20000194 	.word	0x20000194

080020f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4618      	mov	r0, r3
 80020fe:	f001 f92d 	bl	800335c <vPortFree>
                vPortFree( pxTCB );
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f001 f92a 	bl	800335c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <prvResetNextTaskUnblockTime+0x30>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d104      	bne.n	8002128 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <prvResetNextTaskUnblockTime+0x34>)
 8002120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002124:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002126:	e005      	b.n	8002134 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <prvResetNextTaskUnblockTime+0x30>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <prvResetNextTaskUnblockTime+0x34>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000164 	.word	0x20000164
 8002144:	200001cc 	.word	0x200001cc

08002148 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <xTaskGetSchedulerState+0x34>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002156:	2301      	movs	r3, #1
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	e008      	b.n	800216e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <xTaskGetSchedulerState+0x38>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002164:	2302      	movs	r3, #2
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	e001      	b.n	800216e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800216e:	687b      	ldr	r3, [r7, #4]
    }
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	200001b8 	.word	0x200001b8
 8002180:	200001d4 	.word	0x200001d4

08002184 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d063      	beq.n	8002262 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <xTaskPriorityInherit+0xe8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d253      	bcs.n	8002250 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db06      	blt.n	80021be <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021b0:	4b2e      	ldr	r3, [pc, #184]	; (800226c <xTaskPriorityInherit+0xe8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f1c3 0205 	rsb	r2, r3, #5
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	6959      	ldr	r1, [r3, #20]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4a28      	ldr	r2, [pc, #160]	; (8002270 <xTaskPriorityInherit+0xec>)
 80021d0:	4413      	add	r3, r2
 80021d2:	4299      	cmp	r1, r3
 80021d4:	d12f      	bne.n	8002236 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3304      	adds	r3, #4
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe faa4 	bl	8000728 <uxListRemove>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	2201      	movs	r2, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43da      	mvns	r2, r3
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <xTaskPriorityInherit+0xf0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4013      	ands	r3, r2
 80021f8:	4a1e      	ldr	r2, [pc, #120]	; (8002274 <xTaskPriorityInherit+0xf0>)
 80021fa:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <xTaskPriorityInherit+0xe8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	2201      	movs	r2, #1
 800220c:	409a      	lsls	r2, r3
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <xTaskPriorityInherit+0xf0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	4a17      	ldr	r2, [pc, #92]	; (8002274 <xTaskPriorityInherit+0xf0>)
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4a12      	ldr	r2, [pc, #72]	; (8002270 <xTaskPriorityInherit+0xec>)
 8002226:	441a      	add	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	3304      	adds	r3, #4
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f7fe fa1d 	bl	800066e <vListInsertEnd>
 8002234:	e004      	b.n	8002240 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <xTaskPriorityInherit+0xe8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4619      	mov	r1, r3
 8002244:	2049      	movs	r0, #73	; 0x49
 8002246:	f002 f945 	bl	80044d4 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800224a:	2301      	movs	r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	e008      	b.n	8002262 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <xTaskPriorityInherit+0xe8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	429a      	cmp	r2, r3
 800225c:	d201      	bcs.n	8002262 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800225e:	2301      	movs	r3, #1
 8002260:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002262:	68fb      	ldr	r3, [r7, #12]
    }
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200000d4 	.word	0x200000d4
 8002270:	200000d8 	.word	0x200000d8
 8002274:	200001b4 	.word	0x200001b4

08002278 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d068      	beq.n	8002360 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <xTaskPriorityDisinherit+0xf4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d00a      	beq.n	80022ae <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	60fb      	str	r3, [r7, #12]
    }
 80022aa:	bf00      	nop
 80022ac:	e7fe      	b.n	80022ac <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10a      	bne.n	80022cc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80022b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	60bb      	str	r3, [r7, #8]
    }
 80022c8:	bf00      	nop
 80022ca:	e7fe      	b.n	80022ca <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	1e5a      	subs	r2, r3, #1
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022de:	429a      	cmp	r2, r3
 80022e0:	d03e      	beq.n	8002360 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d13a      	bne.n	8002360 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	3304      	adds	r3, #4
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fa1a 	bl	8000728 <uxListRemove>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	2201      	movs	r2, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43da      	mvns	r2, r3
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <xTaskPriorityDisinherit+0xf8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4013      	ands	r3, r2
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <xTaskPriorityDisinherit+0xf8>)
 800230e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4619      	mov	r1, r3
 8002314:	204a      	movs	r0, #74	; 0x4a
 8002316:	f002 f8dd 	bl	80044d4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	f1c3 0205 	rsb	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	2201      	movs	r2, #1
 8002334:	409a      	lsls	r2, r3
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <xTaskPriorityDisinherit+0xf8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <xTaskPriorityDisinherit+0xf8>)
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4a09      	ldr	r2, [pc, #36]	; (8002374 <xTaskPriorityDisinherit+0xfc>)
 800234e:	441a      	add	r2, r3
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	3304      	adds	r3, #4
 8002354:	4619      	mov	r1, r3
 8002356:	4610      	mov	r0, r2
 8002358:	f7fe f989 	bl	800066e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800235c:	2301      	movs	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002360:	697b      	ldr	r3, [r7, #20]
    }
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200000d4 	.word	0x200000d4
 8002370:	200001b4 	.word	0x200001b4
 8002374:	200000d8 	.word	0x200000d8

08002378 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8081 	beq.w	8002494 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	60fb      	str	r3, [r7, #12]
    }
 80023ac:	bf00      	nop
 80023ae:	e7fe      	b.n	80023ae <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d902      	bls.n	80023c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e002      	b.n	80023c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c4:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d061      	beq.n	8002494 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d15c      	bne.n	8002494 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d10a      	bne.n	80023fa <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	60bb      	str	r3, [r7, #8]
    }
 80023f6:	bf00      	nop
 80023f8:	e7fe      	b.n	80023f8 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4619      	mov	r1, r3
 80023fe:	204a      	movs	r0, #74	; 0x4a
 8002400:	f002 f868 	bl	80044d4 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db04      	blt.n	8002422 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0205 	rsb	r2, r3, #5
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	6959      	ldr	r1, [r3, #20]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8002432:	4413      	add	r3, r2
 8002434:	4299      	cmp	r1, r3
 8002436:	d12d      	bne.n	8002494 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	3304      	adds	r3, #4
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f973 	bl	8000728 <uxListRemove>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	2201      	movs	r2, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4013      	ands	r3, r2
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800245c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4618      	mov	r0, r3
 8002462:	f002 fdb7 	bl	8004fd4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	2201      	movs	r2, #1
 800246c:	409a      	lsls	r2, r3
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4a06      	ldr	r2, [pc, #24]	; (80024a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8002486:	441a      	add	r2, r3
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f7fe f8ed 	bl	800066e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002494:	bf00      	nop
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200000d4 	.word	0x200000d4
 80024a0:	200000d8 	.word	0x200000d8
 80024a4:	200001b4 	.word	0x200001b4

080024a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <pvTaskIncrementMutexHeldCount+0x24>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <pvTaskIncrementMutexHeldCount+0x24>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024ba:	3201      	adds	r2, #1
 80024bc:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80024be:	4b03      	ldr	r3, [pc, #12]	; (80024cc <pvTaskIncrementMutexHeldCount+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
    }
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	200000d4 	.word	0x200000d4

080024d0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3304      	adds	r3, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f91e 	bl	8000728 <uxListRemove>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10b      	bne.n	800250a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	2201      	movs	r2, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <prvAddCurrentTaskToDelayedList+0xdc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4013      	ands	r3, r2
 8002506:	4a29      	ldr	r2, [pc, #164]	; (80025ac <prvAddCurrentTaskToDelayedList+0xdc>)
 8002508:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002510:	d110      	bne.n	8002534 <prvAddCurrentTaskToDelayedList+0x64>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	211b      	movs	r1, #27
 800251e:	4618      	mov	r0, r3
 8002520:	f002 fd9a 	bl	8005058 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3304      	adds	r3, #4
 800252a:	4619      	mov	r1, r3
 800252c:	4820      	ldr	r0, [pc, #128]	; (80025b0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800252e:	f7fe f89e 	bl	800066e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002532:	e032      	b.n	800259a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d20f      	bcs.n	800256c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2104      	movs	r1, #4
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fd80 	bl	8005058 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002558:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3304      	adds	r3, #4
 8002562:	4619      	mov	r1, r3
 8002564:	4610      	mov	r0, r2
 8002566:	f7fe f8a6 	bl	80006b6 <vListInsert>
}
 800256a:	e016      	b.n	800259a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2104      	movs	r1, #4
 8002572:	4618      	mov	r0, r3
 8002574:	f002 fd70 	bl	8005058 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3304      	adds	r3, #4
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f7fe f896 	bl	80006b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <prvAddCurrentTaskToDelayedList+0xec>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	429a      	cmp	r2, r3
 8002592:	d202      	bcs.n	800259a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002594:	4a09      	ldr	r2, [pc, #36]	; (80025bc <prvAddCurrentTaskToDelayedList+0xec>)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6013      	str	r3, [r2, #0]
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200001b0 	.word	0x200001b0
 80025a8:	200000d4 	.word	0x200000d4
 80025ac:	200001b4 	.word	0x200001b4
 80025b0:	20000198 	.word	0x20000198
 80025b4:	20000168 	.word	0x20000168
 80025b8:	20000164 	.word	0x20000164
 80025bc:	200001cc 	.word	0x200001cc

080025c0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80025ca:	f000 fad5 	bl	8002b78 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <xTimerCreateTimerTask+0x54>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <xTimerCreateTimerTask+0x58>)
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2303      	movs	r3, #3
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2300      	movs	r3, #0
 80025e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e4:	490d      	ldr	r1, [pc, #52]	; (800261c <xTimerCreateTimerTask+0x5c>)
 80025e6:	480e      	ldr	r0, [pc, #56]	; (8002620 <xTimerCreateTimerTask+0x60>)
 80025e8:	f7fe ffc8 	bl	800157c <xTaskCreate>
 80025ec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	603b      	str	r3, [r7, #0]
    }
 8002606:	bf00      	nop
 8002608:	e7fe      	b.n	8002608 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800260a:	687b      	ldr	r3, [r7, #4]
    }
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000208 	.word	0x20000208
 8002618:	2000020c 	.word	0x2000020c
 800261c:	080082e4 	.word	0x080082e4
 8002620:	08002759 	.word	0x08002759

08002624 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <xTimerGenericCommand+0x2e>
        __asm volatile
 800263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	623b      	str	r3, [r7, #32]
    }
 800264e:	bf00      	nop
 8002650:	e7fe      	b.n	8002650 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <xTimerGenericCommand+0x98>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d02a      	beq.n	80026b0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b05      	cmp	r3, #5
 800266a:	dc18      	bgt.n	800269e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800266c:	f7ff fd6c 	bl	8002148 <xTaskGetSchedulerState>
 8002670:	4603      	mov	r3, r0
 8002672:	2b02      	cmp	r3, #2
 8002674:	d109      	bne.n	800268a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <xTimerGenericCommand+0x98>)
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	f107 0114 	add.w	r1, r7, #20
 800267e:	2300      	movs	r3, #0
 8002680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002682:	f7fe f99f 	bl	80009c4 <xQueueGenericSend>
 8002686:	6278      	str	r0, [r7, #36]	; 0x24
 8002688:	e012      	b.n	80026b0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <xTimerGenericCommand+0x98>)
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	f107 0114 	add.w	r1, r7, #20
 8002692:	2300      	movs	r3, #0
 8002694:	2200      	movs	r2, #0
 8002696:	f7fe f995 	bl	80009c4 <xQueueGenericSend>
 800269a:	6278      	str	r0, [r7, #36]	; 0x24
 800269c:	e008      	b.n	80026b0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <xTimerGenericCommand+0x98>)
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f107 0114 	add.w	r1, r7, #20
 80026a6:	2300      	movs	r3, #0
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	f7fe fab1 	bl	8000c10 <xQueueGenericSendFromISR>
 80026ae:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80026b2:	4618      	mov	r0, r3
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000208 	.word	0x20000208

080026c0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <prvProcessExpiredTimer+0x94>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3304      	adds	r3, #4
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe f825 	bl	8000728 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d022      	beq.n	8002732 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	18d1      	adds	r1, r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	6978      	ldr	r0, [r7, #20]
 80026fa:	f000 f8d1 	bl	80028a0 <prvInsertTimerInActiveList>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01f      	beq.n	8002744 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002704:	2300      	movs	r3, #0
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2300      	movs	r3, #0
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	2100      	movs	r1, #0
 800270e:	6978      	ldr	r0, [r7, #20]
 8002710:	f7ff ff88 	bl	8002624 <xTimerGenericCommand>
 8002714:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d113      	bne.n	8002744 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	60fb      	str	r3, [r7, #12]
    }
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	b2da      	uxtb	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	6978      	ldr	r0, [r7, #20]
 800274a:	4798      	blx	r3
    }
 800274c:	bf00      	nop
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000200 	.word	0x20000200

08002758 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f857 	bl	8002818 <prvGetNextExpireTime>
 800276a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4619      	mov	r1, r3
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f803 	bl	800277c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002776:	f000 f8d5 	bl	8002924 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800277a:	e7f1      	b.n	8002760 <prvTimerTask+0x8>

0800277c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002786:	f7ff f8f7 	bl	8001978 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f866 	bl	8002860 <prvSampleTimeNow>
 8002794:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d130      	bne.n	80027fe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <prvProcessTimerOrBlockTask+0x3c>
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d806      	bhi.n	80027b8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80027aa:	f7ff f8f3 	bl	8001994 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80027ae:	68f9      	ldr	r1, [r7, #12]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff85 	bl	80026c0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80027b6:	e024      	b.n	8002802 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80027be:	4b13      	ldr	r3, [pc, #76]	; (800280c <prvProcessTimerOrBlockTask+0x90>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <prvProcessTimerOrBlockTask+0x50>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <prvProcessTimerOrBlockTask+0x52>
 80027cc:	2300      	movs	r3, #0
 80027ce:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <prvProcessTimerOrBlockTask+0x94>)
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	f7fe fe99 	bl	8001514 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80027e2:	f7ff f8d7 	bl	8001994 <xTaskResumeAll>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <prvProcessTimerOrBlockTask+0x98>)
 80027ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	f3bf 8f6f 	isb	sy
    }
 80027fc:	e001      	b.n	8002802 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80027fe:	f7ff f8c9 	bl	8001994 <xTaskResumeAll>
    }
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000204 	.word	0x20000204
 8002810:	20000208 	.word	0x20000208
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002820:	4b0e      	ldr	r3, [pc, #56]	; (800285c <prvGetNextExpireTime+0x44>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <prvGetNextExpireTime+0x16>
 800282a:	2201      	movs	r2, #1
 800282c:	e000      	b.n	8002830 <prvGetNextExpireTime+0x18>
 800282e:	2200      	movs	r2, #0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <prvGetNextExpireTime+0x44>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e001      	b.n	800284c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800284c:	68fb      	ldr	r3, [r7, #12]
    }
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000200 	.word	0x20000200

08002860 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002868:	f7ff f934 	bl	8001ad4 <xTaskGetTickCount>
 800286c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <prvSampleTimeNow+0x3c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d205      	bcs.n	8002884 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002878:	f000 f91a 	bl	8002ab0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e002      	b.n	800288a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800288a:	4a04      	ldr	r2, [pc, #16]	; (800289c <prvSampleTimeNow+0x3c>)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002890:	68fb      	ldr	r3, [r7, #12]
    }
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000210 	.word	0x20000210

080028a0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d812      	bhi.n	80028ec <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	1ad2      	subs	r2, r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d302      	bcc.n	80028da <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e01b      	b.n	8002912 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <prvInsertTimerInActiveList+0x7c>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3304      	adds	r3, #4
 80028e2:	4619      	mov	r1, r3
 80028e4:	4610      	mov	r0, r2
 80028e6:	f7fd fee6 	bl	80006b6 <vListInsert>
 80028ea:	e012      	b.n	8002912 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d206      	bcs.n	8002902 <prvInsertTimerInActiveList+0x62>
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d302      	bcc.n	8002902 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e007      	b.n	8002912 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <prvInsertTimerInActiveList+0x80>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3304      	adds	r3, #4
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f7fd fed2 	bl	80006b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002912:	697b      	ldr	r3, [r7, #20]
    }
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000204 	.word	0x20000204
 8002920:	20000200 	.word	0x20000200

08002924 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	; 0x30
 8002928:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800292a:	e0ae      	b.n	8002a8a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f2c0 80aa 	blt.w	8002a88 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	3304      	adds	r3, #4
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd feef 	bl	8000728 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff87 	bl	8002860 <prvSampleTimeNow>
 8002952:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b09      	cmp	r3, #9
 8002958:	f200 8097 	bhi.w	8002a8a <prvProcessReceivedCommands+0x166>
 800295c:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <prvProcessReceivedCommands+0x40>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	0800298d 	.word	0x0800298d
 8002968:	0800298d 	.word	0x0800298d
 800296c:	0800298d 	.word	0x0800298d
 8002970:	08002a01 	.word	0x08002a01
 8002974:	08002a15 	.word	0x08002a15
 8002978:	08002a5f 	.word	0x08002a5f
 800297c:	0800298d 	.word	0x0800298d
 8002980:	0800298d 	.word	0x0800298d
 8002984:	08002a01 	.word	0x08002a01
 8002988:	08002a15 	.word	0x08002a15
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	b2da      	uxtb	r2, r3
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	18d1      	adds	r1, r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a3a      	ldr	r2, [r7, #32]
 80029aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ac:	f7ff ff78 	bl	80028a0 <prvInsertTimerInActiveList>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d069      	beq.n	8002a8a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029bc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d05e      	beq.n	8002a8a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	441a      	add	r2, r3
 80029d4:	2300      	movs	r3, #0
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2300      	movs	r3, #0
 80029da:	2100      	movs	r1, #0
 80029dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029de:	f7ff fe21 	bl	8002624 <xTimerGenericCommand>
 80029e2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d14f      	bne.n	8002a8a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	61bb      	str	r3, [r7, #24]
    }
 80029fc:	bf00      	nop
 80029fe:	e7fe      	b.n	80029fe <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002a12:	e03a      	b.n	8002a8a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	617b      	str	r3, [r7, #20]
    }
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	18d1      	adds	r1, r2, r3
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	6a3a      	ldr	r2, [r7, #32]
 8002a56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a58:	f7ff ff22 	bl	80028a0 <prvInsertTimerInActiveList>
                        break;
 8002a5c:	e015      	b.n	8002a8a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d103      	bne.n	8002a74 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a6e:	f000 fc75 	bl	800335c <vPortFree>
 8002a72:	e00a      	b.n	8002a8a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002a86:	e000      	b.n	8002a8a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002a88:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <prvProcessReceivedCommands+0x188>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f107 0108 	add.w	r1, r7, #8
 8002a92:	2200      	movs	r2, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe f979 	bl	8000d8c <xQueueReceive>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f47f af45 	bne.w	800292c <prvProcessReceivedCommands+0x8>
        }
    }
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	3728      	adds	r7, #40	; 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000208 	.word	0x20000208

08002ab0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ab6:	e048      	b.n	8002b4a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <prvSwitchTimerLists+0xc0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ac2:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <prvSwitchTimerLists+0xc0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fe29 	bl	8000728 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02e      	beq.n	8002b4a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d90e      	bls.n	8002b1c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <prvSwitchTimerLists+0xc0>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3304      	adds	r3, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f7fd fdce 	bl	80006b6 <vListInsert>
 8002b1a:	e016      	b.n	8002b4a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2300      	movs	r3, #0
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	2100      	movs	r1, #0
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f7ff fd7c 	bl	8002624 <xTimerGenericCommand>
 8002b2c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	603b      	str	r3, [r7, #0]
    }
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <prvSwitchTimerLists+0xc0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1b1      	bne.n	8002ab8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <prvSwitchTimerLists+0xc0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <prvSwitchTimerLists+0xc4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <prvSwitchTimerLists+0xc0>)
 8002b60:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002b62:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <prvSwitchTimerLists+0xc4>)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	6013      	str	r3, [r2, #0]
    }
 8002b68:	bf00      	nop
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000200 	.word	0x20000200
 8002b74:	20000204 	.word	0x20000204

08002b78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002b7c:	f000 f9e2 	bl	8002f44 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <prvCheckForValidListAndQueue+0x54>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d11d      	bne.n	8002bc4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002b88:	4811      	ldr	r0, [pc, #68]	; (8002bd0 <prvCheckForValidListAndQueue+0x58>)
 8002b8a:	f7fd fd43 	bl	8000614 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002b8e:	4811      	ldr	r0, [pc, #68]	; (8002bd4 <prvCheckForValidListAndQueue+0x5c>)
 8002b90:	f7fd fd40 	bl	8000614 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <prvCheckForValidListAndQueue+0x60>)
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <prvCheckForValidListAndQueue+0x58>)
 8002b98:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <prvCheckForValidListAndQueue+0x64>)
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	; (8002bd4 <prvCheckForValidListAndQueue+0x5c>)
 8002b9e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	210c      	movs	r1, #12
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	f7fd fe51 	bl	800084c <xQueueGenericCreate>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <prvCheckForValidListAndQueue+0x54>)
 8002bae:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <prvCheckForValidListAndQueue+0x54>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <prvCheckForValidListAndQueue+0x54>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4908      	ldr	r1, [pc, #32]	; (8002be0 <prvCheckForValidListAndQueue+0x68>)
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fc76 	bl	80014b0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002bc4:	f000 f9ee 	bl	8002fa4 <vPortExitCritical>
    }
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000208 	.word	0x20000208
 8002bd0:	200001d8 	.word	0x200001d8
 8002bd4:	200001ec 	.word	0x200001ec
 8002bd8:	20000200 	.word	0x20000200
 8002bdc:	20000204 	.word	0x20000204
 8002be0:	080082ec 	.word	0x080082ec

08002be4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bfc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3b04      	subs	r3, #4
 8002c02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f023 0201 	bic.w	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3b04      	subs	r3, #4
 8002c12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c14:	4a0c      	ldr	r2, [pc, #48]	; (8002c48 <pxPortInitialiseStack+0x64>)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3b14      	subs	r3, #20
 8002c1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3b04      	subs	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f06f 0202 	mvn.w	r2, #2
 8002c32:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3b20      	subs	r3, #32
 8002c38:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	08002c4d 	.word	0x08002c4d

08002c4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <prvTaskExitError+0x54>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c5e:	d00a      	beq.n	8002c76 <prvTaskExitError+0x2a>
        __asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	60fb      	str	r3, [r7, #12]
    }
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <prvTaskExitError+0x28>
        __asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	60bb      	str	r3, [r7, #8]
    }
 8002c88:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c8a:	bf00      	nop
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0fc      	beq.n	8002c8c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	20000004 	.word	0x20000004
	...

08002cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <pxCurrentTCBConst2>)
 8002cb2:	6819      	ldr	r1, [r3, #0]
 8002cb4:	6808      	ldr	r0, [r1, #0]
 8002cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cba:	f380 8809 	msr	PSP, r0
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f380 8811 	msr	BASEPRI, r0
 8002cca:	4770      	bx	lr
 8002ccc:	f3af 8000 	nop.w

08002cd0 <pxCurrentTCBConst2>:
 8002cd0:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop

08002cd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002cd8:	4808      	ldr	r0, [pc, #32]	; (8002cfc <prvPortStartFirstTask+0x24>)
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	6800      	ldr	r0, [r0, #0]
 8002cde:	f380 8808 	msr	MSP, r0
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8814 	msr	CONTROL, r0
 8002cea:	b662      	cpsie	i
 8002cec:	b661      	cpsie	f
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	df00      	svc	0
 8002cf8:	bf00      	nop
 8002cfa:	0000      	.short	0x0000
 8002cfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop

08002d04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <xPortStartScheduler+0x120>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a46      	ldr	r2, [pc, #280]	; (8002e28 <xPortStartScheduler+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10a      	bne.n	8002d2a <xPortStartScheduler+0x26>
        __asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	613b      	str	r3, [r7, #16]
    }
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <xPortStartScheduler+0x120>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <xPortStartScheduler+0x128>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10a      	bne.n	8002d4a <xPortStartScheduler+0x46>
        __asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	60fb      	str	r3, [r7, #12]
    }
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <xPortStartScheduler+0x12c>)
 8002d4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	22ff      	movs	r2, #255	; 0xff
 8002d5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <xPortStartScheduler+0x130>)
 8002d70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d78:	e009      	b.n	8002d8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b80      	cmp	r3, #128	; 0x80
 8002d98:	d0ef      	beq.n	8002d7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d9a:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d00a      	beq.n	8002dbc <xPortStartScheduler+0xb8>
        __asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	60bb      	str	r3, [r7, #8]
    }
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <xPortStartScheduler+0x138>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <xPortStartScheduler+0x138>)
 8002de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <xPortStartScheduler+0x138>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <xPortStartScheduler+0x138>)
 8002dec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002df0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002df2:	f000 f963 	bl	80030bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <xPortStartScheduler+0x13c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002dfc:	f000 f982 	bl	8003104 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <xPortStartScheduler+0x140>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0f      	ldr	r2, [pc, #60]	; (8002e44 <xPortStartScheduler+0x140>)
 8002e06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e0c:	f7ff ff64 	bl	8002cd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e10:	f7fe ff3e 	bl	8001c90 <vTaskSwitchContext>
    prvTaskExitError();
 8002e14:	f7ff ff1a 	bl	8002c4c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00
 8002e28:	410fc271 	.word	0x410fc271
 8002e2c:	410fc270 	.word	0x410fc270
 8002e30:	e000e400 	.word	0xe000e400
 8002e34:	20000214 	.word	0x20000214
 8002e38:	20000218 	.word	0x20000218
 8002e3c:	e000ed20 	.word	0xe000ed20
 8002e40:	20000004 	.word	0x20000004
 8002e44:	e000ef34 	.word	0xe000ef34

08002e48 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e4e:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <vInitPrioGroupValue+0xe4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a37      	ldr	r2, [pc, #220]	; (8002f30 <vInitPrioGroupValue+0xe8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d10a      	bne.n	8002e6e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	613b      	str	r3, [r7, #16]
    }
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e6e:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <vInitPrioGroupValue+0xe4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a30      	ldr	r2, [pc, #192]	; (8002f34 <vInitPrioGroupValue+0xec>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10a      	bne.n	8002e8e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	60fb      	str	r3, [r7, #12]
    }
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <vInitPrioGroupValue+0xf0>)
 8002e90:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <vInitPrioGroupValue+0xf4>)
 8002eb4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ebc:	e009      	b.n	8002ed2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002ec6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d0ef      	beq.n	8002ebe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1c3 0307 	rsb	r3, r3, #7
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d00a      	beq.n	8002f00 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	60bb      	str	r3, [r7, #8]
    }
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002f08:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f12:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002f14:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000ed00 	.word	0xe000ed00
 8002f30:	410fc271 	.word	0x410fc271
 8002f34:	410fc270 	.word	0x410fc270
 8002f38:	e000e400 	.word	0xe000e400
 8002f3c:	20000214 	.word	0x20000214
 8002f40:	20000218 	.word	0x20000218

08002f44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
        __asm volatile
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	607b      	str	r3, [r7, #4]
    }
 8002f5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <vPortEnterCritical+0x58>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <vPortEnterCritical+0x58>)
 8002f66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <vPortEnterCritical+0x58>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10f      	bne.n	8002f90 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <vPortEnterCritical+0x5c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <vPortEnterCritical+0x4c>
        __asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	603b      	str	r3, [r7, #0]
    }
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <vPortEnterCritical+0x4a>
    }
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	e000ed04 	.word	0xe000ed04

08002fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <vPortExitCritical+0x24>
        __asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	607b      	str	r3, [r7, #4]
    }
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fd0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <vPortExitCritical+0x42>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f383 8811 	msr	BASEPRI, r3
    }
 8002fe4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000004 	.word	0x20000004
	...

08003000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003000:	f3ef 8009 	mrs	r0, PSP
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <pxCurrentTCBConst>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f01e 0f10 	tst.w	lr, #16
 8003010:	bf08      	it	eq
 8003012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301a:	6010      	str	r0, [r2, #0]
 800301c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003024:	f380 8811 	msr	BASEPRI, r0
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f7fe fe2e 	bl	8001c90 <vTaskSwitchContext>
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f380 8811 	msr	BASEPRI, r0
 800303c:	bc09      	pop	{r0, r3}
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	6808      	ldr	r0, [r1, #0]
 8003042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003046:	f01e 0f10 	tst.w	lr, #16
 800304a:	bf08      	it	eq
 800304c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003050:	f380 8809 	msr	PSP, r0
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	f3af 8000 	nop.w

08003060 <pxCurrentTCBConst>:
 8003060:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop

08003068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
        __asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	607b      	str	r3, [r7, #4]
    }
 8003080:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003082:	f001 fe8d 	bl	8004da0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003086:	f7fe fd47 	bl	8001b18 <xTaskIncrementTick>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003090:	f001 fee4 	bl	8004e5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <SysTick_Handler+0x50>)
 8003096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e001      	b.n	80030a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800309e:	f001 fec1 	bl	8004e24 <SEGGER_SYSVIEW_RecordExitISR>
 80030a2:	2300      	movs	r3, #0
 80030a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f383 8811 	msr	BASEPRI, r3
    }
 80030ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <vPortSetupTimerInterrupt+0x34>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <vPortSetupTimerInterrupt+0x38>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <vPortSetupTimerInterrupt+0x3c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <vPortSetupTimerInterrupt+0x40>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	099b      	lsrs	r3, r3, #6
 80030d8:	4a09      	ldr	r2, [pc, #36]	; (8003100 <vPortSetupTimerInterrupt+0x44>)
 80030da:	3b01      	subs	r3, #1
 80030dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <vPortSetupTimerInterrupt+0x34>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010
 80030f4:	e000e018 	.word	0xe000e018
 80030f8:	20000008 	.word	0x20000008
 80030fc:	10624dd3 	.word	0x10624dd3
 8003100:	e000e014 	.word	0xe000e014

08003104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003114 <vPortEnableVFP+0x10>
 8003108:	6801      	ldr	r1, [r0, #0]
 800310a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800310e:	6001      	str	r1, [r0, #0]
 8003110:	4770      	bx	lr
 8003112:	0000      	.short	0x0000
 8003114:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop

0800311c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003122:	f3ef 8305 	mrs	r3, IPSR
 8003126:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b0f      	cmp	r3, #15
 800312c:	d914      	bls.n	8003158 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <vPortValidateInterruptPriority+0x70>)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <vPortValidateInterruptPriority+0x74>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	7afa      	ldrb	r2, [r7, #11]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20a      	bcs.n	8003158 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	607b      	str	r3, [r7, #4]
    }
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <vPortValidateInterruptPriority+0x78>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003160:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <vPortValidateInterruptPriority+0x7c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d90a      	bls.n	800317e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	603b      	str	r3, [r7, #0]
    }
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <vPortValidateInterruptPriority+0x60>
    }
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e3f0 	.word	0xe000e3f0
 8003190:	20000214 	.word	0x20000214
 8003194:	e000ed0c 	.word	0xe000ed0c
 8003198:	20000218 	.word	0x20000218

0800319c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80031a8:	f7fe fbe6 	bl	8001978 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031ac:	4b65      	ldr	r3, [pc, #404]	; (8003344 <pvPortMalloc+0x1a8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80031b4:	f000 f934 	bl	8003420 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031b8:	4b63      	ldr	r3, [pc, #396]	; (8003348 <pvPortMalloc+0x1ac>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 80a7 	bne.w	8003314 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02d      	beq.n	8003228 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80031cc:	2208      	movs	r2, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d227      	bcs.n	8003228 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80031d8:	2208      	movs	r2, #8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d021      	beq.n	800322e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f023 0307 	bic.w	r3, r3, #7
 80031f0:	3308      	adds	r3, #8
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d214      	bcs.n	8003222 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f023 0307 	bic.w	r3, r3, #7
 80031fe:	3308      	adds	r3, #8
 8003200:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <pvPortMalloc+0x92>
        __asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	617b      	str	r3, [r7, #20]
    }
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003226:	e002      	b.n	800322e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	e000      	b.n	8003230 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800322e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d06e      	beq.n	8003314 <pvPortMalloc+0x178>
 8003236:	4b45      	ldr	r3, [pc, #276]	; (800334c <pvPortMalloc+0x1b0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d869      	bhi.n	8003314 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003240:	4b43      	ldr	r3, [pc, #268]	; (8003350 <pvPortMalloc+0x1b4>)
 8003242:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003244:	4b42      	ldr	r3, [pc, #264]	; (8003350 <pvPortMalloc+0x1b4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800324a:	e004      	b.n	8003256 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d903      	bls.n	8003268 <pvPortMalloc+0xcc>
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f1      	bne.n	800324c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003268:	4b36      	ldr	r3, [pc, #216]	; (8003344 <pvPortMalloc+0x1a8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	429a      	cmp	r2, r3
 8003270:	d050      	beq.n	8003314 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2208      	movs	r2, #8
 8003278:	4413      	add	r3, r2
 800327a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	2308      	movs	r3, #8
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	429a      	cmp	r2, r3
 8003292:	d91f      	bls.n	80032d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <pvPortMalloc+0x120>
        __asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	613b      	str	r3, [r7, #16]
    }
 80032b8:	bf00      	nop
 80032ba:	e7fe      	b.n	80032ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032ce:	69b8      	ldr	r0, [r7, #24]
 80032d0:	f000 f908 	bl	80034e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <pvPortMalloc+0x1b0>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	4a1b      	ldr	r2, [pc, #108]	; (800334c <pvPortMalloc+0x1b0>)
 80032e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <pvPortMalloc+0x1b0>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <pvPortMalloc+0x1b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d203      	bcs.n	80032f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <pvPortMalloc+0x1b0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <pvPortMalloc+0x1b8>)
 80032f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <pvPortMalloc+0x1ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	431a      	orrs	r2, r3
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <pvPortMalloc+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <pvPortMalloc+0x1bc>)
 8003312:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003314:	f7fe fb3e 	bl	8001994 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <pvPortMalloc+0x19c>
        __asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	60fb      	str	r3, [r7, #12]
    }
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <pvPortMalloc+0x19a>
    return pvReturn;
 8003338:	69fb      	ldr	r3, [r7, #28]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3728      	adds	r7, #40	; 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20012e24 	.word	0x20012e24
 8003348:	20012e38 	.word	0x20012e38
 800334c:	20012e28 	.word	0x20012e28
 8003350:	20012e1c 	.word	0x20012e1c
 8003354:	20012e2c 	.word	0x20012e2c
 8003358:	20012e30 	.word	0x20012e30

0800335c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d04d      	beq.n	800340a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800336e:	2308      	movs	r3, #8
 8003370:	425b      	negs	r3, r3
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4413      	add	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <vPortFree+0xb8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <vPortFree+0x44>
        __asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	60fb      	str	r3, [r7, #12]
    }
 800339c:	bf00      	nop
 800339e:	e7fe      	b.n	800339e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <vPortFree+0x62>
        __asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	60bb      	str	r3, [r7, #8]
    }
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <vPortFree+0xb8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01e      	beq.n	800340a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11a      	bne.n	800340a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <vPortFree+0xb8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	43db      	mvns	r3, r3
 80033de:	401a      	ands	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80033e4:	f7fe fac8 	bl	8001978 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <vPortFree+0xbc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <vPortFree+0xbc>)
 80033f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033f6:	6938      	ldr	r0, [r7, #16]
 80033f8:	f000 f874 	bl	80034e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <vPortFree+0xc0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	4a06      	ldr	r2, [pc, #24]	; (800341c <vPortFree+0xc0>)
 8003404:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003406:	f7fe fac5 	bl	8001994 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20012e38 	.word	0x20012e38
 8003418:	20012e28 	.word	0x20012e28
 800341c:	20012e34 	.word	0x20012e34

08003420 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003426:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800342a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <prvHeapInit+0xac>)
 800342e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3307      	adds	r3, #7
 800343e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0307 	bic.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <prvHeapInit+0xac>)
 8003450:	4413      	add	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003458:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <prvHeapInit+0xb0>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <prvHeapInit+0xb0>)
 8003460:	2200      	movs	r2, #0
 8003462:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4413      	add	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800346c:	2208      	movs	r2, #8
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <prvHeapInit+0xb4>)
 8003480:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <prvHeapInit+0xb4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <prvHeapInit+0xb4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	1ad2      	subs	r2, r2, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <prvHeapInit+0xb4>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <prvHeapInit+0xb8>)
 80034ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a09      	ldr	r2, [pc, #36]	; (80034dc <prvHeapInit+0xbc>)
 80034b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <prvHeapInit+0xc0>)
 80034ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034be:	601a      	str	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	2000021c 	.word	0x2000021c
 80034d0:	20012e1c 	.word	0x20012e1c
 80034d4:	20012e24 	.word	0x20012e24
 80034d8:	20012e2c 	.word	0x20012e2c
 80034dc:	20012e28 	.word	0x20012e28
 80034e0:	20012e38 	.word	0x20012e38

080034e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80034ec:	4b28      	ldr	r3, [pc, #160]	; (8003590 <prvInsertBlockIntoFreeList+0xac>)
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e002      	b.n	80034f8 <prvInsertBlockIntoFreeList+0x14>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d8f7      	bhi.n	80034f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4413      	add	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	d108      	bne.n	8003526 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	441a      	add	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	441a      	add	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d118      	bne.n	800356c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <prvInsertBlockIntoFreeList+0xb0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d00d      	beq.n	8003562 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	441a      	add	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e008      	b.n	8003574 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003562:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <prvInsertBlockIntoFreeList+0xb0>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e003      	b.n	8003574 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d002      	beq.n	8003582 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20012e1c 	.word	0x20012e1c
 8003594:	20012e24 	.word	0x20012e24

08003598 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800359c:	4803      	ldr	r0, [pc, #12]	; (80035ac <_cbSendSystemDesc+0x14>)
 800359e:	f001 fba9 	bl	8004cf4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80035a2:	4803      	ldr	r0, [pc, #12]	; (80035b0 <_cbSendSystemDesc+0x18>)
 80035a4:	f001 fba6 	bl	8004cf4 <SEGGER_SYSVIEW_SendSysDesc>
}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	080082f4 	.word	0x080082f4
 80035b0:	0800833c 	.word	0x0800833c

080035b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <SEGGER_SYSVIEW_Conf+0x24>)
 80035c2:	4a06      	ldr	r2, [pc, #24]	; (80035dc <SEGGER_SYSVIEW_Conf+0x28>)
 80035c4:	f000 ff14 	bl	80043f0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80035c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80035cc:	f000 ff54 	bl	8004478 <SEGGER_SYSVIEW_SetRAMBase>
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000008 	.word	0x20000008
 80035d8:	08003599 	.word	0x08003599
 80035dc:	080084b4 	.word	0x080084b4

080035e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80035e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	e033      	b.n	8003654 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80035ec:	491e      	ldr	r1, [pc, #120]	; (8003668 <_cbSendTaskList+0x88>)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	491a      	ldr	r1, [pc, #104]	; (8003668 <_cbSendTaskList+0x88>)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3304      	adds	r3, #4
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	4c16      	ldr	r4, [pc, #88]	; (8003668 <_cbSendTaskList+0x88>)
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4423      	add	r3, r4
 800361c:	3308      	adds	r3, #8
 800361e:	681c      	ldr	r4, [r3, #0]
 8003620:	4d11      	ldr	r5, [pc, #68]	; (8003668 <_cbSendTaskList+0x88>)
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	442b      	add	r3, r5
 800362e:	330c      	adds	r3, #12
 8003630:	681d      	ldr	r5, [r3, #0]
 8003632:	4e0d      	ldr	r6, [pc, #52]	; (8003668 <_cbSendTaskList+0x88>)
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4433      	add	r3, r6
 8003640:	3310      	adds	r3, #16
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	462b      	mov	r3, r5
 8003648:	4622      	mov	r2, r4
 800364a:	f000 f8bd 	bl	80037c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3301      	adds	r3, #1
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <_cbSendTaskList+0x8c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d3c6      	bcc.n	80035ec <_cbSendTaskList+0xc>
  }
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003668:	20012e3c 	.word	0x20012e3c
 800366c:	20012edc 	.word	0x20012edc

08003670 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003678:	f7fe fa3c 	bl	8001af4 <xTaskGetTickCountFromISR>
 800367c:	4603      	mov	r3, r0
 800367e:	2200      	movs	r2, #0
 8003680:	469a      	mov	sl, r3
 8003682:	4693      	mov	fp, r2
 8003684:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	f04f 0a00 	mov.w	sl, #0
 8003694:	f04f 0b00 	mov.w	fp, #0
 8003698:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800369c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80036a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80036a4:	4652      	mov	r2, sl
 80036a6:	465b      	mov	r3, fp
 80036a8:	1a14      	subs	r4, r2, r0
 80036aa:	eb63 0501 	sbc.w	r5, r3, r1
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	00ab      	lsls	r3, r5, #2
 80036b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80036bc:	00a2      	lsls	r2, r4, #2
 80036be:	4614      	mov	r4, r2
 80036c0:	461d      	mov	r5, r3
 80036c2:	eb14 0800 	adds.w	r8, r4, r0
 80036c6:	eb45 0901 	adc.w	r9, r5, r1
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036de:	4690      	mov	r8, r2
 80036e0:	4699      	mov	r9, r3
 80036e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80036e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080036f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003706:	2205      	movs	r2, #5
 8003708:	492b      	ldr	r1, [pc, #172]	; (80037b8 <SYSVIEW_AddTask+0xc0>)
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f003 fd8e 	bl	800722c <memcmp>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04b      	beq.n	80037ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b07      	cmp	r3, #7
 800371c:	d903      	bls.n	8003726 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800371e:	4828      	ldr	r0, [pc, #160]	; (80037c0 <SYSVIEW_AddTask+0xc8>)
 8003720:	f001 fdfa 	bl	8005318 <SEGGER_SYSVIEW_Warn>
    return;
 8003724:	e044      	b.n	80037b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003726:	4b25      	ldr	r3, [pc, #148]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4926      	ldr	r1, [pc, #152]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4921      	ldr	r1, [pc, #132]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	3304      	adds	r3, #4
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	491b      	ldr	r1, [pc, #108]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	3308      	adds	r3, #8
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4916      	ldr	r1, [pc, #88]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	330c      	adds	r3, #12
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4910      	ldr	r1, [pc, #64]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3310      	adds	r3, #16
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	4a08      	ldr	r2, [pc, #32]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 800379a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f80e 	bl	80037c8 <SYSVIEW_SendTaskInfo>
 80037ac:	e000      	b.n	80037b0 <SYSVIEW_AddTask+0xb8>
    return;
 80037ae:	bf00      	nop

}
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	0800834c 	.word	0x0800834c
 80037bc:	20012edc 	.word	0x20012edc
 80037c0:	08008354 	.word	0x08008354
 80037c4:	20012e3c 	.word	0x20012e3c

080037c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80037d6:	f107 0314 	add.w	r3, r7, #20
 80037da:	2214      	movs	r2, #20
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 fd42 	bl	8007268 <memset>
  TaskInfo.TaskID     = TaskID;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 f981 	bl	8004b04 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003802:	bf00      	nop
 8003804:	3728      	adds	r7, #40	; 0x28
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <_DoInit+0x98>)
 8003814:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2203      	movs	r2, #3
 800381a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2203      	movs	r2, #3
 8003820:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <_DoInit+0x9c>)
 8003826:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a20      	ldr	r2, [pc, #128]	; (80038ac <_DoInit+0xa0>)
 800382c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003834:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a17      	ldr	r2, [pc, #92]	; (80038a8 <_DoInit+0x9c>)
 800384c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a17      	ldr	r2, [pc, #92]	; (80038b0 <_DoInit+0xa4>)
 8003852:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2210      	movs	r2, #16
 8003858:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3307      	adds	r3, #7
 8003870:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <_DoInit+0xa8>)
 8003872:	6810      	ldr	r0, [r2, #0]
 8003874:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003876:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <_DoInit+0xac>)
 800387e:	6810      	ldr	r0, [r2, #0]
 8003880:	6018      	str	r0, [r3, #0]
 8003882:	8891      	ldrh	r1, [r2, #4]
 8003884:	7992      	ldrb	r2, [r2, #6]
 8003886:	8099      	strh	r1, [r3, #4]
 8003888:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800388a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003894:	f3bf 8f5f 	dmb	sy
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	20012ee0 	.word	0x20012ee0
 80038a8:	080083a4 	.word	0x080083a4
 80038ac:	20012f88 	.word	0x20012f88
 80038b0:	20013f88 	.word	0x20013f88
 80038b4:	080083b0 	.word	0x080083b0
 80038b8:	080083b4 	.word	0x080083b4

080038bc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80038c8:	2300      	movs	r3, #0
 80038ca:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d905      	bls.n	80038ec <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	e007      	b.n	80038fc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	1acb      	subs	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3b01      	subs	r3, #1
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	4293      	cmp	r3, r2
 8003908:	bf28      	it	cs
 800390a:	4613      	movcs	r3, r2
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4293      	cmp	r3, r2
 8003914:	bf28      	it	cs
 8003916:	4613      	movcs	r3, r2
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	6978      	ldr	r0, [r7, #20]
 800392a:	f003 fc8f 	bl	800724c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800392e:	6a3a      	ldr	r2, [r7, #32]
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	4413      	add	r3, r2
 8003934:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	4413      	add	r3, r2
 800393c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	4413      	add	r3, r2
 800394c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	429a      	cmp	r2, r3
 8003956:	d101      	bne.n	800395c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800395c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1b2      	bne.n	80038d2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800396c:	6a3b      	ldr	r3, [r7, #32]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3728      	adds	r7, #40	; 0x28
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003976:	b580      	push	{r7, lr}
 8003978:	b088      	sub	sp, #32
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d911      	bls.n	80039be <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	6938      	ldr	r0, [r7, #16]
 80039aa:	f003 fc4f 	bl	800724c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039ae:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	441a      	add	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80039bc:	e01f      	b.n	80039fe <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	6938      	ldr	r0, [r7, #16]
 80039d2:	f003 fc3b 	bl	800724c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	4413      	add	r3, r2
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4619      	mov	r1, r3
 80039ee:	6938      	ldr	r0, [r7, #16]
 80039f0:	f003 fc2c 	bl	800724c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039f4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	60da      	str	r2, [r3, #12]
}
 80039fe:	bf00      	nop
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003a06:	b480      	push	{r7}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d808      	bhi.n	8003a34 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad2      	subs	r2, r2, r3
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e004      	b.n	8003a3e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003a3e:	697b      	ldr	r3, [r7, #20]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08c      	sub	sp, #48	; 0x30
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003a58:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <SEGGER_RTT_ReadNoLock+0x108>)
 8003a5a:	623b      	str	r3, [r7, #32]
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <SEGGER_RTT_ReadNoLock+0x1e>
 8003a66:	f7ff fed1 	bl	800380c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	3360      	adds	r3, #96	; 0x60
 8003a76:	4a37      	ldr	r2, [pc, #220]	; (8003b54 <SEGGER_RTT_ReadNoLock+0x108>)
 8003a78:	4413      	add	r3, r2
 8003a7a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d92b      	bls.n	8003af0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	bf28      	it	cs
 8003aaa:	4613      	movcs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	4413      	add	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	6939      	ldr	r1, [r7, #16]
 8003abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003abe:	f003 fbc5 	bl	800724c <memcpy>
    NumBytesRead += NumBytesRem;
 8003ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	4413      	add	r3, r2
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4413      	add	r3, r2
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d101      	bne.n	8003af0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003aec:	2300      	movs	r3, #0
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bf28      	it	cs
 8003b00:	4613      	movcs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d019      	beq.n	8003b3e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	4413      	add	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	6939      	ldr	r1, [r7, #16]
 8003b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b1a:	f003 fb97 	bl	800724c <memcpy>
    NumBytesRead += NumBytesRem;
 8003b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	4413      	add	r3, r2
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b48:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3730      	adds	r7, #48	; 0x30
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20012ee0 	.word	0x20012ee0

08003b58 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003b76:	4413      	add	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d029      	beq.n	8003bd6 <SEGGER_RTT_WriteNoLock+0x7e>
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d82e      	bhi.n	8003be4 <SEGGER_RTT_WriteNoLock+0x8c>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <SEGGER_RTT_WriteNoLock+0x38>
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d013      	beq.n	8003bb6 <SEGGER_RTT_WriteNoLock+0x5e>
 8003b8e:	e029      	b.n	8003be4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003b90:	6978      	ldr	r0, [r7, #20]
 8003b92:	f7ff ff38 	bl	8003a06 <_GetAvailWriteSpace>
 8003b96:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d202      	bcs.n	8003ba6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003ba4:	e021      	b.n	8003bea <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	69b9      	ldr	r1, [r7, #24]
 8003bae:	6978      	ldr	r0, [r7, #20]
 8003bb0:	f7ff fee1 	bl	8003976 <_WriteNoCheck>
    break;
 8003bb4:	e019      	b.n	8003bea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f7ff ff25 	bl	8003a06 <_GetAvailWriteSpace>
 8003bbc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	bf28      	it	cs
 8003bc6:	4613      	movcs	r3, r2
 8003bc8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7ff fed1 	bl	8003976 <_WriteNoCheck>
    break;
 8003bd4:	e009      	b.n	8003bea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	6978      	ldr	r0, [r7, #20]
 8003bdc:	f7ff fe6e 	bl	80038bc <_WriteBlocking>
 8003be0:	61f8      	str	r0, [r7, #28]
    break;
 8003be2:	e002      	b.n	8003bea <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
    break;
 8003be8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003bea:	69fb      	ldr	r3, [r7, #28]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20012ee0 	.word	0x20012ee0

08003bf8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <SEGGER_RTT_Write+0x48>)
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <SEGGER_RTT_Write+0x1e>
 8003c12:	f7ff fdfb 	bl	800380c <_DoInit>
  SEGGER_RTT_LOCK();
 8003c16:	f3ef 8311 	mrs	r3, BASEPRI
 8003c1a:	f04f 0120 	mov.w	r1, #32
 8003c1e:	f381 8811 	msr	BASEPRI, r1
 8003c22:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7ff ff95 	bl	8003b58 <SEGGER_RTT_WriteNoLock>
 8003c2e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003c36:	697b      	ldr	r3, [r7, #20]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20012ee0 	.word	0x20012ee0

08003c44 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003c52:	4b3d      	ldr	r3, [pc, #244]	; (8003d48 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003c60:	f7ff fdd4 	bl	800380c <_DoInit>
  SEGGER_RTT_LOCK();
 8003c64:	f3ef 8311 	mrs	r3, BASEPRI
 8003c68:	f04f 0120 	mov.w	r1, #32
 8003c6c:	f381 8811 	msr	BASEPRI, r1
 8003c70:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c72:	4b35      	ldr	r3, [pc, #212]	; (8003d48 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c74:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003c7a:	6939      	ldr	r1, [r7, #16]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	4613      	mov	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4413      	add	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	dbeb      	blt.n	8003c7a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003ca2:	e000      	b.n	8003ca6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003ca4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	da3f      	bge.n	8003d30 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003cb0:	6939      	ldr	r1, [r7, #16]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003cc4:	6939      	ldr	r1, [r7, #16]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	4613      	mov	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003cda:	6939      	ldr	r1, [r7, #16]
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3320      	adds	r3, #32
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003cee:	6939      	ldr	r1, [r7, #16]
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	440b      	add	r3, r1
 8003cfc:	3328      	adds	r3, #40	; 0x28
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003d02:	6939      	ldr	r1, [r7, #16]
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	4613      	mov	r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	440b      	add	r3, r1
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003d16:	6939      	ldr	r1, [r7, #16]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	440b      	add	r3, r1
 8003d24:	332c      	adds	r3, #44	; 0x2c
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d2a:	f3bf 8f5f 	dmb	sy
 8003d2e:	e002      	b.n	8003d36 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d34:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20012ee0 	.word	0x20012ee0

08003d4c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003d5a:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003d68:	f7ff fd50 	bl	800380c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d6c:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003d6e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	461a      	mov	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d24d      	bcs.n	8003e18 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003d7c:	f3ef 8311 	mrs	r3, BASEPRI
 8003d80:	f04f 0120 	mov.w	r1, #32
 8003d84:	f381 8811 	msr	BASEPRI, r1
 8003d88:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d031      	beq.n	8003df4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003d90:	6979      	ldr	r1, [r7, #20]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3360      	adds	r3, #96	; 0x60
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003da4:	6979      	ldr	r1, [r7, #20]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	440b      	add	r3, r1
 8003db2:	3364      	adds	r3, #100	; 0x64
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3368      	adds	r3, #104	; 0x68
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	440b      	add	r3, r1
 8003dda:	3370      	adds	r3, #112	; 0x70
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003de0:	6979      	ldr	r1, [r7, #20]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4613      	mov	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	440b      	add	r3, r1
 8003dee:	336c      	adds	r3, #108	; 0x6c
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	440b      	add	r3, r1
 8003e02:	3374      	adds	r3, #116	; 0x74
 8003e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e06:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e08:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	e002      	b.n	8003e1e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e1c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20012ee0 	.word	0x20012ee0

08003e2c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003e3c:	e002      	b.n	8003e44 <_EncodeStr+0x18>
    Len++;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	3301      	adds	r3, #1
 8003e42:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f6      	bne.n	8003e3e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d901      	bls.n	8003e5c <_EncodeStr+0x30>
    Len = Limit;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2bfe      	cmp	r3, #254	; 0xfe
 8003e60:	d806      	bhi.n	8003e70 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	60fa      	str	r2, [r7, #12]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	e011      	b.n	8003e94 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	60fa      	str	r2, [r7, #12]
 8003e76:	22ff      	movs	r2, #255	; 0xff
 8003e78:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	60fa      	str	r2, [r7, #12]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	0a19      	lsrs	r1, r3, #8
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	60fa      	str	r2, [r7, #12]
 8003e90:	b2ca      	uxtb	r2, r1
 8003e92:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003e98:	e00a      	b.n	8003eb0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	1c53      	adds	r3, r2, #1
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1c59      	adds	r1, r3, #1
 8003ea4:	60f9      	str	r1, [r7, #12]
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	701a      	strb	r2, [r3, #0]
    n++;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	3301      	adds	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d3f0      	bcc.n	8003e9a <_EncodeStr+0x6e>
  }
  return pPayload;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3304      	adds	r3, #4
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ee6:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <_HandleIncomingPacket+0xe0>)
 8003ee8:	7e1b      	ldrb	r3, [r3, #24]
 8003eea:	4618      	mov	r0, r3
 8003eec:	1cfb      	adds	r3, r7, #3
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f7ff fdab 	bl	8003a4c <SEGGER_RTT_ReadNoLock>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	dd54      	ble.n	8003faa <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d032      	beq.n	8003f6c <_HandleIncomingPacket+0x8c>
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	dc42      	bgt.n	8003f90 <_HandleIncomingPacket+0xb0>
 8003f0a:	2b07      	cmp	r3, #7
 8003f0c:	dc16      	bgt.n	8003f3c <_HandleIncomingPacket+0x5c>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	dd3e      	ble.n	8003f90 <_HandleIncomingPacket+0xb0>
 8003f12:	3b01      	subs	r3, #1
 8003f14:	2b06      	cmp	r3, #6
 8003f16:	d83b      	bhi.n	8003f90 <_HandleIncomingPacket+0xb0>
 8003f18:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <_HandleIncomingPacket+0x40>)
 8003f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1e:	bf00      	nop
 8003f20:	08003f43 	.word	0x08003f43
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f4f 	.word	0x08003f4f
 8003f2c:	08003f55 	.word	0x08003f55
 8003f30:	08003f5b 	.word	0x08003f5b
 8003f34:	08003f61 	.word	0x08003f61
 8003f38:	08003f67 	.word	0x08003f67
 8003f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f3e:	d036      	beq.n	8003fae <_HandleIncomingPacket+0xce>
 8003f40:	e026      	b.n	8003f90 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003f42:	f000 fc65 	bl	8004810 <SEGGER_SYSVIEW_Start>
      break;
 8003f46:	e037      	b.n	8003fb8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003f48:	f000 fd1c 	bl	8004984 <SEGGER_SYSVIEW_Stop>
      break;
 8003f4c:	e034      	b.n	8003fb8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003f4e:	f000 fef5 	bl	8004d3c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003f52:	e031      	b.n	8003fb8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003f54:	f000 feba 	bl	8004ccc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003f58:	e02e      	b.n	8003fb8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003f5a:	f000 fd39 	bl	80049d0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003f5e:	e02b      	b.n	8003fb8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003f60:	f001 f988 	bl	8005274 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003f64:	e028      	b.n	8003fb8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003f66:	f001 f967 	bl	8005238 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003f6a:	e025      	b.n	8003fb8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f6c:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <_HandleIncomingPacket+0xe0>)
 8003f6e:	7e1b      	ldrb	r3, [r3, #24]
 8003f70:	4618      	mov	r0, r3
 8003f72:	1cfb      	adds	r3, r7, #3
 8003f74:	2201      	movs	r2, #1
 8003f76:	4619      	mov	r1, r3
 8003f78:	f7ff fd68 	bl	8003a4c <SEGGER_RTT_ReadNoLock>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	dd15      	ble.n	8003fb2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 f8d5 	bl	8005138 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003f8e:	e010      	b.n	8003fb2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	b25b      	sxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	da0e      	bge.n	8003fb6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f98:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <_HandleIncomingPacket+0xe0>)
 8003f9a:	7e1b      	ldrb	r3, [r3, #24]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	1cfb      	adds	r3, r7, #3
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f7ff fd52 	bl	8003a4c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003fa8:	e005      	b.n	8003fb6 <_HandleIncomingPacket+0xd6>
    }
  }
 8003faa:	bf00      	nop
 8003fac:	e004      	b.n	8003fb8 <_HandleIncomingPacket+0xd8>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <_HandleIncomingPacket+0xd8>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <_HandleIncomingPacket+0xd8>
      break;
 8003fb6:	bf00      	nop
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20014fa0 	.word	0x20014fa0

08003fc4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08c      	sub	sp, #48	; 0x30
 8003fc8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003fca:	2301      	movs	r3, #1
 8003fcc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd8:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <_TrySendOverflowPacket+0xdc>)
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fde:	e00b      	b.n	8003ff8 <_TrySendOverflowPacket+0x34>
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	1c59      	adds	r1, r3, #1
 8003fe8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	09db      	lsrs	r3, r3, #7
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8003ffc:	d8f0      	bhi.n	8003fe0 <_TrySendOverflowPacket+0x1c>
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800400e:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <_TrySendOverflowPacket+0xe0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004014:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <_TrySendOverflowPacket+0xdc>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	623b      	str	r3, [r7, #32]
 8004026:	e00b      	b.n	8004040 <_TrySendOverflowPacket+0x7c>
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	b2da      	uxtb	r2, r3
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	1c59      	adds	r1, r3, #1
 8004030:	6279      	str	r1, [r7, #36]	; 0x24
 8004032:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	09db      	lsrs	r3, r3, #7
 800403e:	623b      	str	r3, [r7, #32]
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	2b7f      	cmp	r3, #127	; 0x7f
 8004044:	d8f0      	bhi.n	8004028 <_TrySendOverflowPacket+0x64>
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	627a      	str	r2, [r7, #36]	; 0x24
 800404c:	6a3a      	ldr	r2, [r7, #32]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004056:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <_TrySendOverflowPacket+0xdc>)
 8004058:	785b      	ldrb	r3, [r3, #1]
 800405a:	4618      	mov	r0, r3
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	461a      	mov	r2, r3
 8004064:	1d3b      	adds	r3, r7, #4
 8004066:	4619      	mov	r1, r3
 8004068:	f7fc f8b2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800406c:	4603      	mov	r3, r0
 800406e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004076:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <_TrySendOverflowPacket+0xdc>)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800407c:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <_TrySendOverflowPacket+0xdc>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	3b01      	subs	r3, #1
 8004082:	b2da      	uxtb	r2, r3
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <_TrySendOverflowPacket+0xdc>)
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	e004      	b.n	8004094 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <_TrySendOverflowPacket+0xdc>)
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	3301      	adds	r3, #1
 8004090:	4a03      	ldr	r2, [pc, #12]	; (80040a0 <_TrySendOverflowPacket+0xdc>)
 8004092:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004094:	693b      	ldr	r3, [r7, #16]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3730      	adds	r7, #48	; 0x30
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20014fa0 	.word	0x20014fa0
 80040a4:	e0001004 	.word	0xe0001004

080040a8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80040b4:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <_SendPacket+0x1c0>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d010      	beq.n	80040de <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80040bc:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <_SendPacket+0x1c0>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80a3 	beq.w	800420c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80040c6:	4b68      	ldr	r3, [pc, #416]	; (8004268 <_SendPacket+0x1c0>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d109      	bne.n	80040e2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80040ce:	f7ff ff79 	bl	8003fc4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80040d2:	4b65      	ldr	r3, [pc, #404]	; (8004268 <_SendPacket+0x1c0>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	f040 809a 	bne.w	8004210 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80040dc:	e001      	b.n	80040e2 <_SendPacket+0x3a>
    goto Send;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <_SendPacket+0x3c>
Send:
 80040e2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b1f      	cmp	r3, #31
 80040e8:	d809      	bhi.n	80040fe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80040ea:	4b5f      	ldr	r3, [pc, #380]	; (8004268 <_SendPacket+0x1c0>)
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f040 808b 	bne.w	8004214 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b17      	cmp	r3, #23
 8004102:	d807      	bhi.n	8004114 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3b01      	subs	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e03d      	b.n	8004190 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b7f      	cmp	r3, #127	; 0x7f
 8004120:	d912      	bls.n	8004148 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	09da      	lsrs	r2, r3, #7
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3b01      	subs	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	3a01      	subs	r2, #1
 800413a:	60fa      	str	r2, [r7, #12]
 800413c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004140:	b2da      	uxtb	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e006      	b.n	8004156 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b7f      	cmp	r3, #127	; 0x7f
 800415a:	d912      	bls.n	8004182 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	09da      	lsrs	r2, r3, #7
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3b01      	subs	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	3a01      	subs	r2, #1
 8004174:	60fa      	str	r2, [r7, #12]
 8004176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800417a:	b2da      	uxtb	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e006      	b.n	8004190 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3b01      	subs	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004190:	4b36      	ldr	r3, [pc, #216]	; (800426c <_SendPacket+0x1c4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004196:	4b34      	ldr	r3, [pc, #208]	; (8004268 <_SendPacket+0x1c0>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	623b      	str	r3, [r7, #32]
 80041a8:	e00b      	b.n	80041c2 <_SendPacket+0x11a>
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	1c59      	adds	r1, r3, #1
 80041b2:	6279      	str	r1, [r7, #36]	; 0x24
 80041b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	09db      	lsrs	r3, r3, #7
 80041c0:	623b      	str	r3, [r7, #32]
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	2b7f      	cmp	r3, #127	; 0x7f
 80041c6:	d8f0      	bhi.n	80041aa <_SendPacket+0x102>
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	627a      	str	r2, [r7, #36]	; 0x24
 80041ce:	6a3a      	ldr	r2, [r7, #32]
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80041d8:	4b23      	ldr	r3, [pc, #140]	; (8004268 <_SendPacket+0x1c0>)
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	4618      	mov	r0, r3
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	68f9      	ldr	r1, [r7, #12]
 80041e8:	f7fb fff2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80041ec:	4603      	mov	r3, r0
 80041ee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80041f6:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <_SendPacket+0x1c0>)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	60d3      	str	r3, [r2, #12]
 80041fc:	e00b      	b.n	8004216 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80041fe:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <_SendPacket+0x1c0>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4b18      	ldr	r3, [pc, #96]	; (8004268 <_SendPacket+0x1c0>)
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e004      	b.n	8004216 <_SendPacket+0x16e>
    goto SendDone;
 800420c:	bf00      	nop
 800420e:	e002      	b.n	8004216 <_SendPacket+0x16e>
      goto SendDone;
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <_SendPacket+0x16e>
      goto SendDone;
 8004214:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004216:	4b14      	ldr	r3, [pc, #80]	; (8004268 <_SendPacket+0x1c0>)
 8004218:	7e1b      	ldrb	r3, [r3, #24]
 800421a:	4619      	mov	r1, r3
 800421c:	4a14      	ldr	r2, [pc, #80]	; (8004270 <_SendPacket+0x1c8>)
 800421e:	460b      	mov	r3, r1
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	440b      	add	r3, r1
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4413      	add	r3, r2
 8004228:	336c      	adds	r3, #108	; 0x6c
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <_SendPacket+0x1c0>)
 800422e:	7e1b      	ldrb	r3, [r3, #24]
 8004230:	4618      	mov	r0, r3
 8004232:	490f      	ldr	r1, [pc, #60]	; (8004270 <_SendPacket+0x1c8>)
 8004234:	4603      	mov	r3, r0
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4403      	add	r3, r0
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	440b      	add	r3, r1
 800423e:	3370      	adds	r3, #112	; 0x70
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d00b      	beq.n	800425e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <_SendPacket+0x1c0>)
 8004248:	789b      	ldrb	r3, [r3, #2]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d107      	bne.n	800425e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800424e:	4b06      	ldr	r3, [pc, #24]	; (8004268 <_SendPacket+0x1c0>)
 8004250:	2201      	movs	r2, #1
 8004252:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004254:	f7ff fe44 	bl	8003ee0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <_SendPacket+0x1c0>)
 800425a:	2200      	movs	r2, #0
 800425c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800425e:	bf00      	nop
 8004260:	3728      	adds	r7, #40	; 0x28
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20014fa0 	.word	0x20014fa0
 800426c:	e0001004 	.word	0xe0001004
 8004270:	20012ee0 	.word	0x20012ee0

08004274 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b0a2      	sub	sp, #136	; 0x88
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800428a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8004296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01d      	beq.n	80042da <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800429e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80042a2:	2b25      	cmp	r3, #37	; 0x25
 80042a4:	d1f1      	bne.n	800428a <_VPrintHost+0x16>
      c = *p;
 80042a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	1d19      	adds	r1, r3, #4
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6011      	str	r1, [r2, #0]
 80042b8:	6819      	ldr	r1, [r3, #0]
 80042ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042c4:	460a      	mov	r2, r1
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	3388      	adds	r3, #136	; 0x88
 80042ca:	443b      	add	r3, r7
 80042cc:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 80042d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d002      	beq.n	80042de <_VPrintHost+0x6a>
    c = *p++;
 80042d8:	e7d7      	b.n	800428a <_VPrintHost+0x16>
      break;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <_VPrintHost+0x6c>
        break;
 80042de:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 80042e0:	f3ef 8311 	mrs	r3, BASEPRI
 80042e4:	f04f 0120 	mov.w	r1, #32
 80042e8:	f381 8811 	msr	BASEPRI, r1
 80042ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80042ee:	483f      	ldr	r0, [pc, #252]	; (80043ec <_VPrintHost+0x178>)
 80042f0:	f7ff fde9 	bl	8003ec6 <_PreparePacket>
 80042f4:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042f6:	2280      	movs	r2, #128	; 0x80
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80042fc:	f7ff fd96 	bl	8003e2c <_EncodeStr>
 8004300:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8004302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004304:	677b      	str	r3, [r7, #116]	; 0x74
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	673b      	str	r3, [r7, #112]	; 0x70
 800430a:	e00b      	b.n	8004324 <_VPrintHost+0xb0>
 800430c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800430e:	b2da      	uxtb	r2, r3
 8004310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	6779      	str	r1, [r7, #116]	; 0x74
 8004316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004320:	09db      	lsrs	r3, r3, #7
 8004322:	673b      	str	r3, [r7, #112]	; 0x70
 8004324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004326:	2b7f      	cmp	r3, #127	; 0x7f
 8004328:	d8f0      	bhi.n	800430c <_VPrintHost+0x98>
 800432a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	677a      	str	r2, [r7, #116]	; 0x74
 8004330:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004338:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800433a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800433c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800433e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004342:	66bb      	str	r3, [r7, #104]	; 0x68
 8004344:	e00b      	b.n	800435e <_VPrintHost+0xea>
 8004346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004348:	b2da      	uxtb	r2, r3
 800434a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434c:	1c59      	adds	r1, r3, #1
 800434e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8004350:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800435a:	09db      	lsrs	r3, r3, #7
 800435c:	66bb      	str	r3, [r7, #104]	; 0x68
 800435e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004360:	2b7f      	cmp	r3, #127	; 0x7f
 8004362:	d8f0      	bhi.n	8004346 <_VPrintHost+0xd2>
 8004364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	66fa      	str	r2, [r7, #108]	; 0x6c
 800436a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004372:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8004374:	f107 0314 	add.w	r3, r7, #20
 8004378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800437c:	e022      	b.n	80043c4 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800437e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004380:	667b      	str	r3, [r7, #100]	; 0x64
 8004382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	663b      	str	r3, [r7, #96]	; 0x60
 800438a:	e00b      	b.n	80043a4 <_VPrintHost+0x130>
 800438c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800438e:	b2da      	uxtb	r2, r3
 8004390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004392:	1c59      	adds	r1, r3, #1
 8004394:	6679      	str	r1, [r7, #100]	; 0x64
 8004396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a0:	09db      	lsrs	r3, r3, #7
 80043a2:	663b      	str	r3, [r7, #96]	; 0x60
 80043a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a6:	2b7f      	cmp	r3, #127	; 0x7f
 80043a8:	d8f0      	bhi.n	800438c <_VPrintHost+0x118>
 80043aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	667a      	str	r2, [r7, #100]	; 0x64
 80043b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043b8:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 80043ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043be:	3304      	adds	r3, #4
 80043c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80043c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043c8:	1e5a      	subs	r2, r3, #1
 80043ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1d5      	bne.n	800437e <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80043d2:	221a      	movs	r2, #26
 80043d4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80043d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80043d8:	f7ff fe66 	bl	80040a8 <_SendPacket>
    RECORD_END();
 80043dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043de:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3788      	adds	r7, #136	; 0x88
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20014fd0 	.word	0x20014fd0

080043f0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80043fe:	2300      	movs	r3, #0
 8004400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004404:	4917      	ldr	r1, [pc, #92]	; (8004464 <SEGGER_SYSVIEW_Init+0x74>)
 8004406:	4818      	ldr	r0, [pc, #96]	; (8004468 <SEGGER_SYSVIEW_Init+0x78>)
 8004408:	f7ff fc1c 	bl	8003c44 <SEGGER_RTT_AllocUpBuffer>
 800440c:	4603      	mov	r3, r0
 800440e:	b2da      	uxtb	r2, r3
 8004410:	4b16      	ldr	r3, [pc, #88]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 8004412:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004414:	4b15      	ldr	r3, [pc, #84]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 8004416:	785a      	ldrb	r2, [r3, #1]
 8004418:	4b14      	ldr	r3, [pc, #80]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 800441a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 800441e:	7e1b      	ldrb	r3, [r3, #24]
 8004420:	4618      	mov	r0, r3
 8004422:	2300      	movs	r3, #0
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	2308      	movs	r3, #8
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <SEGGER_SYSVIEW_Init+0x80>)
 800442a:	490f      	ldr	r1, [pc, #60]	; (8004468 <SEGGER_SYSVIEW_Init+0x78>)
 800442c:	f7ff fc8e 	bl	8003d4c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004430:	4b0e      	ldr	r3, [pc, #56]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 8004432:	2200      	movs	r2, #0
 8004434:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <SEGGER_SYSVIEW_Init+0x84>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a0c      	ldr	r2, [pc, #48]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 800443c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800443e:	4a0b      	ldr	r2, [pc, #44]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004444:	4a09      	ldr	r2, [pc, #36]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800444a:	4a08      	ldr	r2, [pc, #32]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004450:	4a06      	ldr	r2, [pc, #24]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <SEGGER_SYSVIEW_Init+0x7c>)
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20013f98 	.word	0x20013f98
 8004468:	080083bc 	.word	0x080083bc
 800446c:	20014fa0 	.word	0x20014fa0
 8004470:	20014f98 	.word	0x20014f98
 8004474:	e0001004 	.word	0xe0001004

08004478 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6113      	str	r3, [r2, #16]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20014fa0 	.word	0x20014fa0

08004498 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80044a0:	f3ef 8311 	mrs	r3, BASEPRI
 80044a4:	f04f 0120 	mov.w	r1, #32
 80044a8:	f381 8811 	msr	BASEPRI, r1
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	4808      	ldr	r0, [pc, #32]	; (80044d0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80044b0:	f7ff fd09 	bl	8003ec6 <_PreparePacket>
 80044b4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	68b8      	ldr	r0, [r7, #8]
 80044bc:	f7ff fdf4 	bl	80040a8 <_SendPacket>
  RECORD_END();
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f383 8811 	msr	BASEPRI, r3
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20014fd0 	.word	0x20014fd0

080044d4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044de:	f3ef 8311 	mrs	r3, BASEPRI
 80044e2:	f04f 0120 	mov.w	r1, #32
 80044e6:	f381 8811 	msr	BASEPRI, r1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	4816      	ldr	r0, [pc, #88]	; (8004548 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80044ee:	f7ff fcea 	bl	8003ec6 <_PreparePacket>
 80044f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	e00b      	b.n	800451a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	1c59      	adds	r1, r3, #1
 800450a:	61f9      	str	r1, [r7, #28]
 800450c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	09db      	lsrs	r3, r3, #7
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b7f      	cmp	r3, #127	; 0x7f
 800451e:	d8f0      	bhi.n	8004502 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	61fa      	str	r2, [r7, #28]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	6938      	ldr	r0, [r7, #16]
 8004536:	f7ff fdb7 	bl	80040a8 <_SendPacket>
  RECORD_END();
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f383 8811 	msr	BASEPRI, r3
}
 8004540:	bf00      	nop
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20014fd0 	.word	0x20014fd0

0800454c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	; 0x30
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004558:	f3ef 8311 	mrs	r3, BASEPRI
 800455c:	f04f 0120 	mov.w	r1, #32
 8004560:	f381 8811 	msr	BASEPRI, r1
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	4825      	ldr	r0, [pc, #148]	; (80045fc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004568:	f7ff fcad 	bl	8003ec6 <_PreparePacket>
 800456c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
 800457a:	e00b      	b.n	8004594 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	b2da      	uxtb	r2, r3
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	1c59      	adds	r1, r3, #1
 8004584:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	09db      	lsrs	r3, r3, #7
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	2b7f      	cmp	r3, #127	; 0x7f
 8004598:	d8f0      	bhi.n	800457c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	623b      	str	r3, [r7, #32]
 80045b2:	e00b      	b.n	80045cc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	1c59      	adds	r1, r3, #1
 80045bc:	6279      	str	r1, [r7, #36]	; 0x24
 80045be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	09db      	lsrs	r3, r3, #7
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2b7f      	cmp	r3, #127	; 0x7f
 80045d0:	d8f0      	bhi.n	80045b4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	627a      	str	r2, [r7, #36]	; 0x24
 80045d8:	6a3a      	ldr	r2, [r7, #32]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	6979      	ldr	r1, [r7, #20]
 80045e6:	69b8      	ldr	r0, [r7, #24]
 80045e8:	f7ff fd5e 	bl	80040a8 <_SendPacket>
  RECORD_END();
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f383 8811 	msr	BASEPRI, r3
}
 80045f2:	bf00      	nop
 80045f4:	3730      	adds	r7, #48	; 0x30
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20014fd0 	.word	0x20014fd0

08004600 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b08e      	sub	sp, #56	; 0x38
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800460e:	f3ef 8311 	mrs	r3, BASEPRI
 8004612:	f04f 0120 	mov.w	r1, #32
 8004616:	f381 8811 	msr	BASEPRI, r1
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	4832      	ldr	r0, [pc, #200]	; (80046e8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800461e:	f7ff fc52 	bl	8003ec6 <_PreparePacket>
 8004622:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	633b      	str	r3, [r7, #48]	; 0x30
 8004630:	e00b      	b.n	800464a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	b2da      	uxtb	r2, r3
 8004636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004638:	1c59      	adds	r1, r3, #1
 800463a:	6379      	str	r1, [r7, #52]	; 0x34
 800463c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	09db      	lsrs	r3, r3, #7
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	2b7f      	cmp	r3, #127	; 0x7f
 800464e:	d8f0      	bhi.n	8004632 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	637a      	str	r2, [r7, #52]	; 0x34
 8004656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
 8004668:	e00b      	b.n	8004682 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	b2da      	uxtb	r2, r3
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	1c59      	adds	r1, r3, #1
 8004672:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467e:	09db      	lsrs	r3, r3, #7
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	2b7f      	cmp	r3, #127	; 0x7f
 8004686:	d8f0      	bhi.n	800466a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800468e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	623b      	str	r3, [r7, #32]
 80046a0:	e00b      	b.n	80046ba <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	1c59      	adds	r1, r3, #1
 80046aa:	6279      	str	r1, [r7, #36]	; 0x24
 80046ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	09db      	lsrs	r3, r3, #7
 80046b8:	623b      	str	r3, [r7, #32]
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	2b7f      	cmp	r3, #127	; 0x7f
 80046be:	d8f0      	bhi.n	80046a2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	627a      	str	r2, [r7, #36]	; 0x24
 80046c6:	6a3a      	ldr	r2, [r7, #32]
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6979      	ldr	r1, [r7, #20]
 80046d4:	69b8      	ldr	r0, [r7, #24]
 80046d6:	f7ff fce7 	bl	80040a8 <_SendPacket>
  RECORD_END();
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f383 8811 	msr	BASEPRI, r3
}
 80046e0:	bf00      	nop
 80046e2:	3738      	adds	r7, #56	; 0x38
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20014fd0 	.word	0x20014fd0

080046ec <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b090      	sub	sp, #64	; 0x40
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80046fa:	f3ef 8311 	mrs	r3, BASEPRI
 80046fe:	f04f 0120 	mov.w	r1, #32
 8004702:	f381 8811 	msr	BASEPRI, r1
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	4840      	ldr	r0, [pc, #256]	; (800480c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800470a:	f7ff fbdc 	bl	8003ec6 <_PreparePacket>
 800470e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	63bb      	str	r3, [r7, #56]	; 0x38
 800471c:	e00b      	b.n	8004736 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800471e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004720:	b2da      	uxtb	r2, r3
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	09db      	lsrs	r3, r3, #7
 8004734:	63bb      	str	r3, [r7, #56]	; 0x38
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	2b7f      	cmp	r3, #127	; 0x7f
 800473a:	d8f0      	bhi.n	800471e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800473c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	633b      	str	r3, [r7, #48]	; 0x30
 8004754:	e00b      	b.n	800476e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	b2da      	uxtb	r2, r3
 800475a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475c:	1c59      	adds	r1, r3, #1
 800475e:	6379      	str	r1, [r7, #52]	; 0x34
 8004760:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	09db      	lsrs	r3, r3, #7
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	2b7f      	cmp	r3, #127	; 0x7f
 8004772:	d8f0      	bhi.n	8004756 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	637a      	str	r2, [r7, #52]	; 0x34
 800477a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
 800478c:	e00b      	b.n	80047a6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	b2da      	uxtb	r2, r3
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	1c59      	adds	r1, r3, #1
 8004796:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	09db      	lsrs	r3, r3, #7
 80047a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	2b7f      	cmp	r3, #127	; 0x7f
 80047aa:	d8f0      	bhi.n	800478e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c2:	623b      	str	r3, [r7, #32]
 80047c4:	e00b      	b.n	80047de <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	1c59      	adds	r1, r3, #1
 80047ce:	6279      	str	r1, [r7, #36]	; 0x24
 80047d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	09db      	lsrs	r3, r3, #7
 80047dc:	623b      	str	r3, [r7, #32]
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	2b7f      	cmp	r3, #127	; 0x7f
 80047e2:	d8f0      	bhi.n	80047c6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	627a      	str	r2, [r7, #36]	; 0x24
 80047ea:	6a3a      	ldr	r2, [r7, #32]
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	6979      	ldr	r1, [r7, #20]
 80047f8:	69b8      	ldr	r0, [r7, #24]
 80047fa:	f7ff fc55 	bl	80040a8 <_SendPacket>
  RECORD_END();
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f383 8811 	msr	BASEPRI, r3
}
 8004804:	bf00      	nop
 8004806:	3740      	adds	r7, #64	; 0x40
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20014fd0 	.word	0x20014fd0

08004810 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b08c      	sub	sp, #48	; 0x30
 8004814:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004816:	4b58      	ldr	r3, [pc, #352]	; (8004978 <SEGGER_SYSVIEW_Start+0x168>)
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800481c:	f3ef 8311 	mrs	r3, BASEPRI
 8004820:	f04f 0120 	mov.w	r1, #32
 8004824:	f381 8811 	msr	BASEPRI, r1
 8004828:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800482a:	4b53      	ldr	r3, [pc, #332]	; (8004978 <SEGGER_SYSVIEW_Start+0x168>)
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	220a      	movs	r2, #10
 8004830:	4952      	ldr	r1, [pc, #328]	; (800497c <SEGGER_SYSVIEW_Start+0x16c>)
 8004832:	4618      	mov	r0, r3
 8004834:	f7fb fccc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800483e:	200a      	movs	r0, #10
 8004840:	f7ff fe2a 	bl	8004498 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004844:	f3ef 8311 	mrs	r3, BASEPRI
 8004848:	f04f 0120 	mov.w	r1, #32
 800484c:	f381 8811 	msr	BASEPRI, r1
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	484b      	ldr	r0, [pc, #300]	; (8004980 <SEGGER_SYSVIEW_Start+0x170>)
 8004854:	f7ff fb37 	bl	8003ec6 <_PreparePacket>
 8004858:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004862:	4b45      	ldr	r3, [pc, #276]	; (8004978 <SEGGER_SYSVIEW_Start+0x168>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
 8004868:	e00b      	b.n	8004882 <SEGGER_SYSVIEW_Start+0x72>
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	b2da      	uxtb	r2, r3
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	1c59      	adds	r1, r3, #1
 8004872:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004874:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	09db      	lsrs	r3, r3, #7
 8004880:	62bb      	str	r3, [r7, #40]	; 0x28
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	2b7f      	cmp	r3, #127	; 0x7f
 8004886:	d8f0      	bhi.n	800486a <SEGGER_SYSVIEW_Start+0x5a>
 8004888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800488e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
 800489c:	4b36      	ldr	r3, [pc, #216]	; (8004978 <SEGGER_SYSVIEW_Start+0x168>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	623b      	str	r3, [r7, #32]
 80048a2:	e00b      	b.n	80048bc <SEGGER_SYSVIEW_Start+0xac>
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	1c59      	adds	r1, r3, #1
 80048ac:	6279      	str	r1, [r7, #36]	; 0x24
 80048ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	09db      	lsrs	r3, r3, #7
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	2b7f      	cmp	r3, #127	; 0x7f
 80048c0:	d8f0      	bhi.n	80048a4 <SEGGER_SYSVIEW_Start+0x94>
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	627a      	str	r2, [r7, #36]	; 0x24
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	4b28      	ldr	r3, [pc, #160]	; (8004978 <SEGGER_SYSVIEW_Start+0x168>)
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	e00b      	b.n	80048f6 <SEGGER_SYSVIEW_Start+0xe6>
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	1c59      	adds	r1, r3, #1
 80048e6:	61f9      	str	r1, [r7, #28]
 80048e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	09db      	lsrs	r3, r3, #7
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b7f      	cmp	r3, #127	; 0x7f
 80048fa:	d8f0      	bhi.n	80048de <SEGGER_SYSVIEW_Start+0xce>
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	61fa      	str	r2, [r7, #28]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	e00b      	b.n	800492e <SEGGER_SYSVIEW_Start+0x11e>
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	1c59      	adds	r1, r3, #1
 800491e:	6179      	str	r1, [r7, #20]
 8004920:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	09db      	lsrs	r3, r3, #7
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b7f      	cmp	r3, #127	; 0x7f
 8004932:	d8f0      	bhi.n	8004916 <SEGGER_SYSVIEW_Start+0x106>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	617a      	str	r2, [r7, #20]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004944:	2218      	movs	r2, #24
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fbad 	bl	80040a8 <_SendPacket>
      RECORD_END();
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004954:	4b08      	ldr	r3, [pc, #32]	; (8004978 <SEGGER_SYSVIEW_Start+0x168>)
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <SEGGER_SYSVIEW_Start+0x168>)
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004962:	f000 f9eb 	bl	8004d3c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004966:	f000 f9b1 	bl	8004ccc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800496a:	f000 fc83 	bl	8005274 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800496e:	bf00      	nop
 8004970:	3730      	adds	r7, #48	; 0x30
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20014fa0 	.word	0x20014fa0
 800497c:	080084bc 	.word	0x080084bc
 8004980:	20014fd0 	.word	0x20014fd0

08004984 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800498a:	f3ef 8311 	mrs	r3, BASEPRI
 800498e:	f04f 0120 	mov.w	r1, #32
 8004992:	f381 8811 	msr	BASEPRI, r1
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	480b      	ldr	r0, [pc, #44]	; (80049c8 <SEGGER_SYSVIEW_Stop+0x44>)
 800499a:	f7ff fa94 	bl	8003ec6 <_PreparePacket>
 800499e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <SEGGER_SYSVIEW_Stop+0x48>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80049a8:	220b      	movs	r2, #11
 80049aa:	6839      	ldr	r1, [r7, #0]
 80049ac:	6838      	ldr	r0, [r7, #0]
 80049ae:	f7ff fb7b 	bl	80040a8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <SEGGER_SYSVIEW_Stop+0x48>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f383 8811 	msr	BASEPRI, r3
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20014fd0 	.word	0x20014fd0
 80049cc:	20014fa0 	.word	0x20014fa0

080049d0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08c      	sub	sp, #48	; 0x30
 80049d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80049d6:	f3ef 8311 	mrs	r3, BASEPRI
 80049da:	f04f 0120 	mov.w	r1, #32
 80049de:	f381 8811 	msr	BASEPRI, r1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	4845      	ldr	r0, [pc, #276]	; (8004afc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80049e6:	f7ff fa6e 	bl	8003ec6 <_PreparePacket>
 80049ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f4:	4b42      	ldr	r3, [pc, #264]	; (8004b00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fa:	e00b      	b.n	8004a14 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	1c59      	adds	r1, r3, #1
 8004a04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	09db      	lsrs	r3, r3, #7
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	2b7f      	cmp	r3, #127	; 0x7f
 8004a18:	d8f0      	bhi.n	80049fc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2e:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	623b      	str	r3, [r7, #32]
 8004a34:	e00b      	b.n	8004a4e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	1c59      	adds	r1, r3, #1
 8004a3e:	6279      	str	r1, [r7, #36]	; 0x24
 8004a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	09db      	lsrs	r3, r3, #7
 8004a4c:	623b      	str	r3, [r7, #32]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	2b7f      	cmp	r3, #127	; 0x7f
 8004a52:	d8f0      	bhi.n	8004a36 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	627a      	str	r2, [r7, #36]	; 0x24
 8004a5a:	6a3a      	ldr	r2, [r7, #32]
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e00b      	b.n	8004a88 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	1c59      	adds	r1, r3, #1
 8004a78:	61f9      	str	r1, [r7, #28]
 8004a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	09db      	lsrs	r3, r3, #7
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a8c:	d8f0      	bhi.n	8004a70 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	61fa      	str	r2, [r7, #28]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	e00b      	b.n	8004ac0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1c59      	adds	r1, r3, #1
 8004ab0:	6179      	str	r1, [r7, #20]
 8004ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	09db      	lsrs	r3, r3, #7
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ac4:	d8f0      	bhi.n	8004aa8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	617a      	str	r2, [r7, #20]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004ad6:	2218      	movs	r2, #24
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	68b8      	ldr	r0, [r7, #8]
 8004adc:	f7ff fae4 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004aee:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	4798      	blx	r3
  }
}
 8004af4:	bf00      	nop
 8004af6:	3730      	adds	r7, #48	; 0x30
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20014fd0 	.word	0x20014fd0
 8004b00:	20014fa0 	.word	0x20014fa0

08004b04 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b092      	sub	sp, #72	; 0x48
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b10:	f04f 0120 	mov.w	r1, #32
 8004b14:	f381 8811 	msr	BASEPRI, r1
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	486a      	ldr	r0, [pc, #424]	; (8004cc4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004b1c:	f7ff f9d3 	bl	8003ec6 <_PreparePacket>
 8004b20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b66      	ldr	r3, [pc, #408]	; (8004cc8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	643b      	str	r3, [r7, #64]	; 0x40
 8004b36:	e00b      	b.n	8004b50 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	6479      	str	r1, [r7, #68]	; 0x44
 8004b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4c:	09db      	lsrs	r3, r3, #7
 8004b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b52:	2b7f      	cmp	r3, #127	; 0x7f
 8004b54:	d8f0      	bhi.n	8004b38 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b70:	e00b      	b.n	8004b8a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b78:	1c59      	adds	r1, r3, #1
 8004b7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004b7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	09db      	lsrs	r3, r3, #7
 8004b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b8e:	d8f0      	bhi.n	8004b72 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7ff f93f 	bl	8003e2c <_EncodeStr>
 8004bae:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004bb0:	2209      	movs	r2, #9
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	6938      	ldr	r0, [r7, #16]
 8004bb6:	f7ff fa77 	bl	80040a8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b40      	ldr	r3, [pc, #256]	; (8004cc8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004bce:	e00b      	b.n	8004be8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd6:	1c59      	adds	r1, r3, #1
 8004bd8:	6379      	str	r1, [r7, #52]	; 0x34
 8004bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	09db      	lsrs	r3, r3, #7
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	2b7f      	cmp	r3, #127	; 0x7f
 8004bec:	d8f0      	bhi.n	8004bd0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	637a      	str	r2, [r7, #52]	; 0x34
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c08:	e00b      	b.n	8004c22 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	1c59      	adds	r1, r3, #1
 8004c12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	09db      	lsrs	r3, r3, #7
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	2b7f      	cmp	r3, #127	; 0x7f
 8004c26:	d8f0      	bhi.n	8004c0a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	e00b      	b.n	8004c5c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	1c59      	adds	r1, r3, #1
 8004c4c:	6279      	str	r1, [r7, #36]	; 0x24
 8004c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	09db      	lsrs	r3, r3, #7
 8004c5a:	623b      	str	r3, [r7, #32]
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c60:	d8f0      	bhi.n	8004c44 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	627a      	str	r2, [r7, #36]	; 0x24
 8004c68:	6a3a      	ldr	r2, [r7, #32]
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	e00b      	b.n	8004c94 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	1c59      	adds	r1, r3, #1
 8004c84:	61f9      	str	r1, [r7, #28]
 8004c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	09db      	lsrs	r3, r3, #7
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b7f      	cmp	r3, #127	; 0x7f
 8004c98:	d8f0      	bhi.n	8004c7c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	61fa      	str	r2, [r7, #28]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004caa:	2215      	movs	r2, #21
 8004cac:	68f9      	ldr	r1, [r7, #12]
 8004cae:	6938      	ldr	r0, [r7, #16]
 8004cb0:	f7ff f9fa 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f383 8811 	msr	BASEPRI, r3
}
 8004cba:	bf00      	nop
 8004cbc:	3748      	adds	r7, #72	; 0x48
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20014fd0 	.word	0x20014fd0
 8004cc8:	20014fa0 	.word	0x20014fa0

08004ccc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004ce2:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4798      	blx	r3
  }
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20014fa0 	.word	0x20014fa0

08004cf4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004d00:	f04f 0120 	mov.w	r1, #32
 8004d04:	f381 8811 	msr	BASEPRI, r1
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	480b      	ldr	r0, [pc, #44]	; (8004d38 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004d0c:	f7ff f8db 	bl	8003ec6 <_PreparePacket>
 8004d10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d12:	2280      	movs	r2, #128	; 0x80
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	6938      	ldr	r0, [r7, #16]
 8004d18:	f7ff f888 	bl	8003e2c <_EncodeStr>
 8004d1c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004d1e:	220e      	movs	r2, #14
 8004d20:	68f9      	ldr	r1, [r7, #12]
 8004d22:	6938      	ldr	r0, [r7, #16]
 8004d24:	f7ff f9c0 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f383 8811 	msr	BASEPRI, r3
}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20014fd0 	.word	0x20014fd0

08004d3c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004d3c:	b590      	push	{r4, r7, lr}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01a      	beq.n	8004d80 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d015      	beq.n	8004d80 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004d54:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4798      	blx	r3
 8004d5c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004d60:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	000a      	movs	r2, r1
 8004d70:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004d72:	4613      	mov	r3, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	4621      	mov	r1, r4
 8004d78:	200d      	movs	r0, #13
 8004d7a:	f7ff fbe7 	bl	800454c <SEGGER_SYSVIEW_RecordU32x2>
 8004d7e:	e006      	b.n	8004d8e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4619      	mov	r1, r3
 8004d86:	200c      	movs	r0, #12
 8004d88:	f7ff fba4 	bl	80044d4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd90      	pop	{r4, r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20014fa0 	.word	0x20014fa0
 8004d9c:	e0001004 	.word	0xe0001004

08004da0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004da6:	f3ef 8311 	mrs	r3, BASEPRI
 8004daa:	f04f 0120 	mov.w	r1, #32
 8004dae:	f381 8811 	msr	BASEPRI, r1
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	4819      	ldr	r0, [pc, #100]	; (8004e1c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004db6:	f7ff f886 	bl	8003ec6 <_PreparePacket>
 8004dba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004dc0:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	e00b      	b.n	8004dec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	1c59      	adds	r1, r3, #1
 8004ddc:	6179      	str	r1, [r7, #20]
 8004dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	09db      	lsrs	r3, r3, #7
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b7f      	cmp	r3, #127	; 0x7f
 8004df0:	d8f0      	bhi.n	8004dd4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	617a      	str	r2, [r7, #20]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004e02:	2202      	movs	r2, #2
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	68b8      	ldr	r0, [r7, #8]
 8004e08:	f7ff f94e 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f383 8811 	msr	BASEPRI, r3
}
 8004e12:	bf00      	nop
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20014fd0 	.word	0x20014fd0
 8004e20:	e000ed04 	.word	0xe000ed04

08004e24 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e2e:	f04f 0120 	mov.w	r1, #32
 8004e32:	f381 8811 	msr	BASEPRI, r1
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	4807      	ldr	r0, [pc, #28]	; (8004e58 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004e3a:	f7ff f844 	bl	8003ec6 <_PreparePacket>
 8004e3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004e40:	2203      	movs	r2, #3
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6838      	ldr	r0, [r7, #0]
 8004e46:	f7ff f92f 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f383 8811 	msr	BASEPRI, r3
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20014fd0 	.word	0x20014fd0

08004e5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e62:	f3ef 8311 	mrs	r3, BASEPRI
 8004e66:	f04f 0120 	mov.w	r1, #32
 8004e6a:	f381 8811 	msr	BASEPRI, r1
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	4807      	ldr	r0, [pc, #28]	; (8004e90 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004e72:	f7ff f828 	bl	8003ec6 <_PreparePacket>
 8004e76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004e78:	2212      	movs	r2, #18
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6838      	ldr	r0, [r7, #0]
 8004e7e:	f7ff f913 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f383 8811 	msr	BASEPRI, r3
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20014fd0 	.word	0x20014fd0

08004e94 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e9e:	f04f 0120 	mov.w	r1, #32
 8004ea2:	f381 8811 	msr	BASEPRI, r1
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	4807      	ldr	r0, [pc, #28]	; (8004ec8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004eaa:	f7ff f80c 	bl	8003ec6 <_PreparePacket>
 8004eae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004eb0:	2211      	movs	r2, #17
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	6838      	ldr	r0, [r7, #0]
 8004eb6:	f7ff f8f7 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f383 8811 	msr	BASEPRI, r3
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20014fd0 	.word	0x20014fd0

08004ecc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed8:	f04f 0120 	mov.w	r1, #32
 8004edc:	f381 8811 	msr	BASEPRI, r1
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	4819      	ldr	r0, [pc, #100]	; (8004f48 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004ee4:	f7fe ffef 	bl	8003ec6 <_PreparePacket>
 8004ee8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004eee:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e00b      	b.n	8004f1a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	1c59      	adds	r1, r3, #1
 8004f0a:	61f9      	str	r1, [r7, #28]
 8004f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	09db      	lsrs	r3, r3, #7
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f1e:	d8f0      	bhi.n	8004f02 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	61fa      	str	r2, [r7, #28]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004f30:	2208      	movs	r2, #8
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	6938      	ldr	r0, [r7, #16]
 8004f36:	f7ff f8b7 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f383 8811 	msr	BASEPRI, r3
}
 8004f40:	bf00      	nop
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20014fd0 	.word	0x20014fd0
 8004f4c:	20014fa0 	.word	0x20014fa0

08004f50 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f58:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5c:	f04f 0120 	mov.w	r1, #32
 8004f60:	f381 8811 	msr	BASEPRI, r1
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	4819      	ldr	r0, [pc, #100]	; (8004fcc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004f68:	f7fe ffad 	bl	8003ec6 <_PreparePacket>
 8004f6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f72:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	61fb      	str	r3, [r7, #28]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	e00b      	b.n	8004f9e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	1c59      	adds	r1, r3, #1
 8004f8e:	61f9      	str	r1, [r7, #28]
 8004f90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	09db      	lsrs	r3, r3, #7
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa2:	d8f0      	bhi.n	8004f86 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	61fa      	str	r2, [r7, #28]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	6938      	ldr	r0, [r7, #16]
 8004fba:	f7ff f875 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f383 8811 	msr	BASEPRI, r3
}
 8004fc4:	bf00      	nop
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20014fd0 	.word	0x20014fd0
 8004fd0:	20014fa0 	.word	0x20014fa0

08004fd4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe0:	f04f 0120 	mov.w	r1, #32
 8004fe4:	f381 8811 	msr	BASEPRI, r1
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	4819      	ldr	r0, [pc, #100]	; (8005050 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004fec:	f7fe ff6b 	bl	8003ec6 <_PreparePacket>
 8004ff0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ff6:	4b17      	ldr	r3, [pc, #92]	; (8005054 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	e00b      	b.n	8005022 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	b2da      	uxtb	r2, r3
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	1c59      	adds	r1, r3, #1
 8005012:	61f9      	str	r1, [r7, #28]
 8005014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	09db      	lsrs	r3, r3, #7
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b7f      	cmp	r3, #127	; 0x7f
 8005026:	d8f0      	bhi.n	800500a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	61fa      	str	r2, [r7, #28]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005038:	2206      	movs	r2, #6
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	6938      	ldr	r0, [r7, #16]
 800503e:	f7ff f833 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f383 8811 	msr	BASEPRI, r3
}
 8005048:	bf00      	nop
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20014fd0 	.word	0x20014fd0
 8005054:	20014fa0 	.word	0x20014fa0

08005058 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005062:	f3ef 8311 	mrs	r3, BASEPRI
 8005066:	f04f 0120 	mov.w	r1, #32
 800506a:	f381 8811 	msr	BASEPRI, r1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	4827      	ldr	r0, [pc, #156]	; (8005110 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005072:	f7fe ff28 	bl	8003ec6 <_PreparePacket>
 8005076:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800507c:	4b25      	ldr	r3, [pc, #148]	; (8005114 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	623b      	str	r3, [r7, #32]
 800508e:	e00b      	b.n	80050a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	1c59      	adds	r1, r3, #1
 8005098:	6279      	str	r1, [r7, #36]	; 0x24
 800509a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	09db      	lsrs	r3, r3, #7
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	2b7f      	cmp	r3, #127	; 0x7f
 80050ac:	d8f0      	bhi.n	8005090 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	627a      	str	r2, [r7, #36]	; 0x24
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e00b      	b.n	80050e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	1c59      	adds	r1, r3, #1
 80050d0:	61f9      	str	r1, [r7, #28]
 80050d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	09db      	lsrs	r3, r3, #7
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b7f      	cmp	r3, #127	; 0x7f
 80050e4:	d8f0      	bhi.n	80050c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	61fa      	str	r2, [r7, #28]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80050f6:	2207      	movs	r2, #7
 80050f8:	68f9      	ldr	r1, [r7, #12]
 80050fa:	6938      	ldr	r0, [r7, #16]
 80050fc:	f7fe ffd4 	bl	80040a8 <_SendPacket>
  RECORD_END();
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f383 8811 	msr	BASEPRI, r3
}
 8005106:	bf00      	nop
 8005108:	3728      	adds	r7, #40	; 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20014fd0 	.word	0x20014fd0
 8005114:	20014fa0 	.word	0x20014fa0

08005118 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005120:	4b04      	ldr	r3, [pc, #16]	; (8005134 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	1ad3      	subs	r3, r2, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	20014fa0 	.word	0x20014fa0

08005138 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b08c      	sub	sp, #48	; 0x30
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005142:	4b3b      	ldr	r3, [pc, #236]	; (8005230 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d06d      	beq.n	8005226 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800514a:	4b39      	ldr	r3, [pc, #228]	; (8005230 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005150:	2300      	movs	r3, #0
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
 8005154:	e008      	b.n	8005168 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	3301      	adds	r3, #1
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800516c:	429a      	cmp	r2, r3
 800516e:	d3f2      	bcc.n	8005156 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005170:	e000      	b.n	8005174 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005172:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d055      	beq.n	8005226 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800517a:	f3ef 8311 	mrs	r3, BASEPRI
 800517e:	f04f 0120 	mov.w	r1, #32
 8005182:	f381 8811 	msr	BASEPRI, r1
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	482a      	ldr	r0, [pc, #168]	; (8005234 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800518a:	f7fe fe9c 	bl	8003ec6 <_PreparePacket>
 800518e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	e00b      	b.n	80051b6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	1c59      	adds	r1, r3, #1
 80051a6:	6279      	str	r1, [r7, #36]	; 0x24
 80051a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	09db      	lsrs	r3, r3, #7
 80051b4:	623b      	str	r3, [r7, #32]
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ba:	d8f0      	bhi.n	800519e <SEGGER_SYSVIEW_SendModule+0x66>
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	627a      	str	r2, [r7, #36]	; 0x24
 80051c2:	6a3a      	ldr	r2, [r7, #32]
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e00b      	b.n	80051f0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	61f9      	str	r1, [r7, #28]
 80051e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	09db      	lsrs	r3, r3, #7
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b7f      	cmp	r3, #127	; 0x7f
 80051f4:	d8f0      	bhi.n	80051d8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	61fa      	str	r2, [r7, #28]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	4619      	mov	r1, r3
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f7fe fe0c 	bl	8003e2c <_EncodeStr>
 8005214:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005216:	2216      	movs	r2, #22
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	6938      	ldr	r0, [r7, #16]
 800521c:	f7fe ff44 	bl	80040a8 <_SendPacket>
      RECORD_END();
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005226:	bf00      	nop
 8005228:	3730      	adds	r7, #48	; 0x30
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20014fc8 	.word	0x20014fc8
 8005234:	20014fd0 	.word	0x20014fd0

08005238 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00f      	beq.n	8005266 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f2      	bne.n	800524c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20014fc8 	.word	0x20014fc8

08005274 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800527a:	f3ef 8311 	mrs	r3, BASEPRI
 800527e:	f04f 0120 	mov.w	r1, #32
 8005282:	f381 8811 	msr	BASEPRI, r1
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	4817      	ldr	r0, [pc, #92]	; (80052e8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800528a:	f7fe fe1c 	bl	8003ec6 <_PreparePacket>
 800528e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	4b14      	ldr	r3, [pc, #80]	; (80052ec <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	e00b      	b.n	80052b8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1c59      	adds	r1, r3, #1
 80052a8:	6179      	str	r1, [r7, #20]
 80052aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	09db      	lsrs	r3, r3, #7
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b7f      	cmp	r3, #127	; 0x7f
 80052bc:	d8f0      	bhi.n	80052a0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	617a      	str	r2, [r7, #20]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80052ce:	221b      	movs	r2, #27
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	68b8      	ldr	r0, [r7, #8]
 80052d4:	f7fe fee8 	bl	80040a8 <_SendPacket>
  RECORD_END();
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f383 8811 	msr	BASEPRI, r3
}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20014fd0 	.word	0x20014fd0
 80052ec:	20014fcc 	.word	0x20014fcc

080052f0 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80052f0:	b40f      	push	{r0, r1, r2, r3}
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80052f8:	f107 0314 	add.w	r3, r7, #20
 80052fc:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	461a      	mov	r2, r3
 8005302:	2100      	movs	r1, #0
 8005304:	6938      	ldr	r0, [r7, #16]
 8005306:	f7fe ffb5 	bl	8004274 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005314:	b004      	add	sp, #16
 8005316:	4770      	bx	lr

08005318 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	; 0x28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005320:	f3ef 8311 	mrs	r3, BASEPRI
 8005324:	f04f 0120 	mov.w	r1, #32
 8005328:	f381 8811 	msr	BASEPRI, r1
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	4827      	ldr	r0, [pc, #156]	; (80053cc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005330:	f7fe fdc9 	bl	8003ec6 <_PreparePacket>
 8005334:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005336:	2280      	movs	r2, #128	; 0x80
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	6938      	ldr	r0, [r7, #16]
 800533c:	f7fe fd76 	bl	8003e2c <_EncodeStr>
 8005340:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
 8005346:	2301      	movs	r3, #1
 8005348:	623b      	str	r3, [r7, #32]
 800534a:	e00b      	b.n	8005364 <SEGGER_SYSVIEW_Warn+0x4c>
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	b2da      	uxtb	r2, r3
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	6279      	str	r1, [r7, #36]	; 0x24
 8005356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	09db      	lsrs	r3, r3, #7
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	2b7f      	cmp	r3, #127	; 0x7f
 8005368:	d8f0      	bhi.n	800534c <SEGGER_SYSVIEW_Warn+0x34>
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	627a      	str	r2, [r7, #36]	; 0x24
 8005370:	6a3a      	ldr	r2, [r7, #32]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	e00b      	b.n	800539c <SEGGER_SYSVIEW_Warn+0x84>
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	61f9      	str	r1, [r7, #28]
 800538e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	09db      	lsrs	r3, r3, #7
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2b7f      	cmp	r3, #127	; 0x7f
 80053a0:	d8f0      	bhi.n	8005384 <SEGGER_SYSVIEW_Warn+0x6c>
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	61fa      	str	r2, [r7, #28]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80053b2:	221a      	movs	r2, #26
 80053b4:	68f9      	ldr	r1, [r7, #12]
 80053b6:	6938      	ldr	r0, [r7, #16]
 80053b8:	f7fe fe76 	bl	80040a8 <_SendPacket>
  RECORD_END();
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f383 8811 	msr	BASEPRI, r3
}
 80053c2:	bf00      	nop
 80053c4:	3728      	adds	r7, #40	; 0x28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20014fd0 	.word	0x20014fd0

080053d0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	2000      	movs	r0, #0
 80053e4:	f7fe fc08 	bl	8003bf8 <SEGGER_RTT_Write>
  return len;
 80053e8:	683b      	ldr	r3, [r7, #0]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053fa:	f000 fcaf 	bl	8005d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80053fe:	f000 f869 	bl	80054d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005402:	f000 f8d1 	bl	80055a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Enable the DWT (Data Watch Point) Cycle Count Feature
  DWT_CTRL |= (1 << 0);
 8005406:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <main+0xc0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a2a      	ldr	r2, [pc, #168]	; (80054b4 <main+0xc0>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6013      	str	r3, [r2, #0]

  //Enabling SEGGER SYSVIEW event tracing
  SEGGER_SYSVIEW_Conf();
 8005412:	f7fe f8cf 	bl	80035b4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8005416:	f7ff f9fb 	bl	8004810 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(manager_task,"manager_task",1024,NULL,2,&task_handle_manager_task);
 800541a:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <main+0xc4>)
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	2302      	movs	r3, #2
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	2300      	movs	r3, #0
 8005424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005428:	4924      	ldr	r1, [pc, #144]	; (80054bc <main+0xc8>)
 800542a:	4825      	ldr	r0, [pc, #148]	; (80054c0 <main+0xcc>)
 800542c:	f7fc f8a6 	bl	800157c <xTaskCreate>
 8005430:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d00a      	beq.n	800544e <main+0x5a>
        __asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	60bb      	str	r3, [r7, #8]
    }
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <main+0x58>

  status = xTaskCreate(employee_task,"employee_task",1024,NULL,2,&task_handle_employee_task);
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <main+0xd0>)
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	2302      	movs	r3, #2
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800545c:	491a      	ldr	r1, [pc, #104]	; (80054c8 <main+0xd4>)
 800545e:	481b      	ldr	r0, [pc, #108]	; (80054cc <main+0xd8>)
 8005460:	f7fc f88c 	bl	800157c <xTaskCreate>
 8005464:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d00a      	beq.n	8005482 <main+0x8e>
        __asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	607b      	str	r3, [r7, #4]
    }
 800547e:	bf00      	nop
 8005480:	e7fe      	b.n	8005480 <main+0x8c>

  TaskSemaphore = xSemaphoreCreateCounting(MAX_TASK_COUNT,0);
 8005482:	2100      	movs	r1, #0
 8005484:	2005      	movs	r0, #5
 8005486:	f7fb fa69 	bl	800095c <xQueueCreateCountingSemaphore>
 800548a:	4603      	mov	r3, r0
 800548c:	4a10      	ldr	r2, [pc, #64]	; (80054d0 <main+0xdc>)
 800548e:	6013      	str	r3, [r2, #0]
  configASSERT(TaskSemaphore != NULL);
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <main+0xdc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <main+0xba>
        __asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	603b      	str	r3, [r7, #0]
    }
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <main+0xb8>

  vTaskStartScheduler();
 80054ae:	f7fc fa01 	bl	80018b4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80054b2:	e7fe      	b.n	80054b2 <main+0xbe>
 80054b4:	e0001000 	.word	0xe0001000
 80054b8:	200150b4 	.word	0x200150b4
 80054bc:	080083c4 	.word	0x080083c4
 80054c0:	08005865 	.word	0x08005865
 80054c4:	200150b8 	.word	0x200150b8
 80054c8:	080083d4 	.word	0x080083d4
 80054cc:	080058c1 	.word	0x080058c1
 80054d0:	200150bc 	.word	0x200150bc

080054d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b094      	sub	sp, #80	; 0x50
 80054d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054da:	f107 0320 	add.w	r3, r7, #32
 80054de:	2230      	movs	r2, #48	; 0x30
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 fec0 	bl	8007268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054e8:	f107 030c 	add.w	r3, r7, #12
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80054f8:	2300      	movs	r3, #0
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	4b28      	ldr	r3, [pc, #160]	; (80055a0 <SystemClock_Config+0xcc>)
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	4a27      	ldr	r2, [pc, #156]	; (80055a0 <SystemClock_Config+0xcc>)
 8005502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005506:	6413      	str	r3, [r2, #64]	; 0x40
 8005508:	4b25      	ldr	r3, [pc, #148]	; (80055a0 <SystemClock_Config+0xcc>)
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005514:	2300      	movs	r3, #0
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	4b22      	ldr	r3, [pc, #136]	; (80055a4 <SystemClock_Config+0xd0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <SystemClock_Config+0xd0>)
 800551e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	4b1f      	ldr	r3, [pc, #124]	; (80055a4 <SystemClock_Config+0xd0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005530:	2302      	movs	r3, #2
 8005532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005534:	2301      	movs	r3, #1
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005538:	2310      	movs	r3, #16
 800553a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800553c:	2302      	movs	r3, #2
 800553e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005540:	2300      	movs	r3, #0
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005544:	2308      	movs	r3, #8
 8005546:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8005548:	2332      	movs	r3, #50	; 0x32
 800554a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800554c:	2304      	movs	r3, #4
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005550:	2307      	movs	r3, #7
 8005552:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005554:	f107 0320 	add.w	r3, r7, #32
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fed9 	bl	8006310 <HAL_RCC_OscConfig>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005564:	f000 fa48 	bl	80059f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005568:	230f      	movs	r3, #15
 800556a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800556c:	2302      	movs	r3, #2
 800556e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005574:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800557a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800557e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005580:	f107 030c 	add.w	r3, r7, #12
 8005584:	2100      	movs	r1, #0
 8005586:	4618      	mov	r0, r3
 8005588:	f001 f93a 	bl	8006800 <HAL_RCC_ClockConfig>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005592:	f000 fa31 	bl	80059f8 <Error_Handler>
  }
}
 8005596:	bf00      	nop
 8005598:	3750      	adds	r7, #80	; 0x50
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40007000 	.word	0x40007000

080055a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08c      	sub	sp, #48	; 0x30
 80055ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ae:	f107 031c 	add.w	r3, r7, #28
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	609a      	str	r2, [r3, #8]
 80055ba:	60da      	str	r2, [r3, #12]
 80055bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80055be:	2300      	movs	r3, #0
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	4ba2      	ldr	r3, [pc, #648]	; (800584c <MX_GPIO_Init+0x2a4>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	4aa1      	ldr	r2, [pc, #644]	; (800584c <MX_GPIO_Init+0x2a4>)
 80055c8:	f043 0310 	orr.w	r3, r3, #16
 80055cc:	6313      	str	r3, [r2, #48]	; 0x30
 80055ce:	4b9f      	ldr	r3, [pc, #636]	; (800584c <MX_GPIO_Init+0x2a4>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	4b9b      	ldr	r3, [pc, #620]	; (800584c <MX_GPIO_Init+0x2a4>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	4a9a      	ldr	r2, [pc, #616]	; (800584c <MX_GPIO_Init+0x2a4>)
 80055e4:	f043 0304 	orr.w	r3, r3, #4
 80055e8:	6313      	str	r3, [r2, #48]	; 0x30
 80055ea:	4b98      	ldr	r3, [pc, #608]	; (800584c <MX_GPIO_Init+0x2a4>)
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	4b94      	ldr	r3, [pc, #592]	; (800584c <MX_GPIO_Init+0x2a4>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	4a93      	ldr	r2, [pc, #588]	; (800584c <MX_GPIO_Init+0x2a4>)
 8005600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005604:	6313      	str	r3, [r2, #48]	; 0x30
 8005606:	4b91      	ldr	r3, [pc, #580]	; (800584c <MX_GPIO_Init+0x2a4>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	4b8d      	ldr	r3, [pc, #564]	; (800584c <MX_GPIO_Init+0x2a4>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	4a8c      	ldr	r2, [pc, #560]	; (800584c <MX_GPIO_Init+0x2a4>)
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	6313      	str	r3, [r2, #48]	; 0x30
 8005622:	4b8a      	ldr	r3, [pc, #552]	; (800584c <MX_GPIO_Init+0x2a4>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800562e:	2300      	movs	r3, #0
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	4b86      	ldr	r3, [pc, #536]	; (800584c <MX_GPIO_Init+0x2a4>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	4a85      	ldr	r2, [pc, #532]	; (800584c <MX_GPIO_Init+0x2a4>)
 8005638:	f043 0302 	orr.w	r3, r3, #2
 800563c:	6313      	str	r3, [r2, #48]	; 0x30
 800563e:	4b83      	ldr	r3, [pc, #524]	; (800584c <MX_GPIO_Init+0x2a4>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800564a:	2300      	movs	r3, #0
 800564c:	607b      	str	r3, [r7, #4]
 800564e:	4b7f      	ldr	r3, [pc, #508]	; (800584c <MX_GPIO_Init+0x2a4>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	4a7e      	ldr	r2, [pc, #504]	; (800584c <MX_GPIO_Init+0x2a4>)
 8005654:	f043 0308 	orr.w	r3, r3, #8
 8005658:	6313      	str	r3, [r2, #48]	; 0x30
 800565a:	4b7c      	ldr	r3, [pc, #496]	; (800584c <MX_GPIO_Init+0x2a4>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	607b      	str	r3, [r7, #4]
 8005664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8005666:	2200      	movs	r2, #0
 8005668:	2108      	movs	r1, #8
 800566a:	4879      	ldr	r0, [pc, #484]	; (8005850 <MX_GPIO_Init+0x2a8>)
 800566c:	f000 fe36 	bl	80062dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8005670:	2201      	movs	r2, #1
 8005672:	2101      	movs	r1, #1
 8005674:	4877      	ldr	r0, [pc, #476]	; (8005854 <MX_GPIO_Init+0x2ac>)
 8005676:	f000 fe31 	bl	80062dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800567a:	2200      	movs	r2, #0
 800567c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8005680:	4875      	ldr	r0, [pc, #468]	; (8005858 <MX_GPIO_Init+0x2b0>)
 8005682:	f000 fe2b 	bl	80062dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8005686:	2308      	movs	r3, #8
 8005688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800568a:	2301      	movs	r3, #1
 800568c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568e:	2300      	movs	r3, #0
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005692:	2300      	movs	r3, #0
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8005696:	f107 031c 	add.w	r3, r7, #28
 800569a:	4619      	mov	r1, r3
 800569c:	486c      	ldr	r0, [pc, #432]	; (8005850 <MX_GPIO_Init+0x2a8>)
 800569e:	f000 fc81 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80056a2:	2301      	movs	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056a6:	2301      	movs	r3, #1
 80056a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ae:	2300      	movs	r3, #0
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80056b2:	f107 031c 	add.w	r3, r7, #28
 80056b6:	4619      	mov	r1, r3
 80056b8:	4866      	ldr	r0, [pc, #408]	; (8005854 <MX_GPIO_Init+0x2ac>)
 80056ba:	f000 fc73 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80056be:	2308      	movs	r3, #8
 80056c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c2:	2302      	movs	r3, #2
 80056c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ca:	2300      	movs	r3, #0
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80056ce:	2305      	movs	r3, #5
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80056d2:	f107 031c 	add.w	r3, r7, #28
 80056d6:	4619      	mov	r1, r3
 80056d8:	485e      	ldr	r0, [pc, #376]	; (8005854 <MX_GPIO_Init+0x2ac>)
 80056da:	f000 fc63 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80056de:	2301      	movs	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80056e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80056e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80056ec:	f107 031c 	add.w	r3, r7, #28
 80056f0:	4619      	mov	r1, r3
 80056f2:	485a      	ldr	r0, [pc, #360]	; (800585c <MX_GPIO_Init+0x2b4>)
 80056f4:	f000 fc56 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80056f8:	2310      	movs	r3, #16
 80056fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056fc:	2302      	movs	r3, #2
 80056fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005700:	2300      	movs	r3, #0
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005704:	2300      	movs	r3, #0
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005708:	2306      	movs	r3, #6
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800570c:	f107 031c 	add.w	r3, r7, #28
 8005710:	4619      	mov	r1, r3
 8005712:	4852      	ldr	r0, [pc, #328]	; (800585c <MX_GPIO_Init+0x2b4>)
 8005714:	f000 fc46 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005718:	23e0      	movs	r3, #224	; 0xe0
 800571a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571c:	2302      	movs	r3, #2
 800571e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005720:	2300      	movs	r3, #0
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005724:	2300      	movs	r3, #0
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005728:	2305      	movs	r3, #5
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800572c:	f107 031c 	add.w	r3, r7, #28
 8005730:	4619      	mov	r1, r3
 8005732:	484a      	ldr	r0, [pc, #296]	; (800585c <MX_GPIO_Init+0x2b4>)
 8005734:	f000 fc36 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8005738:	2304      	movs	r3, #4
 800573a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800573c:	2300      	movs	r3, #0
 800573e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005740:	2300      	movs	r3, #0
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8005744:	f107 031c 	add.w	r3, r7, #28
 8005748:	4619      	mov	r1, r3
 800574a:	4845      	ldr	r0, [pc, #276]	; (8005860 <MX_GPIO_Init+0x2b8>)
 800574c:	f000 fc2a 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8005750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005756:	2302      	movs	r3, #2
 8005758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575a:	2300      	movs	r3, #0
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800575e:	2300      	movs	r3, #0
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005762:	2305      	movs	r3, #5
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8005766:	f107 031c 	add.w	r3, r7, #28
 800576a:	4619      	mov	r1, r3
 800576c:	483c      	ldr	r0, [pc, #240]	; (8005860 <MX_GPIO_Init+0x2b8>)
 800576e:	f000 fc19 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8005772:	f24f 0310 	movw	r3, #61456	; 0xf010
 8005776:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005778:	2301      	movs	r3, #1
 800577a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577c:	2300      	movs	r3, #0
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005780:	2300      	movs	r3, #0
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005784:	f107 031c 	add.w	r3, r7, #28
 8005788:	4619      	mov	r1, r3
 800578a:	4833      	ldr	r0, [pc, #204]	; (8005858 <MX_GPIO_Init+0x2b0>)
 800578c:	f000 fc0a 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005790:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005796:	2302      	movs	r3, #2
 8005798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579a:	2300      	movs	r3, #0
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800579e:	2300      	movs	r3, #0
 80057a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80057a2:	2306      	movs	r3, #6
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057a6:	f107 031c 	add.w	r3, r7, #28
 80057aa:	4619      	mov	r1, r3
 80057ac:	4829      	ldr	r0, [pc, #164]	; (8005854 <MX_GPIO_Init+0x2ac>)
 80057ae:	f000 fbf9 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80057b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057b8:	2300      	movs	r3, #0
 80057ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80057c0:	f107 031c 	add.w	r3, r7, #28
 80057c4:	4619      	mov	r1, r3
 80057c6:	4825      	ldr	r0, [pc, #148]	; (800585c <MX_GPIO_Init+0x2b4>)
 80057c8:	f000 fbec 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80057cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80057d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d2:	2302      	movs	r3, #2
 80057d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057da:	2300      	movs	r3, #0
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80057de:	230a      	movs	r3, #10
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e2:	f107 031c 	add.w	r3, r7, #28
 80057e6:	4619      	mov	r1, r3
 80057e8:	481c      	ldr	r0, [pc, #112]	; (800585c <MX_GPIO_Init+0x2b4>)
 80057ea:	f000 fbdb 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80057ee:	2320      	movs	r3, #32
 80057f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057f2:	2300      	movs	r3, #0
 80057f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80057fa:	f107 031c 	add.w	r3, r7, #28
 80057fe:	4619      	mov	r1, r3
 8005800:	4815      	ldr	r0, [pc, #84]	; (8005858 <MX_GPIO_Init+0x2b0>)
 8005802:	f000 fbcf 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8005806:	f44f 7310 	mov.w	r3, #576	; 0x240
 800580a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800580c:	2312      	movs	r3, #18
 800580e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005810:	2300      	movs	r3, #0
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005814:	2300      	movs	r3, #0
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005818:	2304      	movs	r3, #4
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800581c:	f107 031c 	add.w	r3, r7, #28
 8005820:	4619      	mov	r1, r3
 8005822:	480f      	ldr	r0, [pc, #60]	; (8005860 <MX_GPIO_Init+0x2b8>)
 8005824:	f000 fbbe 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8005828:	2302      	movs	r3, #2
 800582a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800582c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8005830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005832:	2300      	movs	r3, #0
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8005836:	f107 031c 	add.w	r3, r7, #28
 800583a:	4619      	mov	r1, r3
 800583c:	4804      	ldr	r0, [pc, #16]	; (8005850 <MX_GPIO_Init+0x2a8>)
 800583e:	f000 fbb1 	bl	8005fa4 <HAL_GPIO_Init>

}
 8005842:	bf00      	nop
 8005844:	3730      	adds	r7, #48	; 0x30
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40023800 	.word	0x40023800
 8005850:	40021000 	.word	0x40021000
 8005854:	40020800 	.word	0x40020800
 8005858:	40020c00 	.word	0x40020c00
 800585c:	40020000 	.word	0x40020000
 8005860:	40020400 	.word	0x40020400

08005864 <manager_task>:

/* USER CODE BEGIN 4 */

static void manager_task(void *params)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	static uint32_t task_count = 0;

	while(1)
	{
		if(xSemaphoreGive(TaskSemaphore) == pdTRUE)
 800586c:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <manager_task+0x4c>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	2300      	movs	r3, #0
 8005872:	2200      	movs	r2, #0
 8005874:	2100      	movs	r1, #0
 8005876:	f7fb f8a5 	bl	80009c4 <xQueueGenericSend>
 800587a:	4603      	mov	r3, r0
 800587c:	2b01      	cmp	r3, #1
 800587e:	d110      	bne.n	80058a2 <manager_task+0x3e>
		{
			task_count++;
 8005880:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <manager_task+0x50>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3301      	adds	r3, #1
 8005886:	4a0b      	ldr	r2, [pc, #44]	; (80058b4 <manager_task+0x50>)
 8005888:	6013      	str	r3, [r2, #0]
			SEGGER_SYSVIEW_PrintfHost("Manager: Task %d added to queue",task_count);
 800588a:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <manager_task+0x50>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4619      	mov	r1, r3
 8005890:	4809      	ldr	r0, [pc, #36]	; (80058b8 <manager_task+0x54>)
 8005892:	f7ff fd2d 	bl	80052f0 <SEGGER_SYSVIEW_PrintfHost>
			get_pending_report();
 8005896:	f000 f855 	bl	8005944 <get_pending_report>
			vTaskDelay(MANAGER_TASK_DELAY);
 800589a:	2019      	movs	r0, #25
 800589c:	f7fb ffd2 	bl	8001844 <vTaskDelay>
 80058a0:	e7e4      	b.n	800586c <manager_task+0x8>
		}
		else
		{
			SEGGER_SYSVIEW_PrintfHost("Manager: Task could not be added to queue");
 80058a2:	4806      	ldr	r0, [pc, #24]	; (80058bc <manager_task+0x58>)
 80058a4:	f7ff fd24 	bl	80052f0 <SEGGER_SYSVIEW_PrintfHost>
			vTaskDelay(MANAGER_TASK_FAIL_DELAY);
 80058a8:	200a      	movs	r0, #10
 80058aa:	f7fb ffcb 	bl	8001844 <vTaskDelay>
		if(xSemaphoreGive(TaskSemaphore) == pdTRUE)
 80058ae:	e7dd      	b.n	800586c <manager_task+0x8>
 80058b0:	200150bc 	.word	0x200150bc
 80058b4:	200150c0 	.word	0x200150c0
 80058b8:	080083e4 	.word	0x080083e4
 80058bc:	08008404 	.word	0x08008404

080058c0 <employee_task>:
		}
	}
}

static void employee_task(void *params)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
	static uint32_t task_done_count = 0;
	static uint32_t task_completion_time;

	while(1)
	{
		if(xSemaphoreTake(TaskSemaphore,0) == pdTRUE)
 80058c8:	4b18      	ldr	r3, [pc, #96]	; (800592c <employee_task+0x6c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2100      	movs	r1, #0
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fb fb6c 	bl	8000fac <xQueueSemaphoreTake>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d11f      	bne.n	800591a <employee_task+0x5a>
		{
			task_done_count++;
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <employee_task+0x70>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3301      	adds	r3, #1
 80058e0:	4a13      	ldr	r2, [pc, #76]	; (8005930 <employee_task+0x70>)
 80058e2:	6013      	str	r3, [r2, #0]
			SEGGER_SYSVIEW_PrintfHost("Employee: Task %d started",task_done_count);
 80058e4:	4b12      	ldr	r3, [pc, #72]	; (8005930 <employee_task+0x70>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4619      	mov	r1, r3
 80058ea:	4812      	ldr	r0, [pc, #72]	; (8005934 <employee_task+0x74>)
 80058ec:	f7ff fd00 	bl	80052f0 <SEGGER_SYSVIEW_PrintfHost>
			set_task_led();
 80058f0:	f000 f83e 	bl	8005970 <set_task_led>
			task_completion_time = get_task_completion_time();
 80058f4:	f000 f854 	bl	80059a0 <get_task_completion_time>
 80058f8:	4603      	mov	r3, r0
 80058fa:	4a0f      	ldr	r2, [pc, #60]	; (8005938 <employee_task+0x78>)
 80058fc:	6013      	str	r3, [r2, #0]
			vTaskDelay(task_completion_time);
 80058fe:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <employee_task+0x78>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fb ff9e 	bl	8001844 <vTaskDelay>
			clear_task_led();
 8005908:	f000 f83e 	bl	8005988 <clear_task_led>
			SEGGER_SYSVIEW_PrintfHost("Employee: Task %d completed",task_done_count);
 800590c:	4b08      	ldr	r3, [pc, #32]	; (8005930 <employee_task+0x70>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4619      	mov	r1, r3
 8005912:	480a      	ldr	r0, [pc, #40]	; (800593c <employee_task+0x7c>)
 8005914:	f7ff fcec 	bl	80052f0 <SEGGER_SYSVIEW_PrintfHost>
 8005918:	e7d6      	b.n	80058c8 <employee_task+0x8>
		}
		else
		{
			SEGGER_SYSVIEW_PrintfHost("Employee: No Task available. Re-check after %d ticks",EMPLOYEE_TASK_CHECK_DELAY);
 800591a:	2101      	movs	r1, #1
 800591c:	4808      	ldr	r0, [pc, #32]	; (8005940 <employee_task+0x80>)
 800591e:	f7ff fce7 	bl	80052f0 <SEGGER_SYSVIEW_PrintfHost>
			vTaskDelay(EMPLOYEE_TASK_CHECK_DELAY);
 8005922:	2001      	movs	r0, #1
 8005924:	f7fb ff8e 	bl	8001844 <vTaskDelay>
		if(xSemaphoreTake(TaskSemaphore,0) == pdTRUE)
 8005928:	e7ce      	b.n	80058c8 <employee_task+0x8>
 800592a:	bf00      	nop
 800592c:	200150bc 	.word	0x200150bc
 8005930:	200150c4 	.word	0x200150c4
 8005934:	08008430 	.word	0x08008430
 8005938:	200150c8 	.word	0x200150c8
 800593c:	0800844c 	.word	0x0800844c
 8005940:	08008468 	.word	0x08008468

08005944 <get_pending_report>:
		}
	}
}

static void get_pending_report(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
	UBaseType_t pending_tasks;

	pending_tasks = uxSemaphoreGetCount(TaskSemaphore);
 800594a:	4b07      	ldr	r3, [pc, #28]	; (8005968 <get_pending_report+0x24>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fb fc68 	bl	8001224 <uxQueueMessagesWaiting>
 8005954:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_PrintfHost("Pending Tasks: %d",pending_tasks);
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4804      	ldr	r0, [pc, #16]	; (800596c <get_pending_report+0x28>)
 800595a:	f7ff fcc9 	bl	80052f0 <SEGGER_SYSVIEW_PrintfHost>
}
 800595e:	bf00      	nop
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200150bc 	.word	0x200150bc
 800596c:	080084a0 	.word	0x080084a0

08005970 <set_task_led>:

static void set_task_led(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,BLUE_LED_PIN,1);
 8005974:	2201      	movs	r2, #1
 8005976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800597a:	4802      	ldr	r0, [pc, #8]	; (8005984 <set_task_led+0x14>)
 800597c:	f000 fcae 	bl	80062dc <HAL_GPIO_WritePin>
}
 8005980:	bf00      	nop
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40020c00 	.word	0x40020c00

08005988 <clear_task_led>:

static void clear_task_led(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,BLUE_LED_PIN,0);
 800598c:	2200      	movs	r2, #0
 800598e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005992:	4802      	ldr	r0, [pc, #8]	; (800599c <clear_task_led+0x14>)
 8005994:	f000 fca2 	bl	80062dc <HAL_GPIO_WritePin>
}
 8005998:	bf00      	nop
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40020c00 	.word	0x40020c00

080059a0 <get_task_completion_time>:

static uint32_t get_task_completion_time(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
	uint32_t rnum;

	rnum = rand() % MAX_TASK_COMPLETION_DELAY;
 80059a6:	f001 fc67 	bl	8007278 <rand>
 80059aa:	4602      	mov	r2, r0
 80059ac:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <get_task_completion_time+0x30>)
 80059ae:	fb83 1302 	smull	r1, r3, r3, r2
 80059b2:	1159      	asrs	r1, r3, #5
 80059b4:	17d3      	asrs	r3, r2, #31
 80059b6:	1acb      	subs	r3, r1, r3
 80059b8:	2164      	movs	r1, #100	; 0x64
 80059ba:	fb01 f303 	mul.w	r3, r1, r3
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	607b      	str	r3, [r7, #4]

	return rnum + MIN_TASK_COMPLETION_TIME;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	330a      	adds	r3, #10
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	51eb851f 	.word	0x51eb851f

080059d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80059e6:	f000 f9db 	bl	8005da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40001000 	.word	0x40001000

080059f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059fc:	b672      	cpsid	i
}
 80059fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a00:	e7fe      	b.n	8005a00 <Error_Handler+0x8>
	...

08005a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <HAL_MspInit+0x50>)
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	4a10      	ldr	r2, [pc, #64]	; (8005a54 <HAL_MspInit+0x50>)
 8005a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a18:	6453      	str	r3, [r2, #68]	; 0x44
 8005a1a:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <HAL_MspInit+0x50>)
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a22:	607b      	str	r3, [r7, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a26:	2300      	movs	r3, #0
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <HAL_MspInit+0x50>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <HAL_MspInit+0x50>)
 8005a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a34:	6413      	str	r3, [r2, #64]	; 0x40
 8005a36:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <HAL_MspInit+0x50>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a42:	2003      	movs	r0, #3
 8005a44:	f000 fa79 	bl	8005f3a <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 8005a48:	f7fd f9fe 	bl	8002e48 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40023800 	.word	0x40023800

08005a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08e      	sub	sp, #56	; 0x38
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	4b33      	ldr	r3, [pc, #204]	; (8005b3c <HAL_InitTick+0xe4>)
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	4a32      	ldr	r2, [pc, #200]	; (8005b3c <HAL_InitTick+0xe4>)
 8005a72:	f043 0310 	orr.w	r3, r3, #16
 8005a76:	6413      	str	r3, [r2, #64]	; 0x40
 8005a78:	4b30      	ldr	r3, [pc, #192]	; (8005b3c <HAL_InitTick+0xe4>)
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a84:	f107 0210 	add.w	r2, r7, #16
 8005a88:	f107 0314 	add.w	r3, r7, #20
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 f8c2 	bl	8006c18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005a9e:	f001 f8a7 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 8005aa2:	6378      	str	r0, [r7, #52]	; 0x34
 8005aa4:	e004      	b.n	8005ab0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005aa6:	f001 f8a3 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	4a23      	ldr	r2, [pc, #140]	; (8005b40 <HAL_InitTick+0xe8>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	0c9b      	lsrs	r3, r3, #18
 8005aba:	3b01      	subs	r3, #1
 8005abc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005abe:	4b21      	ldr	r3, [pc, #132]	; (8005b44 <HAL_InitTick+0xec>)
 8005ac0:	4a21      	ldr	r2, [pc, #132]	; (8005b48 <HAL_InitTick+0xf0>)
 8005ac2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005ac4:	4b1f      	ldr	r3, [pc, #124]	; (8005b44 <HAL_InitTick+0xec>)
 8005ac6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005aca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <HAL_InitTick+0xec>)
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <HAL_InitTick+0xec>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <HAL_InitTick+0xec>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ade:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <HAL_InitTick+0xec>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005ae4:	4817      	ldr	r0, [pc, #92]	; (8005b44 <HAL_InitTick+0xec>)
 8005ae6:	f001 f8c9 	bl	8006c7c <HAL_TIM_Base_Init>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005af0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d11b      	bne.n	8005b30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005af8:	4812      	ldr	r0, [pc, #72]	; (8005b44 <HAL_InitTick+0xec>)
 8005afa:	f001 f919 	bl	8006d30 <HAL_TIM_Base_Start_IT>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005b04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d111      	bne.n	8005b30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b0c:	2036      	movs	r0, #54	; 0x36
 8005b0e:	f000 fa3b 	bl	8005f88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b0f      	cmp	r3, #15
 8005b16:	d808      	bhi.n	8005b2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005b18:	2200      	movs	r2, #0
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	2036      	movs	r0, #54	; 0x36
 8005b1e:	f000 fa17 	bl	8005f50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b22:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <HAL_InitTick+0xf4>)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e002      	b.n	8005b30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005b30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3738      	adds	r7, #56	; 0x38
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	431bde83 	.word	0x431bde83
 8005b44:	200150cc 	.word	0x200150cc
 8005b48:	40001000 	.word	0x40001000
 8005b4c:	2000000c 	.word	0x2000000c

08005b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b54:	e7fe      	b.n	8005b54 <NMI_Handler+0x4>

08005b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b56:	b480      	push	{r7}
 8005b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b5a:	e7fe      	b.n	8005b5a <HardFault_Handler+0x4>

08005b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b60:	e7fe      	b.n	8005b60 <MemManage_Handler+0x4>

08005b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b62:	b480      	push	{r7}
 8005b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b66:	e7fe      	b.n	8005b66 <BusFault_Handler+0x4>

08005b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b6c:	e7fe      	b.n	8005b6c <UsageFault_Handler+0x4>

08005b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b72:	bf00      	nop
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005b80:	4802      	ldr	r0, [pc, #8]	; (8005b8c <TIM6_DAC_IRQHandler+0x10>)
 8005b82:	f001 f945 	bl	8006e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005b86:	bf00      	nop
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200150cc 	.word	0x200150cc

08005b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  return 1;
 8005b94:	2301      	movs	r3, #1
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <_kill>:

int _kill(int pid, int sig)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005baa:	f001 fb15 	bl	80071d8 <__errno>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2216      	movs	r2, #22
 8005bb2:	601a      	str	r2, [r3, #0]
  return -1;
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <_exit>:

void _exit (int status)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005bc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff ffe7 	bl	8005ba0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005bd2:	e7fe      	b.n	8005bd2 <_exit+0x12>

08005bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e00a      	b.n	8005bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005be6:	f3af 8000 	nop.w
 8005bea:	4601      	mov	r1, r0
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	60ba      	str	r2, [r7, #8]
 8005bf2:	b2ca      	uxtb	r2, r1
 8005bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	dbf0      	blt.n	8005be6 <_read+0x12>
  }

  return len;
 8005c04:	687b      	ldr	r3, [r7, #4]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c36:	605a      	str	r2, [r3, #4]
  return 0;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <_isatty>:

int _isatty(int file)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005c4e:	2301      	movs	r3, #1
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c80:	4a14      	ldr	r2, [pc, #80]	; (8005cd4 <_sbrk+0x5c>)
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <_sbrk+0x60>)
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c8c:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <_sbrk+0x64>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c94:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <_sbrk+0x64>)
 8005c96:	4a12      	ldr	r2, [pc, #72]	; (8005ce0 <_sbrk+0x68>)
 8005c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c9a:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <_sbrk+0x64>)
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d207      	bcs.n	8005cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ca8:	f001 fa96 	bl	80071d8 <__errno>
 8005cac:	4603      	mov	r3, r0
 8005cae:	220c      	movs	r2, #12
 8005cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cb6:	e009      	b.n	8005ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cb8:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <_sbrk+0x64>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cbe:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <_sbrk+0x64>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	4a05      	ldr	r2, [pc, #20]	; (8005cdc <_sbrk+0x64>)
 8005cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cca:	68fb      	ldr	r3, [r7, #12]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20020000 	.word	0x20020000
 8005cd8:	00000400 	.word	0x00000400
 8005cdc:	20015114 	.word	0x20015114
 8005ce0:	20015130 	.word	0x20015130

08005ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <SystemInit+0x20>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	4a05      	ldr	r2, [pc, #20]	; (8005d04 <SystemInit+0x20>)
 8005cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cf8:	bf00      	nop
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	e000ed00 	.word	0xe000ed00

08005d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d0c:	480d      	ldr	r0, [pc, #52]	; (8005d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005d0e:	490e      	ldr	r1, [pc, #56]	; (8005d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d10:	4a0e      	ldr	r2, [pc, #56]	; (8005d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d14:	e002      	b.n	8005d1c <LoopCopyDataInit>

08005d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d1a:	3304      	adds	r3, #4

08005d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d20:	d3f9      	bcc.n	8005d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d22:	4a0b      	ldr	r2, [pc, #44]	; (8005d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005d24:	4c0b      	ldr	r4, [pc, #44]	; (8005d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d28:	e001      	b.n	8005d2e <LoopFillZerobss>

08005d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d2c:	3204      	adds	r2, #4

08005d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d30:	d3fb      	bcc.n	8005d2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005d32:	f7ff ffd7 	bl	8005ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d36:	f001 fa55 	bl	80071e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d3a:	f7ff fb5b 	bl	80053f4 <main>
  bx  lr    
 8005d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d48:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8005d4c:	08008638 	.word	0x08008638
  ldr r2, =_sbss
 8005d50:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005d54:	2001512c 	.word	0x2001512c

08005d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d58:	e7fe      	b.n	8005d58 <ADC_IRQHandler>
	...

08005d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d60:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <HAL_Init+0x40>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a0d      	ldr	r2, [pc, #52]	; (8005d9c <HAL_Init+0x40>)
 8005d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <HAL_Init+0x40>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <HAL_Init+0x40>)
 8005d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d78:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <HAL_Init+0x40>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a07      	ldr	r2, [pc, #28]	; (8005d9c <HAL_Init+0x40>)
 8005d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d84:	2003      	movs	r0, #3
 8005d86:	f000 f8d8 	bl	8005f3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	f7ff fe64 	bl	8005a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d90:	f7ff fe38 	bl	8005a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40023c00 	.word	0x40023c00

08005da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <HAL_IncTick+0x20>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <HAL_IncTick+0x24>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4413      	add	r3, r2
 8005db0:	4a04      	ldr	r2, [pc, #16]	; (8005dc4 <HAL_IncTick+0x24>)
 8005db2:	6013      	str	r3, [r2, #0]
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20000010 	.word	0x20000010
 8005dc4:	20015118 	.word	0x20015118

08005dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return uwTick;
 8005dcc:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <HAL_GetTick+0x14>)
 8005dce:	681b      	ldr	r3, [r3, #0]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	20015118 	.word	0x20015118

08005de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005df0:	4b0c      	ldr	r3, [pc, #48]	; (8005e24 <__NVIC_SetPriorityGrouping+0x44>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e12:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <__NVIC_SetPriorityGrouping+0x44>)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	60d3      	str	r3, [r2, #12]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	e000ed00 	.word	0xe000ed00

08005e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e2c:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <__NVIC_GetPriorityGrouping+0x18>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	0a1b      	lsrs	r3, r3, #8
 8005e32:	f003 0307 	and.w	r3, r3, #7
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	e000ed00 	.word	0xe000ed00

08005e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	db0b      	blt.n	8005e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	f003 021f 	and.w	r2, r3, #31
 8005e5c:	4907      	ldr	r1, [pc, #28]	; (8005e7c <__NVIC_EnableIRQ+0x38>)
 8005e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	2001      	movs	r0, #1
 8005e66:	fa00 f202 	lsl.w	r2, r0, r2
 8005e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	e000e100 	.word	0xe000e100

08005e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	6039      	str	r1, [r7, #0]
 8005e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	db0a      	blt.n	8005eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	490c      	ldr	r1, [pc, #48]	; (8005ecc <__NVIC_SetPriority+0x4c>)
 8005e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e9e:	0112      	lsls	r2, r2, #4
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ea8:	e00a      	b.n	8005ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	4908      	ldr	r1, [pc, #32]	; (8005ed0 <__NVIC_SetPriority+0x50>)
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	3b04      	subs	r3, #4
 8005eb8:	0112      	lsls	r2, r2, #4
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	761a      	strb	r2, [r3, #24]
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	e000e100 	.word	0xe000e100
 8005ed0:	e000ed00 	.word	0xe000ed00

08005ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b089      	sub	sp, #36	; 0x24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f1c3 0307 	rsb	r3, r3, #7
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	bf28      	it	cs
 8005ef2:	2304      	movcs	r3, #4
 8005ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	2b06      	cmp	r3, #6
 8005efc:	d902      	bls.n	8005f04 <NVIC_EncodePriority+0x30>
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3b03      	subs	r3, #3
 8005f02:	e000      	b.n	8005f06 <NVIC_EncodePriority+0x32>
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	43da      	mvns	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	401a      	ands	r2, r3
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	43d9      	mvns	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f2c:	4313      	orrs	r3, r2
         );
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3724      	adds	r7, #36	; 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff ff4c 	bl	8005de0 <__NVIC_SetPriorityGrouping>
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	4603      	mov	r3, r0
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f62:	f7ff ff61 	bl	8005e28 <__NVIC_GetPriorityGrouping>
 8005f66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	6978      	ldr	r0, [r7, #20]
 8005f6e:	f7ff ffb1 	bl	8005ed4 <NVIC_EncodePriority>
 8005f72:	4602      	mov	r2, r0
 8005f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff ff80 	bl	8005e80 <__NVIC_SetPriority>
}
 8005f80:	bf00      	nop
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff ff54 	bl	8005e44 <__NVIC_EnableIRQ>
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b089      	sub	sp, #36	; 0x24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	e16b      	b.n	8006298 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	f040 815a 	bne.w	8006292 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d005      	beq.n	8005ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d130      	bne.n	8006058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	2203      	movs	r2, #3
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	43db      	mvns	r3, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4013      	ands	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4313      	orrs	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800602c:	2201      	movs	r2, #1
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	4013      	ands	r3, r2
 800603a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	091b      	lsrs	r3, r3, #4
 8006042:	f003 0201 	and.w	r2, r3, #1
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	4313      	orrs	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	2b03      	cmp	r3, #3
 8006062:	d017      	beq.n	8006094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	2203      	movs	r2, #3
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4013      	ands	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4313      	orrs	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d123      	bne.n	80060e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	08da      	lsrs	r2, r3, #3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3208      	adds	r2, #8
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	220f      	movs	r2, #15
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4013      	ands	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	08da      	lsrs	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3208      	adds	r2, #8
 80060e2:	69b9      	ldr	r1, [r7, #24]
 80060e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	2203      	movs	r2, #3
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f003 0203 	and.w	r2, r3, #3
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4313      	orrs	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 80b4 	beq.w	8006292 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	4b60      	ldr	r3, [pc, #384]	; (80062b0 <HAL_GPIO_Init+0x30c>)
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	4a5f      	ldr	r2, [pc, #380]	; (80062b0 <HAL_GPIO_Init+0x30c>)
 8006134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006138:	6453      	str	r3, [r2, #68]	; 0x44
 800613a:	4b5d      	ldr	r3, [pc, #372]	; (80062b0 <HAL_GPIO_Init+0x30c>)
 800613c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006146:	4a5b      	ldr	r2, [pc, #364]	; (80062b4 <HAL_GPIO_Init+0x310>)
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	3302      	adds	r3, #2
 800614e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	220f      	movs	r2, #15
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43db      	mvns	r3, r3
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	4013      	ands	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a52      	ldr	r2, [pc, #328]	; (80062b8 <HAL_GPIO_Init+0x314>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d02b      	beq.n	80061ca <HAL_GPIO_Init+0x226>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a51      	ldr	r2, [pc, #324]	; (80062bc <HAL_GPIO_Init+0x318>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d025      	beq.n	80061c6 <HAL_GPIO_Init+0x222>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a50      	ldr	r2, [pc, #320]	; (80062c0 <HAL_GPIO_Init+0x31c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d01f      	beq.n	80061c2 <HAL_GPIO_Init+0x21e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a4f      	ldr	r2, [pc, #316]	; (80062c4 <HAL_GPIO_Init+0x320>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d019      	beq.n	80061be <HAL_GPIO_Init+0x21a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a4e      	ldr	r2, [pc, #312]	; (80062c8 <HAL_GPIO_Init+0x324>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <HAL_GPIO_Init+0x216>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a4d      	ldr	r2, [pc, #308]	; (80062cc <HAL_GPIO_Init+0x328>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00d      	beq.n	80061b6 <HAL_GPIO_Init+0x212>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a4c      	ldr	r2, [pc, #304]	; (80062d0 <HAL_GPIO_Init+0x32c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d007      	beq.n	80061b2 <HAL_GPIO_Init+0x20e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a4b      	ldr	r2, [pc, #300]	; (80062d4 <HAL_GPIO_Init+0x330>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d101      	bne.n	80061ae <HAL_GPIO_Init+0x20a>
 80061aa:	2307      	movs	r3, #7
 80061ac:	e00e      	b.n	80061cc <HAL_GPIO_Init+0x228>
 80061ae:	2308      	movs	r3, #8
 80061b0:	e00c      	b.n	80061cc <HAL_GPIO_Init+0x228>
 80061b2:	2306      	movs	r3, #6
 80061b4:	e00a      	b.n	80061cc <HAL_GPIO_Init+0x228>
 80061b6:	2305      	movs	r3, #5
 80061b8:	e008      	b.n	80061cc <HAL_GPIO_Init+0x228>
 80061ba:	2304      	movs	r3, #4
 80061bc:	e006      	b.n	80061cc <HAL_GPIO_Init+0x228>
 80061be:	2303      	movs	r3, #3
 80061c0:	e004      	b.n	80061cc <HAL_GPIO_Init+0x228>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e002      	b.n	80061cc <HAL_GPIO_Init+0x228>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <HAL_GPIO_Init+0x228>
 80061ca:	2300      	movs	r3, #0
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	f002 0203 	and.w	r2, r2, #3
 80061d2:	0092      	lsls	r2, r2, #2
 80061d4:	4093      	lsls	r3, r2
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4313      	orrs	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061dc:	4935      	ldr	r1, [pc, #212]	; (80062b4 <HAL_GPIO_Init+0x310>)
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	089b      	lsrs	r3, r3, #2
 80061e2:	3302      	adds	r3, #2
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061ea:	4b3b      	ldr	r3, [pc, #236]	; (80062d8 <HAL_GPIO_Init+0x334>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	43db      	mvns	r3, r3
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	4013      	ands	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800620e:	4a32      	ldr	r2, [pc, #200]	; (80062d8 <HAL_GPIO_Init+0x334>)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006214:	4b30      	ldr	r3, [pc, #192]	; (80062d8 <HAL_GPIO_Init+0x334>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	43db      	mvns	r3, r3
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	4013      	ands	r3, r2
 8006222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006238:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <HAL_GPIO_Init+0x334>)
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800623e:	4b26      	ldr	r3, [pc, #152]	; (80062d8 <HAL_GPIO_Init+0x334>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	43db      	mvns	r3, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	4013      	ands	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006262:	4a1d      	ldr	r2, [pc, #116]	; (80062d8 <HAL_GPIO_Init+0x334>)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006268:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <HAL_GPIO_Init+0x334>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	43db      	mvns	r3, r3
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	4013      	ands	r3, r2
 8006276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800628c:	4a12      	ldr	r2, [pc, #72]	; (80062d8 <HAL_GPIO_Init+0x334>)
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	3301      	adds	r3, #1
 8006296:	61fb      	str	r3, [r7, #28]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2b0f      	cmp	r3, #15
 800629c:	f67f ae90 	bls.w	8005fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	3724      	adds	r7, #36	; 0x24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40023800 	.word	0x40023800
 80062b4:	40013800 	.word	0x40013800
 80062b8:	40020000 	.word	0x40020000
 80062bc:	40020400 	.word	0x40020400
 80062c0:	40020800 	.word	0x40020800
 80062c4:	40020c00 	.word	0x40020c00
 80062c8:	40021000 	.word	0x40021000
 80062cc:	40021400 	.word	0x40021400
 80062d0:	40021800 	.word	0x40021800
 80062d4:	40021c00 	.word	0x40021c00
 80062d8:	40013c00 	.word	0x40013c00

080062dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	807b      	strh	r3, [r7, #2]
 80062e8:	4613      	mov	r3, r2
 80062ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062ec:	787b      	ldrb	r3, [r7, #1]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062f2:	887a      	ldrh	r2, [r7, #2]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062f8:	e003      	b.n	8006302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062fa:	887b      	ldrh	r3, [r7, #2]
 80062fc:	041a      	lsls	r2, r3, #16
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	619a      	str	r2, [r3, #24]
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e267      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d075      	beq.n	800641a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800632e:	4b88      	ldr	r3, [pc, #544]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b04      	cmp	r3, #4
 8006338:	d00c      	beq.n	8006354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800633a:	4b85      	ldr	r3, [pc, #532]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006342:	2b08      	cmp	r3, #8
 8006344:	d112      	bne.n	800636c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006346:	4b82      	ldr	r3, [pc, #520]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006352:	d10b      	bne.n	800636c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006354:	4b7e      	ldr	r3, [pc, #504]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05b      	beq.n	8006418 <HAL_RCC_OscConfig+0x108>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d157      	bne.n	8006418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e242      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006374:	d106      	bne.n	8006384 <HAL_RCC_OscConfig+0x74>
 8006376:	4b76      	ldr	r3, [pc, #472]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a75      	ldr	r2, [pc, #468]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 800637c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e01d      	b.n	80063c0 <HAL_RCC_OscConfig+0xb0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800638c:	d10c      	bne.n	80063a8 <HAL_RCC_OscConfig+0x98>
 800638e:	4b70      	ldr	r3, [pc, #448]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a6f      	ldr	r2, [pc, #444]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	4b6d      	ldr	r3, [pc, #436]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a6c      	ldr	r2, [pc, #432]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 80063a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e00b      	b.n	80063c0 <HAL_RCC_OscConfig+0xb0>
 80063a8:	4b69      	ldr	r3, [pc, #420]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a68      	ldr	r2, [pc, #416]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 80063ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4b66      	ldr	r3, [pc, #408]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a65      	ldr	r2, [pc, #404]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 80063ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d013      	beq.n	80063f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c8:	f7ff fcfe 	bl	8005dc8 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063d0:	f7ff fcfa 	bl	8005dc8 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b64      	cmp	r3, #100	; 0x64
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e207      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e2:	4b5b      	ldr	r3, [pc, #364]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0xc0>
 80063ee:	e014      	b.n	800641a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f7ff fcea 	bl	8005dc8 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063f8:	f7ff fce6 	bl	8005dc8 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b64      	cmp	r3, #100	; 0x64
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e1f3      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800640a:	4b51      	ldr	r3, [pc, #324]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0xe8>
 8006416:	e000      	b.n	800641a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d063      	beq.n	80064ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006426:	4b4a      	ldr	r3, [pc, #296]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 030c 	and.w	r3, r3, #12
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006432:	4b47      	ldr	r3, [pc, #284]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800643a:	2b08      	cmp	r3, #8
 800643c:	d11c      	bne.n	8006478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800643e:	4b44      	ldr	r3, [pc, #272]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d116      	bne.n	8006478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800644a:	4b41      	ldr	r3, [pc, #260]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <HAL_RCC_OscConfig+0x152>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d001      	beq.n	8006462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e1c7      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	4b3b      	ldr	r3, [pc, #236]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	4937      	ldr	r1, [pc, #220]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006476:	e03a      	b.n	80064ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d020      	beq.n	80064c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006480:	4b34      	ldr	r3, [pc, #208]	; (8006554 <HAL_RCC_OscConfig+0x244>)
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f7ff fc9f 	bl	8005dc8 <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800648e:	f7ff fc9b 	bl	8005dc8 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e1a8      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a0:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0f0      	beq.n	800648e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ac:	4b28      	ldr	r3, [pc, #160]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4925      	ldr	r1, [pc, #148]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	600b      	str	r3, [r1, #0]
 80064c0:	e015      	b.n	80064ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064c2:	4b24      	ldr	r3, [pc, #144]	; (8006554 <HAL_RCC_OscConfig+0x244>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c8:	f7ff fc7e 	bl	8005dc8 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d0:	f7ff fc7a 	bl	8005dc8 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e187      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064e2:	4b1b      	ldr	r3, [pc, #108]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f0      	bne.n	80064d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d036      	beq.n	8006568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d016      	beq.n	8006530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006502:	4b15      	ldr	r3, [pc, #84]	; (8006558 <HAL_RCC_OscConfig+0x248>)
 8006504:	2201      	movs	r2, #1
 8006506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006508:	f7ff fc5e 	bl	8005dc8 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006510:	f7ff fc5a 	bl	8005dc8 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e167      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCC_OscConfig+0x240>)
 8006524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f0      	beq.n	8006510 <HAL_RCC_OscConfig+0x200>
 800652e:	e01b      	b.n	8006568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006530:	4b09      	ldr	r3, [pc, #36]	; (8006558 <HAL_RCC_OscConfig+0x248>)
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006536:	f7ff fc47 	bl	8005dc8 <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800653c:	e00e      	b.n	800655c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800653e:	f7ff fc43 	bl	8005dc8 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d907      	bls.n	800655c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e150      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
 8006550:	40023800 	.word	0x40023800
 8006554:	42470000 	.word	0x42470000
 8006558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800655c:	4b88      	ldr	r3, [pc, #544]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 800655e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ea      	bne.n	800653e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 8097 	beq.w	80066a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800657a:	4b81      	ldr	r3, [pc, #516]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10f      	bne.n	80065a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
 800658a:	4b7d      	ldr	r3, [pc, #500]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	4a7c      	ldr	r2, [pc, #496]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 8006590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006594:	6413      	str	r3, [r2, #64]	; 0x40
 8006596:	4b7a      	ldr	r3, [pc, #488]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659e:	60bb      	str	r3, [r7, #8]
 80065a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065a2:	2301      	movs	r3, #1
 80065a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a6:	4b77      	ldr	r3, [pc, #476]	; (8006784 <HAL_RCC_OscConfig+0x474>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d118      	bne.n	80065e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065b2:	4b74      	ldr	r3, [pc, #464]	; (8006784 <HAL_RCC_OscConfig+0x474>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a73      	ldr	r2, [pc, #460]	; (8006784 <HAL_RCC_OscConfig+0x474>)
 80065b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065be:	f7ff fc03 	bl	8005dc8 <HAL_GetTick>
 80065c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c6:	f7ff fbff 	bl	8005dc8 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e10c      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d8:	4b6a      	ldr	r3, [pc, #424]	; (8006784 <HAL_RCC_OscConfig+0x474>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0f0      	beq.n	80065c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d106      	bne.n	80065fa <HAL_RCC_OscConfig+0x2ea>
 80065ec:	4b64      	ldr	r3, [pc, #400]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 80065ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f0:	4a63      	ldr	r2, [pc, #396]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	6713      	str	r3, [r2, #112]	; 0x70
 80065f8:	e01c      	b.n	8006634 <HAL_RCC_OscConfig+0x324>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b05      	cmp	r3, #5
 8006600:	d10c      	bne.n	800661c <HAL_RCC_OscConfig+0x30c>
 8006602:	4b5f      	ldr	r3, [pc, #380]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006606:	4a5e      	ldr	r2, [pc, #376]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 8006608:	f043 0304 	orr.w	r3, r3, #4
 800660c:	6713      	str	r3, [r2, #112]	; 0x70
 800660e:	4b5c      	ldr	r3, [pc, #368]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	4a5b      	ldr	r2, [pc, #364]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	6713      	str	r3, [r2, #112]	; 0x70
 800661a:	e00b      	b.n	8006634 <HAL_RCC_OscConfig+0x324>
 800661c:	4b58      	ldr	r3, [pc, #352]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 800661e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006620:	4a57      	ldr	r2, [pc, #348]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	6713      	str	r3, [r2, #112]	; 0x70
 8006628:	4b55      	ldr	r3, [pc, #340]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	4a54      	ldr	r2, [pc, #336]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 800662e:	f023 0304 	bic.w	r3, r3, #4
 8006632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d015      	beq.n	8006668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663c:	f7ff fbc4 	bl	8005dc8 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006642:	e00a      	b.n	800665a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006644:	f7ff fbc0 	bl	8005dc8 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006652:	4293      	cmp	r3, r2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e0cb      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800665a:	4b49      	ldr	r3, [pc, #292]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0ee      	beq.n	8006644 <HAL_RCC_OscConfig+0x334>
 8006666:	e014      	b.n	8006692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006668:	f7ff fbae 	bl	8005dc8 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800666e:	e00a      	b.n	8006686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006670:	f7ff fbaa 	bl	8005dc8 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f241 3288 	movw	r2, #5000	; 0x1388
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e0b5      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006686:	4b3e      	ldr	r3, [pc, #248]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 8006688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1ee      	bne.n	8006670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006692:	7dfb      	ldrb	r3, [r7, #23]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d105      	bne.n	80066a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006698:	4b39      	ldr	r3, [pc, #228]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	4a38      	ldr	r2, [pc, #224]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 800669e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80a1 	beq.w	80067f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066ae:	4b34      	ldr	r3, [pc, #208]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 030c 	and.w	r3, r3, #12
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d05c      	beq.n	8006774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d141      	bne.n	8006746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c2:	4b31      	ldr	r3, [pc, #196]	; (8006788 <HAL_RCC_OscConfig+0x478>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c8:	f7ff fb7e 	bl	8005dc8 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d0:	f7ff fb7a 	bl	8005dc8 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e087      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e2:	4b27      	ldr	r3, [pc, #156]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69da      	ldr	r2, [r3, #28]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	019b      	lsls	r3, r3, #6
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	3b01      	subs	r3, #1
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	061b      	lsls	r3, r3, #24
 8006712:	491b      	ldr	r1, [pc, #108]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 8006714:	4313      	orrs	r3, r2
 8006716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006718:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <HAL_RCC_OscConfig+0x478>)
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800671e:	f7ff fb53 	bl	8005dc8 <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006726:	f7ff fb4f 	bl	8005dc8 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e05c      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006738:	4b11      	ldr	r3, [pc, #68]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f0      	beq.n	8006726 <HAL_RCC_OscConfig+0x416>
 8006744:	e054      	b.n	80067f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006746:	4b10      	ldr	r3, [pc, #64]	; (8006788 <HAL_RCC_OscConfig+0x478>)
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674c:	f7ff fb3c 	bl	8005dc8 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006754:	f7ff fb38 	bl	8005dc8 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e045      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <HAL_RCC_OscConfig+0x470>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0x444>
 8006772:	e03d      	b.n	80067f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d107      	bne.n	800678c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e038      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
 8006780:	40023800 	.word	0x40023800
 8006784:	40007000 	.word	0x40007000
 8006788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800678c:	4b1b      	ldr	r3, [pc, #108]	; (80067fc <HAL_RCC_OscConfig+0x4ec>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d028      	beq.n	80067ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d121      	bne.n	80067ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d11a      	bne.n	80067ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067bc:	4013      	ands	r3, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d111      	bne.n	80067ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	3b01      	subs	r3, #1
 80067d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067d8:	429a      	cmp	r2, r3
 80067da:	d107      	bne.n	80067ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d001      	beq.n	80067f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40023800 	.word	0x40023800

08006800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e0cc      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006814:	4b68      	ldr	r3, [pc, #416]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d90c      	bls.n	800683c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006822:	4b65      	ldr	r3, [pc, #404]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800682a:	4b63      	ldr	r3, [pc, #396]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d001      	beq.n	800683c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e0b8      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d020      	beq.n	800688a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006854:	4b59      	ldr	r3, [pc, #356]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	4a58      	ldr	r2, [pc, #352]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800685e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800686c:	4b53      	ldr	r3, [pc, #332]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	4a52      	ldr	r2, [pc, #328]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006878:	4b50      	ldr	r3, [pc, #320]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	494d      	ldr	r1, [pc, #308]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	4313      	orrs	r3, r2
 8006888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d044      	beq.n	8006920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d107      	bne.n	80068ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689e:	4b47      	ldr	r3, [pc, #284]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d119      	bne.n	80068de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e07f      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d003      	beq.n	80068be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d107      	bne.n	80068ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068be:	4b3f      	ldr	r3, [pc, #252]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e06f      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ce:	4b3b      	ldr	r3, [pc, #236]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e067      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068de:	4b37      	ldr	r3, [pc, #220]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f023 0203 	bic.w	r2, r3, #3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	4934      	ldr	r1, [pc, #208]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068f0:	f7ff fa6a 	bl	8005dc8 <HAL_GetTick>
 80068f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f6:	e00a      	b.n	800690e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f8:	f7ff fa66 	bl	8005dc8 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	f241 3288 	movw	r2, #5000	; 0x1388
 8006906:	4293      	cmp	r3, r2
 8006908:	d901      	bls.n	800690e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e04f      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690e:	4b2b      	ldr	r3, [pc, #172]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 020c 	and.w	r2, r3, #12
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	429a      	cmp	r2, r3
 800691e:	d1eb      	bne.n	80068f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006920:	4b25      	ldr	r3, [pc, #148]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d20c      	bcs.n	8006948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692e:	4b22      	ldr	r3, [pc, #136]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006936:	4b20      	ldr	r3, [pc, #128]	; (80069b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d001      	beq.n	8006948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e032      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006954:	4b19      	ldr	r3, [pc, #100]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4916      	ldr	r1, [pc, #88]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	4313      	orrs	r3, r2
 8006964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006972:	4b12      	ldr	r3, [pc, #72]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	490e      	ldr	r1, [pc, #56]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	4313      	orrs	r3, r2
 8006984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006986:	f000 f821 	bl	80069cc <HAL_RCC_GetSysClockFreq>
 800698a:	4602      	mov	r2, r0
 800698c:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	490a      	ldr	r1, [pc, #40]	; (80069c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006998:	5ccb      	ldrb	r3, [r1, r3]
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <HAL_RCC_ClockConfig+0x1c4>)
 80069a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069a2:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <HAL_RCC_ClockConfig+0x1c8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff f856 	bl	8005a58 <HAL_InitTick>

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40023c00 	.word	0x40023c00
 80069bc:	40023800 	.word	0x40023800
 80069c0:	080084c8 	.word	0x080084c8
 80069c4:	20000008 	.word	0x20000008
 80069c8:	2000000c 	.word	0x2000000c

080069cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d0:	b094      	sub	sp, #80	; 0x50
 80069d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	647b      	str	r3, [r7, #68]	; 0x44
 80069d8:	2300      	movs	r3, #0
 80069da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069dc:	2300      	movs	r3, #0
 80069de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069e4:	4b79      	ldr	r3, [pc, #484]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 030c 	and.w	r3, r3, #12
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d00d      	beq.n	8006a0c <HAL_RCC_GetSysClockFreq+0x40>
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	f200 80e1 	bhi.w	8006bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0x34>
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d003      	beq.n	8006a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80069fe:	e0db      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a00:	4b73      	ldr	r3, [pc, #460]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a04:	e0db      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a06:	4b73      	ldr	r3, [pc, #460]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a0a:	e0d8      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a0c:	4b6f      	ldr	r3, [pc, #444]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a16:	4b6d      	ldr	r3, [pc, #436]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d063      	beq.n	8006aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a22:	4b6a      	ldr	r3, [pc, #424]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	099b      	lsrs	r3, r3, #6
 8006a28:	2200      	movs	r2, #0
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
 8006a36:	2300      	movs	r3, #0
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
 8006a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a3e:	4622      	mov	r2, r4
 8006a40:	462b      	mov	r3, r5
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f04f 0100 	mov.w	r1, #0
 8006a4a:	0159      	lsls	r1, r3, #5
 8006a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a50:	0150      	lsls	r0, r2, #5
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4621      	mov	r1, r4
 8006a58:	1a51      	subs	r1, r2, r1
 8006a5a:	6139      	str	r1, [r7, #16]
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	f04f 0300 	mov.w	r3, #0
 8006a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a70:	4659      	mov	r1, fp
 8006a72:	018b      	lsls	r3, r1, #6
 8006a74:	4651      	mov	r1, sl
 8006a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a7a:	4651      	mov	r1, sl
 8006a7c:	018a      	lsls	r2, r1, #6
 8006a7e:	4651      	mov	r1, sl
 8006a80:	ebb2 0801 	subs.w	r8, r2, r1
 8006a84:	4659      	mov	r1, fp
 8006a86:	eb63 0901 	sbc.w	r9, r3, r1
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a9e:	4690      	mov	r8, r2
 8006aa0:	4699      	mov	r9, r3
 8006aa2:	4623      	mov	r3, r4
 8006aa4:	eb18 0303 	adds.w	r3, r8, r3
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	462b      	mov	r3, r5
 8006aac:	eb49 0303 	adc.w	r3, r9, r3
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006abe:	4629      	mov	r1, r5
 8006ac0:	024b      	lsls	r3, r1, #9
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ac8:	4621      	mov	r1, r4
 8006aca:	024a      	lsls	r2, r1, #9
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006adc:	f7f9 fc18 	bl	8000310 <__aeabi_uldivmod>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae8:	e058      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aea:	4b38      	ldr	r3, [pc, #224]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	099b      	lsrs	r3, r3, #6
 8006af0:	2200      	movs	r2, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	4611      	mov	r1, r2
 8006af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006afa:	623b      	str	r3, [r7, #32]
 8006afc:	2300      	movs	r3, #0
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
 8006b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b04:	4642      	mov	r2, r8
 8006b06:	464b      	mov	r3, r9
 8006b08:	f04f 0000 	mov.w	r0, #0
 8006b0c:	f04f 0100 	mov.w	r1, #0
 8006b10:	0159      	lsls	r1, r3, #5
 8006b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b16:	0150      	lsls	r0, r2, #5
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b22:	4649      	mov	r1, r9
 8006b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8006b40:	eb63 050b 	sbc.w	r5, r3, fp
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	00eb      	lsls	r3, r5, #3
 8006b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b52:	00e2      	lsls	r2, r4, #3
 8006b54:	4614      	mov	r4, r2
 8006b56:	461d      	mov	r5, r3
 8006b58:	4643      	mov	r3, r8
 8006b5a:	18e3      	adds	r3, r4, r3
 8006b5c:	603b      	str	r3, [r7, #0]
 8006b5e:	464b      	mov	r3, r9
 8006b60:	eb45 0303 	adc.w	r3, r5, r3
 8006b64:	607b      	str	r3, [r7, #4]
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b72:	4629      	mov	r1, r5
 8006b74:	028b      	lsls	r3, r1, #10
 8006b76:	4621      	mov	r1, r4
 8006b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	028a      	lsls	r2, r1, #10
 8006b80:	4610      	mov	r0, r2
 8006b82:	4619      	mov	r1, r3
 8006b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b86:	2200      	movs	r2, #0
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	61fa      	str	r2, [r7, #28]
 8006b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b90:	f7f9 fbbe 	bl	8000310 <__aeabi_uldivmod>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4613      	mov	r3, r2
 8006b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bb6:	e002      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3750      	adds	r7, #80	; 0x50
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bca:	bf00      	nop
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	00f42400 	.word	0x00f42400
 8006bd4:	007a1200 	.word	0x007a1200

08006bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	; (8006bec <HAL_RCC_GetHCLKFreq+0x14>)
 8006bde:	681b      	ldr	r3, [r3, #0]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000008 	.word	0x20000008

08006bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bf4:	f7ff fff0 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	0a9b      	lsrs	r3, r3, #10
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	4903      	ldr	r1, [pc, #12]	; (8006c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c06:	5ccb      	ldrb	r3, [r1, r3]
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40023800 	.word	0x40023800
 8006c14:	080084d8 	.word	0x080084d8

08006c18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	220f      	movs	r2, #15
 8006c26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c28:	4b12      	ldr	r3, [pc, #72]	; (8006c74 <HAL_RCC_GetClockConfig+0x5c>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 0203 	and.w	r2, r3, #3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c34:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <HAL_RCC_GetClockConfig+0x5c>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c40:	4b0c      	ldr	r3, [pc, #48]	; (8006c74 <HAL_RCC_GetClockConfig+0x5c>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c4c:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <HAL_RCC_GetClockConfig+0x5c>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	08db      	lsrs	r3, r3, #3
 8006c52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c5a:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <HAL_RCC_GetClockConfig+0x60>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0207 	and.w	r2, r3, #7
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	601a      	str	r2, [r3, #0]
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	40023800 	.word	0x40023800
 8006c78:	40023c00 	.word	0x40023c00

08006c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e041      	b.n	8006d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f839 	bl	8006d1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f000 f9d8 	bl	8007070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d001      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e04e      	b.n	8006de6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0201 	orr.w	r2, r2, #1
 8006d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a23      	ldr	r2, [pc, #140]	; (8006df4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d022      	beq.n	8006db0 <HAL_TIM_Base_Start_IT+0x80>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d01d      	beq.n	8006db0 <HAL_TIM_Base_Start_IT+0x80>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1f      	ldr	r2, [pc, #124]	; (8006df8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d018      	beq.n	8006db0 <HAL_TIM_Base_Start_IT+0x80>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <HAL_TIM_Base_Start_IT+0xcc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <HAL_TIM_Base_Start_IT+0x80>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1c      	ldr	r2, [pc, #112]	; (8006e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00e      	beq.n	8006db0 <HAL_TIM_Base_Start_IT+0x80>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1b      	ldr	r2, [pc, #108]	; (8006e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <HAL_TIM_Base_Start_IT+0x80>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a19      	ldr	r2, [pc, #100]	; (8006e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d004      	beq.n	8006db0 <HAL_TIM_Base_Start_IT+0x80>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a18      	ldr	r2, [pc, #96]	; (8006e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d111      	bne.n	8006dd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b06      	cmp	r3, #6
 8006dc0:	d010      	beq.n	8006de4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0201 	orr.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd2:	e007      	b.n	8006de4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40010000 	.word	0x40010000
 8006df8:	40000400 	.word	0x40000400
 8006dfc:	40000800 	.word	0x40000800
 8006e00:	40000c00 	.word	0x40000c00
 8006e04:	40010400 	.word	0x40010400
 8006e08:	40014000 	.word	0x40014000
 8006e0c:	40001800 	.word	0x40001800

08006e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d122      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d11b      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0202 	mvn.w	r2, #2
 8006e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f8ee 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006e58:	e005      	b.n	8006e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f8e0 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f8f1 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d122      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d11b      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0204 	mvn.w	r2, #4
 8006e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2202      	movs	r2, #2
 8006e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f8c4 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006eac:	e005      	b.n	8006eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f8b6 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f8c7 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d122      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d11b      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0208 	mvn.w	r2, #8
 8006ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2204      	movs	r2, #4
 8006eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f89a 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006f00:	e005      	b.n	8006f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f88c 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f89d 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	d122      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0310 	and.w	r3, r3, #16
 8006f2c:	2b10      	cmp	r3, #16
 8006f2e:	d11b      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0210 	mvn.w	r2, #16
 8006f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f870 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006f54:	e005      	b.n	8006f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f862 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f873 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d10e      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d107      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0201 	mvn.w	r2, #1
 8006f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fe fd20 	bl	80059d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f9e:	2b80      	cmp	r3, #128	; 0x80
 8006fa0:	d10e      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fac:	2b80      	cmp	r3, #128	; 0x80
 8006fae:	d107      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f902 	bl	80071c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fca:	2b40      	cmp	r3, #64	; 0x40
 8006fcc:	d10e      	bne.n	8006fec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b40      	cmp	r3, #64	; 0x40
 8006fda:	d107      	bne.n	8006fec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f838 	bl	800705c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d10e      	bne.n	8007018 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b20      	cmp	r3, #32
 8007006:	d107      	bne.n	8007018 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0220 	mvn.w	r2, #32
 8007010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f8cc 	bl	80071b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a40      	ldr	r2, [pc, #256]	; (8007184 <TIM_Base_SetConfig+0x114>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d013      	beq.n	80070b0 <TIM_Base_SetConfig+0x40>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708e:	d00f      	beq.n	80070b0 <TIM_Base_SetConfig+0x40>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a3d      	ldr	r2, [pc, #244]	; (8007188 <TIM_Base_SetConfig+0x118>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d00b      	beq.n	80070b0 <TIM_Base_SetConfig+0x40>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a3c      	ldr	r2, [pc, #240]	; (800718c <TIM_Base_SetConfig+0x11c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d007      	beq.n	80070b0 <TIM_Base_SetConfig+0x40>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a3b      	ldr	r2, [pc, #236]	; (8007190 <TIM_Base_SetConfig+0x120>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d003      	beq.n	80070b0 <TIM_Base_SetConfig+0x40>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a3a      	ldr	r2, [pc, #232]	; (8007194 <TIM_Base_SetConfig+0x124>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d108      	bne.n	80070c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a2f      	ldr	r2, [pc, #188]	; (8007184 <TIM_Base_SetConfig+0x114>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d02b      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d0:	d027      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a2c      	ldr	r2, [pc, #176]	; (8007188 <TIM_Base_SetConfig+0x118>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d023      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a2b      	ldr	r2, [pc, #172]	; (800718c <TIM_Base_SetConfig+0x11c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d01f      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a2a      	ldr	r2, [pc, #168]	; (8007190 <TIM_Base_SetConfig+0x120>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d01b      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a29      	ldr	r2, [pc, #164]	; (8007194 <TIM_Base_SetConfig+0x124>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d017      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a28      	ldr	r2, [pc, #160]	; (8007198 <TIM_Base_SetConfig+0x128>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d013      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a27      	ldr	r2, [pc, #156]	; (800719c <TIM_Base_SetConfig+0x12c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00f      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a26      	ldr	r2, [pc, #152]	; (80071a0 <TIM_Base_SetConfig+0x130>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00b      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a25      	ldr	r2, [pc, #148]	; (80071a4 <TIM_Base_SetConfig+0x134>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d007      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a24      	ldr	r2, [pc, #144]	; (80071a8 <TIM_Base_SetConfig+0x138>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d003      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a23      	ldr	r2, [pc, #140]	; (80071ac <TIM_Base_SetConfig+0x13c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d108      	bne.n	8007134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a0a      	ldr	r2, [pc, #40]	; (8007184 <TIM_Base_SetConfig+0x114>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_Base_SetConfig+0xf8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a0c      	ldr	r2, [pc, #48]	; (8007194 <TIM_Base_SetConfig+0x124>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d103      	bne.n	8007170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	615a      	str	r2, [r3, #20]
}
 8007176:	bf00      	nop
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40010000 	.word	0x40010000
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40000c00 	.word	0x40000c00
 8007194:	40010400 	.word	0x40010400
 8007198:	40014000 	.word	0x40014000
 800719c:	40014400 	.word	0x40014400
 80071a0:	40014800 	.word	0x40014800
 80071a4:	40001800 	.word	0x40001800
 80071a8:	40001c00 	.word	0x40001c00
 80071ac:	40002000 	.word	0x40002000

080071b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <__errno>:
 80071d8:	4b01      	ldr	r3, [pc, #4]	; (80071e0 <__errno+0x8>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	20000014 	.word	0x20000014

080071e4 <__libc_init_array>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	4d0d      	ldr	r5, [pc, #52]	; (800721c <__libc_init_array+0x38>)
 80071e8:	4c0d      	ldr	r4, [pc, #52]	; (8007220 <__libc_init_array+0x3c>)
 80071ea:	1b64      	subs	r4, r4, r5
 80071ec:	10a4      	asrs	r4, r4, #2
 80071ee:	2600      	movs	r6, #0
 80071f0:	42a6      	cmp	r6, r4
 80071f2:	d109      	bne.n	8007208 <__libc_init_array+0x24>
 80071f4:	4d0b      	ldr	r5, [pc, #44]	; (8007224 <__libc_init_array+0x40>)
 80071f6:	4c0c      	ldr	r4, [pc, #48]	; (8007228 <__libc_init_array+0x44>)
 80071f8:	f001 f864 	bl	80082c4 <_init>
 80071fc:	1b64      	subs	r4, r4, r5
 80071fe:	10a4      	asrs	r4, r4, #2
 8007200:	2600      	movs	r6, #0
 8007202:	42a6      	cmp	r6, r4
 8007204:	d105      	bne.n	8007212 <__libc_init_array+0x2e>
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	f855 3b04 	ldr.w	r3, [r5], #4
 800720c:	4798      	blx	r3
 800720e:	3601      	adds	r6, #1
 8007210:	e7ee      	b.n	80071f0 <__libc_init_array+0xc>
 8007212:	f855 3b04 	ldr.w	r3, [r5], #4
 8007216:	4798      	blx	r3
 8007218:	3601      	adds	r6, #1
 800721a:	e7f2      	b.n	8007202 <__libc_init_array+0x1e>
 800721c:	08008630 	.word	0x08008630
 8007220:	08008630 	.word	0x08008630
 8007224:	08008630 	.word	0x08008630
 8007228:	08008634 	.word	0x08008634

0800722c <memcmp>:
 800722c:	b510      	push	{r4, lr}
 800722e:	3901      	subs	r1, #1
 8007230:	4402      	add	r2, r0
 8007232:	4290      	cmp	r0, r2
 8007234:	d101      	bne.n	800723a <memcmp+0xe>
 8007236:	2000      	movs	r0, #0
 8007238:	e005      	b.n	8007246 <memcmp+0x1a>
 800723a:	7803      	ldrb	r3, [r0, #0]
 800723c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007240:	42a3      	cmp	r3, r4
 8007242:	d001      	beq.n	8007248 <memcmp+0x1c>
 8007244:	1b18      	subs	r0, r3, r4
 8007246:	bd10      	pop	{r4, pc}
 8007248:	3001      	adds	r0, #1
 800724a:	e7f2      	b.n	8007232 <memcmp+0x6>

0800724c <memcpy>:
 800724c:	440a      	add	r2, r1
 800724e:	4291      	cmp	r1, r2
 8007250:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007254:	d100      	bne.n	8007258 <memcpy+0xc>
 8007256:	4770      	bx	lr
 8007258:	b510      	push	{r4, lr}
 800725a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800725e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007262:	4291      	cmp	r1, r2
 8007264:	d1f9      	bne.n	800725a <memcpy+0xe>
 8007266:	bd10      	pop	{r4, pc}

08007268 <memset>:
 8007268:	4402      	add	r2, r0
 800726a:	4603      	mov	r3, r0
 800726c:	4293      	cmp	r3, r2
 800726e:	d100      	bne.n	8007272 <memset+0xa>
 8007270:	4770      	bx	lr
 8007272:	f803 1b01 	strb.w	r1, [r3], #1
 8007276:	e7f9      	b.n	800726c <memset+0x4>

08007278 <rand>:
 8007278:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <rand+0x5c>)
 800727a:	b510      	push	{r4, lr}
 800727c:	681c      	ldr	r4, [r3, #0]
 800727e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007280:	b9b3      	cbnz	r3, 80072b0 <rand+0x38>
 8007282:	2018      	movs	r0, #24
 8007284:	f000 f866 	bl	8007354 <malloc>
 8007288:	63a0      	str	r0, [r4, #56]	; 0x38
 800728a:	b928      	cbnz	r0, 8007298 <rand+0x20>
 800728c:	4602      	mov	r2, r0
 800728e:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <rand+0x60>)
 8007290:	4812      	ldr	r0, [pc, #72]	; (80072dc <rand+0x64>)
 8007292:	214e      	movs	r1, #78	; 0x4e
 8007294:	f000 f82e 	bl	80072f4 <__assert_func>
 8007298:	4a11      	ldr	r2, [pc, #68]	; (80072e0 <rand+0x68>)
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <rand+0x6c>)
 800729c:	e9c0 2300 	strd	r2, r3, [r0]
 80072a0:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <rand+0x70>)
 80072a2:	6083      	str	r3, [r0, #8]
 80072a4:	230b      	movs	r3, #11
 80072a6:	8183      	strh	r3, [r0, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	2300      	movs	r3, #0
 80072ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80072b0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80072b2:	4a0e      	ldr	r2, [pc, #56]	; (80072ec <rand+0x74>)
 80072b4:	6920      	ldr	r0, [r4, #16]
 80072b6:	6963      	ldr	r3, [r4, #20]
 80072b8:	490d      	ldr	r1, [pc, #52]	; (80072f0 <rand+0x78>)
 80072ba:	4342      	muls	r2, r0
 80072bc:	fb01 2203 	mla	r2, r1, r3, r2
 80072c0:	fba0 0101 	umull	r0, r1, r0, r1
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	eb42 0001 	adc.w	r0, r2, r1
 80072ca:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80072ce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80072d2:	bd10      	pop	{r4, pc}
 80072d4:	20000014 	.word	0x20000014
 80072d8:	080084e4 	.word	0x080084e4
 80072dc:	080084fb 	.word	0x080084fb
 80072e0:	abcd330e 	.word	0xabcd330e
 80072e4:	e66d1234 	.word	0xe66d1234
 80072e8:	0005deec 	.word	0x0005deec
 80072ec:	5851f42d 	.word	0x5851f42d
 80072f0:	4c957f2d 	.word	0x4c957f2d

080072f4 <__assert_func>:
 80072f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072f6:	4614      	mov	r4, r2
 80072f8:	461a      	mov	r2, r3
 80072fa:	4b09      	ldr	r3, [pc, #36]	; (8007320 <__assert_func+0x2c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4605      	mov	r5, r0
 8007300:	68d8      	ldr	r0, [r3, #12]
 8007302:	b14c      	cbz	r4, 8007318 <__assert_func+0x24>
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <__assert_func+0x30>)
 8007306:	9100      	str	r1, [sp, #0]
 8007308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800730c:	4906      	ldr	r1, [pc, #24]	; (8007328 <__assert_func+0x34>)
 800730e:	462b      	mov	r3, r5
 8007310:	f000 f80e 	bl	8007330 <fiprintf>
 8007314:	f000 fcc4 	bl	8007ca0 <abort>
 8007318:	4b04      	ldr	r3, [pc, #16]	; (800732c <__assert_func+0x38>)
 800731a:	461c      	mov	r4, r3
 800731c:	e7f3      	b.n	8007306 <__assert_func+0x12>
 800731e:	bf00      	nop
 8007320:	20000014 	.word	0x20000014
 8007324:	08008556 	.word	0x08008556
 8007328:	08008563 	.word	0x08008563
 800732c:	08008591 	.word	0x08008591

08007330 <fiprintf>:
 8007330:	b40e      	push	{r1, r2, r3}
 8007332:	b503      	push	{r0, r1, lr}
 8007334:	4601      	mov	r1, r0
 8007336:	ab03      	add	r3, sp, #12
 8007338:	4805      	ldr	r0, [pc, #20]	; (8007350 <fiprintf+0x20>)
 800733a:	f853 2b04 	ldr.w	r2, [r3], #4
 800733e:	6800      	ldr	r0, [r0, #0]
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	f000 f919 	bl	8007578 <_vfiprintf_r>
 8007346:	b002      	add	sp, #8
 8007348:	f85d eb04 	ldr.w	lr, [sp], #4
 800734c:	b003      	add	sp, #12
 800734e:	4770      	bx	lr
 8007350:	20000014 	.word	0x20000014

08007354 <malloc>:
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <malloc+0xc>)
 8007356:	4601      	mov	r1, r0
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	f000 b86f 	b.w	800743c <_malloc_r>
 800735e:	bf00      	nop
 8007360:	20000014 	.word	0x20000014

08007364 <_free_r>:
 8007364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007366:	2900      	cmp	r1, #0
 8007368:	d044      	beq.n	80073f4 <_free_r+0x90>
 800736a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800736e:	9001      	str	r0, [sp, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f1a1 0404 	sub.w	r4, r1, #4
 8007376:	bfb8      	it	lt
 8007378:	18e4      	addlt	r4, r4, r3
 800737a:	f000 feb9 	bl	80080f0 <__malloc_lock>
 800737e:	4a1e      	ldr	r2, [pc, #120]	; (80073f8 <_free_r+0x94>)
 8007380:	9801      	ldr	r0, [sp, #4]
 8007382:	6813      	ldr	r3, [r2, #0]
 8007384:	b933      	cbnz	r3, 8007394 <_free_r+0x30>
 8007386:	6063      	str	r3, [r4, #4]
 8007388:	6014      	str	r4, [r2, #0]
 800738a:	b003      	add	sp, #12
 800738c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007390:	f000 beb4 	b.w	80080fc <__malloc_unlock>
 8007394:	42a3      	cmp	r3, r4
 8007396:	d908      	bls.n	80073aa <_free_r+0x46>
 8007398:	6825      	ldr	r5, [r4, #0]
 800739a:	1961      	adds	r1, r4, r5
 800739c:	428b      	cmp	r3, r1
 800739e:	bf01      	itttt	eq
 80073a0:	6819      	ldreq	r1, [r3, #0]
 80073a2:	685b      	ldreq	r3, [r3, #4]
 80073a4:	1949      	addeq	r1, r1, r5
 80073a6:	6021      	streq	r1, [r4, #0]
 80073a8:	e7ed      	b.n	8007386 <_free_r+0x22>
 80073aa:	461a      	mov	r2, r3
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	b10b      	cbz	r3, 80073b4 <_free_r+0x50>
 80073b0:	42a3      	cmp	r3, r4
 80073b2:	d9fa      	bls.n	80073aa <_free_r+0x46>
 80073b4:	6811      	ldr	r1, [r2, #0]
 80073b6:	1855      	adds	r5, r2, r1
 80073b8:	42a5      	cmp	r5, r4
 80073ba:	d10b      	bne.n	80073d4 <_free_r+0x70>
 80073bc:	6824      	ldr	r4, [r4, #0]
 80073be:	4421      	add	r1, r4
 80073c0:	1854      	adds	r4, r2, r1
 80073c2:	42a3      	cmp	r3, r4
 80073c4:	6011      	str	r1, [r2, #0]
 80073c6:	d1e0      	bne.n	800738a <_free_r+0x26>
 80073c8:	681c      	ldr	r4, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	6053      	str	r3, [r2, #4]
 80073ce:	4421      	add	r1, r4
 80073d0:	6011      	str	r1, [r2, #0]
 80073d2:	e7da      	b.n	800738a <_free_r+0x26>
 80073d4:	d902      	bls.n	80073dc <_free_r+0x78>
 80073d6:	230c      	movs	r3, #12
 80073d8:	6003      	str	r3, [r0, #0]
 80073da:	e7d6      	b.n	800738a <_free_r+0x26>
 80073dc:	6825      	ldr	r5, [r4, #0]
 80073de:	1961      	adds	r1, r4, r5
 80073e0:	428b      	cmp	r3, r1
 80073e2:	bf04      	itt	eq
 80073e4:	6819      	ldreq	r1, [r3, #0]
 80073e6:	685b      	ldreq	r3, [r3, #4]
 80073e8:	6063      	str	r3, [r4, #4]
 80073ea:	bf04      	itt	eq
 80073ec:	1949      	addeq	r1, r1, r5
 80073ee:	6021      	streq	r1, [r4, #0]
 80073f0:	6054      	str	r4, [r2, #4]
 80073f2:	e7ca      	b.n	800738a <_free_r+0x26>
 80073f4:	b003      	add	sp, #12
 80073f6:	bd30      	pop	{r4, r5, pc}
 80073f8:	2001511c 	.word	0x2001511c

080073fc <sbrk_aligned>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	4e0e      	ldr	r6, [pc, #56]	; (8007438 <sbrk_aligned+0x3c>)
 8007400:	460c      	mov	r4, r1
 8007402:	6831      	ldr	r1, [r6, #0]
 8007404:	4605      	mov	r5, r0
 8007406:	b911      	cbnz	r1, 800740e <sbrk_aligned+0x12>
 8007408:	f000 fb7a 	bl	8007b00 <_sbrk_r>
 800740c:	6030      	str	r0, [r6, #0]
 800740e:	4621      	mov	r1, r4
 8007410:	4628      	mov	r0, r5
 8007412:	f000 fb75 	bl	8007b00 <_sbrk_r>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	d00a      	beq.n	8007430 <sbrk_aligned+0x34>
 800741a:	1cc4      	adds	r4, r0, #3
 800741c:	f024 0403 	bic.w	r4, r4, #3
 8007420:	42a0      	cmp	r0, r4
 8007422:	d007      	beq.n	8007434 <sbrk_aligned+0x38>
 8007424:	1a21      	subs	r1, r4, r0
 8007426:	4628      	mov	r0, r5
 8007428:	f000 fb6a 	bl	8007b00 <_sbrk_r>
 800742c:	3001      	adds	r0, #1
 800742e:	d101      	bne.n	8007434 <sbrk_aligned+0x38>
 8007430:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007434:	4620      	mov	r0, r4
 8007436:	bd70      	pop	{r4, r5, r6, pc}
 8007438:	20015120 	.word	0x20015120

0800743c <_malloc_r>:
 800743c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007440:	1ccd      	adds	r5, r1, #3
 8007442:	f025 0503 	bic.w	r5, r5, #3
 8007446:	3508      	adds	r5, #8
 8007448:	2d0c      	cmp	r5, #12
 800744a:	bf38      	it	cc
 800744c:	250c      	movcc	r5, #12
 800744e:	2d00      	cmp	r5, #0
 8007450:	4607      	mov	r7, r0
 8007452:	db01      	blt.n	8007458 <_malloc_r+0x1c>
 8007454:	42a9      	cmp	r1, r5
 8007456:	d905      	bls.n	8007464 <_malloc_r+0x28>
 8007458:	230c      	movs	r3, #12
 800745a:	603b      	str	r3, [r7, #0]
 800745c:	2600      	movs	r6, #0
 800745e:	4630      	mov	r0, r6
 8007460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007464:	4e2e      	ldr	r6, [pc, #184]	; (8007520 <_malloc_r+0xe4>)
 8007466:	f000 fe43 	bl	80080f0 <__malloc_lock>
 800746a:	6833      	ldr	r3, [r6, #0]
 800746c:	461c      	mov	r4, r3
 800746e:	bb34      	cbnz	r4, 80074be <_malloc_r+0x82>
 8007470:	4629      	mov	r1, r5
 8007472:	4638      	mov	r0, r7
 8007474:	f7ff ffc2 	bl	80073fc <sbrk_aligned>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	4604      	mov	r4, r0
 800747c:	d14d      	bne.n	800751a <_malloc_r+0xde>
 800747e:	6834      	ldr	r4, [r6, #0]
 8007480:	4626      	mov	r6, r4
 8007482:	2e00      	cmp	r6, #0
 8007484:	d140      	bne.n	8007508 <_malloc_r+0xcc>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	4631      	mov	r1, r6
 800748a:	4638      	mov	r0, r7
 800748c:	eb04 0803 	add.w	r8, r4, r3
 8007490:	f000 fb36 	bl	8007b00 <_sbrk_r>
 8007494:	4580      	cmp	r8, r0
 8007496:	d13a      	bne.n	800750e <_malloc_r+0xd2>
 8007498:	6821      	ldr	r1, [r4, #0]
 800749a:	3503      	adds	r5, #3
 800749c:	1a6d      	subs	r5, r5, r1
 800749e:	f025 0503 	bic.w	r5, r5, #3
 80074a2:	3508      	adds	r5, #8
 80074a4:	2d0c      	cmp	r5, #12
 80074a6:	bf38      	it	cc
 80074a8:	250c      	movcc	r5, #12
 80074aa:	4629      	mov	r1, r5
 80074ac:	4638      	mov	r0, r7
 80074ae:	f7ff ffa5 	bl	80073fc <sbrk_aligned>
 80074b2:	3001      	adds	r0, #1
 80074b4:	d02b      	beq.n	800750e <_malloc_r+0xd2>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	442b      	add	r3, r5
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	e00e      	b.n	80074dc <_malloc_r+0xa0>
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	1b52      	subs	r2, r2, r5
 80074c2:	d41e      	bmi.n	8007502 <_malloc_r+0xc6>
 80074c4:	2a0b      	cmp	r2, #11
 80074c6:	d916      	bls.n	80074f6 <_malloc_r+0xba>
 80074c8:	1961      	adds	r1, r4, r5
 80074ca:	42a3      	cmp	r3, r4
 80074cc:	6025      	str	r5, [r4, #0]
 80074ce:	bf18      	it	ne
 80074d0:	6059      	strne	r1, [r3, #4]
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	bf08      	it	eq
 80074d6:	6031      	streq	r1, [r6, #0]
 80074d8:	5162      	str	r2, [r4, r5]
 80074da:	604b      	str	r3, [r1, #4]
 80074dc:	4638      	mov	r0, r7
 80074de:	f104 060b 	add.w	r6, r4, #11
 80074e2:	f000 fe0b 	bl	80080fc <__malloc_unlock>
 80074e6:	f026 0607 	bic.w	r6, r6, #7
 80074ea:	1d23      	adds	r3, r4, #4
 80074ec:	1af2      	subs	r2, r6, r3
 80074ee:	d0b6      	beq.n	800745e <_malloc_r+0x22>
 80074f0:	1b9b      	subs	r3, r3, r6
 80074f2:	50a3      	str	r3, [r4, r2]
 80074f4:	e7b3      	b.n	800745e <_malloc_r+0x22>
 80074f6:	6862      	ldr	r2, [r4, #4]
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	bf0c      	ite	eq
 80074fc:	6032      	streq	r2, [r6, #0]
 80074fe:	605a      	strne	r2, [r3, #4]
 8007500:	e7ec      	b.n	80074dc <_malloc_r+0xa0>
 8007502:	4623      	mov	r3, r4
 8007504:	6864      	ldr	r4, [r4, #4]
 8007506:	e7b2      	b.n	800746e <_malloc_r+0x32>
 8007508:	4634      	mov	r4, r6
 800750a:	6876      	ldr	r6, [r6, #4]
 800750c:	e7b9      	b.n	8007482 <_malloc_r+0x46>
 800750e:	230c      	movs	r3, #12
 8007510:	603b      	str	r3, [r7, #0]
 8007512:	4638      	mov	r0, r7
 8007514:	f000 fdf2 	bl	80080fc <__malloc_unlock>
 8007518:	e7a1      	b.n	800745e <_malloc_r+0x22>
 800751a:	6025      	str	r5, [r4, #0]
 800751c:	e7de      	b.n	80074dc <_malloc_r+0xa0>
 800751e:	bf00      	nop
 8007520:	2001511c 	.word	0x2001511c

08007524 <__sfputc_r>:
 8007524:	6893      	ldr	r3, [r2, #8]
 8007526:	3b01      	subs	r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	b410      	push	{r4}
 800752c:	6093      	str	r3, [r2, #8]
 800752e:	da08      	bge.n	8007542 <__sfputc_r+0x1e>
 8007530:	6994      	ldr	r4, [r2, #24]
 8007532:	42a3      	cmp	r3, r4
 8007534:	db01      	blt.n	800753a <__sfputc_r+0x16>
 8007536:	290a      	cmp	r1, #10
 8007538:	d103      	bne.n	8007542 <__sfputc_r+0x1e>
 800753a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800753e:	f000 baef 	b.w	8007b20 <__swbuf_r>
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	1c58      	adds	r0, r3, #1
 8007546:	6010      	str	r0, [r2, #0]
 8007548:	7019      	strb	r1, [r3, #0]
 800754a:	4608      	mov	r0, r1
 800754c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007550:	4770      	bx	lr

08007552 <__sfputs_r>:
 8007552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007554:	4606      	mov	r6, r0
 8007556:	460f      	mov	r7, r1
 8007558:	4614      	mov	r4, r2
 800755a:	18d5      	adds	r5, r2, r3
 800755c:	42ac      	cmp	r4, r5
 800755e:	d101      	bne.n	8007564 <__sfputs_r+0x12>
 8007560:	2000      	movs	r0, #0
 8007562:	e007      	b.n	8007574 <__sfputs_r+0x22>
 8007564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007568:	463a      	mov	r2, r7
 800756a:	4630      	mov	r0, r6
 800756c:	f7ff ffda 	bl	8007524 <__sfputc_r>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d1f3      	bne.n	800755c <__sfputs_r+0xa>
 8007574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007578 <_vfiprintf_r>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	460d      	mov	r5, r1
 800757e:	b09d      	sub	sp, #116	; 0x74
 8007580:	4614      	mov	r4, r2
 8007582:	4698      	mov	r8, r3
 8007584:	4606      	mov	r6, r0
 8007586:	b118      	cbz	r0, 8007590 <_vfiprintf_r+0x18>
 8007588:	6983      	ldr	r3, [r0, #24]
 800758a:	b90b      	cbnz	r3, 8007590 <_vfiprintf_r+0x18>
 800758c:	f000 fcaa 	bl	8007ee4 <__sinit>
 8007590:	4b89      	ldr	r3, [pc, #548]	; (80077b8 <_vfiprintf_r+0x240>)
 8007592:	429d      	cmp	r5, r3
 8007594:	d11b      	bne.n	80075ce <_vfiprintf_r+0x56>
 8007596:	6875      	ldr	r5, [r6, #4]
 8007598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800759a:	07d9      	lsls	r1, r3, #31
 800759c:	d405      	bmi.n	80075aa <_vfiprintf_r+0x32>
 800759e:	89ab      	ldrh	r3, [r5, #12]
 80075a0:	059a      	lsls	r2, r3, #22
 80075a2:	d402      	bmi.n	80075aa <_vfiprintf_r+0x32>
 80075a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075a6:	f000 fd3b 	bl	8008020 <__retarget_lock_acquire_recursive>
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	071b      	lsls	r3, r3, #28
 80075ae:	d501      	bpl.n	80075b4 <_vfiprintf_r+0x3c>
 80075b0:	692b      	ldr	r3, [r5, #16]
 80075b2:	b9eb      	cbnz	r3, 80075f0 <_vfiprintf_r+0x78>
 80075b4:	4629      	mov	r1, r5
 80075b6:	4630      	mov	r0, r6
 80075b8:	f000 fb04 	bl	8007bc4 <__swsetup_r>
 80075bc:	b1c0      	cbz	r0, 80075f0 <_vfiprintf_r+0x78>
 80075be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075c0:	07dc      	lsls	r4, r3, #31
 80075c2:	d50e      	bpl.n	80075e2 <_vfiprintf_r+0x6a>
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075c8:	b01d      	add	sp, #116	; 0x74
 80075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ce:	4b7b      	ldr	r3, [pc, #492]	; (80077bc <_vfiprintf_r+0x244>)
 80075d0:	429d      	cmp	r5, r3
 80075d2:	d101      	bne.n	80075d8 <_vfiprintf_r+0x60>
 80075d4:	68b5      	ldr	r5, [r6, #8]
 80075d6:	e7df      	b.n	8007598 <_vfiprintf_r+0x20>
 80075d8:	4b79      	ldr	r3, [pc, #484]	; (80077c0 <_vfiprintf_r+0x248>)
 80075da:	429d      	cmp	r5, r3
 80075dc:	bf08      	it	eq
 80075de:	68f5      	ldreq	r5, [r6, #12]
 80075e0:	e7da      	b.n	8007598 <_vfiprintf_r+0x20>
 80075e2:	89ab      	ldrh	r3, [r5, #12]
 80075e4:	0598      	lsls	r0, r3, #22
 80075e6:	d4ed      	bmi.n	80075c4 <_vfiprintf_r+0x4c>
 80075e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ea:	f000 fd1a 	bl	8008022 <__retarget_lock_release_recursive>
 80075ee:	e7e9      	b.n	80075c4 <_vfiprintf_r+0x4c>
 80075f0:	2300      	movs	r3, #0
 80075f2:	9309      	str	r3, [sp, #36]	; 0x24
 80075f4:	2320      	movs	r3, #32
 80075f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80075fe:	2330      	movs	r3, #48	; 0x30
 8007600:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077c4 <_vfiprintf_r+0x24c>
 8007604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007608:	f04f 0901 	mov.w	r9, #1
 800760c:	4623      	mov	r3, r4
 800760e:	469a      	mov	sl, r3
 8007610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007614:	b10a      	cbz	r2, 800761a <_vfiprintf_r+0xa2>
 8007616:	2a25      	cmp	r2, #37	; 0x25
 8007618:	d1f9      	bne.n	800760e <_vfiprintf_r+0x96>
 800761a:	ebba 0b04 	subs.w	fp, sl, r4
 800761e:	d00b      	beq.n	8007638 <_vfiprintf_r+0xc0>
 8007620:	465b      	mov	r3, fp
 8007622:	4622      	mov	r2, r4
 8007624:	4629      	mov	r1, r5
 8007626:	4630      	mov	r0, r6
 8007628:	f7ff ff93 	bl	8007552 <__sfputs_r>
 800762c:	3001      	adds	r0, #1
 800762e:	f000 80aa 	beq.w	8007786 <_vfiprintf_r+0x20e>
 8007632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007634:	445a      	add	r2, fp
 8007636:	9209      	str	r2, [sp, #36]	; 0x24
 8007638:	f89a 3000 	ldrb.w	r3, [sl]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 80a2 	beq.w	8007786 <_vfiprintf_r+0x20e>
 8007642:	2300      	movs	r3, #0
 8007644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800764c:	f10a 0a01 	add.w	sl, sl, #1
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	9307      	str	r3, [sp, #28]
 8007654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007658:	931a      	str	r3, [sp, #104]	; 0x68
 800765a:	4654      	mov	r4, sl
 800765c:	2205      	movs	r2, #5
 800765e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007662:	4858      	ldr	r0, [pc, #352]	; (80077c4 <_vfiprintf_r+0x24c>)
 8007664:	f7f8 fe04 	bl	8000270 <memchr>
 8007668:	9a04      	ldr	r2, [sp, #16]
 800766a:	b9d8      	cbnz	r0, 80076a4 <_vfiprintf_r+0x12c>
 800766c:	06d1      	lsls	r1, r2, #27
 800766e:	bf44      	itt	mi
 8007670:	2320      	movmi	r3, #32
 8007672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007676:	0713      	lsls	r3, r2, #28
 8007678:	bf44      	itt	mi
 800767a:	232b      	movmi	r3, #43	; 0x2b
 800767c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007680:	f89a 3000 	ldrb.w	r3, [sl]
 8007684:	2b2a      	cmp	r3, #42	; 0x2a
 8007686:	d015      	beq.n	80076b4 <_vfiprintf_r+0x13c>
 8007688:	9a07      	ldr	r2, [sp, #28]
 800768a:	4654      	mov	r4, sl
 800768c:	2000      	movs	r0, #0
 800768e:	f04f 0c0a 	mov.w	ip, #10
 8007692:	4621      	mov	r1, r4
 8007694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007698:	3b30      	subs	r3, #48	; 0x30
 800769a:	2b09      	cmp	r3, #9
 800769c:	d94e      	bls.n	800773c <_vfiprintf_r+0x1c4>
 800769e:	b1b0      	cbz	r0, 80076ce <_vfiprintf_r+0x156>
 80076a0:	9207      	str	r2, [sp, #28]
 80076a2:	e014      	b.n	80076ce <_vfiprintf_r+0x156>
 80076a4:	eba0 0308 	sub.w	r3, r0, r8
 80076a8:	fa09 f303 	lsl.w	r3, r9, r3
 80076ac:	4313      	orrs	r3, r2
 80076ae:	9304      	str	r3, [sp, #16]
 80076b0:	46a2      	mov	sl, r4
 80076b2:	e7d2      	b.n	800765a <_vfiprintf_r+0xe2>
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	1d19      	adds	r1, r3, #4
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	9103      	str	r1, [sp, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bfbb      	ittet	lt
 80076c0:	425b      	neglt	r3, r3
 80076c2:	f042 0202 	orrlt.w	r2, r2, #2
 80076c6:	9307      	strge	r3, [sp, #28]
 80076c8:	9307      	strlt	r3, [sp, #28]
 80076ca:	bfb8      	it	lt
 80076cc:	9204      	strlt	r2, [sp, #16]
 80076ce:	7823      	ldrb	r3, [r4, #0]
 80076d0:	2b2e      	cmp	r3, #46	; 0x2e
 80076d2:	d10c      	bne.n	80076ee <_vfiprintf_r+0x176>
 80076d4:	7863      	ldrb	r3, [r4, #1]
 80076d6:	2b2a      	cmp	r3, #42	; 0x2a
 80076d8:	d135      	bne.n	8007746 <_vfiprintf_r+0x1ce>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	1d1a      	adds	r2, r3, #4
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	9203      	str	r2, [sp, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	bfb8      	it	lt
 80076e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80076ea:	3402      	adds	r4, #2
 80076ec:	9305      	str	r3, [sp, #20]
 80076ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077d4 <_vfiprintf_r+0x25c>
 80076f2:	7821      	ldrb	r1, [r4, #0]
 80076f4:	2203      	movs	r2, #3
 80076f6:	4650      	mov	r0, sl
 80076f8:	f7f8 fdba 	bl	8000270 <memchr>
 80076fc:	b140      	cbz	r0, 8007710 <_vfiprintf_r+0x198>
 80076fe:	2340      	movs	r3, #64	; 0x40
 8007700:	eba0 000a 	sub.w	r0, r0, sl
 8007704:	fa03 f000 	lsl.w	r0, r3, r0
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	4303      	orrs	r3, r0
 800770c:	3401      	adds	r4, #1
 800770e:	9304      	str	r3, [sp, #16]
 8007710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007714:	482c      	ldr	r0, [pc, #176]	; (80077c8 <_vfiprintf_r+0x250>)
 8007716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800771a:	2206      	movs	r2, #6
 800771c:	f7f8 fda8 	bl	8000270 <memchr>
 8007720:	2800      	cmp	r0, #0
 8007722:	d03f      	beq.n	80077a4 <_vfiprintf_r+0x22c>
 8007724:	4b29      	ldr	r3, [pc, #164]	; (80077cc <_vfiprintf_r+0x254>)
 8007726:	bb1b      	cbnz	r3, 8007770 <_vfiprintf_r+0x1f8>
 8007728:	9b03      	ldr	r3, [sp, #12]
 800772a:	3307      	adds	r3, #7
 800772c:	f023 0307 	bic.w	r3, r3, #7
 8007730:	3308      	adds	r3, #8
 8007732:	9303      	str	r3, [sp, #12]
 8007734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007736:	443b      	add	r3, r7
 8007738:	9309      	str	r3, [sp, #36]	; 0x24
 800773a:	e767      	b.n	800760c <_vfiprintf_r+0x94>
 800773c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007740:	460c      	mov	r4, r1
 8007742:	2001      	movs	r0, #1
 8007744:	e7a5      	b.n	8007692 <_vfiprintf_r+0x11a>
 8007746:	2300      	movs	r3, #0
 8007748:	3401      	adds	r4, #1
 800774a:	9305      	str	r3, [sp, #20]
 800774c:	4619      	mov	r1, r3
 800774e:	f04f 0c0a 	mov.w	ip, #10
 8007752:	4620      	mov	r0, r4
 8007754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007758:	3a30      	subs	r2, #48	; 0x30
 800775a:	2a09      	cmp	r2, #9
 800775c:	d903      	bls.n	8007766 <_vfiprintf_r+0x1ee>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0c5      	beq.n	80076ee <_vfiprintf_r+0x176>
 8007762:	9105      	str	r1, [sp, #20]
 8007764:	e7c3      	b.n	80076ee <_vfiprintf_r+0x176>
 8007766:	fb0c 2101 	mla	r1, ip, r1, r2
 800776a:	4604      	mov	r4, r0
 800776c:	2301      	movs	r3, #1
 800776e:	e7f0      	b.n	8007752 <_vfiprintf_r+0x1da>
 8007770:	ab03      	add	r3, sp, #12
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	462a      	mov	r2, r5
 8007776:	4b16      	ldr	r3, [pc, #88]	; (80077d0 <_vfiprintf_r+0x258>)
 8007778:	a904      	add	r1, sp, #16
 800777a:	4630      	mov	r0, r6
 800777c:	f3af 8000 	nop.w
 8007780:	4607      	mov	r7, r0
 8007782:	1c78      	adds	r0, r7, #1
 8007784:	d1d6      	bne.n	8007734 <_vfiprintf_r+0x1bc>
 8007786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007788:	07d9      	lsls	r1, r3, #31
 800778a:	d405      	bmi.n	8007798 <_vfiprintf_r+0x220>
 800778c:	89ab      	ldrh	r3, [r5, #12]
 800778e:	059a      	lsls	r2, r3, #22
 8007790:	d402      	bmi.n	8007798 <_vfiprintf_r+0x220>
 8007792:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007794:	f000 fc45 	bl	8008022 <__retarget_lock_release_recursive>
 8007798:	89ab      	ldrh	r3, [r5, #12]
 800779a:	065b      	lsls	r3, r3, #25
 800779c:	f53f af12 	bmi.w	80075c4 <_vfiprintf_r+0x4c>
 80077a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077a2:	e711      	b.n	80075c8 <_vfiprintf_r+0x50>
 80077a4:	ab03      	add	r3, sp, #12
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	462a      	mov	r2, r5
 80077aa:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <_vfiprintf_r+0x258>)
 80077ac:	a904      	add	r1, sp, #16
 80077ae:	4630      	mov	r0, r6
 80077b0:	f000 f880 	bl	80078b4 <_printf_i>
 80077b4:	e7e4      	b.n	8007780 <_vfiprintf_r+0x208>
 80077b6:	bf00      	nop
 80077b8:	080085e8 	.word	0x080085e8
 80077bc:	08008608 	.word	0x08008608
 80077c0:	080085c8 	.word	0x080085c8
 80077c4:	08008592 	.word	0x08008592
 80077c8:	0800859c 	.word	0x0800859c
 80077cc:	00000000 	.word	0x00000000
 80077d0:	08007553 	.word	0x08007553
 80077d4:	08008598 	.word	0x08008598

080077d8 <_printf_common>:
 80077d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077dc:	4616      	mov	r6, r2
 80077de:	4699      	mov	r9, r3
 80077e0:	688a      	ldr	r2, [r1, #8]
 80077e2:	690b      	ldr	r3, [r1, #16]
 80077e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077e8:	4293      	cmp	r3, r2
 80077ea:	bfb8      	it	lt
 80077ec:	4613      	movlt	r3, r2
 80077ee:	6033      	str	r3, [r6, #0]
 80077f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077f4:	4607      	mov	r7, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	b10a      	cbz	r2, 80077fe <_printf_common+0x26>
 80077fa:	3301      	adds	r3, #1
 80077fc:	6033      	str	r3, [r6, #0]
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	0699      	lsls	r1, r3, #26
 8007802:	bf42      	ittt	mi
 8007804:	6833      	ldrmi	r3, [r6, #0]
 8007806:	3302      	addmi	r3, #2
 8007808:	6033      	strmi	r3, [r6, #0]
 800780a:	6825      	ldr	r5, [r4, #0]
 800780c:	f015 0506 	ands.w	r5, r5, #6
 8007810:	d106      	bne.n	8007820 <_printf_common+0x48>
 8007812:	f104 0a19 	add.w	sl, r4, #25
 8007816:	68e3      	ldr	r3, [r4, #12]
 8007818:	6832      	ldr	r2, [r6, #0]
 800781a:	1a9b      	subs	r3, r3, r2
 800781c:	42ab      	cmp	r3, r5
 800781e:	dc26      	bgt.n	800786e <_printf_common+0x96>
 8007820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007824:	1e13      	subs	r3, r2, #0
 8007826:	6822      	ldr	r2, [r4, #0]
 8007828:	bf18      	it	ne
 800782a:	2301      	movne	r3, #1
 800782c:	0692      	lsls	r2, r2, #26
 800782e:	d42b      	bmi.n	8007888 <_printf_common+0xb0>
 8007830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007834:	4649      	mov	r1, r9
 8007836:	4638      	mov	r0, r7
 8007838:	47c0      	blx	r8
 800783a:	3001      	adds	r0, #1
 800783c:	d01e      	beq.n	800787c <_printf_common+0xa4>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	68e5      	ldr	r5, [r4, #12]
 8007842:	6832      	ldr	r2, [r6, #0]
 8007844:	f003 0306 	and.w	r3, r3, #6
 8007848:	2b04      	cmp	r3, #4
 800784a:	bf08      	it	eq
 800784c:	1aad      	subeq	r5, r5, r2
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	6922      	ldr	r2, [r4, #16]
 8007852:	bf0c      	ite	eq
 8007854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007858:	2500      	movne	r5, #0
 800785a:	4293      	cmp	r3, r2
 800785c:	bfc4      	itt	gt
 800785e:	1a9b      	subgt	r3, r3, r2
 8007860:	18ed      	addgt	r5, r5, r3
 8007862:	2600      	movs	r6, #0
 8007864:	341a      	adds	r4, #26
 8007866:	42b5      	cmp	r5, r6
 8007868:	d11a      	bne.n	80078a0 <_printf_common+0xc8>
 800786a:	2000      	movs	r0, #0
 800786c:	e008      	b.n	8007880 <_printf_common+0xa8>
 800786e:	2301      	movs	r3, #1
 8007870:	4652      	mov	r2, sl
 8007872:	4649      	mov	r1, r9
 8007874:	4638      	mov	r0, r7
 8007876:	47c0      	blx	r8
 8007878:	3001      	adds	r0, #1
 800787a:	d103      	bne.n	8007884 <_printf_common+0xac>
 800787c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	3501      	adds	r5, #1
 8007886:	e7c6      	b.n	8007816 <_printf_common+0x3e>
 8007888:	18e1      	adds	r1, r4, r3
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	2030      	movs	r0, #48	; 0x30
 800788e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007892:	4422      	add	r2, r4
 8007894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800789c:	3302      	adds	r3, #2
 800789e:	e7c7      	b.n	8007830 <_printf_common+0x58>
 80078a0:	2301      	movs	r3, #1
 80078a2:	4622      	mov	r2, r4
 80078a4:	4649      	mov	r1, r9
 80078a6:	4638      	mov	r0, r7
 80078a8:	47c0      	blx	r8
 80078aa:	3001      	adds	r0, #1
 80078ac:	d0e6      	beq.n	800787c <_printf_common+0xa4>
 80078ae:	3601      	adds	r6, #1
 80078b0:	e7d9      	b.n	8007866 <_printf_common+0x8e>
	...

080078b4 <_printf_i>:
 80078b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	7e0f      	ldrb	r7, [r1, #24]
 80078ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078bc:	2f78      	cmp	r7, #120	; 0x78
 80078be:	4691      	mov	r9, r2
 80078c0:	4680      	mov	r8, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	469a      	mov	sl, r3
 80078c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078ca:	d807      	bhi.n	80078dc <_printf_i+0x28>
 80078cc:	2f62      	cmp	r7, #98	; 0x62
 80078ce:	d80a      	bhi.n	80078e6 <_printf_i+0x32>
 80078d0:	2f00      	cmp	r7, #0
 80078d2:	f000 80d8 	beq.w	8007a86 <_printf_i+0x1d2>
 80078d6:	2f58      	cmp	r7, #88	; 0x58
 80078d8:	f000 80a3 	beq.w	8007a22 <_printf_i+0x16e>
 80078dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078e4:	e03a      	b.n	800795c <_printf_i+0xa8>
 80078e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078ea:	2b15      	cmp	r3, #21
 80078ec:	d8f6      	bhi.n	80078dc <_printf_i+0x28>
 80078ee:	a101      	add	r1, pc, #4	; (adr r1, 80078f4 <_printf_i+0x40>)
 80078f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078f4:	0800794d 	.word	0x0800794d
 80078f8:	08007961 	.word	0x08007961
 80078fc:	080078dd 	.word	0x080078dd
 8007900:	080078dd 	.word	0x080078dd
 8007904:	080078dd 	.word	0x080078dd
 8007908:	080078dd 	.word	0x080078dd
 800790c:	08007961 	.word	0x08007961
 8007910:	080078dd 	.word	0x080078dd
 8007914:	080078dd 	.word	0x080078dd
 8007918:	080078dd 	.word	0x080078dd
 800791c:	080078dd 	.word	0x080078dd
 8007920:	08007a6d 	.word	0x08007a6d
 8007924:	08007991 	.word	0x08007991
 8007928:	08007a4f 	.word	0x08007a4f
 800792c:	080078dd 	.word	0x080078dd
 8007930:	080078dd 	.word	0x080078dd
 8007934:	08007a8f 	.word	0x08007a8f
 8007938:	080078dd 	.word	0x080078dd
 800793c:	08007991 	.word	0x08007991
 8007940:	080078dd 	.word	0x080078dd
 8007944:	080078dd 	.word	0x080078dd
 8007948:	08007a57 	.word	0x08007a57
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	602a      	str	r2, [r5, #0]
 8007954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800795c:	2301      	movs	r3, #1
 800795e:	e0a3      	b.n	8007aa8 <_printf_i+0x1f4>
 8007960:	6820      	ldr	r0, [r4, #0]
 8007962:	6829      	ldr	r1, [r5, #0]
 8007964:	0606      	lsls	r6, r0, #24
 8007966:	f101 0304 	add.w	r3, r1, #4
 800796a:	d50a      	bpl.n	8007982 <_printf_i+0xce>
 800796c:	680e      	ldr	r6, [r1, #0]
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	2e00      	cmp	r6, #0
 8007972:	da03      	bge.n	800797c <_printf_i+0xc8>
 8007974:	232d      	movs	r3, #45	; 0x2d
 8007976:	4276      	negs	r6, r6
 8007978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800797c:	485e      	ldr	r0, [pc, #376]	; (8007af8 <_printf_i+0x244>)
 800797e:	230a      	movs	r3, #10
 8007980:	e019      	b.n	80079b6 <_printf_i+0x102>
 8007982:	680e      	ldr	r6, [r1, #0]
 8007984:	602b      	str	r3, [r5, #0]
 8007986:	f010 0f40 	tst.w	r0, #64	; 0x40
 800798a:	bf18      	it	ne
 800798c:	b236      	sxthne	r6, r6
 800798e:	e7ef      	b.n	8007970 <_printf_i+0xbc>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	6820      	ldr	r0, [r4, #0]
 8007994:	1d19      	adds	r1, r3, #4
 8007996:	6029      	str	r1, [r5, #0]
 8007998:	0601      	lsls	r1, r0, #24
 800799a:	d501      	bpl.n	80079a0 <_printf_i+0xec>
 800799c:	681e      	ldr	r6, [r3, #0]
 800799e:	e002      	b.n	80079a6 <_printf_i+0xf2>
 80079a0:	0646      	lsls	r6, r0, #25
 80079a2:	d5fb      	bpl.n	800799c <_printf_i+0xe8>
 80079a4:	881e      	ldrh	r6, [r3, #0]
 80079a6:	4854      	ldr	r0, [pc, #336]	; (8007af8 <_printf_i+0x244>)
 80079a8:	2f6f      	cmp	r7, #111	; 0x6f
 80079aa:	bf0c      	ite	eq
 80079ac:	2308      	moveq	r3, #8
 80079ae:	230a      	movne	r3, #10
 80079b0:	2100      	movs	r1, #0
 80079b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079b6:	6865      	ldr	r5, [r4, #4]
 80079b8:	60a5      	str	r5, [r4, #8]
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	bfa2      	ittt	ge
 80079be:	6821      	ldrge	r1, [r4, #0]
 80079c0:	f021 0104 	bicge.w	r1, r1, #4
 80079c4:	6021      	strge	r1, [r4, #0]
 80079c6:	b90e      	cbnz	r6, 80079cc <_printf_i+0x118>
 80079c8:	2d00      	cmp	r5, #0
 80079ca:	d04d      	beq.n	8007a68 <_printf_i+0x1b4>
 80079cc:	4615      	mov	r5, r2
 80079ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80079d2:	fb03 6711 	mls	r7, r3, r1, r6
 80079d6:	5dc7      	ldrb	r7, [r0, r7]
 80079d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079dc:	4637      	mov	r7, r6
 80079de:	42bb      	cmp	r3, r7
 80079e0:	460e      	mov	r6, r1
 80079e2:	d9f4      	bls.n	80079ce <_printf_i+0x11a>
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d10b      	bne.n	8007a00 <_printf_i+0x14c>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	07de      	lsls	r6, r3, #31
 80079ec:	d508      	bpl.n	8007a00 <_printf_i+0x14c>
 80079ee:	6923      	ldr	r3, [r4, #16]
 80079f0:	6861      	ldr	r1, [r4, #4]
 80079f2:	4299      	cmp	r1, r3
 80079f4:	bfde      	ittt	le
 80079f6:	2330      	movle	r3, #48	; 0x30
 80079f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a00:	1b52      	subs	r2, r2, r5
 8007a02:	6122      	str	r2, [r4, #16]
 8007a04:	f8cd a000 	str.w	sl, [sp]
 8007a08:	464b      	mov	r3, r9
 8007a0a:	aa03      	add	r2, sp, #12
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4640      	mov	r0, r8
 8007a10:	f7ff fee2 	bl	80077d8 <_printf_common>
 8007a14:	3001      	adds	r0, #1
 8007a16:	d14c      	bne.n	8007ab2 <_printf_i+0x1fe>
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a1c:	b004      	add	sp, #16
 8007a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a22:	4835      	ldr	r0, [pc, #212]	; (8007af8 <_printf_i+0x244>)
 8007a24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a28:	6829      	ldr	r1, [r5, #0]
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a30:	6029      	str	r1, [r5, #0]
 8007a32:	061d      	lsls	r5, r3, #24
 8007a34:	d514      	bpl.n	8007a60 <_printf_i+0x1ac>
 8007a36:	07df      	lsls	r7, r3, #31
 8007a38:	bf44      	itt	mi
 8007a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a3e:	6023      	strmi	r3, [r4, #0]
 8007a40:	b91e      	cbnz	r6, 8007a4a <_printf_i+0x196>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	f023 0320 	bic.w	r3, r3, #32
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	e7b0      	b.n	80079b0 <_printf_i+0xfc>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	f043 0320 	orr.w	r3, r3, #32
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	2378      	movs	r3, #120	; 0x78
 8007a58:	4828      	ldr	r0, [pc, #160]	; (8007afc <_printf_i+0x248>)
 8007a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a5e:	e7e3      	b.n	8007a28 <_printf_i+0x174>
 8007a60:	0659      	lsls	r1, r3, #25
 8007a62:	bf48      	it	mi
 8007a64:	b2b6      	uxthmi	r6, r6
 8007a66:	e7e6      	b.n	8007a36 <_printf_i+0x182>
 8007a68:	4615      	mov	r5, r2
 8007a6a:	e7bb      	b.n	80079e4 <_printf_i+0x130>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	6826      	ldr	r6, [r4, #0]
 8007a70:	6961      	ldr	r1, [r4, #20]
 8007a72:	1d18      	adds	r0, r3, #4
 8007a74:	6028      	str	r0, [r5, #0]
 8007a76:	0635      	lsls	r5, r6, #24
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	d501      	bpl.n	8007a80 <_printf_i+0x1cc>
 8007a7c:	6019      	str	r1, [r3, #0]
 8007a7e:	e002      	b.n	8007a86 <_printf_i+0x1d2>
 8007a80:	0670      	lsls	r0, r6, #25
 8007a82:	d5fb      	bpl.n	8007a7c <_printf_i+0x1c8>
 8007a84:	8019      	strh	r1, [r3, #0]
 8007a86:	2300      	movs	r3, #0
 8007a88:	6123      	str	r3, [r4, #16]
 8007a8a:	4615      	mov	r5, r2
 8007a8c:	e7ba      	b.n	8007a04 <_printf_i+0x150>
 8007a8e:	682b      	ldr	r3, [r5, #0]
 8007a90:	1d1a      	adds	r2, r3, #4
 8007a92:	602a      	str	r2, [r5, #0]
 8007a94:	681d      	ldr	r5, [r3, #0]
 8007a96:	6862      	ldr	r2, [r4, #4]
 8007a98:	2100      	movs	r1, #0
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f7f8 fbe8 	bl	8000270 <memchr>
 8007aa0:	b108      	cbz	r0, 8007aa6 <_printf_i+0x1f2>
 8007aa2:	1b40      	subs	r0, r0, r5
 8007aa4:	6060      	str	r0, [r4, #4]
 8007aa6:	6863      	ldr	r3, [r4, #4]
 8007aa8:	6123      	str	r3, [r4, #16]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab0:	e7a8      	b.n	8007a04 <_printf_i+0x150>
 8007ab2:	6923      	ldr	r3, [r4, #16]
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	4640      	mov	r0, r8
 8007aba:	47d0      	blx	sl
 8007abc:	3001      	adds	r0, #1
 8007abe:	d0ab      	beq.n	8007a18 <_printf_i+0x164>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	079b      	lsls	r3, r3, #30
 8007ac4:	d413      	bmi.n	8007aee <_printf_i+0x23a>
 8007ac6:	68e0      	ldr	r0, [r4, #12]
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	4298      	cmp	r0, r3
 8007acc:	bfb8      	it	lt
 8007ace:	4618      	movlt	r0, r3
 8007ad0:	e7a4      	b.n	8007a1c <_printf_i+0x168>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	4640      	mov	r0, r8
 8007ada:	47d0      	blx	sl
 8007adc:	3001      	adds	r0, #1
 8007ade:	d09b      	beq.n	8007a18 <_printf_i+0x164>
 8007ae0:	3501      	adds	r5, #1
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	9903      	ldr	r1, [sp, #12]
 8007ae6:	1a5b      	subs	r3, r3, r1
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	dcf2      	bgt.n	8007ad2 <_printf_i+0x21e>
 8007aec:	e7eb      	b.n	8007ac6 <_printf_i+0x212>
 8007aee:	2500      	movs	r5, #0
 8007af0:	f104 0619 	add.w	r6, r4, #25
 8007af4:	e7f5      	b.n	8007ae2 <_printf_i+0x22e>
 8007af6:	bf00      	nop
 8007af8:	080085a3 	.word	0x080085a3
 8007afc:	080085b4 	.word	0x080085b4

08007b00 <_sbrk_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d06      	ldr	r5, [pc, #24]	; (8007b1c <_sbrk_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7fe f8b4 	bl	8005c78 <_sbrk>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_sbrk_r+0x1a>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_sbrk_r+0x1a>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20015128 	.word	0x20015128

08007b20 <__swbuf_r>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	460e      	mov	r6, r1
 8007b24:	4614      	mov	r4, r2
 8007b26:	4605      	mov	r5, r0
 8007b28:	b118      	cbz	r0, 8007b32 <__swbuf_r+0x12>
 8007b2a:	6983      	ldr	r3, [r0, #24]
 8007b2c:	b90b      	cbnz	r3, 8007b32 <__swbuf_r+0x12>
 8007b2e:	f000 f9d9 	bl	8007ee4 <__sinit>
 8007b32:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <__swbuf_r+0x98>)
 8007b34:	429c      	cmp	r4, r3
 8007b36:	d12b      	bne.n	8007b90 <__swbuf_r+0x70>
 8007b38:	686c      	ldr	r4, [r5, #4]
 8007b3a:	69a3      	ldr	r3, [r4, #24]
 8007b3c:	60a3      	str	r3, [r4, #8]
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	071a      	lsls	r2, r3, #28
 8007b42:	d52f      	bpl.n	8007ba4 <__swbuf_r+0x84>
 8007b44:	6923      	ldr	r3, [r4, #16]
 8007b46:	b36b      	cbz	r3, 8007ba4 <__swbuf_r+0x84>
 8007b48:	6923      	ldr	r3, [r4, #16]
 8007b4a:	6820      	ldr	r0, [r4, #0]
 8007b4c:	1ac0      	subs	r0, r0, r3
 8007b4e:	6963      	ldr	r3, [r4, #20]
 8007b50:	b2f6      	uxtb	r6, r6
 8007b52:	4283      	cmp	r3, r0
 8007b54:	4637      	mov	r7, r6
 8007b56:	dc04      	bgt.n	8007b62 <__swbuf_r+0x42>
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 f92e 	bl	8007dbc <_fflush_r>
 8007b60:	bb30      	cbnz	r0, 8007bb0 <__swbuf_r+0x90>
 8007b62:	68a3      	ldr	r3, [r4, #8]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	60a3      	str	r3, [r4, #8]
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	6022      	str	r2, [r4, #0]
 8007b6e:	701e      	strb	r6, [r3, #0]
 8007b70:	6963      	ldr	r3, [r4, #20]
 8007b72:	3001      	adds	r0, #1
 8007b74:	4283      	cmp	r3, r0
 8007b76:	d004      	beq.n	8007b82 <__swbuf_r+0x62>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	07db      	lsls	r3, r3, #31
 8007b7c:	d506      	bpl.n	8007b8c <__swbuf_r+0x6c>
 8007b7e:	2e0a      	cmp	r6, #10
 8007b80:	d104      	bne.n	8007b8c <__swbuf_r+0x6c>
 8007b82:	4621      	mov	r1, r4
 8007b84:	4628      	mov	r0, r5
 8007b86:	f000 f919 	bl	8007dbc <_fflush_r>
 8007b8a:	b988      	cbnz	r0, 8007bb0 <__swbuf_r+0x90>
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b90:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <__swbuf_r+0x9c>)
 8007b92:	429c      	cmp	r4, r3
 8007b94:	d101      	bne.n	8007b9a <__swbuf_r+0x7a>
 8007b96:	68ac      	ldr	r4, [r5, #8]
 8007b98:	e7cf      	b.n	8007b3a <__swbuf_r+0x1a>
 8007b9a:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <__swbuf_r+0xa0>)
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	bf08      	it	eq
 8007ba0:	68ec      	ldreq	r4, [r5, #12]
 8007ba2:	e7ca      	b.n	8007b3a <__swbuf_r+0x1a>
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 f80c 	bl	8007bc4 <__swsetup_r>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d0cb      	beq.n	8007b48 <__swbuf_r+0x28>
 8007bb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007bb4:	e7ea      	b.n	8007b8c <__swbuf_r+0x6c>
 8007bb6:	bf00      	nop
 8007bb8:	080085e8 	.word	0x080085e8
 8007bbc:	08008608 	.word	0x08008608
 8007bc0:	080085c8 	.word	0x080085c8

08007bc4 <__swsetup_r>:
 8007bc4:	4b32      	ldr	r3, [pc, #200]	; (8007c90 <__swsetup_r+0xcc>)
 8007bc6:	b570      	push	{r4, r5, r6, lr}
 8007bc8:	681d      	ldr	r5, [r3, #0]
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460c      	mov	r4, r1
 8007bce:	b125      	cbz	r5, 8007bda <__swsetup_r+0x16>
 8007bd0:	69ab      	ldr	r3, [r5, #24]
 8007bd2:	b913      	cbnz	r3, 8007bda <__swsetup_r+0x16>
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 f985 	bl	8007ee4 <__sinit>
 8007bda:	4b2e      	ldr	r3, [pc, #184]	; (8007c94 <__swsetup_r+0xd0>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	d10f      	bne.n	8007c00 <__swsetup_r+0x3c>
 8007be0:	686c      	ldr	r4, [r5, #4]
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007be8:	0719      	lsls	r1, r3, #28
 8007bea:	d42c      	bmi.n	8007c46 <__swsetup_r+0x82>
 8007bec:	06dd      	lsls	r5, r3, #27
 8007bee:	d411      	bmi.n	8007c14 <__swsetup_r+0x50>
 8007bf0:	2309      	movs	r3, #9
 8007bf2:	6033      	str	r3, [r6, #0]
 8007bf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bfe:	e03e      	b.n	8007c7e <__swsetup_r+0xba>
 8007c00:	4b25      	ldr	r3, [pc, #148]	; (8007c98 <__swsetup_r+0xd4>)
 8007c02:	429c      	cmp	r4, r3
 8007c04:	d101      	bne.n	8007c0a <__swsetup_r+0x46>
 8007c06:	68ac      	ldr	r4, [r5, #8]
 8007c08:	e7eb      	b.n	8007be2 <__swsetup_r+0x1e>
 8007c0a:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <__swsetup_r+0xd8>)
 8007c0c:	429c      	cmp	r4, r3
 8007c0e:	bf08      	it	eq
 8007c10:	68ec      	ldreq	r4, [r5, #12]
 8007c12:	e7e6      	b.n	8007be2 <__swsetup_r+0x1e>
 8007c14:	0758      	lsls	r0, r3, #29
 8007c16:	d512      	bpl.n	8007c3e <__swsetup_r+0x7a>
 8007c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c1a:	b141      	cbz	r1, 8007c2e <__swsetup_r+0x6a>
 8007c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c20:	4299      	cmp	r1, r3
 8007c22:	d002      	beq.n	8007c2a <__swsetup_r+0x66>
 8007c24:	4630      	mov	r0, r6
 8007c26:	f7ff fb9d 	bl	8007364 <_free_r>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c34:	81a3      	strh	r3, [r4, #12]
 8007c36:	2300      	movs	r3, #0
 8007c38:	6063      	str	r3, [r4, #4]
 8007c3a:	6923      	ldr	r3, [r4, #16]
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	f043 0308 	orr.w	r3, r3, #8
 8007c44:	81a3      	strh	r3, [r4, #12]
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	b94b      	cbnz	r3, 8007c5e <__swsetup_r+0x9a>
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c54:	d003      	beq.n	8007c5e <__swsetup_r+0x9a>
 8007c56:	4621      	mov	r1, r4
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f000 fa09 	bl	8008070 <__smakebuf_r>
 8007c5e:	89a0      	ldrh	r0, [r4, #12]
 8007c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c64:	f010 0301 	ands.w	r3, r0, #1
 8007c68:	d00a      	beq.n	8007c80 <__swsetup_r+0xbc>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60a3      	str	r3, [r4, #8]
 8007c6e:	6963      	ldr	r3, [r4, #20]
 8007c70:	425b      	negs	r3, r3
 8007c72:	61a3      	str	r3, [r4, #24]
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	b943      	cbnz	r3, 8007c8a <__swsetup_r+0xc6>
 8007c78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c7c:	d1ba      	bne.n	8007bf4 <__swsetup_r+0x30>
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	0781      	lsls	r1, r0, #30
 8007c82:	bf58      	it	pl
 8007c84:	6963      	ldrpl	r3, [r4, #20]
 8007c86:	60a3      	str	r3, [r4, #8]
 8007c88:	e7f4      	b.n	8007c74 <__swsetup_r+0xb0>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	e7f7      	b.n	8007c7e <__swsetup_r+0xba>
 8007c8e:	bf00      	nop
 8007c90:	20000014 	.word	0x20000014
 8007c94:	080085e8 	.word	0x080085e8
 8007c98:	08008608 	.word	0x08008608
 8007c9c:	080085c8 	.word	0x080085c8

08007ca0 <abort>:
 8007ca0:	b508      	push	{r3, lr}
 8007ca2:	2006      	movs	r0, #6
 8007ca4:	f000 fa58 	bl	8008158 <raise>
 8007ca8:	2001      	movs	r0, #1
 8007caa:	f7fd ff89 	bl	8005bc0 <_exit>
	...

08007cb0 <__sflush_r>:
 8007cb0:	898a      	ldrh	r2, [r1, #12]
 8007cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	0710      	lsls	r0, r2, #28
 8007cba:	460c      	mov	r4, r1
 8007cbc:	d458      	bmi.n	8007d70 <__sflush_r+0xc0>
 8007cbe:	684b      	ldr	r3, [r1, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	dc05      	bgt.n	8007cd0 <__sflush_r+0x20>
 8007cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	dc02      	bgt.n	8007cd0 <__sflush_r+0x20>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	d0f9      	beq.n	8007cca <__sflush_r+0x1a>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cdc:	682f      	ldr	r7, [r5, #0]
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	d032      	beq.n	8007d48 <__sflush_r+0x98>
 8007ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	075a      	lsls	r2, r3, #29
 8007ce8:	d505      	bpl.n	8007cf6 <__sflush_r+0x46>
 8007cea:	6863      	ldr	r3, [r4, #4]
 8007cec:	1ac0      	subs	r0, r0, r3
 8007cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cf0:	b10b      	cbz	r3, 8007cf6 <__sflush_r+0x46>
 8007cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cf4:	1ac0      	subs	r0, r0, r3
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cfc:	6a21      	ldr	r1, [r4, #32]
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47b0      	blx	r6
 8007d02:	1c43      	adds	r3, r0, #1
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	d106      	bne.n	8007d16 <__sflush_r+0x66>
 8007d08:	6829      	ldr	r1, [r5, #0]
 8007d0a:	291d      	cmp	r1, #29
 8007d0c:	d82c      	bhi.n	8007d68 <__sflush_r+0xb8>
 8007d0e:	4a2a      	ldr	r2, [pc, #168]	; (8007db8 <__sflush_r+0x108>)
 8007d10:	40ca      	lsrs	r2, r1
 8007d12:	07d6      	lsls	r6, r2, #31
 8007d14:	d528      	bpl.n	8007d68 <__sflush_r+0xb8>
 8007d16:	2200      	movs	r2, #0
 8007d18:	6062      	str	r2, [r4, #4]
 8007d1a:	04d9      	lsls	r1, r3, #19
 8007d1c:	6922      	ldr	r2, [r4, #16]
 8007d1e:	6022      	str	r2, [r4, #0]
 8007d20:	d504      	bpl.n	8007d2c <__sflush_r+0x7c>
 8007d22:	1c42      	adds	r2, r0, #1
 8007d24:	d101      	bne.n	8007d2a <__sflush_r+0x7a>
 8007d26:	682b      	ldr	r3, [r5, #0]
 8007d28:	b903      	cbnz	r3, 8007d2c <__sflush_r+0x7c>
 8007d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8007d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d2e:	602f      	str	r7, [r5, #0]
 8007d30:	2900      	cmp	r1, #0
 8007d32:	d0ca      	beq.n	8007cca <__sflush_r+0x1a>
 8007d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d38:	4299      	cmp	r1, r3
 8007d3a:	d002      	beq.n	8007d42 <__sflush_r+0x92>
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f7ff fb11 	bl	8007364 <_free_r>
 8007d42:	2000      	movs	r0, #0
 8007d44:	6360      	str	r0, [r4, #52]	; 0x34
 8007d46:	e7c1      	b.n	8007ccc <__sflush_r+0x1c>
 8007d48:	6a21      	ldr	r1, [r4, #32]
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	47b0      	blx	r6
 8007d50:	1c41      	adds	r1, r0, #1
 8007d52:	d1c7      	bne.n	8007ce4 <__sflush_r+0x34>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0c4      	beq.n	8007ce4 <__sflush_r+0x34>
 8007d5a:	2b1d      	cmp	r3, #29
 8007d5c:	d001      	beq.n	8007d62 <__sflush_r+0xb2>
 8007d5e:	2b16      	cmp	r3, #22
 8007d60:	d101      	bne.n	8007d66 <__sflush_r+0xb6>
 8007d62:	602f      	str	r7, [r5, #0]
 8007d64:	e7b1      	b.n	8007cca <__sflush_r+0x1a>
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	e7ad      	b.n	8007ccc <__sflush_r+0x1c>
 8007d70:	690f      	ldr	r7, [r1, #16]
 8007d72:	2f00      	cmp	r7, #0
 8007d74:	d0a9      	beq.n	8007cca <__sflush_r+0x1a>
 8007d76:	0793      	lsls	r3, r2, #30
 8007d78:	680e      	ldr	r6, [r1, #0]
 8007d7a:	bf08      	it	eq
 8007d7c:	694b      	ldreq	r3, [r1, #20]
 8007d7e:	600f      	str	r7, [r1, #0]
 8007d80:	bf18      	it	ne
 8007d82:	2300      	movne	r3, #0
 8007d84:	eba6 0807 	sub.w	r8, r6, r7
 8007d88:	608b      	str	r3, [r1, #8]
 8007d8a:	f1b8 0f00 	cmp.w	r8, #0
 8007d8e:	dd9c      	ble.n	8007cca <__sflush_r+0x1a>
 8007d90:	6a21      	ldr	r1, [r4, #32]
 8007d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d94:	4643      	mov	r3, r8
 8007d96:	463a      	mov	r2, r7
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b0      	blx	r6
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	dc06      	bgt.n	8007dae <__sflush_r+0xfe>
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dac:	e78e      	b.n	8007ccc <__sflush_r+0x1c>
 8007dae:	4407      	add	r7, r0
 8007db0:	eba8 0800 	sub.w	r8, r8, r0
 8007db4:	e7e9      	b.n	8007d8a <__sflush_r+0xda>
 8007db6:	bf00      	nop
 8007db8:	20400001 	.word	0x20400001

08007dbc <_fflush_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	690b      	ldr	r3, [r1, #16]
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	b913      	cbnz	r3, 8007dcc <_fflush_r+0x10>
 8007dc6:	2500      	movs	r5, #0
 8007dc8:	4628      	mov	r0, r5
 8007dca:	bd38      	pop	{r3, r4, r5, pc}
 8007dcc:	b118      	cbz	r0, 8007dd6 <_fflush_r+0x1a>
 8007dce:	6983      	ldr	r3, [r0, #24]
 8007dd0:	b90b      	cbnz	r3, 8007dd6 <_fflush_r+0x1a>
 8007dd2:	f000 f887 	bl	8007ee4 <__sinit>
 8007dd6:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <_fflush_r+0x6c>)
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	d11b      	bne.n	8007e14 <_fflush_r+0x58>
 8007ddc:	686c      	ldr	r4, [r5, #4]
 8007dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0ef      	beq.n	8007dc6 <_fflush_r+0xa>
 8007de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007de8:	07d0      	lsls	r0, r2, #31
 8007dea:	d404      	bmi.n	8007df6 <_fflush_r+0x3a>
 8007dec:	0599      	lsls	r1, r3, #22
 8007dee:	d402      	bmi.n	8007df6 <_fflush_r+0x3a>
 8007df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df2:	f000 f915 	bl	8008020 <__retarget_lock_acquire_recursive>
 8007df6:	4628      	mov	r0, r5
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f7ff ff59 	bl	8007cb0 <__sflush_r>
 8007dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e00:	07da      	lsls	r2, r3, #31
 8007e02:	4605      	mov	r5, r0
 8007e04:	d4e0      	bmi.n	8007dc8 <_fflush_r+0xc>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	059b      	lsls	r3, r3, #22
 8007e0a:	d4dd      	bmi.n	8007dc8 <_fflush_r+0xc>
 8007e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e0e:	f000 f908 	bl	8008022 <__retarget_lock_release_recursive>
 8007e12:	e7d9      	b.n	8007dc8 <_fflush_r+0xc>
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <_fflush_r+0x70>)
 8007e16:	429c      	cmp	r4, r3
 8007e18:	d101      	bne.n	8007e1e <_fflush_r+0x62>
 8007e1a:	68ac      	ldr	r4, [r5, #8]
 8007e1c:	e7df      	b.n	8007dde <_fflush_r+0x22>
 8007e1e:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <_fflush_r+0x74>)
 8007e20:	429c      	cmp	r4, r3
 8007e22:	bf08      	it	eq
 8007e24:	68ec      	ldreq	r4, [r5, #12]
 8007e26:	e7da      	b.n	8007dde <_fflush_r+0x22>
 8007e28:	080085e8 	.word	0x080085e8
 8007e2c:	08008608 	.word	0x08008608
 8007e30:	080085c8 	.word	0x080085c8

08007e34 <std>:
 8007e34:	2300      	movs	r3, #0
 8007e36:	b510      	push	{r4, lr}
 8007e38:	4604      	mov	r4, r0
 8007e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e42:	6083      	str	r3, [r0, #8]
 8007e44:	8181      	strh	r1, [r0, #12]
 8007e46:	6643      	str	r3, [r0, #100]	; 0x64
 8007e48:	81c2      	strh	r2, [r0, #14]
 8007e4a:	6183      	str	r3, [r0, #24]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	2208      	movs	r2, #8
 8007e50:	305c      	adds	r0, #92	; 0x5c
 8007e52:	f7ff fa09 	bl	8007268 <memset>
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <std+0x38>)
 8007e58:	6263      	str	r3, [r4, #36]	; 0x24
 8007e5a:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <std+0x3c>)
 8007e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e5e:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <std+0x40>)
 8007e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e62:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <std+0x44>)
 8007e64:	6224      	str	r4, [r4, #32]
 8007e66:	6323      	str	r3, [r4, #48]	; 0x30
 8007e68:	bd10      	pop	{r4, pc}
 8007e6a:	bf00      	nop
 8007e6c:	08008191 	.word	0x08008191
 8007e70:	080081b3 	.word	0x080081b3
 8007e74:	080081eb 	.word	0x080081eb
 8007e78:	0800820f 	.word	0x0800820f

08007e7c <_cleanup_r>:
 8007e7c:	4901      	ldr	r1, [pc, #4]	; (8007e84 <_cleanup_r+0x8>)
 8007e7e:	f000 b8af 	b.w	8007fe0 <_fwalk_reent>
 8007e82:	bf00      	nop
 8007e84:	08007dbd 	.word	0x08007dbd

08007e88 <__sfmoreglue>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	2268      	movs	r2, #104	; 0x68
 8007e8c:	1e4d      	subs	r5, r1, #1
 8007e8e:	4355      	muls	r5, r2
 8007e90:	460e      	mov	r6, r1
 8007e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e96:	f7ff fad1 	bl	800743c <_malloc_r>
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	b140      	cbz	r0, 8007eb0 <__sfmoreglue+0x28>
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ea4:	300c      	adds	r0, #12
 8007ea6:	60a0      	str	r0, [r4, #8]
 8007ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007eac:	f7ff f9dc 	bl	8007268 <memset>
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}

08007eb4 <__sfp_lock_acquire>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	; (8007ebc <__sfp_lock_acquire+0x8>)
 8007eb6:	f000 b8b3 	b.w	8008020 <__retarget_lock_acquire_recursive>
 8007eba:	bf00      	nop
 8007ebc:	20015125 	.word	0x20015125

08007ec0 <__sfp_lock_release>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	; (8007ec8 <__sfp_lock_release+0x8>)
 8007ec2:	f000 b8ae 	b.w	8008022 <__retarget_lock_release_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20015125 	.word	0x20015125

08007ecc <__sinit_lock_acquire>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	; (8007ed4 <__sinit_lock_acquire+0x8>)
 8007ece:	f000 b8a7 	b.w	8008020 <__retarget_lock_acquire_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	20015126 	.word	0x20015126

08007ed8 <__sinit_lock_release>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__sinit_lock_release+0x8>)
 8007eda:	f000 b8a2 	b.w	8008022 <__retarget_lock_release_recursive>
 8007ede:	bf00      	nop
 8007ee0:	20015126 	.word	0x20015126

08007ee4 <__sinit>:
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	f7ff fff0 	bl	8007ecc <__sinit_lock_acquire>
 8007eec:	69a3      	ldr	r3, [r4, #24]
 8007eee:	b11b      	cbz	r3, 8007ef8 <__sinit+0x14>
 8007ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef4:	f7ff bff0 	b.w	8007ed8 <__sinit_lock_release>
 8007ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007efc:	6523      	str	r3, [r4, #80]	; 0x50
 8007efe:	4b13      	ldr	r3, [pc, #76]	; (8007f4c <__sinit+0x68>)
 8007f00:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <__sinit+0x6c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f06:	42a3      	cmp	r3, r4
 8007f08:	bf04      	itt	eq
 8007f0a:	2301      	moveq	r3, #1
 8007f0c:	61a3      	streq	r3, [r4, #24]
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 f820 	bl	8007f54 <__sfp>
 8007f14:	6060      	str	r0, [r4, #4]
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 f81c 	bl	8007f54 <__sfp>
 8007f1c:	60a0      	str	r0, [r4, #8]
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 f818 	bl	8007f54 <__sfp>
 8007f24:	2200      	movs	r2, #0
 8007f26:	60e0      	str	r0, [r4, #12]
 8007f28:	2104      	movs	r1, #4
 8007f2a:	6860      	ldr	r0, [r4, #4]
 8007f2c:	f7ff ff82 	bl	8007e34 <std>
 8007f30:	68a0      	ldr	r0, [r4, #8]
 8007f32:	2201      	movs	r2, #1
 8007f34:	2109      	movs	r1, #9
 8007f36:	f7ff ff7d 	bl	8007e34 <std>
 8007f3a:	68e0      	ldr	r0, [r4, #12]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	2112      	movs	r1, #18
 8007f40:	f7ff ff78 	bl	8007e34 <std>
 8007f44:	2301      	movs	r3, #1
 8007f46:	61a3      	str	r3, [r4, #24]
 8007f48:	e7d2      	b.n	8007ef0 <__sinit+0xc>
 8007f4a:	bf00      	nop
 8007f4c:	080084e0 	.word	0x080084e0
 8007f50:	08007e7d 	.word	0x08007e7d

08007f54 <__sfp>:
 8007f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f56:	4607      	mov	r7, r0
 8007f58:	f7ff ffac 	bl	8007eb4 <__sfp_lock_acquire>
 8007f5c:	4b1e      	ldr	r3, [pc, #120]	; (8007fd8 <__sfp+0x84>)
 8007f5e:	681e      	ldr	r6, [r3, #0]
 8007f60:	69b3      	ldr	r3, [r6, #24]
 8007f62:	b913      	cbnz	r3, 8007f6a <__sfp+0x16>
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7ff ffbd 	bl	8007ee4 <__sinit>
 8007f6a:	3648      	adds	r6, #72	; 0x48
 8007f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	d503      	bpl.n	8007f7c <__sfp+0x28>
 8007f74:	6833      	ldr	r3, [r6, #0]
 8007f76:	b30b      	cbz	r3, 8007fbc <__sfp+0x68>
 8007f78:	6836      	ldr	r6, [r6, #0]
 8007f7a:	e7f7      	b.n	8007f6c <__sfp+0x18>
 8007f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f80:	b9d5      	cbnz	r5, 8007fb8 <__sfp+0x64>
 8007f82:	4b16      	ldr	r3, [pc, #88]	; (8007fdc <__sfp+0x88>)
 8007f84:	60e3      	str	r3, [r4, #12]
 8007f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8007f8c:	f000 f847 	bl	800801e <__retarget_lock_init_recursive>
 8007f90:	f7ff ff96 	bl	8007ec0 <__sfp_lock_release>
 8007f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f9c:	6025      	str	r5, [r4, #0]
 8007f9e:	61a5      	str	r5, [r4, #24]
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fa8:	f7ff f95e 	bl	8007268 <memset>
 8007fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb8:	3468      	adds	r4, #104	; 0x68
 8007fba:	e7d9      	b.n	8007f70 <__sfp+0x1c>
 8007fbc:	2104      	movs	r1, #4
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f7ff ff62 	bl	8007e88 <__sfmoreglue>
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	6030      	str	r0, [r6, #0]
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d1d5      	bne.n	8007f78 <__sfp+0x24>
 8007fcc:	f7ff ff78 	bl	8007ec0 <__sfp_lock_release>
 8007fd0:	230c      	movs	r3, #12
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	e7ee      	b.n	8007fb4 <__sfp+0x60>
 8007fd6:	bf00      	nop
 8007fd8:	080084e0 	.word	0x080084e0
 8007fdc:	ffff0001 	.word	0xffff0001

08007fe0 <_fwalk_reent>:
 8007fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	4688      	mov	r8, r1
 8007fe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fec:	2700      	movs	r7, #0
 8007fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8007ff6:	d505      	bpl.n	8008004 <_fwalk_reent+0x24>
 8007ff8:	6824      	ldr	r4, [r4, #0]
 8007ffa:	2c00      	cmp	r4, #0
 8007ffc:	d1f7      	bne.n	8007fee <_fwalk_reent+0xe>
 8007ffe:	4638      	mov	r0, r7
 8008000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008004:	89ab      	ldrh	r3, [r5, #12]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d907      	bls.n	800801a <_fwalk_reent+0x3a>
 800800a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800800e:	3301      	adds	r3, #1
 8008010:	d003      	beq.n	800801a <_fwalk_reent+0x3a>
 8008012:	4629      	mov	r1, r5
 8008014:	4630      	mov	r0, r6
 8008016:	47c0      	blx	r8
 8008018:	4307      	orrs	r7, r0
 800801a:	3568      	adds	r5, #104	; 0x68
 800801c:	e7e9      	b.n	8007ff2 <_fwalk_reent+0x12>

0800801e <__retarget_lock_init_recursive>:
 800801e:	4770      	bx	lr

08008020 <__retarget_lock_acquire_recursive>:
 8008020:	4770      	bx	lr

08008022 <__retarget_lock_release_recursive>:
 8008022:	4770      	bx	lr

08008024 <__swhatbuf_r>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	460e      	mov	r6, r1
 8008028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802c:	2900      	cmp	r1, #0
 800802e:	b096      	sub	sp, #88	; 0x58
 8008030:	4614      	mov	r4, r2
 8008032:	461d      	mov	r5, r3
 8008034:	da08      	bge.n	8008048 <__swhatbuf_r+0x24>
 8008036:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	602a      	str	r2, [r5, #0]
 800803e:	061a      	lsls	r2, r3, #24
 8008040:	d410      	bmi.n	8008064 <__swhatbuf_r+0x40>
 8008042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008046:	e00e      	b.n	8008066 <__swhatbuf_r+0x42>
 8008048:	466a      	mov	r2, sp
 800804a:	f000 f8f5 	bl	8008238 <_fstat_r>
 800804e:	2800      	cmp	r0, #0
 8008050:	dbf1      	blt.n	8008036 <__swhatbuf_r+0x12>
 8008052:	9a01      	ldr	r2, [sp, #4]
 8008054:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008058:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800805c:	425a      	negs	r2, r3
 800805e:	415a      	adcs	r2, r3
 8008060:	602a      	str	r2, [r5, #0]
 8008062:	e7ee      	b.n	8008042 <__swhatbuf_r+0x1e>
 8008064:	2340      	movs	r3, #64	; 0x40
 8008066:	2000      	movs	r0, #0
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	b016      	add	sp, #88	; 0x58
 800806c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008070 <__smakebuf_r>:
 8008070:	898b      	ldrh	r3, [r1, #12]
 8008072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008074:	079d      	lsls	r5, r3, #30
 8008076:	4606      	mov	r6, r0
 8008078:	460c      	mov	r4, r1
 800807a:	d507      	bpl.n	800808c <__smakebuf_r+0x1c>
 800807c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	6123      	str	r3, [r4, #16]
 8008084:	2301      	movs	r3, #1
 8008086:	6163      	str	r3, [r4, #20]
 8008088:	b002      	add	sp, #8
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	ab01      	add	r3, sp, #4
 800808e:	466a      	mov	r2, sp
 8008090:	f7ff ffc8 	bl	8008024 <__swhatbuf_r>
 8008094:	9900      	ldr	r1, [sp, #0]
 8008096:	4605      	mov	r5, r0
 8008098:	4630      	mov	r0, r6
 800809a:	f7ff f9cf 	bl	800743c <_malloc_r>
 800809e:	b948      	cbnz	r0, 80080b4 <__smakebuf_r+0x44>
 80080a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080a4:	059a      	lsls	r2, r3, #22
 80080a6:	d4ef      	bmi.n	8008088 <__smakebuf_r+0x18>
 80080a8:	f023 0303 	bic.w	r3, r3, #3
 80080ac:	f043 0302 	orr.w	r3, r3, #2
 80080b0:	81a3      	strh	r3, [r4, #12]
 80080b2:	e7e3      	b.n	800807c <__smakebuf_r+0xc>
 80080b4:	4b0d      	ldr	r3, [pc, #52]	; (80080ec <__smakebuf_r+0x7c>)
 80080b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	6020      	str	r0, [r4, #0]
 80080bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c0:	81a3      	strh	r3, [r4, #12]
 80080c2:	9b00      	ldr	r3, [sp, #0]
 80080c4:	6163      	str	r3, [r4, #20]
 80080c6:	9b01      	ldr	r3, [sp, #4]
 80080c8:	6120      	str	r0, [r4, #16]
 80080ca:	b15b      	cbz	r3, 80080e4 <__smakebuf_r+0x74>
 80080cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080d0:	4630      	mov	r0, r6
 80080d2:	f000 f8c3 	bl	800825c <_isatty_r>
 80080d6:	b128      	cbz	r0, 80080e4 <__smakebuf_r+0x74>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	f023 0303 	bic.w	r3, r3, #3
 80080de:	f043 0301 	orr.w	r3, r3, #1
 80080e2:	81a3      	strh	r3, [r4, #12]
 80080e4:	89a0      	ldrh	r0, [r4, #12]
 80080e6:	4305      	orrs	r5, r0
 80080e8:	81a5      	strh	r5, [r4, #12]
 80080ea:	e7cd      	b.n	8008088 <__smakebuf_r+0x18>
 80080ec:	08007e7d 	.word	0x08007e7d

080080f0 <__malloc_lock>:
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <__malloc_lock+0x8>)
 80080f2:	f7ff bf95 	b.w	8008020 <__retarget_lock_acquire_recursive>
 80080f6:	bf00      	nop
 80080f8:	20015124 	.word	0x20015124

080080fc <__malloc_unlock>:
 80080fc:	4801      	ldr	r0, [pc, #4]	; (8008104 <__malloc_unlock+0x8>)
 80080fe:	f7ff bf90 	b.w	8008022 <__retarget_lock_release_recursive>
 8008102:	bf00      	nop
 8008104:	20015124 	.word	0x20015124

08008108 <_raise_r>:
 8008108:	291f      	cmp	r1, #31
 800810a:	b538      	push	{r3, r4, r5, lr}
 800810c:	4604      	mov	r4, r0
 800810e:	460d      	mov	r5, r1
 8008110:	d904      	bls.n	800811c <_raise_r+0x14>
 8008112:	2316      	movs	r3, #22
 8008114:	6003      	str	r3, [r0, #0]
 8008116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800811e:	b112      	cbz	r2, 8008126 <_raise_r+0x1e>
 8008120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008124:	b94b      	cbnz	r3, 800813a <_raise_r+0x32>
 8008126:	4620      	mov	r0, r4
 8008128:	f000 f830 	bl	800818c <_getpid_r>
 800812c:	462a      	mov	r2, r5
 800812e:	4601      	mov	r1, r0
 8008130:	4620      	mov	r0, r4
 8008132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008136:	f000 b817 	b.w	8008168 <_kill_r>
 800813a:	2b01      	cmp	r3, #1
 800813c:	d00a      	beq.n	8008154 <_raise_r+0x4c>
 800813e:	1c59      	adds	r1, r3, #1
 8008140:	d103      	bne.n	800814a <_raise_r+0x42>
 8008142:	2316      	movs	r3, #22
 8008144:	6003      	str	r3, [r0, #0]
 8008146:	2001      	movs	r0, #1
 8008148:	e7e7      	b.n	800811a <_raise_r+0x12>
 800814a:	2400      	movs	r4, #0
 800814c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008150:	4628      	mov	r0, r5
 8008152:	4798      	blx	r3
 8008154:	2000      	movs	r0, #0
 8008156:	e7e0      	b.n	800811a <_raise_r+0x12>

08008158 <raise>:
 8008158:	4b02      	ldr	r3, [pc, #8]	; (8008164 <raise+0xc>)
 800815a:	4601      	mov	r1, r0
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	f7ff bfd3 	b.w	8008108 <_raise_r>
 8008162:	bf00      	nop
 8008164:	20000014 	.word	0x20000014

08008168 <_kill_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	; (8008188 <_kill_r+0x20>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	4611      	mov	r1, r2
 8008174:	602b      	str	r3, [r5, #0]
 8008176:	f7fd fd13 	bl	8005ba0 <_kill>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d102      	bne.n	8008184 <_kill_r+0x1c>
 800817e:	682b      	ldr	r3, [r5, #0]
 8008180:	b103      	cbz	r3, 8008184 <_kill_r+0x1c>
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	bd38      	pop	{r3, r4, r5, pc}
 8008186:	bf00      	nop
 8008188:	20015128 	.word	0x20015128

0800818c <_getpid_r>:
 800818c:	f7fd bd00 	b.w	8005b90 <_getpid>

08008190 <__sread>:
 8008190:	b510      	push	{r4, lr}
 8008192:	460c      	mov	r4, r1
 8008194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008198:	f000 f882 	bl	80082a0 <_read_r>
 800819c:	2800      	cmp	r0, #0
 800819e:	bfab      	itete	ge
 80081a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081a2:	89a3      	ldrhlt	r3, [r4, #12]
 80081a4:	181b      	addge	r3, r3, r0
 80081a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081aa:	bfac      	ite	ge
 80081ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80081ae:	81a3      	strhlt	r3, [r4, #12]
 80081b0:	bd10      	pop	{r4, pc}

080081b2 <__swrite>:
 80081b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b6:	461f      	mov	r7, r3
 80081b8:	898b      	ldrh	r3, [r1, #12]
 80081ba:	05db      	lsls	r3, r3, #23
 80081bc:	4605      	mov	r5, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	4616      	mov	r6, r2
 80081c2:	d505      	bpl.n	80081d0 <__swrite+0x1e>
 80081c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c8:	2302      	movs	r3, #2
 80081ca:	2200      	movs	r2, #0
 80081cc:	f000 f856 	bl	800827c <_lseek_r>
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081da:	81a3      	strh	r3, [r4, #12]
 80081dc:	4632      	mov	r2, r6
 80081de:	463b      	mov	r3, r7
 80081e0:	4628      	mov	r0, r5
 80081e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081e6:	f7fd b8f3 	b.w	80053d0 <_write_r>

080081ea <__sseek>:
 80081ea:	b510      	push	{r4, lr}
 80081ec:	460c      	mov	r4, r1
 80081ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f2:	f000 f843 	bl	800827c <_lseek_r>
 80081f6:	1c43      	adds	r3, r0, #1
 80081f8:	89a3      	ldrh	r3, [r4, #12]
 80081fa:	bf15      	itete	ne
 80081fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80081fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008206:	81a3      	strheq	r3, [r4, #12]
 8008208:	bf18      	it	ne
 800820a:	81a3      	strhne	r3, [r4, #12]
 800820c:	bd10      	pop	{r4, pc}

0800820e <__sclose>:
 800820e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008212:	f000 b801 	b.w	8008218 <_close_r>
	...

08008218 <_close_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d06      	ldr	r5, [pc, #24]	; (8008234 <_close_r+0x1c>)
 800821c:	2300      	movs	r3, #0
 800821e:	4604      	mov	r4, r0
 8008220:	4608      	mov	r0, r1
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	f7fd fcf3 	bl	8005c0e <_close>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_close_r+0x1a>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_close_r+0x1a>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	20015128 	.word	0x20015128

08008238 <_fstat_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4d07      	ldr	r5, [pc, #28]	; (8008258 <_fstat_r+0x20>)
 800823c:	2300      	movs	r3, #0
 800823e:	4604      	mov	r4, r0
 8008240:	4608      	mov	r0, r1
 8008242:	4611      	mov	r1, r2
 8008244:	602b      	str	r3, [r5, #0]
 8008246:	f7fd fcee 	bl	8005c26 <_fstat>
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	d102      	bne.n	8008254 <_fstat_r+0x1c>
 800824e:	682b      	ldr	r3, [r5, #0]
 8008250:	b103      	cbz	r3, 8008254 <_fstat_r+0x1c>
 8008252:	6023      	str	r3, [r4, #0]
 8008254:	bd38      	pop	{r3, r4, r5, pc}
 8008256:	bf00      	nop
 8008258:	20015128 	.word	0x20015128

0800825c <_isatty_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4d06      	ldr	r5, [pc, #24]	; (8008278 <_isatty_r+0x1c>)
 8008260:	2300      	movs	r3, #0
 8008262:	4604      	mov	r4, r0
 8008264:	4608      	mov	r0, r1
 8008266:	602b      	str	r3, [r5, #0]
 8008268:	f7fd fced 	bl	8005c46 <_isatty>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d102      	bne.n	8008276 <_isatty_r+0x1a>
 8008270:	682b      	ldr	r3, [r5, #0]
 8008272:	b103      	cbz	r3, 8008276 <_isatty_r+0x1a>
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	20015128 	.word	0x20015128

0800827c <_lseek_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d07      	ldr	r5, [pc, #28]	; (800829c <_lseek_r+0x20>)
 8008280:	4604      	mov	r4, r0
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	2200      	movs	r2, #0
 8008288:	602a      	str	r2, [r5, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	f7fd fce6 	bl	8005c5c <_lseek>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_lseek_r+0x1e>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_lseek_r+0x1e>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	20015128 	.word	0x20015128

080082a0 <_read_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	4d07      	ldr	r5, [pc, #28]	; (80082c0 <_read_r+0x20>)
 80082a4:	4604      	mov	r4, r0
 80082a6:	4608      	mov	r0, r1
 80082a8:	4611      	mov	r1, r2
 80082aa:	2200      	movs	r2, #0
 80082ac:	602a      	str	r2, [r5, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f7fd fc90 	bl	8005bd4 <_read>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_read_r+0x1e>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b103      	cbz	r3, 80082be <_read_r+0x1e>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	20015128 	.word	0x20015128

080082c4 <_init>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	bf00      	nop
 80082c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ca:	bc08      	pop	{r3}
 80082cc:	469e      	mov	lr, r3
 80082ce:	4770      	bx	lr

080082d0 <_fini>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	bf00      	nop
 80082d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d6:	bc08      	pop	{r3}
 80082d8:	469e      	mov	lr, r3
 80082da:	4770      	bx	lr
