/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "stm32f4xx.h"
#include "gpio_driver.h"
#include "usart_driver.h"
#include "common_utils.h"
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"

#define DWT_CTRL			(*(volatile uint32_t *) 0xE0001000U)

extern struct USART_Handle_t Test_USART;

TaskHandle_t task_1_handle;
TaskHandle_t task_2_handle;

static void task_1(void *params);
static void task_2(void *params);

int main(void)
{
	BaseType_t status;

	//Configure the UART
	configure_uart();

	//Enable the DWT (Data Watch Point) Cycle Count Feature
	DWT_CTRL |= (1 << 0);

	//Enabling SEGGER SYSVIEW event tracing
	SEGGER_SYSVIEW_Conf();
	SEGGER_SYSVIEW_Start();

	//HAL_UART_Receive_IT(&huart2,RxBuf,1);

	status = xTaskCreate(task_1,"task_1",1024,NULL,2,&task_1_handle);
	configASSERT(status == pdPASS);

	status = xTaskCreate(task_2,"task_2",1024,NULL,2,&task_2_handle);
	configASSERT(status == pdPASS);

	vTaskStartScheduler();


    /* Loop forever */
	for(;;);
}

static void task_1(void *params)
{
	char *msg = "Message from TASK-1\r\n";

    while(1)
    {
    	USART_SendData(Test_USART,(uint8_t *)msg,strlen(msg));
    }

}

static void task_2(void *params)
{
	char *msg = "Message from TASK-2\r\n";

	while(1)
	{
		USART_SendData(Test_USART,(uint8_t *)msg,strlen(msg));
	}

}
