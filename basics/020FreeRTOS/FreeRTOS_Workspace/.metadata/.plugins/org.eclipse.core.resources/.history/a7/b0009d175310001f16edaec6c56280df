/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <string.h>
#include "stm32f4xx_hal_uart.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DWT_CTRL			(*(volatile uint32_t *) 0xE0001000U)
#define APP_STATE_MENU		1
#define APP_STATE_LED		2
#define APP_STATE_RTC		3

#define TIMER_PERIOD_TICKS	200

#define LED_PATTERN_NONE	0
#define LED_PATTERN_1		1
#define LED_PATTERN_2		2
#define LED_PATTERN_3		3
#define LED_PATTERN_4		4


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t RxBuf[10];
uint8_t app_state = APP_STATE_MENU;

TaskHandle_t task_handle_menu;
TaskHandle_t task_handle_led;
TaskHandle_t task_handle_rtc;
TaskHandle_t task_handle_cmd;
TaskHandle_t task_handle_print;

QueueHandle_t print_queue;

TimerHandle_t led_timer;
uint8_t current_led_pattern = LED_PATTERN_NONE;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
static void task_menu(void *params);
static void task_led(void *params);
static void task_rtc(void *params);
static void task_cmd(void *params);
static void task_print(void *params);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
static void process_cmd(void);
static void blink_led_pattern_1(void);
static void blink_led_pattern_2(void);
static void blink_led_pattern_3(void);
static void blink_led_pattern_4(void);
static void led_timer_callback(TimerHandle_t timer);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	BaseType_t status;

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */

  HAL_UART_MspInit(&huart2);

  //Enable the DWT (Data Watch Point) Cycle Count Feature
  DWT_CTRL |= (1 << 0);

  //Enabling SEGGER SYSVIEW event tracing
  SEGGER_SYSVIEW_Conf();
  SEGGER_SYSVIEW_Start();

  //HAL_UART_Receive_IT(&huart2,RxBuf,1);

  status = xTaskCreate(task_menu,"menu_task",1024,NULL,2,&task_handle_menu);
  configASSERT(status == pdPASS);

  status = xTaskCreate(task_led,"led_task",1024,NULL,2,&task_handle_led);
  configASSERT(status == pdPASS);

  status = xTaskCreate(task_rtc,"rtc_task",1024,NULL,2,&task_handle_rtc);
  configASSERT(status == pdPASS);

  status = xTaskCreate(task_cmd,"cmd_task",1024,NULL,2,&task_handle_cmd);
  configASSERT(status == pdPASS);

  status = xTaskCreate(task_print,"print_task",1024,NULL,2,&task_handle_print);
  configASSERT(status == pdPASS);

  print_queue = xQueueCreate(10,sizeof(unsigned long));
  configASSERT(print_queue != NULL);

  led_timer = xTimerCreate("led_timer",TIMER_PERIOD_TICKS,pdTRUE,"led_timer",led_timer_callback);

  vTaskStartScheduler();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

static void task_menu(void *params)
{
	char *menu_msg = "\r\nMain Menu\r\n1. LED Control\r\n2. RTC Control\r\nEnter Choice: ";

    while(1)
    {
    	xQueueSend(print_queue,&menu_msg,portMAX_DELAY);
    	HAL_UART_Receive_IT(&huart2,RxBuf,1);
    	xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
    }
}

static void task_led(void *params)
{
	char *msg = "\r\n LED Control\r\nChoose Pattern 1, 2, 3 or 4 (0 to Exit): ";

    while(1)
    {
    	if(app_state != APP_STATE_LED)
    	{
    		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
    	}
    	else
    	{
    		xQueueSend(print_queue,&msg,portMAX_DELAY);
    		HAL_UART_Receive_IT(&huart2,RxBuf,1);
    		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
    		if(RxBuf[0] == '1')
    		{
    			current_led_pattern = LED_PATTERN_1;
    			xTimerStop(led_timer,portMAX_DELAY);
    			xTimerStart(led_timer,portMAX_DELAY);
    		}
    		else if(RxBuf[0] == '2')
			{
    			current_led_pattern = LED_PATTERN_2;
    			xTimerStop(led_timer,portMAX_DELAY);
    			xTimerStart(led_timer,portMAX_DELAY);
			}
    		else if(RxBuf[0] == '3')
			{
    			current_led_pattern = LED_PATTERN_3;
    			xTimerStop(led_timer,portMAX_DELAY);
    			xTimerStart(led_timer,portMAX_DELAY);
			}
    		else if(RxBuf[0] == '4')
			{
    			current_led_pattern = LED_PATTERN_4;
    			xTimerStop(led_timer,portMAX_DELAY);
    			xTimerStart(led_timer,portMAX_DELAY);
			}
    		else if(RxBuf[0] == '0')
    		{
    		   //Return to Menu Task
    			app_state = APP_STATE_MENU;
    			xTaskNotify(task_handle_menu,0,eNoAction);
    			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
    		}
    		else
    		{

    		}
    	}
    }
}

static void task_rtc(void *params)
{
    char *msg = "\r\n RTC Menu\r\nChoose 1 or 2 (0 to Exit): ";

    while(1)
    {
    	if(app_state != APP_STATE_RTC)
    	{
        	xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
        }
        else
        {
        	xQueueSend(print_queue,&msg,portMAX_DELAY);
        	HAL_UART_Receive_IT(&huart2,RxBuf,1);
        	xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
        	if((char) RxBuf[0] == '1')
        	{

        	}
        	else if((char) RxBuf[0] == '2')
    		{

    		}
        	else if((char) RxBuf[0] == '0')
        	{
        		//Return to Menu Task
        		app_state = APP_STATE_MENU;
        		xTaskNotify(task_handle_menu,0,eNoAction);
        		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
        	}
        	else
        	{

        	}
        }
    }
}

static void task_cmd(void *params)
{
	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
		process_cmd();
	}
}

static void process_cmd(void)
{
	if(app_state == APP_STATE_MENU)
	{
		if(RxBuf[0] == '1')
		{
			app_state = APP_STATE_LED;
			xTaskNotify(task_handle_led,0,eNoAction);
		}
		else if(RxBuf[0] == '2')
		{
			app_state = APP_STATE_RTC;
			xTaskNotify(task_handle_rtc,0,eNoAction);
		}
		else
		{
			xTaskNotify(task_handle_menu,0,eNoAction);
		}
	}
	else if(app_state == APP_STATE_LED)
	{
		xTaskNotify(task_handle_led,0,eNoAction);
	}
	else if(app_state == APP_STATE_RTC)
	{
		xTaskNotify(task_handle_rtc,0,eNoAction);
	}
}

static void task_print(void *params)
{

	uint8_t *msg;

	while(1)
	{
		if(print_queue != NULL)
		{
			if(xQueueReceive(print_queue,&msg,portMAX_DELAY) == pdTRUE)
			{
				HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen((char *)msg),HAL_MAX_DELAY);
			}

		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	xTaskNotifyFromISR(task_handle_cmd,0,eNoAction,NULL);
}

static void led_timer_callback(TimerHandle_t timer)
{
	if(current_led_pattern == LED_PATTERN_1)
	{
		blink_led_pattern_1();
	}
	else if(current_led_pattern == LED_PATTERN_2)
	{
		blink_led_pattern_2();
	}
	else if(current_led_pattern == LED_PATTERN_3)
	{
		blink_led_pattern_3();
	}
	else if(current_led_pattern == LED_PATTERN_4)
	{
		blink_led_pattern_4();
	}
}

static void blink_led_pattern_1(void)
{
	HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
	HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
	HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
	HAL_GPIO_TogglePin(GPIOD,LD6_Pin);
}

static void blink_led_pattern_2(void)
{
	HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
	HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
	HAL_GPIO_TogglePin(GPIOD,LD3_Pin);
	HAL_GPIO_TogglePin(GPIOD,LD5_Pin);
}

static void blink_led_pattern_3(void)
{
	static uint8_t count_led_pattern_3 = 0;

	HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
	HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
	HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
	HAL_GPIO_TogglePin(GPIOD,LD6_Pin);
}

static void blink_led_pattern_4(void)
{
	static uint8_t count_led_pattern_4 = 0;

	HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
	HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
	HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
	HAL_GPIO_TogglePin(GPIOD,LD6_Pin);
}


/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM6 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
