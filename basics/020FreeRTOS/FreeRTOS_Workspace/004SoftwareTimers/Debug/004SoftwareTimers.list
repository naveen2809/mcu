
004SoftwareTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08008744  08008744  00018744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c88  08008c88  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c90  08008c90  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00014500  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014518  20014518  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018feb  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003458  00000000  00000000  00039033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  0003c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001470  00000000  00000000  0003da68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021337  00000000  00000000  0003eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018df7  00000000  00000000  0006020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d952d  00000000  00000000  00079006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152533  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c18  00000000  00000000  00152584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800872c 	.word	0x0800872c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	0800872c 	.word	0x0800872c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e80 	.word	0x20012e80

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 0208 	add.w	r2, r3, #8
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000590:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f103 0208 	add.w	r2, r3, #8
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0208 	add.w	r2, r3, #8
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005d2:	b480      	push	{r7}
 80005d4:	b085      	sub	sp, #20
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	689a      	ldr	r2, [r3, #8]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000630:	d103      	bne.n	800063a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	691b      	ldr	r3, [r3, #16]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	e00c      	b.n	8000654 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3308      	adds	r3, #8
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e002      	b.n	8000648 <vListInsert+0x2e>
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	429a      	cmp	r2, r3
 8000652:	d2f6      	bcs.n	8000642 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	601a      	str	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	6892      	ldr	r2, [r2, #8]
 80006a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	6852      	ldr	r2, [r2, #4]
 80006ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d103      	bne.n	80006c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	1e5a      	subs	r2, r3, #1
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10a      	bne.n	800070a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000706:	bf00      	nop
 8000708:	e7fe      	b.n	8000708 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800070a:	f002 fbb3 	bl	8002e74 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000716:	68f9      	ldr	r1, [r7, #12]
 8000718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	441a      	add	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800073a:	3b01      	subs	r3, #1
 800073c:	68f9      	ldr	r1, [r7, #12]
 800073e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000740:	fb01 f303 	mul.w	r3, r1, r3
 8000744:	441a      	add	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	22ff      	movs	r2, #255	; 0xff
 8000756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d114      	bne.n	800078a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	691b      	ldr	r3, [r3, #16]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d01a      	beq.n	800079e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3310      	adds	r3, #16
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f91f 	bl	80019b0 <xTaskRemoveFromEventList>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d012      	beq.n	800079e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <xQueueGenericReset+0xcc>)
 800077a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	f3bf 8f4f 	dsb	sy
 8000784:	f3bf 8f6f 	isb	sy
 8000788:	e009      	b.n	800079e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3310      	adds	r3, #16
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fef2 	bl	8000578 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3324      	adds	r3, #36	; 0x24
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff feed 	bl	8000578 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800079e:	f002 fb99 	bl	8002ed4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	e000ed04 	.word	0xe000ed04

080007b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	4613      	mov	r3, r2
 80007bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d10a      	bne.n	80007da <xQueueGenericCreate+0x2a>
        __asm volatile
 80007c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c8:	f383 8811 	msr	BASEPRI, r3
 80007cc:	f3bf 8f6f 	isb	sy
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	61bb      	str	r3, [r7, #24]
    }
 80007d6:	bf00      	nop
 80007d8:	e7fe      	b.n	80007d8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	68ba      	ldr	r2, [r7, #8]
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <xQueueGenericCreate+0x48>
 80007ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d101      	bne.n	80007fc <xQueueGenericCreate+0x4c>
 80007f8:	2301      	movs	r3, #1
 80007fa:	e000      	b.n	80007fe <xQueueGenericCreate+0x4e>
 80007fc:	2300      	movs	r3, #0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <xQueueGenericCreate+0x68>
        __asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	617b      	str	r3, [r7, #20]
    }
 8000814:	bf00      	nop
 8000816:	e7fe      	b.n	8000816 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800081e:	d90a      	bls.n	8000836 <xQueueGenericCreate+0x86>
        __asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	613b      	str	r3, [r7, #16]
    }
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	3350      	adds	r3, #80	; 0x50
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fc46 	bl	80030cc <pvPortMalloc>
 8000840:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000842:	6a3b      	ldr	r3, [r7, #32]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00d      	beq.n	8000864 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	3350      	adds	r3, #80	; 0x50
 8000850:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4613      	mov	r3, r2
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f805 	bl	800086e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000864:	6a3b      	ldr	r3, [r7, #32]
    }
 8000866:	4618      	mov	r0, r3
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d103      	bne.n	800088a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	e002      	b.n	8000890 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800089c:	2101      	movs	r1, #1
 800089e:	69b8      	ldr	r0, [r7, #24]
 80008a0:	f7ff ff1e 	bl	80006e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	78fa      	ldrb	r2, [r7, #3]
 80008a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	68f9      	ldr	r1, [r7, #12]
 80008b2:	2073      	movs	r0, #115	; 0x73
 80008b4:	f003 fc40 	bl	8004138 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b090      	sub	sp, #64	; 0x40
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80008d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10a      	bne.n	80008f2 <xQueueGenericSend+0x32>
        __asm volatile
 80008dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80008ee:	bf00      	nop
 80008f0:	e7fe      	b.n	80008f0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d103      	bne.n	8000900 <xQueueGenericSend+0x40>
 80008f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <xQueueGenericSend+0x44>
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <xQueueGenericSend+0x46>
 8000904:	2300      	movs	r3, #0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10a      	bne.n	8000920 <xQueueGenericSend+0x60>
        __asm volatile
 800090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090e:	f383 8811 	msr	BASEPRI, r3
 8000912:	f3bf 8f6f 	isb	sy
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800091c:	bf00      	nop
 800091e:	e7fe      	b.n	800091e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d103      	bne.n	800092e <xQueueGenericSend+0x6e>
 8000926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092a:	2b01      	cmp	r3, #1
 800092c:	d101      	bne.n	8000932 <xQueueGenericSend+0x72>
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <xQueueGenericSend+0x74>
 8000932:	2300      	movs	r3, #0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10a      	bne.n	800094e <xQueueGenericSend+0x8e>
        __asm volatile
 8000938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093c:	f383 8811 	msr	BASEPRI, r3
 8000940:	f3bf 8f6f 	isb	sy
 8000944:	f3bf 8f4f 	dsb	sy
 8000948:	623b      	str	r3, [r7, #32]
    }
 800094a:	bf00      	nop
 800094c:	e7fe      	b.n	800094c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800094e:	f001 f9cf 	bl	8001cf0 <xTaskGetSchedulerState>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <xQueueGenericSend+0x9e>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <xQueueGenericSend+0xa2>
 800095e:	2301      	movs	r3, #1
 8000960:	e000      	b.n	8000964 <xQueueGenericSend+0xa4>
 8000962:	2300      	movs	r3, #0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10a      	bne.n	800097e <xQueueGenericSend+0xbe>
        __asm volatile
 8000968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096c:	f383 8811 	msr	BASEPRI, r3
 8000970:	f3bf 8f6f 	isb	sy
 8000974:	f3bf 8f4f 	dsb	sy
 8000978:	61fb      	str	r3, [r7, #28]
    }
 800097a:	bf00      	nop
 800097c:	e7fe      	b.n	800097c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800097e:	f002 fa79 	bl	8002e74 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800098a:	429a      	cmp	r2, r3
 800098c:	d302      	bcc.n	8000994 <xQueueGenericSend+0xd4>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d136      	bne.n	8000a02 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8000994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000996:	4618      	mov	r0, r3
 8000998:	f004 fa08 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 800099c:	68ba      	ldr	r2, [r7, #8]
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	460b      	mov	r3, r1
 80009a6:	4601      	mov	r1, r0
 80009a8:	205a      	movs	r0, #90	; 0x5a
 80009aa:	f003 fc3b 	bl	8004224 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009b4:	f000 fa78 	bl	8000ea8 <prvCopyDataToQueue>
 80009b8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d010      	beq.n	80009e4 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c4:	3324      	adds	r3, #36	; 0x24
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fff2 	bl	80019b0 <xTaskRemoveFromEventList>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d013      	beq.n	80009fa <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009d2:	4b4d      	ldr	r3, [pc, #308]	; (8000b08 <xQueueGenericSend+0x248>)
 80009d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	f3bf 8f4f 	dsb	sy
 80009de:	f3bf 8f6f 	isb	sy
 80009e2:	e00a      	b.n	80009fa <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d007      	beq.n	80009fa <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009ea:	4b47      	ldr	r3, [pc, #284]	; (8000b08 <xQueueGenericSend+0x248>)
 80009ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	f3bf 8f4f 	dsb	sy
 80009f6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009fa:	f002 fa6b 	bl	8002ed4 <vPortExitCritical>
                return pdPASS;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e07d      	b.n	8000afe <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d110      	bne.n	8000a2a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a08:	f002 fa64 	bl	8002ed4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f004 f9cc 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	4601      	mov	r1, r0
 8000a20:	205a      	movs	r0, #90	; 0x5a
 8000a22:	f003 fbff 	bl	8004224 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e069      	b.n	8000afe <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d106      	bne.n	8000a3e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 f821 	bl	8001a7c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a3e:	f002 fa49 	bl	8002ed4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a42:	f000 fd6d 	bl	8001520 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a46:	f002 fa15 	bl	8002e74 <vPortEnterCritical>
 8000a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a56:	d103      	bne.n	8000a60 <xQueueGenericSend+0x1a0>
 8000a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a6c:	d103      	bne.n	8000a76 <xQueueGenericSend+0x1b6>
 8000a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a76:	f002 fa2d 	bl	8002ed4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a7a:	1d3a      	adds	r2, r7, #4
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f810 	bl	8001aa8 <xTaskCheckForTimeOut>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d124      	bne.n	8000ad8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a90:	f000 fb02 	bl	8001098 <prvIsQueueFull>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d018      	beq.n	8000acc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9c:	3310      	adds	r3, #16
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 ff32 	bl	800190c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aaa:	f000 fa8d 	bl	8000fc8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000aae:	f000 fd45 	bl	800153c <xTaskResumeAll>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f47f af62 	bne.w	800097e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <xQueueGenericSend+0x248>)
 8000abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	f3bf 8f4f 	dsb	sy
 8000ac6:	f3bf 8f6f 	isb	sy
 8000aca:	e758      	b.n	800097e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ace:	f000 fa7b 	bl	8000fc8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ad2:	f000 fd33 	bl	800153c <xTaskResumeAll>
 8000ad6:	e752      	b.n	800097e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ada:	f000 fa75 	bl	8000fc8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ade:	f000 fd2d 	bl	800153c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 f961 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	6879      	ldr	r1, [r7, #4]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	460b      	mov	r3, r1
 8000af4:	4601      	mov	r1, r0
 8000af6:	205a      	movs	r0, #90	; 0x5a
 8000af8:	f003 fb94 	bl	8004224 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000afc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3738      	adds	r7, #56	; 0x38
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000ed04 	.word	0xe000ed04

08000b0c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b090      	sub	sp, #64	; 0x40
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10a      	bne.n	8000b3a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b28:	f383 8811 	msr	BASEPRI, r3
 8000b2c:	f3bf 8f6f 	isb	sy
 8000b30:	f3bf 8f4f 	dsb	sy
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000b36:	bf00      	nop
 8000b38:	e7fe      	b.n	8000b38 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <xQueueGenericSendFromISR+0x3c>
 8000b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <xQueueGenericSendFromISR+0x40>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <xQueueGenericSendFromISR+0x42>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10a      	bne.n	8000b68 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b56:	f383 8811 	msr	BASEPRI, r3
 8000b5a:	f3bf 8f6f 	isb	sy
 8000b5e:	f3bf 8f4f 	dsb	sy
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b64:	bf00      	nop
 8000b66:	e7fe      	b.n	8000b66 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d103      	bne.n	8000b76 <xQueueGenericSendFromISR+0x6a>
 8000b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d101      	bne.n	8000b7a <xQueueGenericSendFromISR+0x6e>
 8000b76:	2301      	movs	r3, #1
 8000b78:	e000      	b.n	8000b7c <xQueueGenericSendFromISR+0x70>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10a      	bne.n	8000b96 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b84:	f383 8811 	msr	BASEPRI, r3
 8000b88:	f3bf 8f6f 	isb	sy
 8000b8c:	f3bf 8f4f 	dsb	sy
 8000b90:	623b      	str	r3, [r7, #32]
    }
 8000b92:	bf00      	nop
 8000b94:	e7fe      	b.n	8000b94 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b96:	f002 fa59 	bl	800304c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8000b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	61fa      	str	r2, [r7, #28]
 8000bb0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000bb2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d302      	bcc.n	8000bc8 <xQueueGenericSendFromISR+0xbc>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d148      	bne.n	8000c5a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 f8e6 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8000be0:	4601      	mov	r1, r0
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	461a      	mov	r2, r3
 8000be6:	2060      	movs	r0, #96	; 0x60
 8000be8:	f003 fa4c 	bl	8004084 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bf2:	f000 f959 	bl	8000ea8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bfe:	d112      	bne.n	8000c26 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d025      	beq.n	8000c54 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c0a:	3324      	adds	r3, #36	; 0x24
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fecf 	bl	80019b0 <xTaskRemoveFromEventList>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d01d      	beq.n	8000c54 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d01a      	beq.n	8000c54 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	e016      	b.n	8000c54 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000c26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c2c:	d10a      	bne.n	8000c44 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c32:	f383 8811 	msr	BASEPRI, r3
 8000c36:	f3bf 8f6f 	isb	sy
 8000c3a:	f3bf 8f4f 	dsb	sy
 8000c3e:	617b      	str	r3, [r7, #20]
    }
 8000c40:	bf00      	nop
 8000c42:	e7fe      	b.n	8000c42 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000c54:	2301      	movs	r3, #1
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000c58:	e00b      	b.n	8000c72 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 f8a5 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8000c62:	4601      	mov	r1, r0
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	461a      	mov	r2, r3
 8000c68:	2060      	movs	r0, #96	; 0x60
 8000c6a:	f003 fa0b 	bl	8004084 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c74:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c7c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3740      	adds	r7, #64	; 0x40
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b08f      	sub	sp, #60	; 0x3c
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10a      	bne.n	8000cb8 <xQueueReceive+0x30>
        __asm volatile
 8000ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca6:	f383 8811 	msr	BASEPRI, r3
 8000caa:	f3bf 8f6f 	isb	sy
 8000cae:	f3bf 8f4f 	dsb	sy
 8000cb2:	623b      	str	r3, [r7, #32]
    }
 8000cb4:	bf00      	nop
 8000cb6:	e7fe      	b.n	8000cb6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d103      	bne.n	8000cc6 <xQueueReceive+0x3e>
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <xQueueReceive+0x42>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e000      	b.n	8000ccc <xQueueReceive+0x44>
 8000cca:	2300      	movs	r3, #0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10a      	bne.n	8000ce6 <xQueueReceive+0x5e>
        __asm volatile
 8000cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	61fb      	str	r3, [r7, #28]
    }
 8000ce2:	bf00      	nop
 8000ce4:	e7fe      	b.n	8000ce4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ce6:	f001 f803 	bl	8001cf0 <xTaskGetSchedulerState>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <xQueueReceive+0x6e>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <xQueueReceive+0x72>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <xQueueReceive+0x74>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10a      	bne.n	8000d16 <xQueueReceive+0x8e>
        __asm volatile
 8000d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d04:	f383 8811 	msr	BASEPRI, r3
 8000d08:	f3bf 8f6f 	isb	sy
 8000d0c:	f3bf 8f4f 	dsb	sy
 8000d10:	61bb      	str	r3, [r7, #24]
    }
 8000d12:	bf00      	nop
 8000d14:	e7fe      	b.n	8000d14 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d16:	f002 f8ad 	bl	8002e74 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d02f      	beq.n	8000d86 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d2a:	f000 f927 	bl	8000f7c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 f83b 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8000d36:	4604      	mov	r4, r0
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f004 f837 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2101      	movs	r1, #1
 8000d44:	9100      	str	r1, [sp, #0]
 8000d46:	4621      	mov	r1, r4
 8000d48:	205c      	movs	r0, #92	; 0x5c
 8000d4a:	f003 fa6b 	bl	8004224 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	1e5a      	subs	r2, r3, #1
 8000d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00f      	beq.n	8000d7e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d60:	3310      	adds	r3, #16
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fe24 	bl	80019b0 <xTaskRemoveFromEventList>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d007      	beq.n	8000d7e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <xQueueReceive+0x21c>)
 8000d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	f3bf 8f4f 	dsb	sy
 8000d7a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d7e:	f002 f8a9 	bl	8002ed4 <vPortExitCritical>
                return pdPASS;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e08a      	b.n	8000e9c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d113      	bne.n	8000db4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d8c:	f002 f8a2 	bl	8002ed4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 f80a 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8000d98:	4604      	mov	r4, r0
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f004 f806 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8000da0:	4602      	mov	r2, r0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2101      	movs	r1, #1
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	4621      	mov	r1, r4
 8000daa:	205c      	movs	r0, #92	; 0x5c
 8000dac:	f003 fa3a 	bl	8004224 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e073      	b.n	8000e9c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d106      	bne.n	8000dc8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fe5c 	bl	8001a7c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000dc8:	f002 f884 	bl	8002ed4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000dcc:	f000 fba8 	bl	8001520 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dd0:	f002 f850 	bl	8002e74 <vPortEnterCritical>
 8000dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000de0:	d103      	bne.n	8000dea <xQueueReceive+0x162>
 8000de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df6:	d103      	bne.n	8000e00 <xQueueReceive+0x178>
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e00:	f002 f868 	bl	8002ed4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e04:	1d3a      	adds	r2, r7, #4
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fe4b 	bl	8001aa8 <xTaskCheckForTimeOut>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d124      	bne.n	8000e62 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e1a:	f000 f927 	bl	800106c <prvIsQueueEmpty>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d018      	beq.n	8000e56 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e26:	3324      	adds	r3, #36	; 0x24
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fd6d 	bl	800190c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e34:	f000 f8c8 	bl	8000fc8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e38:	f000 fb80 	bl	800153c <xTaskResumeAll>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f47f af69 	bne.w	8000d16 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <xQueueReceive+0x21c>)
 8000e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	f3bf 8f4f 	dsb	sy
 8000e50:	f3bf 8f6f 	isb	sy
 8000e54:	e75f      	b.n	8000d16 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e58:	f000 f8b6 	bl	8000fc8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e5c:	f000 fb6e 	bl	800153c <xTaskResumeAll>
 8000e60:	e759      	b.n	8000d16 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e64:	f000 f8b0 	bl	8000fc8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e68:	f000 fb68 	bl	800153c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e6e:	f000 f8fd 	bl	800106c <prvIsQueueEmpty>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f43f af4e 	beq.w	8000d16 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 ff95 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8000e82:	4604      	mov	r4, r0
 8000e84:	2000      	movs	r0, #0
 8000e86:	f003 ff91 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	9100      	str	r1, [sp, #0]
 8000e92:	4621      	mov	r1, r4
 8000e94:	205c      	movs	r0, #92	; 0x5c
 8000e96:	f003 f9c5 	bl	8004224 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e9a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3734      	adds	r7, #52	; 0x34
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	e000ed04 	.word	0xe000ed04

08000ea8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ebc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10d      	bne.n	8000ee2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d14d      	bne.n	8000f6a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 ff2a 	bl	8001d2c <xTaskPriorityDisinherit>
 8000ed8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	e043      	b.n	8000f6a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d119      	bne.n	8000f1c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6858      	ldr	r0, [r3, #4]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	f007 fc04 	bl	8008700 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	441a      	add	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d32b      	bcc.n	8000f6a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	e026      	b.n	8000f6a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	68d8      	ldr	r0, [r3, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	461a      	mov	r2, r3
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	f007 fbea 	bl	8008700 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	425b      	negs	r3, r3
 8000f36:	441a      	add	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	425b      	negs	r3, r3
 8000f52:	441a      	add	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d105      	bne.n	8000f6a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000f72:	697b      	ldr	r3, [r7, #20]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d018      	beq.n	8000fc0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	441a      	add	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d303      	bcc.n	8000fb0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68d9      	ldr	r1, [r3, #12]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	461a      	mov	r2, r3
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f007 fba0 	bl	8008700 <memcpy>
    }
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000fd0:	f001 ff50 	bl	8002e74 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fda:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fdc:	e011      	b.n	8001002 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d012      	beq.n	800100c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3324      	adds	r3, #36	; 0x24
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fce0 	bl	80019b0 <xTaskRemoveFromEventList>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000ff6:	f000 fdbd 	bl	8001b74 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	dce9      	bgt.n	8000fde <prvUnlockQueue+0x16>
 800100a:	e000      	b.n	800100e <prvUnlockQueue+0x46>
                        break;
 800100c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	22ff      	movs	r2, #255	; 0xff
 8001012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001016:	f001 ff5d 	bl	8002ed4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800101a:	f001 ff2b 	bl	8002e74 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001024:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001026:	e011      	b.n	800104c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d012      	beq.n	8001056 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3310      	adds	r3, #16
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fcbb 	bl	80019b0 <xTaskRemoveFromEventList>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001040:	f000 fd98 	bl	8001b74 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	3b01      	subs	r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800104c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	dce9      	bgt.n	8001028 <prvUnlockQueue+0x60>
 8001054:	e000      	b.n	8001058 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001056:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	22ff      	movs	r2, #255	; 0xff
 800105c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001060:	f001 ff38 	bl	8002ed4 <vPortExitCritical>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001074:	f001 fefe 	bl	8002e74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001080:	2301      	movs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e001      	b.n	800108a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800108a:	f001 ff23 	bl	8002ed4 <vPortExitCritical>

    return xReturn;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010a0:	f001 fee8 	bl	8002e74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d102      	bne.n	80010b6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e001      	b.n	80010ba <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010ba:	f001 ff0b 	bl	8002ed4 <vPortExitCritical>

    return xReturn;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e01e      	b.n	8001116 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <vQueueAddToRegistry+0x60>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d115      	bne.n	8001110 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80010e4:	4910      	ldr	r1, [pc, #64]	; (8001128 <vQueueAddToRegistry+0x60>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <vQueueAddToRegistry+0x60>)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fe55 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8001102:	4601      	mov	r1, r0
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	2071      	movs	r0, #113	; 0x71
 800110a:	f002 ffbb 	bl	8004084 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800110e:	e006      	b.n	800111e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b07      	cmp	r3, #7
 800111a:	d9dd      	bls.n	80010d8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000034 	.word	0x20000034

0800112c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800113c:	f001 fe9a 	bl	8002e74 <vPortEnterCritical>
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001146:	b25b      	sxtb	r3, r3
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800114c:	d103      	bne.n	8001156 <vQueueWaitForMessageRestricted+0x2a>
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800115c:	b25b      	sxtb	r3, r3
 800115e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001162:	d103      	bne.n	800116c <vQueueWaitForMessageRestricted+0x40>
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800116c:	f001 feb2 	bl	8002ed4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3324      	adds	r3, #36	; 0x24
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fbe7 	bl	8001954 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff1e 	bl	8000fc8 <prvUnlockQueue>
    }
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af04      	add	r7, sp, #16
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 ff8f 	bl	80030cc <pvPortMalloc>
 80011ae:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00e      	beq.n	80011d4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011b6:	2058      	movs	r0, #88	; 0x58
 80011b8:	f001 ff88 	bl	80030cc <pvPortMalloc>
 80011bc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ca:	e005      	b.n	80011d8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f002 f85d 	bl	800328c <vPortFree>
 80011d2:	e001      	b.n	80011d8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d013      	beq.n	8001206 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80011de:	88fa      	ldrh	r2, [r7, #6]
 80011e0:	2300      	movs	r3, #0
 80011e2:	9303      	str	r3, [sp, #12]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f000 f80e 	bl	8001216 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80011fa:	69f8      	ldr	r0, [r7, #28]
 80011fc:	f000 f8a2 	bl	8001344 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	e002      	b.n	800120c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800120c:	69bb      	ldr	r3, [r7, #24]
    }
 800120e:	4618      	mov	r0, r3
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b088      	sub	sp, #32
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001226:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	461a      	mov	r2, r3
 800122e:	21a5      	movs	r1, #165	; 0xa5
 8001230:	f007 fa74 	bl	800871c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800123e:	3b01      	subs	r3, #1
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f023 0307 	bic.w	r3, r3, #7
 800124c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00a      	beq.n	800126e <prvInitialiseNewTask+0x58>
        __asm volatile
 8001258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125c:	f383 8811 	msr	BASEPRI, r3
 8001260:	f3bf 8f6f 	isb	sy
 8001264:	f3bf 8f4f 	dsb	sy
 8001268:	617b      	str	r3, [r7, #20]
    }
 800126a:	bf00      	nop
 800126c:	e7fe      	b.n	800126c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d01f      	beq.n	80012b4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	e012      	b.n	80012a0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	4413      	add	r3, r2
 8001280:	7819      	ldrb	r1, [r3, #0]
 8001282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	3334      	adds	r3, #52	; 0x34
 800128a:	460a      	mov	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b09      	cmp	r3, #9
 80012a4:	d9e9      	bls.n	800127a <prvInitialiseNewTask+0x64>
 80012a6:	e000      	b.n	80012aa <prvInitialiseNewTask+0x94>
            {
                break;
 80012a8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80012b2:	e003      	b.n	80012bc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80012b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d901      	bls.n	80012c6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012c2:	2304      	movs	r3, #4
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80012cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80012d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d4:	2200      	movs	r2, #0
 80012d6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012da:	3304      	adds	r3, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f96b 	bl	80005b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80012e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e4:	3318      	adds	r3, #24
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f966 	bl	80005b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80012ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012f0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	f1c3 0205 	rsb	r2, r3, #5
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001304:	3350      	adds	r3, #80	; 0x50
 8001306:	2204      	movs	r2, #4
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f007 fa06 	bl	800871c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	3354      	adds	r3, #84	; 0x54
 8001314:	2201      	movs	r2, #1
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f007 f9ff 	bl	800871c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	68f9      	ldr	r1, [r7, #12]
 8001322:	69b8      	ldr	r0, [r7, #24]
 8001324:	f001 fbf8 	bl	8002b18 <pxPortInitialiseStack>
 8001328:	4602      	mov	r2, r0
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001338:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af02      	add	r7, sp, #8
 800134a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800134c:	f001 fd92 	bl	8002e74 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <prvAddNewTaskToReadyList+0xfc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a3a      	ldr	r2, [pc, #232]	; (8001440 <prvAddNewTaskToReadyList+0xfc>)
 8001358:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <prvAddNewTaskToReadyList+0x100>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001362:	4a38      	ldr	r2, [pc, #224]	; (8001444 <prvAddNewTaskToReadyList+0x100>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001368:	4b35      	ldr	r3, [pc, #212]	; (8001440 <prvAddNewTaskToReadyList+0xfc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d110      	bne.n	8001392 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001370:	f000 fc24 	bl	8001bbc <prvInitialiseTaskLists>
 8001374:	e00d      	b.n	8001392 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001376:	4b34      	ldr	r3, [pc, #208]	; (8001448 <prvAddNewTaskToReadyList+0x104>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d109      	bne.n	8001392 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <prvAddNewTaskToReadyList+0x100>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	429a      	cmp	r2, r3
 800138a:	d802      	bhi.n	8001392 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800138c:	4a2d      	ldr	r2, [pc, #180]	; (8001444 <prvAddNewTaskToReadyList+0x100>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <prvAddNewTaskToReadyList+0x108>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a2c      	ldr	r2, [pc, #176]	; (800144c <prvAddNewTaskToReadyList+0x108>)
 800139a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <prvAddNewTaskToReadyList+0x108>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <prvAddNewTaskToReadyList+0x94>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fbd7 	bl	8004b60 <SEGGER_SYSVIEW_OnTaskCreate>
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	461d      	mov	r5, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	461c      	mov	r4, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	1ae3      	subs	r3, r4, r3
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	462b      	mov	r3, r5
 80013d4:	f002 f928 	bl	8003628 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fc44 	bl	8004c68 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2201      	movs	r2, #1
 80013e6:	409a      	lsls	r2, r3
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <prvAddNewTaskToReadyList+0x10c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	4a18      	ldr	r2, [pc, #96]	; (8001450 <prvAddNewTaskToReadyList+0x10c>)
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4a15      	ldr	r2, [pc, #84]	; (8001454 <prvAddNewTaskToReadyList+0x110>)
 8001400:	441a      	add	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4610      	mov	r0, r2
 800140a:	f7ff f8e2 	bl	80005d2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800140e:	f001 fd61 	bl	8002ed4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <prvAddNewTaskToReadyList+0x104>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00e      	beq.n	8001438 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <prvAddNewTaskToReadyList+0x100>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	429a      	cmp	r2, r3
 8001426:	d207      	bcs.n	8001438 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <prvAddNewTaskToReadyList+0x114>)
 800142a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bdb0      	pop	{r4, r5, r7, pc}
 8001440:	2000014c 	.word	0x2000014c
 8001444:	20000074 	.word	0x20000074
 8001448:	20000158 	.word	0x20000158
 800144c:	20000168 	.word	0x20000168
 8001450:	20000154 	.word	0x20000154
 8001454:	20000078 	.word	0x20000078
 8001458:	e000ed04 	.word	0xe000ed04

0800145c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001462:	4b27      	ldr	r3, [pc, #156]	; (8001500 <vTaskStartScheduler+0xa4>)
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	2300      	movs	r3, #0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	2282      	movs	r2, #130	; 0x82
 800146e:	4925      	ldr	r1, [pc, #148]	; (8001504 <vTaskStartScheduler+0xa8>)
 8001470:	4825      	ldr	r0, [pc, #148]	; (8001508 <vTaskStartScheduler+0xac>)
 8001472:	f7ff fe8f 	bl	8001194 <xTaskCreate>
 8001476:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d102      	bne.n	8001484 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800147e:	f000 ffdd 	bl	800243c <xTimerCreateTimerTask>
 8001482:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d124      	bne.n	80014d4 <vTaskStartScheduler+0x78>
        __asm volatile
 800148a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800148e:	f383 8811 	msr	BASEPRI, r3
 8001492:	f3bf 8f6f 	isb	sy
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	60bb      	str	r3, [r7, #8]
    }
 800149c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <vTaskStartScheduler+0xb0>)
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <vTaskStartScheduler+0xb4>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <vTaskStartScheduler+0xb8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <vTaskStartScheduler+0xbc>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <vTaskStartScheduler+0xa4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d102      	bne.n	80014c4 <vTaskStartScheduler+0x68>
 80014be:	f003 fb33 	bl	8004b28 <SEGGER_SYSVIEW_OnIdle>
 80014c2:	e004      	b.n	80014ce <vTaskStartScheduler+0x72>
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <vTaskStartScheduler+0xbc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fb8b 	bl	8004be4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80014ce:	f001 fbb1 	bl	8002c34 <xPortStartScheduler>
 80014d2:	e00e      	b.n	80014f2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014da:	d10a      	bne.n	80014f2 <vTaskStartScheduler+0x96>
        __asm volatile
 80014dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e0:	f383 8811 	msr	BASEPRI, r3
 80014e4:	f3bf 8f6f 	isb	sy
 80014e8:	f3bf 8f4f 	dsb	sy
 80014ec:	607b      	str	r3, [r7, #4]
    }
 80014ee:	bf00      	nop
 80014f0:	e7fe      	b.n	80014f0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <vTaskStartScheduler+0xc0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000170 	.word	0x20000170
 8001504:	08008744 	.word	0x08008744
 8001508:	08001b8d 	.word	0x08001b8d
 800150c:	2000016c 	.word	0x2000016c
 8001510:	20000158 	.word	0x20000158
 8001514:	20000150 	.word	0x20000150
 8001518:	20000074 	.word	0x20000074
 800151c:	20000000 	.word	0x20000000

08001520 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <vTaskSuspendAll+0x18>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4a03      	ldr	r2, [pc, #12]	; (8001538 <vTaskSuspendAll+0x18>)
 800152c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	20000174 	.word	0x20000174

0800153c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800154a:	4b43      	ldr	r3, [pc, #268]	; (8001658 <xTaskResumeAll+0x11c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10a      	bne.n	8001568 <xTaskResumeAll+0x2c>
        __asm volatile
 8001552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	603b      	str	r3, [r7, #0]
    }
 8001564:	bf00      	nop
 8001566:	e7fe      	b.n	8001566 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001568:	f001 fc84 	bl	8002e74 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <xTaskResumeAll+0x11c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3b01      	subs	r3, #1
 8001572:	4a39      	ldr	r2, [pc, #228]	; (8001658 <xTaskResumeAll+0x11c>)
 8001574:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <xTaskResumeAll+0x11c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d165      	bne.n	800164a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <xTaskResumeAll+0x120>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d061      	beq.n	800164a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001586:	e032      	b.n	80015ee <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <xTaskResumeAll+0x124>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3318      	adds	r3, #24
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff f879 	bl	800068c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3304      	adds	r3, #4
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f874 	bl	800068c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fb5e 	bl	8004c68 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	2201      	movs	r2, #1
 80015b2:	409a      	lsls	r2, r3
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <xTaskResumeAll+0x128>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <xTaskResumeAll+0x128>)
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4a27      	ldr	r2, [pc, #156]	; (8001668 <xTaskResumeAll+0x12c>)
 80015cc:	441a      	add	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3304      	adds	r3, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f7fe fffc 	bl	80005d2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <xTaskResumeAll+0x130>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d302      	bcc.n	80015ee <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <xTaskResumeAll+0x134>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <xTaskResumeAll+0x124>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1c8      	bne.n	8001588 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80015fc:	f000 fb5c 	bl	8001cb8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <xTaskResumeAll+0x138>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d010      	beq.n	800162e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800160c:	f000 f858 	bl	80016c0 <xTaskIncrementTick>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <xTaskResumeAll+0x134>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f1      	bne.n	800160c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <xTaskResumeAll+0x138>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <xTaskResumeAll+0x134>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001636:	2301      	movs	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <xTaskResumeAll+0x13c>)
 800163c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f3bf 8f4f 	dsb	sy
 8001646:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800164a:	f001 fc43 	bl	8002ed4 <vPortExitCritical>

    return xAlreadyYielded;
 800164e:	68bb      	ldr	r3, [r7, #8]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000174 	.word	0x20000174
 800165c:	2000014c 	.word	0x2000014c
 8001660:	2000010c 	.word	0x2000010c
 8001664:	20000154 	.word	0x20000154
 8001668:	20000078 	.word	0x20000078
 800166c:	20000074 	.word	0x20000074
 8001670:	20000160 	.word	0x20000160
 8001674:	2000015c 	.word	0x2000015c
 8001678:	e000ed04 	.word	0xe000ed04

0800167c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <xTaskGetTickCount+0x1c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000150 	.word	0x20000150

0800169c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80016a2:	f001 fcd3 	bl	800304c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <xTaskGetTickCountFromISR+0x20>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80016b0:	683b      	ldr	r3, [r7, #0]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000150 	.word	0x20000150

080016c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016ca:	4b50      	ldr	r3, [pc, #320]	; (800180c <xTaskIncrementTick+0x14c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 8092 	bne.w	80017f8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80016d4:	4b4e      	ldr	r3, [pc, #312]	; (8001810 <xTaskIncrementTick+0x150>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80016dc:	4a4c      	ldr	r2, [pc, #304]	; (8001810 <xTaskIncrementTick+0x150>)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d120      	bne.n	800172a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80016e8:	4b4a      	ldr	r3, [pc, #296]	; (8001814 <xTaskIncrementTick+0x154>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <xTaskIncrementTick+0x48>
        __asm volatile
 80016f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f6:	f383 8811 	msr	BASEPRI, r3
 80016fa:	f3bf 8f6f 	isb	sy
 80016fe:	f3bf 8f4f 	dsb	sy
 8001702:	603b      	str	r3, [r7, #0]
    }
 8001704:	bf00      	nop
 8001706:	e7fe      	b.n	8001706 <xTaskIncrementTick+0x46>
 8001708:	4b42      	ldr	r3, [pc, #264]	; (8001814 <xTaskIncrementTick+0x154>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b42      	ldr	r3, [pc, #264]	; (8001818 <xTaskIncrementTick+0x158>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a40      	ldr	r2, [pc, #256]	; (8001814 <xTaskIncrementTick+0x154>)
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4a40      	ldr	r2, [pc, #256]	; (8001818 <xTaskIncrementTick+0x158>)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <xTaskIncrementTick+0x15c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	4a3e      	ldr	r2, [pc, #248]	; (800181c <xTaskIncrementTick+0x15c>)
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	f000 fac7 	bl	8001cb8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <xTaskIncrementTick+0x160>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d34c      	bcc.n	80017ce <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001734:	4b37      	ldr	r3, [pc, #220]	; (8001814 <xTaskIncrementTick+0x154>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d104      	bne.n	8001748 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800173e:	4b38      	ldr	r3, [pc, #224]	; (8001820 <xTaskIncrementTick+0x160>)
 8001740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001744:	601a      	str	r2, [r3, #0]
                    break;
 8001746:	e042      	b.n	80017ce <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <xTaskIncrementTick+0x154>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	d203      	bcs.n	8001768 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001760:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <xTaskIncrementTick+0x160>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001766:	e032      	b.n	80017ce <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	3304      	adds	r3, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe ff8d 	bl	800068c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3318      	adds	r3, #24
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe ff84 	bl	800068c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fa6e 	bl	8004c68 <SEGGER_SYSVIEW_OnTaskStartReady>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	2201      	movs	r2, #1
 8001792:	409a      	lsls	r2, r3
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <xTaskIncrementTick+0x164>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4313      	orrs	r3, r2
 800179a:	4a22      	ldr	r2, [pc, #136]	; (8001824 <xTaskIncrementTick+0x164>)
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <xTaskIncrementTick+0x168>)
 80017ac:	441a      	add	r2, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3304      	adds	r3, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4610      	mov	r0, r2
 80017b6:	f7fe ff0c 	bl	80005d2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <xTaskIncrementTick+0x16c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d3b5      	bcc.n	8001734 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80017c8:	2301      	movs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017cc:	e7b2      	b.n	8001734 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <xTaskIncrementTick+0x16c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d4:	4914      	ldr	r1, [pc, #80]	; (8001828 <xTaskIncrementTick+0x168>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d901      	bls.n	80017ea <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <xTaskIncrementTick+0x170>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80017f2:	2301      	movs	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e004      	b.n	8001802 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <xTaskIncrementTick+0x174>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <xTaskIncrementTick+0x174>)
 8001800:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001802:	697b      	ldr	r3, [r7, #20]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000174 	.word	0x20000174
 8001810:	20000150 	.word	0x20000150
 8001814:	20000104 	.word	0x20000104
 8001818:	20000108 	.word	0x20000108
 800181c:	20000164 	.word	0x20000164
 8001820:	2000016c 	.word	0x2000016c
 8001824:	20000154 	.word	0x20000154
 8001828:	20000078 	.word	0x20000078
 800182c:	20000074 	.word	0x20000074
 8001830:	20000160 	.word	0x20000160
 8001834:	2000015c 	.word	0x2000015c

08001838 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <vTaskSwitchContext+0xbc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <vTaskSwitchContext+0xc0>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800184c:	e04d      	b.n	80018ea <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <vTaskSwitchContext+0xc0>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <vTaskSwitchContext+0xc4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001862:	7afb      	ldrb	r3, [r7, #11]
 8001864:	f1c3 031f 	rsb	r3, r3, #31
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	4925      	ldr	r1, [pc, #148]	; (8001900 <vTaskSwitchContext+0xc8>)
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10a      	bne.n	8001894 <vTaskSwitchContext+0x5c>
        __asm volatile
 800187e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001882:	f383 8811 	msr	BASEPRI, r3
 8001886:	f3bf 8f6f 	isb	sy
 800188a:	f3bf 8f4f 	dsb	sy
 800188e:	607b      	str	r3, [r7, #4]
    }
 8001890:	bf00      	nop
 8001892:	e7fe      	b.n	8001892 <vTaskSwitchContext+0x5a>
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4a18      	ldr	r2, [pc, #96]	; (8001900 <vTaskSwitchContext+0xc8>)
 80018a0:	4413      	add	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	3308      	adds	r3, #8
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d104      	bne.n	80018c4 <vTaskSwitchContext+0x8c>
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <vTaskSwitchContext+0xcc>)
 80018cc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <vTaskSwitchContext+0xcc>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <vTaskSwitchContext+0xd0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d102      	bne.n	80018e0 <vTaskSwitchContext+0xa8>
 80018da:	f003 f925 	bl	8004b28 <SEGGER_SYSVIEW_OnIdle>
}
 80018de:	e004      	b.n	80018ea <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <vTaskSwitchContext+0xcc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 f97d 	bl	8004be4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000174 	.word	0x20000174
 80018f8:	20000160 	.word	0x20000160
 80018fc:	20000154 	.word	0x20000154
 8001900:	20000078 	.word	0x20000078
 8001904:	20000074 	.word	0x20000074
 8001908:	20000170 	.word	0x20000170

0800190c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10a      	bne.n	8001932 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001920:	f383 8811 	msr	BASEPRI, r3
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	60fb      	str	r3, [r7, #12]
    }
 800192e:	bf00      	nop
 8001930:	e7fe      	b.n	8001930 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <vTaskPlaceOnEventList+0x44>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3318      	adds	r3, #24
 8001938:	4619      	mov	r1, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7fe fe6d 	bl	800061a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001940:	2101      	movs	r1, #1
 8001942:	6838      	ldr	r0, [r7, #0]
 8001944:	f000 fd02 	bl	800234c <prvAddCurrentTaskToDelayedList>
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000074 	.word	0x20000074

08001954 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10a      	bne.n	800197c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196a:	f383 8811 	msr	BASEPRI, r3
 800196e:	f3bf 8f6f 	isb	sy
 8001972:	f3bf 8f4f 	dsb	sy
 8001976:	617b      	str	r3, [r7, #20]
    }
 8001978:	bf00      	nop
 800197a:	e7fe      	b.n	800197a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <vTaskPlaceOnEventListRestricted+0x58>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3318      	adds	r3, #24
 8001982:	4619      	mov	r1, r3
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7fe fe24 	bl	80005d2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001994:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001996:	2024      	movs	r0, #36	; 0x24
 8001998:	f002 fb1a 	bl	8003fd0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	68b8      	ldr	r0, [r7, #8]
 80019a0:	f000 fcd4 	bl	800234c <prvAddCurrentTaskToDelayedList>
    }
 80019a4:	bf00      	nop
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000074 	.word	0x20000074

080019b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10a      	bne.n	80019dc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80019c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ca:	f383 8811 	msr	BASEPRI, r3
 80019ce:	f3bf 8f6f 	isb	sy
 80019d2:	f3bf 8f4f 	dsb	sy
 80019d6:	60fb      	str	r3, [r7, #12]
    }
 80019d8:	bf00      	nop
 80019da:	e7fe      	b.n	80019da <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3318      	adds	r3, #24
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fe53 	bl	800068c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <xTaskRemoveFromEventList+0xb4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d120      	bne.n	8001a30 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	3304      	adds	r3, #4
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fe4a 	bl	800068c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 f934 	bl	8004c68 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	2201      	movs	r2, #1
 8001a06:	409a      	lsls	r2, r3
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <xTaskRemoveFromEventList+0xb8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <xTaskRemoveFromEventList+0xb8>)
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <xTaskRemoveFromEventList+0xbc>)
 8001a20:	441a      	add	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	3304      	adds	r3, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	4610      	mov	r0, r2
 8001a2a:	f7fe fdd2 	bl	80005d2 <vListInsertEnd>
 8001a2e:	e005      	b.n	8001a3c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3318      	adds	r3, #24
 8001a34:	4619      	mov	r1, r3
 8001a36:	480e      	ldr	r0, [pc, #56]	; (8001a70 <xTaskRemoveFromEventList+0xc0>)
 8001a38:	f7fe fdcb 	bl	80005d2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <xTaskRemoveFromEventList+0xc4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d905      	bls.n	8001a56 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <xTaskRemoveFromEventList+0xc8>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e001      	b.n	8001a5a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001a5a:	697b      	ldr	r3, [r7, #20]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000174 	.word	0x20000174
 8001a68:	20000154 	.word	0x20000154
 8001a6c:	20000078 	.word	0x20000078
 8001a70:	2000010c 	.word	0x2000010c
 8001a74:	20000074 	.word	0x20000074
 8001a78:	20000160 	.word	0x20000160

08001a7c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <vTaskInternalSetTimeOutState+0x24>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <vTaskInternalSetTimeOutState+0x28>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	605a      	str	r2, [r3, #4]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	20000164 	.word	0x20000164
 8001aa4:	20000150 	.word	0x20000150

08001aa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10a      	bne.n	8001ace <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abc:	f383 8811 	msr	BASEPRI, r3
 8001ac0:	f3bf 8f6f 	isb	sy
 8001ac4:	f3bf 8f4f 	dsb	sy
 8001ac8:	613b      	str	r3, [r7, #16]
    }
 8001aca:	bf00      	nop
 8001acc:	e7fe      	b.n	8001acc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10a      	bne.n	8001aea <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad8:	f383 8811 	msr	BASEPRI, r3
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	f3bf 8f4f 	dsb	sy
 8001ae4:	60fb      	str	r3, [r7, #12]
    }
 8001ae6:	bf00      	nop
 8001ae8:	e7fe      	b.n	8001ae8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001aea:	f001 f9c3 	bl	8002e74 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <xTaskCheckForTimeOut+0xc4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b06:	d102      	bne.n	8001b0e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	e026      	b.n	8001b5c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <xTaskCheckForTimeOut+0xc8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d00a      	beq.n	8001b30 <xTaskCheckForTimeOut+0x88>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d305      	bcc.n	8001b30 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e015      	b.n	8001b5c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d20b      	bcs.n	8001b52 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff98 	bl	8001a7c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	e004      	b.n	8001b5c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001b5c:	f001 f9ba 	bl	8002ed4 <vPortExitCritical>

    return xReturn;
 8001b60:	69fb      	ldr	r3, [r7, #28]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000150 	.word	0x20000150
 8001b70:	20000164 	.word	0x20000164

08001b74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <vTaskMissedYield+0x14>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	20000160 	.word	0x20000160

08001b8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001b94:	f000 f852 	bl	8001c3c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <prvIdleTask+0x28>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d9f9      	bls.n	8001b94 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <prvIdleTask+0x2c>)
 8001ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001bb0:	e7f0      	b.n	8001b94 <prvIdleTask+0x8>
 8001bb2:	bf00      	nop
 8001bb4:	20000078 	.word	0x20000078
 8001bb8:	e000ed04 	.word	0xe000ed04

08001bbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	e00c      	b.n	8001be2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <prvInitialiseTaskLists+0x60>)
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fcce 	bl	8000578 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d9ef      	bls.n	8001bc8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <prvInitialiseTaskLists+0x64>)
 8001bea:	f7fe fcc5 	bl	8000578 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <prvInitialiseTaskLists+0x68>)
 8001bf0:	f7fe fcc2 	bl	8000578 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <prvInitialiseTaskLists+0x6c>)
 8001bf6:	f7fe fcbf 	bl	8000578 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <prvInitialiseTaskLists+0x70>)
 8001bfc:	f7fe fcbc 	bl	8000578 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <prvInitialiseTaskLists+0x74>)
 8001c02:	f7fe fcb9 	bl	8000578 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <prvInitialiseTaskLists+0x78>)
 8001c08:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <prvInitialiseTaskLists+0x64>)
 8001c0a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <prvInitialiseTaskLists+0x7c>)
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <prvInitialiseTaskLists+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000078 	.word	0x20000078
 8001c20:	200000dc 	.word	0x200000dc
 8001c24:	200000f0 	.word	0x200000f0
 8001c28:	2000010c 	.word	0x2000010c
 8001c2c:	20000120 	.word	0x20000120
 8001c30:	20000138 	.word	0x20000138
 8001c34:	20000104 	.word	0x20000104
 8001c38:	20000108 	.word	0x20000108

08001c3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c42:	e019      	b.n	8001c78 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001c44:	f001 f916 	bl	8002e74 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <prvCheckTasksWaitingTermination+0x50>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fd19 	bl	800068c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <prvCheckTasksWaitingTermination+0x54>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <prvCheckTasksWaitingTermination+0x54>)
 8001c62:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <prvCheckTasksWaitingTermination+0x58>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <prvCheckTasksWaitingTermination+0x58>)
 8001c6c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001c6e:	f001 f931 	bl	8002ed4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f810 	bl	8001c98 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <prvCheckTasksWaitingTermination+0x58>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e1      	bne.n	8001c44 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000120 	.word	0x20000120
 8001c90:	2000014c 	.word	0x2000014c
 8001c94:	20000134 	.word	0x20000134

08001c98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 faf1 	bl	800328c <vPortFree>
                vPortFree( pxTCB );
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f001 faee 	bl	800328c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <prvResetNextTaskUnblockTime+0x30>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d104      	bne.n	8001cd0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <prvResetNextTaskUnblockTime+0x34>)
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ccc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001cce:	e005      	b.n	8001cdc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <prvResetNextTaskUnblockTime+0x30>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <prvResetNextTaskUnblockTime+0x34>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000104 	.word	0x20000104
 8001cec:	2000016c 	.word	0x2000016c

08001cf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <xTaskGetSchedulerState+0x34>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	e008      	b.n	8001d16 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <xTaskGetSchedulerState+0x38>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	e001      	b.n	8001d16 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001d16:	687b      	ldr	r3, [r7, #4]
    }
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	20000158 	.word	0x20000158
 8001d28:	20000174 	.word	0x20000174

08001d2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d068      	beq.n	8001e14 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001d42:	4b37      	ldr	r3, [pc, #220]	; (8001e20 <xTaskPriorityDisinherit+0xf4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d00a      	beq.n	8001d62 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d50:	f383 8811 	msr	BASEPRI, r3
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	60fb      	str	r3, [r7, #12]
    }
 8001d5e:	bf00      	nop
 8001d60:	e7fe      	b.n	8001d60 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10a      	bne.n	8001d80 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6e:	f383 8811 	msr	BASEPRI, r3
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	f3bf 8f4f 	dsb	sy
 8001d7a:	60bb      	str	r3, [r7, #8]
    }
 8001d7c:	bf00      	nop
 8001d7e:	e7fe      	b.n	8001d7e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d84:	1e5a      	subs	r2, r3, #1
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d03e      	beq.n	8001e14 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d13a      	bne.n	8001e14 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	3304      	adds	r3, #4
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fc72 	bl	800068c <uxListRemove>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10a      	bne.n	8001dc4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	2201      	movs	r2, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43da      	mvns	r2, r3
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <xTaskPriorityDisinherit+0xf8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <xTaskPriorityDisinherit+0xf8>)
 8001dc2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	204a      	movs	r0, #74	; 0x4a
 8001dca:	f002 f91f 	bl	800400c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f1c3 0205 	rsb	r2, r3, #5
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	2201      	movs	r2, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <xTaskPriorityDisinherit+0xf8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <xTaskPriorityDisinherit+0xf8>)
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <xTaskPriorityDisinherit+0xfc>)
 8001e02:	441a      	add	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	3304      	adds	r3, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f7fe fbe1 	bl	80005d2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001e10:	2301      	movs	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e14:	697b      	ldr	r3, [r7, #20]
    }
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000074 	.word	0x20000074
 8001e24:	20000154 	.word	0x20000154
 8001e28:	20000078 	.word	0x20000078

08001e2c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e44:	f383 8811 	msr	BASEPRI, r3
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	613b      	str	r3, [r7, #16]
    }
 8001e52:	bf00      	nop
 8001e54:	e7fe      	b.n	8001e54 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001e56:	f001 f80d 	bl	8002e74 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001e5a:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <xTaskGenericNotifyWait+0x108>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	3354      	adds	r3, #84	; 0x54
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d022      	beq.n	8001eb2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <xTaskGenericNotifyWait+0x108>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	3214      	adds	r2, #20
 8001e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	43d2      	mvns	r2, r2
 8001e7c:	4011      	ands	r1, r2
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	3214      	adds	r2, #20
 8001e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <xTaskGenericNotifyWait+0x108>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3354      	adds	r3, #84	; 0x54
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00b      	beq.n	8001eb2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	6a38      	ldr	r0, [r7, #32]
 8001e9e:	f000 fa55 	bl	800234c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <xTaskGenericNotifyWait+0x10c>)
 8001ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001eb2:	f001 f80f 	bl	8002ed4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001eb6:	f000 ffdd 	bl	8002e74 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	2040      	movs	r0, #64	; 0x40
 8001ec8:	f002 f9ac 	bl	8004224 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <xTaskGenericNotifyWait+0x108>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	3214      	adds	r2, #20
 8001eda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <xTaskGenericNotifyWait+0x108>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	3354      	adds	r3, #84	; 0x54
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d002      	beq.n	8001efa <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e00e      	b.n	8001f18 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <xTaskGenericNotifyWait+0x108>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	3214      	adds	r2, #20
 8001f02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	43d2      	mvns	r2, r2
 8001f0a:	4011      	ands	r1, r2
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	3214      	adds	r2, #20
 8001f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001f14:	2301      	movs	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <xTaskGenericNotifyWait+0x108>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3354      	adds	r3, #84	; 0x54
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001f26:	f000 ffd5 	bl	8002ed4 <vPortExitCritical>

        return xReturn;
 8001f2a:	697b      	ldr	r3, [r7, #20]
    }
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000074 	.word	0x20000074
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08e      	sub	sp, #56	; 0x38
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <xTaskGenericNotify+0x2e>
        __asm volatile
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	623b      	str	r3, [r7, #32]
    }
 8001f66:	bf00      	nop
 8001f68:	e7fe      	b.n	8001f68 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <xTaskGenericNotify+0x4a>
        __asm volatile
 8001f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f74:	f383 8811 	msr	BASEPRI, r3
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	61fb      	str	r3, [r7, #28]
    }
 8001f82:	bf00      	nop
 8001f84:	e7fe      	b.n	8001f84 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8001f8a:	f000 ff73 	bl	8002e74 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	3214      	adds	r2, #20
 8001f9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3354      	adds	r3, #84	; 0x54
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3354      	adds	r3, #84	; 0x54
 8001fb8:	2202      	movs	r2, #2
 8001fba:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d83b      	bhi.n	800203a <xTaskGenericNotify+0xfe>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <xTaskGenericNotify+0x8c>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08002059 	.word	0x08002059
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	08002011 	.word	0x08002011
 8001fd8:	0800201f 	.word	0x0800201f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	3214      	adds	r2, #20
 8001fe2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	ea42 0103 	orr.w	r1, r2, r3
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	3214      	adds	r2, #20
 8001ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001ff6:	e032      	b.n	800205e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	3214      	adds	r2, #20
 8001ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002002:	1c59      	adds	r1, r3, #1
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	3214      	adds	r2, #20
 800200a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800200e:	e026      	b.n	800205e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	3214      	adds	r2, #20
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800201c:	e01f      	b.n	800205e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800201e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002022:	2b02      	cmp	r3, #2
 8002024:	d006      	beq.n	8002034 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	3214      	adds	r2, #20
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002032:	e014      	b.n	800205e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8002038:	e011      	b.n	800205e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800203a:	4b34      	ldr	r3, [pc, #208]	; (800210c <xTaskGenericNotify+0x1d0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <xTaskGenericNotify+0x120>
        __asm volatile
 8002042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002046:	f383 8811 	msr	BASEPRI, r3
 800204a:	f3bf 8f6f 	isb	sy
 800204e:	f3bf 8f4f 	dsb	sy
 8002052:	61bb      	str	r3, [r7, #24]
    }
 8002054:	bf00      	nop
 8002056:	e7fe      	b.n	8002056 <xTaskGenericNotify+0x11a>
                    break;
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <xTaskGenericNotify+0x122>

                    break;
 800205c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fea3 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8002066:	4601      	mov	r1, r0
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	203e      	movs	r0, #62	; 0x3e
 8002074:	f002 f8d6 	bl	8004224 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800207c:	2b01      	cmp	r3, #1
 800207e:	d13d      	bne.n	80020fc <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	3304      	adds	r3, #4
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fb01 	bl	800068c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	4618      	mov	r0, r3
 800208e:	f002 fdeb 	bl	8004c68 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	2201      	movs	r2, #1
 8002098:	409a      	lsls	r2, r3
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <xTaskGenericNotify+0x1d4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <xTaskGenericNotify+0x1d4>)
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4a18      	ldr	r2, [pc, #96]	; (8002114 <xTaskGenericNotify+0x1d8>)
 80020b2:	441a      	add	r2, r3
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	3304      	adds	r3, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f7fe fa89 	bl	80005d2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <xTaskGenericNotify+0x1a2>
        __asm volatile
 80020c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020cc:	f383 8811 	msr	BASEPRI, r3
 80020d0:	f3bf 8f6f 	isb	sy
 80020d4:	f3bf 8f4f 	dsb	sy
 80020d8:	617b      	str	r3, [r7, #20]
    }
 80020da:	bf00      	nop
 80020dc:	e7fe      	b.n	80020dc <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <xTaskGenericNotify+0x1dc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d907      	bls.n	80020fc <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <xTaskGenericNotify+0x1e0>)
 80020ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80020fc:	f000 feea 	bl	8002ed4 <vPortExitCritical>

        return xReturn;
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002102:	4618      	mov	r0, r3
 8002104:	3730      	adds	r7, #48	; 0x30
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000150 	.word	0x20000150
 8002110:	20000154 	.word	0x20000154
 8002114:	20000078 	.word	0x20000078
 8002118:	20000074 	.word	0x20000074
 800211c:	e000ed04 	.word	0xe000ed04

08002120 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002120:	b580      	push	{r7, lr}
 8002122:	b092      	sub	sp, #72	; 0x48
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800212e:	2301      	movs	r3, #1
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213c:	f383 8811 	msr	BASEPRI, r3
 8002140:	f3bf 8f6f 	isb	sy
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800214a:	bf00      	nop
 800214c:	e7fe      	b.n	800214c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8002154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002166:	bf00      	nop
 8002168:	e7fe      	b.n	8002168 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800216a:	f000 ff6f 	bl	800304c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8002172:	f3ef 8211 	mrs	r2, BASEPRI
 8002176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	627a      	str	r2, [r7, #36]	; 0x24
 8002188:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800218e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	3214      	adds	r2, #20
 800219a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800219e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80021a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4413      	add	r3, r2
 80021a8:	3354      	adds	r3, #84	; 0x54
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80021b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4413      	add	r3, r2
 80021b6:	3354      	adds	r3, #84	; 0x54
 80021b8:	2202      	movs	r2, #2
 80021ba:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d83b      	bhi.n	800223a <xTaskGenericNotifyFromISR+0x11a>
 80021c2:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <xTaskGenericNotifyFromISR+0xa8>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	08002259 	.word	0x08002259
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021f9 	.word	0x080021f9
 80021d4:	08002211 	.word	0x08002211
 80021d8:	0800221f 	.word	0x0800221f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80021dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	3214      	adds	r2, #20
 80021e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	ea42 0103 	orr.w	r1, r2, r3
 80021ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	3214      	adds	r2, #20
 80021f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021f6:	e032      	b.n	800225e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80021f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	3214      	adds	r2, #20
 80021fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002202:	1c59      	adds	r1, r3, #1
 8002204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	3214      	adds	r2, #20
 800220a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800220e:	e026      	b.n	800225e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	3214      	adds	r2, #20
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800221c:	e01f      	b.n	800225e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800221e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002222:	2b02      	cmp	r3, #2
 8002224:	d006      	beq.n	8002234 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	3214      	adds	r2, #20
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002232:	e014      	b.n	800225e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8002234:	2300      	movs	r3, #0
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8002238:	e011      	b.n	800225e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <xTaskGenericNotifyFromISR+0x210>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8002242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002246:	f383 8811 	msr	BASEPRI, r3
 800224a:	f3bf 8f6f 	isb	sy
 800224e:	f3bf 8f4f 	dsb	sy
 8002252:	61fb      	str	r3, [r7, #28]
    }
 8002254:	bf00      	nop
 8002256:	e7fe      	b.n	8002256 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8002258:	bf00      	nop
 800225a:	e000      	b.n	800225e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800225c:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fda3 	bl	8004dac <SEGGER_SYSVIEW_ShrinkId>
 8002266:	78f9      	ldrb	r1, [r7, #3]
 8002268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800226a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800226c:	9201      	str	r2, [sp, #4]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	460b      	mov	r3, r1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4601      	mov	r1, r0
 8002276:	203f      	movs	r0, #63	; 0x3f
 8002278:	f002 f866 	bl	8004348 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800227c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002280:	2b01      	cmp	r3, #1
 8002282:	d149      	bne.n	8002318 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 800228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	61bb      	str	r3, [r7, #24]
    }
 800229e:	bf00      	nop
 80022a0:	e7fe      	b.n	80022a0 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <xTaskGenericNotifyFromISR+0x214>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d120      	bne.n	80022ec <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ac:	3304      	adds	r3, #4
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f9ec 	bl	800068c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80022b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 fcd6 	bl	8004c68 <SEGGER_SYSVIEW_OnTaskStartReady>
 80022bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	2201      	movs	r2, #1
 80022c2:	409a      	lsls	r2, r3
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <xTaskGenericNotifyFromISR+0x218>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <xTaskGenericNotifyFromISR+0x218>)
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4a18      	ldr	r2, [pc, #96]	; (800233c <xTaskGenericNotifyFromISR+0x21c>)
 80022dc:	441a      	add	r2, r3
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	3304      	adds	r3, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f7fe f974 	bl	80005d2 <vListInsertEnd>
 80022ea:	e005      	b.n	80022f8 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80022ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ee:	3318      	adds	r3, #24
 80022f0:	4619      	mov	r1, r3
 80022f2:	4813      	ldr	r0, [pc, #76]	; (8002340 <xTaskGenericNotifyFromISR+0x220>)
 80022f4:	f7fe f96d 	bl	80005d2 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <xTaskGenericNotifyFromISR+0x224>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	429a      	cmp	r2, r3
 8002304:	d908      	bls.n	8002318 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800230c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <xTaskGenericNotifyFromISR+0x228>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f383 8811 	msr	BASEPRI, r3
    }
 8002322:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8002324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8002326:	4618      	mov	r0, r3
 8002328:	3740      	adds	r7, #64	; 0x40
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000150 	.word	0x20000150
 8002334:	20000174 	.word	0x20000174
 8002338:	20000154 	.word	0x20000154
 800233c:	20000078 	.word	0x20000078
 8002340:	2000010c 	.word	0x2000010c
 8002344:	20000074 	.word	0x20000074
 8002348:	20000160 	.word	0x20000160

0800234c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002356:	4b32      	ldr	r3, [pc, #200]	; (8002420 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800235c:	4b31      	ldr	r3, [pc, #196]	; (8002424 <prvAddCurrentTaskToDelayedList+0xd8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3304      	adds	r3, #4
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe f992 	bl	800068c <uxListRemove>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10b      	bne.n	8002386 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800236e:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	2201      	movs	r2, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <prvAddCurrentTaskToDelayedList+0xdc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4013      	ands	r3, r2
 8002382:	4a29      	ldr	r2, [pc, #164]	; (8002428 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002384:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800238c:	d110      	bne.n	80023b0 <prvAddCurrentTaskToDelayedList+0x64>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00d      	beq.n	80023b0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002394:	4b23      	ldr	r3, [pc, #140]	; (8002424 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	211b      	movs	r1, #27
 800239a:	4618      	mov	r0, r3
 800239c:	f002 fca6 	bl	8004cec <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3304      	adds	r3, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4820      	ldr	r0, [pc, #128]	; (800242c <prvAddCurrentTaskToDelayedList+0xe0>)
 80023aa:	f7fe f912 	bl	80005d2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80023ae:	e032      	b.n	8002416 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d20f      	bcs.n	80023e8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2104      	movs	r1, #4
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 fc8c 	bl	8004cec <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <prvAddCurrentTaskToDelayedList+0xe4>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3304      	adds	r3, #4
 80023de:	4619      	mov	r1, r3
 80023e0:	4610      	mov	r0, r2
 80023e2:	f7fe f91a 	bl	800061a <vListInsert>
}
 80023e6:	e016      	b.n	8002416 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2104      	movs	r1, #4
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fc7c 	bl	8004cec <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <prvAddCurrentTaskToDelayedList+0xe8>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3304      	adds	r3, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f7fe f90a 	bl	800061a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <prvAddCurrentTaskToDelayedList+0xec>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	429a      	cmp	r2, r3
 800240e:	d202      	bcs.n	8002416 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002410:	4a09      	ldr	r2, [pc, #36]	; (8002438 <prvAddCurrentTaskToDelayedList+0xec>)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000150 	.word	0x20000150
 8002424:	20000074 	.word	0x20000074
 8002428:	20000154 	.word	0x20000154
 800242c:	20000138 	.word	0x20000138
 8002430:	20000108 	.word	0x20000108
 8002434:	20000104 	.word	0x20000104
 8002438:	2000016c 	.word	0x2000016c

0800243c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002446:	f000 fb31 	bl	8002aac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <xTimerCreateTimerTask+0x54>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <xTimerCreateTimerTask+0x58>)
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	2303      	movs	r3, #3
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2300      	movs	r3, #0
 800245c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002460:	490d      	ldr	r1, [pc, #52]	; (8002498 <xTimerCreateTimerTask+0x5c>)
 8002462:	480e      	ldr	r0, [pc, #56]	; (800249c <xTimerCreateTimerTask+0x60>)
 8002464:	f7fe fe96 	bl	8001194 <xTaskCreate>
 8002468:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	603b      	str	r3, [r7, #0]
    }
 8002482:	bf00      	nop
 8002484:	e7fe      	b.n	8002484 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002486:	687b      	ldr	r3, [r7, #4]
    }
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200001a8 	.word	0x200001a8
 8002494:	200001ac 	.word	0x200001ac
 8002498:	0800874c 	.word	0x0800874c
 800249c:	0800268d 	.word	0x0800268d

080024a0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80024ae:	202c      	movs	r0, #44	; 0x2c
 80024b0:	f000 fe0c 	bl	80030cc <pvPortMalloc>
 80024b4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f805 	bl	80024e2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80024d8:	697b      	ldr	r3, [r7, #20]
        }
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80024f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fa:	f383 8811 	msr	BASEPRI, r3
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f3bf 8f4f 	dsb	sy
 8002506:	617b      	str	r3, [r7, #20]
    }
 8002508:	bf00      	nop
 800250a:	e7fe      	b.n	800250a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01e      	beq.n	8002550 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8002512:	f000 facb 	bl	8002aac <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	6a3a      	ldr	r2, [r7, #32]
 800252c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3304      	adds	r3, #4
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe f840 	bl	80005b8 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	b2da      	uxtb	r2, r3
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <xTimerGenericCommand+0x2e>
        __asm volatile
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	623b      	str	r3, [r7, #32]
    }
 8002582:	bf00      	nop
 8002584:	e7fe      	b.n	8002584 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <xTimerGenericCommand+0x98>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d02a      	beq.n	80025e4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b05      	cmp	r3, #5
 800259e:	dc18      	bgt.n	80025d2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80025a0:	f7ff fba6 	bl	8001cf0 <xTaskGetSchedulerState>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d109      	bne.n	80025be <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <xTimerGenericCommand+0x98>)
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	f107 0114 	add.w	r1, r7, #20
 80025b2:	2300      	movs	r3, #0
 80025b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b6:	f7fe f983 	bl	80008c0 <xQueueGenericSend>
 80025ba:	6278      	str	r0, [r7, #36]	; 0x24
 80025bc:	e012      	b.n	80025e4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <xTimerGenericCommand+0x98>)
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	f107 0114 	add.w	r1, r7, #20
 80025c6:	2300      	movs	r3, #0
 80025c8:	2200      	movs	r2, #0
 80025ca:	f7fe f979 	bl	80008c0 <xQueueGenericSend>
 80025ce:	6278      	str	r0, [r7, #36]	; 0x24
 80025d0:	e008      	b.n	80025e4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <xTimerGenericCommand+0x98>)
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	f107 0114 	add.w	r1, r7, #20
 80025da:	2300      	movs	r3, #0
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	f7fe fa95 	bl	8000b0c <xQueueGenericSendFromISR>
 80025e2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80025e6:	4618      	mov	r0, r3
 80025e8:	3728      	adds	r7, #40	; 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200001a8 	.word	0x200001a8

080025f4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <prvProcessExpiredTimer+0x94>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3304      	adds	r3, #4
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe f83d 	bl	800068c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d022      	beq.n	8002666 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	18d1      	adds	r1, r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	6978      	ldr	r0, [r7, #20]
 800262e:	f000 f8d1 	bl	80027d4 <prvInsertTimerInActiveList>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01f      	beq.n	8002678 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002638:	2300      	movs	r3, #0
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2300      	movs	r3, #0
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	2100      	movs	r1, #0
 8002642:	6978      	ldr	r0, [r7, #20]
 8002644:	f7ff ff88 	bl	8002558 <xTimerGenericCommand>
 8002648:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d113      	bne.n	8002678 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	60fb      	str	r3, [r7, #12]
    }
 8002662:	bf00      	nop
 8002664:	e7fe      	b.n	8002664 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	b2da      	uxtb	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	6978      	ldr	r0, [r7, #20]
 800267e:	4798      	blx	r3
    }
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200001a0 	.word	0x200001a0

0800268c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f857 	bl	800274c <prvGetNextExpireTime>
 800269e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4619      	mov	r1, r3
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f803 	bl	80026b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80026aa:	f000 f8d5 	bl	8002858 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80026ae:	e7f1      	b.n	8002694 <prvTimerTask+0x8>

080026b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80026ba:	f7fe ff31 	bl	8001520 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f866 	bl	8002794 <prvSampleTimeNow>
 80026c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d130      	bne.n	8002732 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <prvProcessTimerOrBlockTask+0x3c>
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d806      	bhi.n	80026ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80026de:	f7fe ff2d 	bl	800153c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff85 	bl	80025f4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80026ea:	e024      	b.n	8002736 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <prvProcessTimerOrBlockTask+0x90>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <prvProcessTimerOrBlockTask+0x50>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <prvProcessTimerOrBlockTask+0x52>
 8002700:	2300      	movs	r3, #0
 8002702:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <prvProcessTimerOrBlockTask+0x94>)
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	f7fe fd0b 	bl	800112c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002716:	f7fe ff11 	bl	800153c <xTaskResumeAll>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <prvProcessTimerOrBlockTask+0x98>)
 8002722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	f3bf 8f6f 	isb	sy
    }
 8002730:	e001      	b.n	8002736 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002732:	f7fe ff03 	bl	800153c <xTaskResumeAll>
    }
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200001a4 	.word	0x200001a4
 8002744:	200001a8 	.word	0x200001a8
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <prvGetNextExpireTime+0x44>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <prvGetNextExpireTime+0x16>
 800275e:	2201      	movs	r2, #1
 8002760:	e000      	b.n	8002764 <prvGetNextExpireTime+0x18>
 8002762:	2200      	movs	r2, #0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <prvGetNextExpireTime+0x44>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e001      	b.n	8002780 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002780:	68fb      	ldr	r3, [r7, #12]
    }
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	200001a0 	.word	0x200001a0

08002794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800279c:	f7fe ff6e 	bl	800167c <xTaskGetTickCount>
 80027a0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <prvSampleTimeNow+0x3c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d205      	bcs.n	80027b8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80027ac:	f000 f91a 	bl	80029e4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e002      	b.n	80027be <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <prvSampleTimeNow+0x3c>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80027c4:	68fb      	ldr	r3, [r7, #12]
    }
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200001b0 	.word	0x200001b0

080027d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d812      	bhi.n	8002820 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	1ad2      	subs	r2, r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	429a      	cmp	r2, r3
 8002806:	d302      	bcc.n	800280e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002808:	2301      	movs	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e01b      	b.n	8002846 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <prvInsertTimerInActiveList+0x7c>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3304      	adds	r3, #4
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f7fd fefe 	bl	800061a <vListInsert>
 800281e:	e012      	b.n	8002846 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d206      	bcs.n	8002836 <prvInsertTimerInActiveList+0x62>
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d302      	bcc.n	8002836 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002830:	2301      	movs	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	e007      	b.n	8002846 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <prvInsertTimerInActiveList+0x80>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3304      	adds	r3, #4
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f7fd feea 	bl	800061a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002846:	697b      	ldr	r3, [r7, #20]
    }
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200001a4 	.word	0x200001a4
 8002854:	200001a0 	.word	0x200001a0

08002858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800285e:	e0ae      	b.n	80029be <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f2c0 80aa 	blt.w	80029bc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3304      	adds	r3, #4
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd ff07 	bl	800068c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff87 	bl	8002794 <prvSampleTimeNow>
 8002886:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b09      	cmp	r3, #9
 800288c:	f200 8097 	bhi.w	80029be <prvProcessReceivedCommands+0x166>
 8002890:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <prvProcessReceivedCommands+0x40>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028c1 	.word	0x080028c1
 800289c:	080028c1 	.word	0x080028c1
 80028a0:	080028c1 	.word	0x080028c1
 80028a4:	08002935 	.word	0x08002935
 80028a8:	08002949 	.word	0x08002949
 80028ac:	08002993 	.word	0x08002993
 80028b0:	080028c1 	.word	0x080028c1
 80028b4:	080028c1 	.word	0x080028c1
 80028b8:	08002935 	.word	0x08002935
 80028bc:	08002949 	.word	0x08002949
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	18d1      	adds	r1, r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028e0:	f7ff ff78 	bl	80027d4 <prvInsertTimerInActiveList>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d069      	beq.n	80029be <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028f0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d05e      	beq.n	80029be <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	441a      	add	r2, r3
 8002908:	2300      	movs	r3, #0
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2300      	movs	r3, #0
 800290e:	2100      	movs	r1, #0
 8002910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002912:	f7ff fe21 	bl	8002558 <xTimerGenericCommand>
 8002916:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d14f      	bne.n	80029be <prvProcessReceivedCommands+0x166>
        __asm volatile
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	61bb      	str	r3, [r7, #24]
    }
 8002930:	bf00      	nop
 8002932:	e7fe      	b.n	8002932 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	b2da      	uxtb	r2, r3
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002946:	e03a      	b.n	80029be <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	617b      	str	r3, [r7, #20]
    }
 800297a:	bf00      	nop
 800297c:	e7fe      	b.n	800297c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	18d1      	adds	r1, r2, r3
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800298c:	f7ff ff22 	bl	80027d4 <prvInsertTimerInActiveList>
                        break;
 8002990:	e015      	b.n	80029be <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80029a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029a2:	f000 fc73 	bl	800328c <vPortFree>
 80029a6:	e00a      	b.n	80029be <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80029ba:	e000      	b.n	80029be <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80029bc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <prvProcessReceivedCommands+0x188>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f107 0108 	add.w	r1, r7, #8
 80029c6:	2200      	movs	r2, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe f95d 	bl	8000c88 <xQueueReceive>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f47f af45 	bne.w	8002860 <prvProcessReceivedCommands+0x8>
        }
    }
 80029d6:	bf00      	nop
 80029d8:	bf00      	nop
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200001a8 	.word	0x200001a8

080029e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029ea:	e048      	b.n	8002a7e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <prvSwitchTimerLists+0xc0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <prvSwitchTimerLists+0xc0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fe41 	bl	800068c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02e      	beq.n	8002a7e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d90e      	bls.n	8002a50 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <prvSwitchTimerLists+0xc0>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3304      	adds	r3, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f7fd fde6 	bl	800061a <vListInsert>
 8002a4e:	e016      	b.n	8002a7e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002a50:	2300      	movs	r3, #0
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	2100      	movs	r1, #0
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7ff fd7c 	bl	8002558 <xTimerGenericCommand>
 8002a60:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	603b      	str	r3, [r7, #0]
    }
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <prvSwitchTimerLists+0xc0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1b1      	bne.n	80029ec <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <prvSwitchTimerLists+0xc0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <prvSwitchTimerLists+0xc4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <prvSwitchTimerLists+0xc0>)
 8002a94:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002a96:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <prvSwitchTimerLists+0xc4>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	6013      	str	r3, [r2, #0]
    }
 8002a9c:	bf00      	nop
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200001a0 	.word	0x200001a0
 8002aa8:	200001a4 	.word	0x200001a4

08002aac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002ab0:	f000 f9e0 	bl	8002e74 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <prvCheckForValidListAndQueue+0x54>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d11d      	bne.n	8002af8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002abc:	4811      	ldr	r0, [pc, #68]	; (8002b04 <prvCheckForValidListAndQueue+0x58>)
 8002abe:	f7fd fd5b 	bl	8000578 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002ac2:	4811      	ldr	r0, [pc, #68]	; (8002b08 <prvCheckForValidListAndQueue+0x5c>)
 8002ac4:	f7fd fd58 	bl	8000578 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <prvCheckForValidListAndQueue+0x60>)
 8002aca:	4a0e      	ldr	r2, [pc, #56]	; (8002b04 <prvCheckForValidListAndQueue+0x58>)
 8002acc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <prvCheckForValidListAndQueue+0x64>)
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <prvCheckForValidListAndQueue+0x5c>)
 8002ad2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	210c      	movs	r1, #12
 8002ad8:	200a      	movs	r0, #10
 8002ada:	f7fd fe69 	bl	80007b0 <xQueueGenericCreate>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <prvCheckForValidListAndQueue+0x54>)
 8002ae2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <prvCheckForValidListAndQueue+0x54>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <prvCheckForValidListAndQueue+0x54>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4908      	ldr	r1, [pc, #32]	; (8002b14 <prvCheckForValidListAndQueue+0x68>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fae8 	bl	80010c8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002af8:	f000 f9ec 	bl	8002ed4 <vPortExitCritical>
    }
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200001a8 	.word	0x200001a8
 8002b04:	20000178 	.word	0x20000178
 8002b08:	2000018c 	.word	0x2000018c
 8002b0c:	200001a0 	.word	0x200001a0
 8002b10:	200001a4 	.word	0x200001a4
 8002b14:	08008754 	.word	0x08008754

08002b18 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3b04      	subs	r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	3b04      	subs	r3, #4
 8002b36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f023 0201 	bic.w	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b04      	subs	r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b48:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <pxPortInitialiseStack+0x64>)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3b14      	subs	r3, #20
 8002b52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3b04      	subs	r3, #4
 8002b5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f06f 0202 	mvn.w	r2, #2
 8002b66:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3b20      	subs	r3, #32
 8002b6c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	08002b81 	.word	0x08002b81

08002b80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <prvTaskExitError+0x54>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b92:	d00a      	beq.n	8002baa <prvTaskExitError+0x2a>
        __asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	60fb      	str	r3, [r7, #12]
    }
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <prvTaskExitError+0x28>
        __asm volatile
 8002baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	60bb      	str	r3, [r7, #8]
    }
 8002bbc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002bbe:	bf00      	nop
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0fc      	beq.n	8002bc0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002bc6:	bf00      	nop
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	20000004 	.word	0x20000004
	...

08002be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <pxCurrentTCBConst2>)
 8002be2:	6819      	ldr	r1, [r3, #0]
 8002be4:	6808      	ldr	r0, [r1, #0]
 8002be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bea:	f380 8809 	msr	PSP, r0
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f04f 0000 	mov.w	r0, #0
 8002bf6:	f380 8811 	msr	BASEPRI, r0
 8002bfa:	4770      	bx	lr
 8002bfc:	f3af 8000 	nop.w

08002c00 <pxCurrentTCBConst2>:
 8002c00:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop

08002c08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c08:	4808      	ldr	r0, [pc, #32]	; (8002c2c <prvPortStartFirstTask+0x24>)
 8002c0a:	6800      	ldr	r0, [r0, #0]
 8002c0c:	6800      	ldr	r0, [r0, #0]
 8002c0e:	f380 8808 	msr	MSP, r0
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f380 8814 	msr	CONTROL, r0
 8002c1a:	b662      	cpsie	i
 8002c1c:	b661      	cpsie	f
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	df00      	svc	0
 8002c28:	bf00      	nop
 8002c2a:	0000      	.short	0x0000
 8002c2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop

08002c34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c3a:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <xPortStartScheduler+0x120>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a46      	ldr	r2, [pc, #280]	; (8002d58 <xPortStartScheduler+0x124>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d10a      	bne.n	8002c5a <xPortStartScheduler+0x26>
        __asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	613b      	str	r3, [r7, #16]
    }
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <xPortStartScheduler+0x120>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a3f      	ldr	r2, [pc, #252]	; (8002d5c <xPortStartScheduler+0x128>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10a      	bne.n	8002c7a <xPortStartScheduler+0x46>
        __asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	60fb      	str	r3, [r7, #12]
    }
 8002c76:	bf00      	nop
 8002c78:	e7fe      	b.n	8002c78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c7a:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <xPortStartScheduler+0x12c>)
 8002c7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	22ff      	movs	r2, #255	; 0xff
 8002c8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <xPortStartScheduler+0x130>)
 8002ca0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ca2:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <xPortStartScheduler+0x134>)
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ca8:	e009      	b.n	8002cbe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <xPortStartScheduler+0x134>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <xPortStartScheduler+0x134>)
 8002cb2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b80      	cmp	r3, #128	; 0x80
 8002cc8:	d0ef      	beq.n	8002caa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cca:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <xPortStartScheduler+0x134>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1c3 0307 	rsb	r3, r3, #7
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d00a      	beq.n	8002cec <xPortStartScheduler+0xb8>
        __asm volatile
 8002cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cda:	f383 8811 	msr	BASEPRI, r3
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	60bb      	str	r3, [r7, #8]
    }
 8002ce8:	bf00      	nop
 8002cea:	e7fe      	b.n	8002cea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <xPortStartScheduler+0x134>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <xPortStartScheduler+0x134>)
 8002cf4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <xPortStartScheduler+0x134>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cfe:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <xPortStartScheduler+0x134>)
 8002d00:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <xPortStartScheduler+0x138>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <xPortStartScheduler+0x138>)
 8002d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d14:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <xPortStartScheduler+0x138>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <xPortStartScheduler+0x138>)
 8002d1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d20:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d22:	f000 f963 	bl	8002fec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d26:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <xPortStartScheduler+0x13c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d2c:	f000 f982 	bl	8003034 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d30:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <xPortStartScheduler+0x140>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <xPortStartScheduler+0x140>)
 8002d36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d3a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d3c:	f7ff ff64 	bl	8002c08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d40:	f7fe fd7a 	bl	8001838 <vTaskSwitchContext>
    prvTaskExitError();
 8002d44:	f7ff ff1c 	bl	8002b80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	e000ed00 	.word	0xe000ed00
 8002d58:	410fc271 	.word	0x410fc271
 8002d5c:	410fc270 	.word	0x410fc270
 8002d60:	e000e400 	.word	0xe000e400
 8002d64:	200001b4 	.word	0x200001b4
 8002d68:	200001b8 	.word	0x200001b8
 8002d6c:	e000ed20 	.word	0xe000ed20
 8002d70:	20000004 	.word	0x20000004
 8002d74:	e000ef34 	.word	0xe000ef34

08002d78 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <vInitPrioGroupValue+0xe4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a37      	ldr	r2, [pc, #220]	; (8002e60 <vInitPrioGroupValue+0xe8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d10a      	bne.n	8002d9e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	613b      	str	r3, [r7, #16]
    }
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d9e:	4b2f      	ldr	r3, [pc, #188]	; (8002e5c <vInitPrioGroupValue+0xe4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a30      	ldr	r2, [pc, #192]	; (8002e64 <vInitPrioGroupValue+0xec>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d10a      	bne.n	8002dbe <vInitPrioGroupValue+0x46>
        __asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	60fb      	str	r3, [r7, #12]
    }
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <vInitPrioGroupValue+0xf0>)
 8002dc0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	22ff      	movs	r2, #255	; 0xff
 8002dce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <vInitPrioGroupValue+0xf4>)
 8002de4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <vInitPrioGroupValue+0xf8>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dec:	e009      	b.n	8002e02 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <vInitPrioGroupValue+0xf8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <vInitPrioGroupValue+0xf8>)
 8002df6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b80      	cmp	r3, #128	; 0x80
 8002e0c:	d0ef      	beq.n	8002dee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e0e:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <vInitPrioGroupValue+0xf8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d00a      	beq.n	8002e30 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	60bb      	str	r3, [r7, #8]
    }
 8002e2c:	bf00      	nop
 8002e2e:	e7fe      	b.n	8002e2e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <vInitPrioGroupValue+0xf8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <vInitPrioGroupValue+0xf8>)
 8002e38:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <vInitPrioGroupValue+0xf8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e42:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <vInitPrioGroupValue+0xf8>)
 8002e44:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000ed00 	.word	0xe000ed00
 8002e60:	410fc271 	.word	0x410fc271
 8002e64:	410fc270 	.word	0x410fc270
 8002e68:	e000e400 	.word	0xe000e400
 8002e6c:	200001b4 	.word	0x200001b4
 8002e70:	200001b8 	.word	0x200001b8

08002e74 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
        __asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	607b      	str	r3, [r7, #4]
    }
 8002e8c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <vPortEnterCritical+0x58>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	4a0d      	ldr	r2, [pc, #52]	; (8002ecc <vPortEnterCritical+0x58>)
 8002e96:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <vPortEnterCritical+0x58>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d10f      	bne.n	8002ec0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <vPortEnterCritical+0x5c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	603b      	str	r3, [r7, #0]
    }
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <vPortEnterCritical+0x4a>
    }
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	20000004 	.word	0x20000004
 8002ed0:	e000ed04 	.word	0xe000ed04

08002ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <vPortExitCritical+0x50>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <vPortExitCritical+0x24>
        __asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	607b      	str	r3, [r7, #4]
    }
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <vPortExitCritical+0x50>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <vPortExitCritical+0x50>)
 8002f00:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <vPortExitCritical+0x50>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <vPortExitCritical+0x42>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f383 8811 	msr	BASEPRI, r3
    }
 8002f14:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000004 	.word	0x20000004
	...

08002f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f30:	f3ef 8009 	mrs	r0, PSP
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <pxCurrentTCBConst>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	f01e 0f10 	tst.w	lr, #16
 8002f40:	bf08      	it	eq
 8002f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f54:	f380 8811 	msr	BASEPRI, r0
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f7fe fc6a 	bl	8001838 <vTaskSwitchContext>
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f380 8811 	msr	BASEPRI, r0
 8002f6c:	bc09      	pop	{r0, r3}
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	6808      	ldr	r0, [r1, #0]
 8002f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f76:	f01e 0f10 	tst.w	lr, #16
 8002f7a:	bf08      	it	eq
 8002f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f80:	f380 8809 	msr	PSP, r0
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w

08002f90 <pxCurrentTCBConst>:
 8002f90:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop

08002f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	607b      	str	r3, [r7, #4]
    }
 8002fb0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002fb2:	f001 fd3f 	bl	8004a34 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002fb6:	f7fe fb83 	bl	80016c0 <xTaskIncrementTick>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002fc0:	f001 fd96 	bl	8004af0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <SysTick_Handler+0x50>)
 8002fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e001      	b.n	8002fd2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002fce:	f001 fd73 	bl	8004ab8 <SEGGER_SYSVIEW_RecordExitISR>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f383 8811 	msr	BASEPRI, r3
    }
 8002fdc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <vPortSetupTimerInterrupt+0x34>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <vPortSetupTimerInterrupt+0x38>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <vPortSetupTimerInterrupt+0x3c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0a      	ldr	r2, [pc, #40]	; (800302c <vPortSetupTimerInterrupt+0x40>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	4a09      	ldr	r2, [pc, #36]	; (8003030 <vPortSetupTimerInterrupt+0x44>)
 800300a:	3b01      	subs	r3, #1
 800300c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <vPortSetupTimerInterrupt+0x34>)
 8003010:	2207      	movs	r2, #7
 8003012:	601a      	str	r2, [r3, #0]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000e010 	.word	0xe000e010
 8003024:	e000e018 	.word	0xe000e018
 8003028:	2000000c 	.word	0x2000000c
 800302c:	10624dd3 	.word	0x10624dd3
 8003030:	e000e014 	.word	0xe000e014

08003034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003044 <vPortEnableVFP+0x10>
 8003038:	6801      	ldr	r1, [r0, #0]
 800303a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800303e:	6001      	str	r1, [r0, #0]
 8003040:	4770      	bx	lr
 8003042:	0000      	.short	0x0000
 8003044:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop

0800304c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003052:	f3ef 8305 	mrs	r3, IPSR
 8003056:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b0f      	cmp	r3, #15
 800305c:	d914      	bls.n	8003088 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800305e:	4a17      	ldr	r2, [pc, #92]	; (80030bc <vPortValidateInterruptPriority+0x70>)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <vPortValidateInterruptPriority+0x74>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	7afa      	ldrb	r2, [r7, #11]
 800306e:	429a      	cmp	r2, r3
 8003070:	d20a      	bcs.n	8003088 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	607b      	str	r3, [r7, #4]
    }
 8003084:	bf00      	nop
 8003086:	e7fe      	b.n	8003086 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <vPortValidateInterruptPriority+0x78>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <vPortValidateInterruptPriority+0x7c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d90a      	bls.n	80030ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	603b      	str	r3, [r7, #0]
    }
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <vPortValidateInterruptPriority+0x60>
    }
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e3f0 	.word	0xe000e3f0
 80030c0:	200001b4 	.word	0x200001b4
 80030c4:	e000ed0c 	.word	0xe000ed0c
 80030c8:	200001b8 	.word	0x200001b8

080030cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80030d8:	f7fe fa22 	bl	8001520 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80030dc:	4b65      	ldr	r3, [pc, #404]	; (8003274 <pvPortMalloc+0x1a8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80030e4:	f000 f934 	bl	8003350 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030e8:	4b63      	ldr	r3, [pc, #396]	; (8003278 <pvPortMalloc+0x1ac>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 80a7 	bne.w	8003244 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d02d      	beq.n	8003158 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80030fc:	2208      	movs	r2, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	d227      	bcs.n	8003158 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003108:	2208      	movs	r2, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	2b00      	cmp	r3, #0
 8003118:	d021      	beq.n	800315e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f023 0307 	bic.w	r3, r3, #7
 8003120:	3308      	adds	r3, #8
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d214      	bcs.n	8003152 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f023 0307 	bic.w	r3, r3, #7
 800312e:	3308      	adds	r3, #8
 8003130:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	2b00      	cmp	r3, #0
 800313a:	d010      	beq.n	800315e <pvPortMalloc+0x92>
        __asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	617b      	str	r3, [r7, #20]
    }
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003156:	e002      	b.n	800315e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	e000      	b.n	8003160 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800315e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d06e      	beq.n	8003244 <pvPortMalloc+0x178>
 8003166:	4b45      	ldr	r3, [pc, #276]	; (800327c <pvPortMalloc+0x1b0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d869      	bhi.n	8003244 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003170:	4b43      	ldr	r3, [pc, #268]	; (8003280 <pvPortMalloc+0x1b4>)
 8003172:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003174:	4b42      	ldr	r3, [pc, #264]	; (8003280 <pvPortMalloc+0x1b4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800317a:	e004      	b.n	8003186 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d903      	bls.n	8003198 <pvPortMalloc+0xcc>
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f1      	bne.n	800317c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003198:	4b36      	ldr	r3, [pc, #216]	; (8003274 <pvPortMalloc+0x1a8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319e:	429a      	cmp	r2, r3
 80031a0:	d050      	beq.n	8003244 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2208      	movs	r2, #8
 80031a8:	4413      	add	r3, r2
 80031aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1ad2      	subs	r2, r2, r3
 80031bc:	2308      	movs	r3, #8
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d91f      	bls.n	8003204 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <pvPortMalloc+0x120>
        __asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	613b      	str	r3, [r7, #16]
    }
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	1ad2      	subs	r2, r2, r3
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031fe:	69b8      	ldr	r0, [r7, #24]
 8003200:	f000 f908 	bl	8003414 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <pvPortMalloc+0x1b0>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	4a1b      	ldr	r2, [pc, #108]	; (800327c <pvPortMalloc+0x1b0>)
 8003210:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <pvPortMalloc+0x1b0>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <pvPortMalloc+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d203      	bcs.n	8003226 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800321e:	4b17      	ldr	r3, [pc, #92]	; (800327c <pvPortMalloc+0x1b0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a18      	ldr	r2, [pc, #96]	; (8003284 <pvPortMalloc+0x1b8>)
 8003224:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4b13      	ldr	r3, [pc, #76]	; (8003278 <pvPortMalloc+0x1ac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	431a      	orrs	r2, r3
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <pvPortMalloc+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <pvPortMalloc+0x1bc>)
 8003242:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003244:	f7fe f97a 	bl	800153c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <pvPortMalloc+0x19c>
        __asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	60fb      	str	r3, [r7, #12]
    }
 8003264:	bf00      	nop
 8003266:	e7fe      	b.n	8003266 <pvPortMalloc+0x19a>
    return pvReturn;
 8003268:	69fb      	ldr	r3, [r7, #28]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3728      	adds	r7, #40	; 0x28
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20012dc4 	.word	0x20012dc4
 8003278:	20012dd8 	.word	0x20012dd8
 800327c:	20012dc8 	.word	0x20012dc8
 8003280:	20012dbc 	.word	0x20012dbc
 8003284:	20012dcc 	.word	0x20012dcc
 8003288:	20012dd0 	.word	0x20012dd0

0800328c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d04d      	beq.n	800333a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800329e:	2308      	movs	r3, #8
 80032a0:	425b      	negs	r3, r3
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4413      	add	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4b24      	ldr	r3, [pc, #144]	; (8003344 <vPortFree+0xb8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <vPortFree+0x44>
        __asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	60fb      	str	r3, [r7, #12]
    }
 80032cc:	bf00      	nop
 80032ce:	e7fe      	b.n	80032ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <vPortFree+0x62>
        __asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	60bb      	str	r3, [r7, #8]
    }
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <vPortFree+0xb8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01e      	beq.n	800333a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d11a      	bne.n	800333a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <vPortFree+0xb8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	43db      	mvns	r3, r3
 800330e:	401a      	ands	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003314:	f7fe f904 	bl	8001520 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <vPortFree+0xbc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4413      	add	r3, r2
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <vPortFree+0xbc>)
 8003324:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003326:	6938      	ldr	r0, [r7, #16]
 8003328:	f000 f874 	bl	8003414 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <vPortFree+0xc0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3301      	adds	r3, #1
 8003332:	4a06      	ldr	r2, [pc, #24]	; (800334c <vPortFree+0xc0>)
 8003334:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003336:	f7fe f901 	bl	800153c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20012dd8 	.word	0x20012dd8
 8003348:	20012dc8 	.word	0x20012dc8
 800334c:	20012dd4 	.word	0x20012dd4

08003350 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003356:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800335a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <prvHeapInit+0xac>)
 800335e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3307      	adds	r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0307 	bic.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <prvHeapInit+0xac>)
 8003380:	4413      	add	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <prvHeapInit+0xb0>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <prvHeapInit+0xb0>)
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4413      	add	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800339c:	2208      	movs	r2, #8
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0307 	bic.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <prvHeapInit+0xb4>)
 80033b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <prvHeapInit+0xb4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <prvHeapInit+0xb4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	1ad2      	subs	r2, r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <prvHeapInit+0xb4>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <prvHeapInit+0xb8>)
 80033de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a09      	ldr	r2, [pc, #36]	; (800340c <prvHeapInit+0xbc>)
 80033e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <prvHeapInit+0xc0>)
 80033ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033ee:	601a      	str	r2, [r3, #0]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	200001bc 	.word	0x200001bc
 8003400:	20012dbc 	.word	0x20012dbc
 8003404:	20012dc4 	.word	0x20012dc4
 8003408:	20012dcc 	.word	0x20012dcc
 800340c:	20012dc8 	.word	0x20012dc8
 8003410:	20012dd8 	.word	0x20012dd8

08003414 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800341c:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <prvInsertBlockIntoFreeList+0xac>)
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e002      	b.n	8003428 <prvInsertBlockIntoFreeList+0x14>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	429a      	cmp	r2, r3
 8003430:	d8f7      	bhi.n	8003422 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4413      	add	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d108      	bne.n	8003456 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	441a      	add	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	441a      	add	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d118      	bne.n	800349c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <prvInsertBlockIntoFreeList+0xb0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d00d      	beq.n	8003492 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	441a      	add	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e008      	b.n	80034a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <prvInsertBlockIntoFreeList+0xb0>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e003      	b.n	80034a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d002      	beq.n	80034b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20012dbc 	.word	0x20012dbc
 80034c4:	20012dc4 	.word	0x20012dc4

080034c8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80034cc:	4803      	ldr	r0, [pc, #12]	; (80034dc <_cbSendSystemDesc+0x14>)
 80034ce:	f001 fa5b 	bl	8004988 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80034d2:	4803      	ldr	r0, [pc, #12]	; (80034e0 <_cbSendSystemDesc+0x18>)
 80034d4:	f001 fa58 	bl	8004988 <SEGGER_SYSVIEW_SendSysDesc>
}
 80034d8:	bf00      	nop
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	0800875c 	.word	0x0800875c
 80034e0:	080087a4 	.word	0x080087a4

080034e4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <SEGGER_SYSVIEW_Conf+0x20>)
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <SEGGER_SYSVIEW_Conf+0x20>)
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <SEGGER_SYSVIEW_Conf+0x24>)
 80034f2:	4a06      	ldr	r2, [pc, #24]	; (800350c <SEGGER_SYSVIEW_Conf+0x28>)
 80034f4:	f000 fd18 	bl	8003f28 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80034f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80034fc:	f000 fd58 	bl	8003fb0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	2000000c 	.word	0x2000000c
 8003508:	080034c9 	.word	0x080034c9
 800350c:	08008c5c 	.word	0x08008c5c

08003510 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	b085      	sub	sp, #20
 8003514:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	e033      	b.n	8003584 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800351c:	491e      	ldr	r1, [pc, #120]	; (8003598 <_cbSendTaskList+0x88>)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	491a      	ldr	r1, [pc, #104]	; (8003598 <_cbSendTaskList+0x88>)
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3304      	adds	r3, #4
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	4c16      	ldr	r4, [pc, #88]	; (8003598 <_cbSendTaskList+0x88>)
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4423      	add	r3, r4
 800354c:	3308      	adds	r3, #8
 800354e:	681c      	ldr	r4, [r3, #0]
 8003550:	4d11      	ldr	r5, [pc, #68]	; (8003598 <_cbSendTaskList+0x88>)
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	442b      	add	r3, r5
 800355e:	330c      	adds	r3, #12
 8003560:	681d      	ldr	r5, [r3, #0]
 8003562:	4e0d      	ldr	r6, [pc, #52]	; (8003598 <_cbSendTaskList+0x88>)
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4433      	add	r3, r6
 8003570:	3310      	adds	r3, #16
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	462b      	mov	r3, r5
 8003578:	4622      	mov	r2, r4
 800357a:	f000 f8bd 	bl	80036f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3301      	adds	r3, #1
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <_cbSendTaskList+0x8c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d3c6      	bcc.n	800351c <_cbSendTaskList+0xc>
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003598:	20012ddc 	.word	0x20012ddc
 800359c:	20012e7c 	.word	0x20012e7c

080035a0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80035a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80035a8:	f7fe f878 	bl	800169c <xTaskGetTickCountFromISR>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2200      	movs	r2, #0
 80035b0:	469a      	mov	sl, r3
 80035b2:	4693      	mov	fp, r2
 80035b4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80035b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	f04f 0a00 	mov.w	sl, #0
 80035c4:	f04f 0b00 	mov.w	fp, #0
 80035c8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80035cc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80035d0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80035d4:	4652      	mov	r2, sl
 80035d6:	465b      	mov	r3, fp
 80035d8:	1a14      	subs	r4, r2, r0
 80035da:	eb63 0501 	sbc.w	r5, r3, r1
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	00ab      	lsls	r3, r5, #2
 80035e8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80035ec:	00a2      	lsls	r2, r4, #2
 80035ee:	4614      	mov	r4, r2
 80035f0:	461d      	mov	r5, r3
 80035f2:	eb14 0800 	adds.w	r8, r4, r0
 80035f6:	eb45 0901 	adc.w	r9, r5, r1
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800360a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360e:	4690      	mov	r8, r2
 8003610:	4699      	mov	r9, r3
 8003612:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003616:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003628 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003636:	2205      	movs	r2, #5
 8003638:	492b      	ldr	r1, [pc, #172]	; (80036e8 <SYSVIEW_AddTask+0xc0>)
 800363a:	68b8      	ldr	r0, [r7, #8]
 800363c:	f005 f850 	bl	80086e0 <memcmp>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d04b      	beq.n	80036de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <SYSVIEW_AddTask+0xc4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b07      	cmp	r3, #7
 800364c:	d903      	bls.n	8003656 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800364e:	4828      	ldr	r0, [pc, #160]	; (80036f0 <SYSVIEW_AddTask+0xc8>)
 8003650:	f001 fc98 	bl	8004f84 <SEGGER_SYSVIEW_Warn>
    return;
 8003654:	e044      	b.n	80036e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003656:	4b25      	ldr	r3, [pc, #148]	; (80036ec <SYSVIEW_AddTask+0xc4>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4926      	ldr	r1, [pc, #152]	; (80036f4 <SYSVIEW_AddTask+0xcc>)
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800366a:	4b20      	ldr	r3, [pc, #128]	; (80036ec <SYSVIEW_AddTask+0xc4>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4921      	ldr	r1, [pc, #132]	; (80036f4 <SYSVIEW_AddTask+0xcc>)
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3304      	adds	r3, #4
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <SYSVIEW_AddTask+0xc4>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	491b      	ldr	r1, [pc, #108]	; (80036f4 <SYSVIEW_AddTask+0xcc>)
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	3308      	adds	r3, #8
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <SYSVIEW_AddTask+0xc4>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4916      	ldr	r1, [pc, #88]	; (80036f4 <SYSVIEW_AddTask+0xcc>)
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	330c      	adds	r3, #12
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <SYSVIEW_AddTask+0xc4>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4910      	ldr	r1, [pc, #64]	; (80036f4 <SYSVIEW_AddTask+0xcc>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3310      	adds	r3, #16
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <SYSVIEW_AddTask+0xc4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3301      	adds	r3, #1
 80036c8:	4a08      	ldr	r2, [pc, #32]	; (80036ec <SYSVIEW_AddTask+0xc4>)
 80036ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f80e 	bl	80036f8 <SYSVIEW_SendTaskInfo>
 80036dc:	e000      	b.n	80036e0 <SYSVIEW_AddTask+0xb8>
    return;
 80036de:	bf00      	nop

}
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	080087b4 	.word	0x080087b4
 80036ec:	20012e7c 	.word	0x20012e7c
 80036f0:	080087bc 	.word	0x080087bc
 80036f4:	20012ddc 	.word	0x20012ddc

080036f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003706:	f107 0314 	add.w	r3, r7, #20
 800370a:	2214      	movs	r2, #20
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f005 f804 	bl	800871c <memset>
  TaskInfo.TaskID     = TaskID;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4618      	mov	r0, r3
 800372e:	f001 f833 	bl	8004798 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003732:	bf00      	nop
 8003734:	3728      	adds	r7, #40	; 0x28
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003742:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <_DoInit+0x98>)
 8003744:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2203      	movs	r2, #3
 800374a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2203      	movs	r2, #3
 8003750:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <_DoInit+0x9c>)
 8003756:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a20      	ldr	r2, [pc, #128]	; (80037dc <_DoInit+0xa0>)
 800375c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003764:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a17      	ldr	r2, [pc, #92]	; (80037d8 <_DoInit+0x9c>)
 800377c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <_DoInit+0xa4>)
 8003782:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2210      	movs	r2, #16
 8003788:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3307      	adds	r3, #7
 80037a0:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <_DoInit+0xa8>)
 80037a2:	6810      	ldr	r0, [r2, #0]
 80037a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <_DoInit+0xac>)
 80037ae:	6810      	ldr	r0, [r2, #0]
 80037b0:	6018      	str	r0, [r3, #0]
 80037b2:	8891      	ldrh	r1, [r2, #4]
 80037b4:	7992      	ldrb	r2, [r2, #6]
 80037b6:	8099      	strh	r1, [r3, #4]
 80037b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037c4:	f3bf 8f5f 	dmb	sy
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	20012e80 	.word	0x20012e80
 80037d8:	0800880c 	.word	0x0800880c
 80037dc:	20012f28 	.word	0x20012f28
 80037e0:	20013328 	.word	0x20013328
 80037e4:	08008818 	.word	0x08008818
 80037e8:	0800881c 	.word	0x0800881c

080037ec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80037f8:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <SEGGER_RTT_ReadNoLock+0x108>)
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <SEGGER_RTT_ReadNoLock+0x1e>
 8003806:	f7ff ff99 	bl	800373c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	3360      	adds	r3, #96	; 0x60
 8003816:	4a37      	ldr	r2, [pc, #220]	; (80038f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003818:	4413      	add	r3, r2
 800381a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800382c:	2300      	movs	r3, #0
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	429a      	cmp	r2, r3
 8003836:	d92b      	bls.n	8003890 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4293      	cmp	r3, r2
 8003848:	bf28      	it	cs
 800384a:	4613      	movcs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	4413      	add	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	6939      	ldr	r1, [r7, #16]
 800385c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800385e:	f004 ff4f 	bl	8008700 <memcpy>
    NumBytesRead += NumBytesRem;
 8003862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4413      	add	r3, r2
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800386a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	4413      	add	r3, r2
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800387a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4413      	add	r3, r2
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003888:	429a      	cmp	r2, r3
 800388a:	d101      	bne.n	8003890 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800388c:	2300      	movs	r3, #0
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4293      	cmp	r3, r2
 800389e:	bf28      	it	cs
 80038a0:	4613      	movcs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d019      	beq.n	80038de <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	4413      	add	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	6939      	ldr	r1, [r7, #16]
 80038b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ba:	f004 ff21 	bl	8008700 <memcpy>
    NumBytesRead += NumBytesRem;
 80038be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	4413      	add	r3, r2
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80038c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	4413      	add	r3, r2
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80038d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	4413      	add	r3, r2
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80038ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3730      	adds	r7, #48	; 0x30
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20012e80 	.word	0x20012e80

080038f8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003906:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003914:	f7ff ff12 	bl	800373c <_DoInit>
  SEGGER_RTT_LOCK();
 8003918:	f3ef 8311 	mrs	r3, BASEPRI
 800391c:	f04f 0120 	mov.w	r1, #32
 8003920:	f381 8811 	msr	BASEPRI, r1
 8003924:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003926:	4b35      	ldr	r3, [pc, #212]	; (80039fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003928:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800392e:	6939      	ldr	r1, [r7, #16]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	3304      	adds	r3, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3301      	adds	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	429a      	cmp	r2, r3
 8003954:	dbeb      	blt.n	800392e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003956:	e000      	b.n	800395a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003958:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	429a      	cmp	r2, r3
 8003962:	da3f      	bge.n	80039e4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003964:	6939      	ldr	r1, [r7, #16]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	440b      	add	r3, r1
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003978:	6939      	ldr	r1, [r7, #16]
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	3304      	adds	r3, #4
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800398e:	6939      	ldr	r1, [r7, #16]
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	440b      	add	r3, r1
 800399c:	3320      	adds	r3, #32
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80039a2:	6939      	ldr	r1, [r7, #16]
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	3328      	adds	r3, #40	; 0x28
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80039b6:	6939      	ldr	r1, [r7, #16]
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	440b      	add	r3, r1
 80039c4:	3324      	adds	r3, #36	; 0x24
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80039ca:	6939      	ldr	r1, [r7, #16]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	4613      	mov	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	440b      	add	r3, r1
 80039d8:	332c      	adds	r3, #44	; 0x2c
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039de:	f3bf 8f5f 	dmb	sy
 80039e2:	e002      	b.n	80039ea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039e8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80039f0:	69fb      	ldr	r3, [r7, #28]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20012e80 	.word	0x20012e80

08003a00 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003a0e:	4b33      	ldr	r3, [pc, #204]	; (8003adc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003a1c:	f7ff fe8e 	bl	800373c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a20:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003a22:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d24d      	bcs.n	8003acc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003a30:	f3ef 8311 	mrs	r3, BASEPRI
 8003a34:	f04f 0120 	mov.w	r1, #32
 8003a38:	f381 8811 	msr	BASEPRI, r1
 8003a3c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d031      	beq.n	8003aa8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003a44:	6979      	ldr	r1, [r7, #20]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	3360      	adds	r3, #96	; 0x60
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003a58:	6979      	ldr	r1, [r7, #20]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	440b      	add	r3, r1
 8003a66:	3364      	adds	r3, #100	; 0x64
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003a6c:	6979      	ldr	r1, [r7, #20]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4613      	mov	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	440b      	add	r3, r1
 8003a7a:	3368      	adds	r3, #104	; 0x68
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003a80:	6979      	ldr	r1, [r7, #20]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3370      	adds	r3, #112	; 0x70
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003a94:	6979      	ldr	r1, [r7, #20]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	336c      	adds	r3, #108	; 0x6c
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003aa8:	6979      	ldr	r1, [r7, #20]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3374      	adds	r3, #116	; 0x74
 8003ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aba:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003abc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e002      	b.n	8003ad2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ad0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3720      	adds	r7, #32
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20012e80 	.word	0x20012e80

08003ae0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003af0:	e002      	b.n	8003af8 <_EncodeStr+0x18>
    Len++;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3301      	adds	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4413      	add	r3, r2
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f6      	bne.n	8003af2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d901      	bls.n	8003b10 <_EncodeStr+0x30>
    Len = Limit;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2bfe      	cmp	r3, #254	; 0xfe
 8003b14:	d806      	bhi.n	8003b24 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	60fa      	str	r2, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e011      	b.n	8003b48 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	60fa      	str	r2, [r7, #12]
 8003b2a:	22ff      	movs	r2, #255	; 0xff
 8003b2c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	60fa      	str	r2, [r7, #12]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	0a19      	lsrs	r1, r3, #8
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	60fa      	str	r2, [r7, #12]
 8003b44:	b2ca      	uxtb	r2, r1
 8003b46:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003b4c:	e00a      	b.n	8003b64 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	1c53      	adds	r3, r2, #1
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1c59      	adds	r1, r3, #1
 8003b58:	60f9      	str	r1, [r7, #12]
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	701a      	strb	r2, [r3, #0]
    n++;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	3301      	adds	r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d3f0      	bcc.n	8003b4e <_EncodeStr+0x6e>
  }
  return pPayload;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3304      	adds	r3, #4
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003b9a:	4b36      	ldr	r3, [pc, #216]	; (8003c74 <_HandleIncomingPacket+0xe0>)
 8003b9c:	7e1b      	ldrb	r3, [r3, #24]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	1cfb      	adds	r3, r7, #3
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f7ff fe21 	bl	80037ec <SEGGER_RTT_ReadNoLock>
 8003baa:	4603      	mov	r3, r0
 8003bac:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	dd54      	ble.n	8003c5e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	2b80      	cmp	r3, #128	; 0x80
 8003bb8:	d032      	beq.n	8003c20 <_HandleIncomingPacket+0x8c>
 8003bba:	2b80      	cmp	r3, #128	; 0x80
 8003bbc:	dc42      	bgt.n	8003c44 <_HandleIncomingPacket+0xb0>
 8003bbe:	2b07      	cmp	r3, #7
 8003bc0:	dc16      	bgt.n	8003bf0 <_HandleIncomingPacket+0x5c>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	dd3e      	ble.n	8003c44 <_HandleIncomingPacket+0xb0>
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	2b06      	cmp	r3, #6
 8003bca:	d83b      	bhi.n	8003c44 <_HandleIncomingPacket+0xb0>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <_HandleIncomingPacket+0x40>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003bf7 	.word	0x08003bf7
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003c03 	.word	0x08003c03
 8003be0:	08003c09 	.word	0x08003c09
 8003be4:	08003c0f 	.word	0x08003c0f
 8003be8:	08003c15 	.word	0x08003c15
 8003bec:	08003c1b 	.word	0x08003c1b
 8003bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8003bf2:	d036      	beq.n	8003c62 <_HandleIncomingPacket+0xce>
 8003bf4:	e026      	b.n	8003c44 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003bf6:	f000 fc55 	bl	80044a4 <SEGGER_SYSVIEW_Start>
      break;
 8003bfa:	e037      	b.n	8003c6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003bfc:	f000 fd0c 	bl	8004618 <SEGGER_SYSVIEW_Stop>
      break;
 8003c00:	e034      	b.n	8003c6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003c02:	f000 fee5 	bl	80049d0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003c06:	e031      	b.n	8003c6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003c08:	f000 feaa 	bl	8004960 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003c0c:	e02e      	b.n	8003c6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003c0e:	f000 fd29 	bl	8004664 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003c12:	e02b      	b.n	8003c6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003c14:	f001 f978 	bl	8004f08 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003c18:	e028      	b.n	8003c6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003c1a:	f001 f957 	bl	8004ecc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003c1e:	e025      	b.n	8003c6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c20:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <_HandleIncomingPacket+0xe0>)
 8003c22:	7e1b      	ldrb	r3, [r3, #24]
 8003c24:	4618      	mov	r0, r3
 8003c26:	1cfb      	adds	r3, r7, #3
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f7ff fdde 	bl	80037ec <SEGGER_RTT_ReadNoLock>
 8003c30:	4603      	mov	r3, r0
 8003c32:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	dd15      	ble.n	8003c66 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f8c5 	bl	8004dcc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003c42:	e010      	b.n	8003c66 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	b25b      	sxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	da0e      	bge.n	8003c6a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <_HandleIncomingPacket+0xe0>)
 8003c4e:	7e1b      	ldrb	r3, [r3, #24]
 8003c50:	4618      	mov	r0, r3
 8003c52:	1cfb      	adds	r3, r7, #3
 8003c54:	2201      	movs	r2, #1
 8003c56:	4619      	mov	r1, r3
 8003c58:	f7ff fdc8 	bl	80037ec <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003c5c:	e005      	b.n	8003c6a <_HandleIncomingPacket+0xd6>
    }
  }
 8003c5e:	bf00      	nop
 8003c60:	e004      	b.n	8003c6c <_HandleIncomingPacket+0xd8>
      break;
 8003c62:	bf00      	nop
 8003c64:	e002      	b.n	8003c6c <_HandleIncomingPacket+0xd8>
      break;
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <_HandleIncomingPacket+0xd8>
      break;
 8003c6a:	bf00      	nop
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20014340 	.word	0x20014340

08003c78 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	; 0x30
 8003c7c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003c7e:	2301      	movs	r3, #1
 8003c80:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	3301      	adds	r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8c:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <_TrySendOverflowPacket+0xdc>)
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c92:	e00b      	b.n	8003cac <_TrySendOverflowPacket+0x34>
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	1c59      	adds	r1, r3, #1
 8003c9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	09db      	lsrs	r3, r3, #7
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	2b7f      	cmp	r3, #127	; 0x7f
 8003cb0:	d8f0      	bhi.n	8003c94 <_TrySendOverflowPacket+0x1c>
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003cc2:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <_TrySendOverflowPacket+0xe0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003cc8:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <_TrySendOverflowPacket+0xdc>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	623b      	str	r3, [r7, #32]
 8003cda:	e00b      	b.n	8003cf4 <_TrySendOverflowPacket+0x7c>
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	1c59      	adds	r1, r3, #1
 8003ce4:	6279      	str	r1, [r7, #36]	; 0x24
 8003ce6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	09db      	lsrs	r3, r3, #7
 8003cf2:	623b      	str	r3, [r7, #32]
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8003cf8:	d8f0      	bhi.n	8003cdc <_TrySendOverflowPacket+0x64>
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	627a      	str	r2, [r7, #36]	; 0x24
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <_TrySendOverflowPacket+0xdc>)
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f7fc fa58 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003d20:	4603      	mov	r3, r0
 8003d22:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <_TrySendOverflowPacket+0xdc>)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <_TrySendOverflowPacket+0xdc>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <_TrySendOverflowPacket+0xdc>)
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e004      	b.n	8003d48 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <_TrySendOverflowPacket+0xdc>)
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	3301      	adds	r3, #1
 8003d44:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <_TrySendOverflowPacket+0xdc>)
 8003d46:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003d48:	693b      	ldr	r3, [r7, #16]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3730      	adds	r7, #48	; 0x30
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20014340 	.word	0x20014340
 8003d58:	e0001004 	.word	0xe0001004

08003d5c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003d68:	4b6c      	ldr	r3, [pc, #432]	; (8003f1c <_SendPacket+0x1c0>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d010      	beq.n	8003d92 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003d70:	4b6a      	ldr	r3, [pc, #424]	; (8003f1c <_SendPacket+0x1c0>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80a3 	beq.w	8003ec0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003d7a:	4b68      	ldr	r3, [pc, #416]	; (8003f1c <_SendPacket+0x1c0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d109      	bne.n	8003d96 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003d82:	f7ff ff79 	bl	8003c78 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003d86:	4b65      	ldr	r3, [pc, #404]	; (8003f1c <_SendPacket+0x1c0>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	f040 809a 	bne.w	8003ec4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003d90:	e001      	b.n	8003d96 <_SendPacket+0x3a>
    goto Send;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <_SendPacket+0x3c>
Send:
 8003d96:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b1f      	cmp	r3, #31
 8003d9c:	d809      	bhi.n	8003db2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003d9e:	4b5f      	ldr	r3, [pc, #380]	; (8003f1c <_SendPacket+0x1c0>)
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f040 808b 	bne.w	8003ec8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b17      	cmp	r3, #23
 8003db6:	d807      	bhi.n	8003dc8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e03d      	b.n	8003e44 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8003dd4:	d912      	bls.n	8003dfc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	09da      	lsrs	r2, r3, #7
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	3a01      	subs	r2, #1
 8003dee:	60fa      	str	r2, [r7, #12]
 8003df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e006      	b.n	8003e0a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e0e:	d912      	bls.n	8003e36 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	09da      	lsrs	r2, r3, #7
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	3a01      	subs	r2, #1
 8003e28:	60fa      	str	r2, [r7, #12]
 8003e2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e006      	b.n	8003e44 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003e44:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <_SendPacket+0x1c4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003e4a:	4b34      	ldr	r3, [pc, #208]	; (8003f1c <_SendPacket+0x1c0>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	e00b      	b.n	8003e76 <_SendPacket+0x11a>
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	1c59      	adds	r1, r3, #1
 8003e66:	6279      	str	r1, [r7, #36]	; 0x24
 8003e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	09db      	lsrs	r3, r3, #7
 8003e74:	623b      	str	r3, [r7, #32]
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7a:	d8f0      	bhi.n	8003e5e <_SendPacket+0x102>
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	627a      	str	r2, [r7, #36]	; 0x24
 8003e82:	6a3a      	ldr	r2, [r7, #32]
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003e8c:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <_SendPacket+0x1c0>)
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	4618      	mov	r0, r3
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	f7fc f998 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003eaa:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <_SendPacket+0x1c0>)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	60d3      	str	r3, [r2, #12]
 8003eb0:	e00b      	b.n	8003eca <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <_SendPacket+0x1c0>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <_SendPacket+0x1c0>)
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	e004      	b.n	8003eca <_SendPacket+0x16e>
    goto SendDone;
 8003ec0:	bf00      	nop
 8003ec2:	e002      	b.n	8003eca <_SendPacket+0x16e>
      goto SendDone;
 8003ec4:	bf00      	nop
 8003ec6:	e000      	b.n	8003eca <_SendPacket+0x16e>
      goto SendDone;
 8003ec8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003eca:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <_SendPacket+0x1c0>)
 8003ecc:	7e1b      	ldrb	r3, [r3, #24]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <_SendPacket+0x1c8>)
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	440b      	add	r3, r1
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	336c      	adds	r3, #108	; 0x6c
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <_SendPacket+0x1c0>)
 8003ee2:	7e1b      	ldrb	r3, [r3, #24]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	490f      	ldr	r1, [pc, #60]	; (8003f24 <_SendPacket+0x1c8>)
 8003ee8:	4603      	mov	r3, r0
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4403      	add	r3, r0
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3370      	adds	r3, #112	; 0x70
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d00b      	beq.n	8003f12 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <_SendPacket+0x1c0>)
 8003efc:	789b      	ldrb	r3, [r3, #2]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <_SendPacket+0x1c0>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003f08:	f7ff fe44 	bl	8003b94 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <_SendPacket+0x1c0>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003f12:	bf00      	nop
 8003f14:	3728      	adds	r7, #40	; 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20014340 	.word	0x20014340
 8003f20:	e0001004 	.word	0xe0001004
 8003f24:	20012e80 	.word	0x20012e80

08003f28 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003f36:	2300      	movs	r3, #0
 8003f38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f3c:	4917      	ldr	r1, [pc, #92]	; (8003f9c <SEGGER_SYSVIEW_Init+0x74>)
 8003f3e:	4818      	ldr	r0, [pc, #96]	; (8003fa0 <SEGGER_SYSVIEW_Init+0x78>)
 8003f40:	f7ff fcda 	bl	80038f8 <SEGGER_RTT_AllocUpBuffer>
 8003f44:	4603      	mov	r3, r0
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f4a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003f4c:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f4e:	785a      	ldrb	r2, [r3, #1]
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f52:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f56:	7e1b      	ldrb	r3, [r3, #24]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	2308      	movs	r3, #8
 8003f60:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <SEGGER_SYSVIEW_Init+0x80>)
 8003f62:	490f      	ldr	r1, [pc, #60]	; (8003fa0 <SEGGER_SYSVIEW_Init+0x78>)
 8003f64:	f7ff fd4c 	bl	8003a00 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003f68:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <SEGGER_SYSVIEW_Init+0x84>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f74:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003f76:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003f7c:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003f88:	4a06      	ldr	r2, [pc, #24]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20013338 	.word	0x20013338
 8003fa0:	08008824 	.word	0x08008824
 8003fa4:	20014340 	.word	0x20014340
 8003fa8:	20014338 	.word	0x20014338
 8003fac:	e0001004 	.word	0xe0001004

08003fb0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6113      	str	r3, [r2, #16]
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20014340 	.word	0x20014340

08003fd0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8003fdc:	f04f 0120 	mov.w	r1, #32
 8003fe0:	f381 8811 	msr	BASEPRI, r1
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4808      	ldr	r0, [pc, #32]	; (8004008 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003fe8:	f7ff fdc7 	bl	8003b7a <_PreparePacket>
 8003fec:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	68b8      	ldr	r0, [r7, #8]
 8003ff4:	f7ff feb2 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f383 8811 	msr	BASEPRI, r3
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20014370 	.word	0x20014370

0800400c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004016:	f3ef 8311 	mrs	r3, BASEPRI
 800401a:	f04f 0120 	mov.w	r1, #32
 800401e:	f381 8811 	msr	BASEPRI, r1
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	4816      	ldr	r0, [pc, #88]	; (8004080 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004026:	f7ff fda8 	bl	8003b7a <_PreparePacket>
 800402a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	e00b      	b.n	8004052 <SEGGER_SYSVIEW_RecordU32+0x46>
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	1c59      	adds	r1, r3, #1
 8004042:	61f9      	str	r1, [r7, #28]
 8004044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	09db      	lsrs	r3, r3, #7
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b7f      	cmp	r3, #127	; 0x7f
 8004056:	d8f0      	bhi.n	800403a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	61fa      	str	r2, [r7, #28]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	6938      	ldr	r0, [r7, #16]
 800406e:	f7ff fe75 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f383 8811 	msr	BASEPRI, r3
}
 8004078:	bf00      	nop
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20014370 	.word	0x20014370

08004084 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	; 0x30
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004090:	f3ef 8311 	mrs	r3, BASEPRI
 8004094:	f04f 0120 	mov.w	r1, #32
 8004098:	f381 8811 	msr	BASEPRI, r1
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	4825      	ldr	r0, [pc, #148]	; (8004134 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80040a0:	f7ff fd6b 	bl	8003b7a <_PreparePacket>
 80040a4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b2:	e00b      	b.n	80040cc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	09db      	lsrs	r3, r3, #7
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	2b7f      	cmp	r3, #127	; 0x7f
 80040d0:	d8f0      	bhi.n	80040b4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	e00b      	b.n	8004104 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	1c59      	adds	r1, r3, #1
 80040f4:	6279      	str	r1, [r7, #36]	; 0x24
 80040f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	09db      	lsrs	r3, r3, #7
 8004102:	623b      	str	r3, [r7, #32]
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	2b7f      	cmp	r3, #127	; 0x7f
 8004108:	d8f0      	bhi.n	80040ec <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	627a      	str	r2, [r7, #36]	; 0x24
 8004110:	6a3a      	ldr	r2, [r7, #32]
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	6979      	ldr	r1, [r7, #20]
 800411e:	69b8      	ldr	r0, [r7, #24]
 8004120:	f7ff fe1c 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f383 8811 	msr	BASEPRI, r3
}
 800412a:	bf00      	nop
 800412c:	3730      	adds	r7, #48	; 0x30
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20014370 	.word	0x20014370

08004138 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b08e      	sub	sp, #56	; 0x38
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004146:	f3ef 8311 	mrs	r3, BASEPRI
 800414a:	f04f 0120 	mov.w	r1, #32
 800414e:	f381 8811 	msr	BASEPRI, r1
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	4832      	ldr	r0, [pc, #200]	; (8004220 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004156:	f7ff fd10 	bl	8003b7a <_PreparePacket>
 800415a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
 8004168:	e00b      	b.n	8004182 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	b2da      	uxtb	r2, r3
 800416e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004170:	1c59      	adds	r1, r3, #1
 8004172:	6379      	str	r1, [r7, #52]	; 0x34
 8004174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	09db      	lsrs	r3, r3, #7
 8004180:	633b      	str	r3, [r7, #48]	; 0x30
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	2b7f      	cmp	r3, #127	; 0x7f
 8004186:	d8f0      	bhi.n	800416a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	637a      	str	r2, [r7, #52]	; 0x34
 800418e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004196:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a0:	e00b      	b.n	80041ba <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	1c59      	adds	r1, r3, #1
 80041aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80041ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	09db      	lsrs	r3, r3, #7
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	2b7f      	cmp	r3, #127	; 0x7f
 80041be:	d8f0      	bhi.n	80041a2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80041c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	e00b      	b.n	80041f2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1c59      	adds	r1, r3, #1
 80041e2:	6279      	str	r1, [r7, #36]	; 0x24
 80041e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	09db      	lsrs	r3, r3, #7
 80041f0:	623b      	str	r3, [r7, #32]
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	2b7f      	cmp	r3, #127	; 0x7f
 80041f6:	d8f0      	bhi.n	80041da <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	627a      	str	r2, [r7, #36]	; 0x24
 80041fe:	6a3a      	ldr	r2, [r7, #32]
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	6979      	ldr	r1, [r7, #20]
 800420c:	69b8      	ldr	r0, [r7, #24]
 800420e:	f7ff fda5 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f383 8811 	msr	BASEPRI, r3
}
 8004218:	bf00      	nop
 800421a:	3738      	adds	r7, #56	; 0x38
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20014370 	.word	0x20014370

08004224 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b090      	sub	sp, #64	; 0x40
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004232:	f3ef 8311 	mrs	r3, BASEPRI
 8004236:	f04f 0120 	mov.w	r1, #32
 800423a:	f381 8811 	msr	BASEPRI, r1
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	4840      	ldr	r0, [pc, #256]	; (8004344 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004242:	f7ff fc9a 	bl	8003b7a <_PreparePacket>
 8004246:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	63bb      	str	r3, [r7, #56]	; 0x38
 8004254:	e00b      	b.n	800426e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	b2da      	uxtb	r2, r3
 800425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425c:	1c59      	adds	r1, r3, #1
 800425e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	09db      	lsrs	r3, r3, #7
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	2b7f      	cmp	r3, #127	; 0x7f
 8004272:	d8f0      	bhi.n	8004256 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	63fa      	str	r2, [r7, #60]	; 0x3c
 800427a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004282:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
 800428c:	e00b      	b.n	80042a6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	b2da      	uxtb	r2, r3
 8004292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004294:	1c59      	adds	r1, r3, #1
 8004296:	6379      	str	r1, [r7, #52]	; 0x34
 8004298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	09db      	lsrs	r3, r3, #7
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2b7f      	cmp	r3, #127	; 0x7f
 80042aa:	d8f0      	bhi.n	800428e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80042ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	637a      	str	r2, [r7, #52]	; 0x34
 80042b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c4:	e00b      	b.n	80042de <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	1c59      	adds	r1, r3, #1
 80042ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	09db      	lsrs	r3, r3, #7
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	2b7f      	cmp	r3, #127	; 0x7f
 80042e2:	d8f0      	bhi.n	80042c6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fa:	623b      	str	r3, [r7, #32]
 80042fc:	e00b      	b.n	8004316 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	1c59      	adds	r1, r3, #1
 8004306:	6279      	str	r1, [r7, #36]	; 0x24
 8004308:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	09db      	lsrs	r3, r3, #7
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	2b7f      	cmp	r3, #127	; 0x7f
 800431a:	d8f0      	bhi.n	80042fe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	627a      	str	r2, [r7, #36]	; 0x24
 8004322:	6a3a      	ldr	r2, [r7, #32]
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	6979      	ldr	r1, [r7, #20]
 8004330:	69b8      	ldr	r0, [r7, #24]
 8004332:	f7ff fd13 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f383 8811 	msr	BASEPRI, r3
}
 800433c:	bf00      	nop
 800433e:	3740      	adds	r7, #64	; 0x40
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20014370 	.word	0x20014370

08004348 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b092      	sub	sp, #72	; 0x48
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8004356:	f3ef 8311 	mrs	r3, BASEPRI
 800435a:	f04f 0120 	mov.w	r1, #32
 800435e:	f381 8811 	msr	BASEPRI, r1
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	484e      	ldr	r0, [pc, #312]	; (80044a0 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8004366:	f7ff fc08 	bl	8003b7a <_PreparePacket>
 800436a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	647b      	str	r3, [r7, #68]	; 0x44
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	643b      	str	r3, [r7, #64]	; 0x40
 8004378:	e00b      	b.n	8004392 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800437a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437c:	b2da      	uxtb	r2, r3
 800437e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004380:	1c59      	adds	r1, r3, #1
 8004382:	6479      	str	r1, [r7, #68]	; 0x44
 8004384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438e:	09db      	lsrs	r3, r3, #7
 8004390:	643b      	str	r3, [r7, #64]	; 0x40
 8004392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004394:	2b7f      	cmp	r3, #127	; 0x7f
 8004396:	d8f0      	bhi.n	800437a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8004398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	647a      	str	r2, [r7, #68]	; 0x44
 800439e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b0:	e00b      	b.n	80043ca <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b8:	1c59      	adds	r1, r3, #1
 80043ba:	63f9      	str	r1, [r7, #60]	; 0x3c
 80043bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	09db      	lsrs	r3, r3, #7
 80043c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2b7f      	cmp	r3, #127	; 0x7f
 80043ce:	d8f0      	bhi.n	80043b2 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80043d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
 80043e8:	e00b      	b.n	8004402 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	1c59      	adds	r1, r3, #1
 80043f2:	6379      	str	r1, [r7, #52]	; 0x34
 80043f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	09db      	lsrs	r3, r3, #7
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	2b7f      	cmp	r3, #127	; 0x7f
 8004406:	d8f0      	bhi.n	80043ea <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8004408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	637a      	str	r2, [r7, #52]	; 0x34
 800440e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004416:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004420:	e00b      	b.n	800443a <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	b2da      	uxtb	r2, r3
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	1c59      	adds	r1, r3, #1
 800442a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800442c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	09db      	lsrs	r3, r3, #7
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	2b7f      	cmp	r3, #127	; 0x7f
 800443e:	d8f0      	bhi.n	8004422 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
 8004454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004456:	623b      	str	r3, [r7, #32]
 8004458:	e00b      	b.n	8004472 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	1c59      	adds	r1, r3, #1
 8004462:	6279      	str	r1, [r7, #36]	; 0x24
 8004464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	09db      	lsrs	r3, r3, #7
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	2b7f      	cmp	r3, #127	; 0x7f
 8004476:	d8f0      	bhi.n	800445a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	627a      	str	r2, [r7, #36]	; 0x24
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	6979      	ldr	r1, [r7, #20]
 800448c:	69b8      	ldr	r0, [r7, #24]
 800448e:	f7ff fc65 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f383 8811 	msr	BASEPRI, r3
}
 8004498:	bf00      	nop
 800449a:	3748      	adds	r7, #72	; 0x48
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20014370 	.word	0x20014370

080044a4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08c      	sub	sp, #48	; 0x30
 80044a8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80044aa:	4b58      	ldr	r3, [pc, #352]	; (800460c <SEGGER_SYSVIEW_Start+0x168>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80044b0:	f3ef 8311 	mrs	r3, BASEPRI
 80044b4:	f04f 0120 	mov.w	r1, #32
 80044b8:	f381 8811 	msr	BASEPRI, r1
 80044bc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80044be:	4b53      	ldr	r3, [pc, #332]	; (800460c <SEGGER_SYSVIEW_Start+0x168>)
 80044c0:	785b      	ldrb	r3, [r3, #1]
 80044c2:	220a      	movs	r2, #10
 80044c4:	4952      	ldr	r1, [pc, #328]	; (8004610 <SEGGER_SYSVIEW_Start+0x16c>)
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fb fe82 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80044d2:	200a      	movs	r0, #10
 80044d4:	f7ff fd7c 	bl	8003fd0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80044d8:	f3ef 8311 	mrs	r3, BASEPRI
 80044dc:	f04f 0120 	mov.w	r1, #32
 80044e0:	f381 8811 	msr	BASEPRI, r1
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	484b      	ldr	r0, [pc, #300]	; (8004614 <SEGGER_SYSVIEW_Start+0x170>)
 80044e8:	f7ff fb47 	bl	8003b7a <_PreparePacket>
 80044ec:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f6:	4b45      	ldr	r3, [pc, #276]	; (800460c <SEGGER_SYSVIEW_Start+0x168>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fc:	e00b      	b.n	8004516 <SEGGER_SYSVIEW_Start+0x72>
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	b2da      	uxtb	r2, r3
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	09db      	lsrs	r3, r3, #7
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	2b7f      	cmp	r3, #127	; 0x7f
 800451a:	d8f0      	bhi.n	80044fe <SEGGER_SYSVIEW_Start+0x5a>
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
 8004530:	4b36      	ldr	r3, [pc, #216]	; (800460c <SEGGER_SYSVIEW_Start+0x168>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	623b      	str	r3, [r7, #32]
 8004536:	e00b      	b.n	8004550 <SEGGER_SYSVIEW_Start+0xac>
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	1c59      	adds	r1, r3, #1
 8004540:	6279      	str	r1, [r7, #36]	; 0x24
 8004542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	09db      	lsrs	r3, r3, #7
 800454e:	623b      	str	r3, [r7, #32]
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b7f      	cmp	r3, #127	; 0x7f
 8004554:	d8f0      	bhi.n	8004538 <SEGGER_SYSVIEW_Start+0x94>
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	627a      	str	r2, [r7, #36]	; 0x24
 800455c:	6a3a      	ldr	r2, [r7, #32]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	4b28      	ldr	r3, [pc, #160]	; (800460c <SEGGER_SYSVIEW_Start+0x168>)
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	e00b      	b.n	800458a <SEGGER_SYSVIEW_Start+0xe6>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	1c59      	adds	r1, r3, #1
 800457a:	61f9      	str	r1, [r7, #28]
 800457c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	09db      	lsrs	r3, r3, #7
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b7f      	cmp	r3, #127	; 0x7f
 800458e:	d8f0      	bhi.n	8004572 <SEGGER_SYSVIEW_Start+0xce>
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	61fa      	str	r2, [r7, #28]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	e00b      	b.n	80045c2 <SEGGER_SYSVIEW_Start+0x11e>
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	1c59      	adds	r1, r3, #1
 80045b2:	6179      	str	r1, [r7, #20]
 80045b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	09db      	lsrs	r3, r3, #7
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b7f      	cmp	r3, #127	; 0x7f
 80045c6:	d8f0      	bhi.n	80045aa <SEGGER_SYSVIEW_Start+0x106>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	617a      	str	r2, [r7, #20]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80045d8:	2218      	movs	r2, #24
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff fbbd 	bl	8003d5c <_SendPacket>
      RECORD_END();
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80045e8:	4b08      	ldr	r3, [pc, #32]	; (800460c <SEGGER_SYSVIEW_Start+0x168>)
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <SEGGER_SYSVIEW_Start+0x168>)
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80045f6:	f000 f9eb 	bl	80049d0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80045fa:	f000 f9b1 	bl	8004960 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80045fe:	f000 fc83 	bl	8004f08 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004602:	bf00      	nop
 8004604:	3730      	adds	r7, #48	; 0x30
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20014340 	.word	0x20014340
 8004610:	08008c64 	.word	0x08008c64
 8004614:	20014370 	.word	0x20014370

08004618 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800461e:	f3ef 8311 	mrs	r3, BASEPRI
 8004622:	f04f 0120 	mov.w	r1, #32
 8004626:	f381 8811 	msr	BASEPRI, r1
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	480b      	ldr	r0, [pc, #44]	; (800465c <SEGGER_SYSVIEW_Stop+0x44>)
 800462e:	f7ff faa4 	bl	8003b7a <_PreparePacket>
 8004632:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <SEGGER_SYSVIEW_Stop+0x48>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800463c:	220b      	movs	r2, #11
 800463e:	6839      	ldr	r1, [r7, #0]
 8004640:	6838      	ldr	r0, [r7, #0]
 8004642:	f7ff fb8b 	bl	8003d5c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <SEGGER_SYSVIEW_Stop+0x48>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f383 8811 	msr	BASEPRI, r3
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20014370 	.word	0x20014370
 8004660:	20014340 	.word	0x20014340

08004664 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b08c      	sub	sp, #48	; 0x30
 8004668:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800466a:	f3ef 8311 	mrs	r3, BASEPRI
 800466e:	f04f 0120 	mov.w	r1, #32
 8004672:	f381 8811 	msr	BASEPRI, r1
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	4845      	ldr	r0, [pc, #276]	; (8004790 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800467a:	f7ff fa7e 	bl	8003b7a <_PreparePacket>
 800467e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
 800468e:	e00b      	b.n	80046a8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	b2da      	uxtb	r2, r3
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	1c59      	adds	r1, r3, #1
 8004698:	62f9      	str	r1, [r7, #44]	; 0x2c
 800469a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	09db      	lsrs	r3, r3, #7
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	2b7f      	cmp	r3, #127	; 0x7f
 80046ac:	d8f0      	bhi.n	8004690 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
 80046c2:	4b34      	ldr	r3, [pc, #208]	; (8004794 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	623b      	str	r3, [r7, #32]
 80046c8:	e00b      	b.n	80046e2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	1c59      	adds	r1, r3, #1
 80046d2:	6279      	str	r1, [r7, #36]	; 0x24
 80046d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	09db      	lsrs	r3, r3, #7
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	2b7f      	cmp	r3, #127	; 0x7f
 80046e6:	d8f0      	bhi.n	80046ca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	627a      	str	r2, [r7, #36]	; 0x24
 80046ee:	6a3a      	ldr	r2, [r7, #32]
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	e00b      	b.n	800471c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	1c59      	adds	r1, r3, #1
 800470c:	61f9      	str	r1, [r7, #28]
 800470e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	09db      	lsrs	r3, r3, #7
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b7f      	cmp	r3, #127	; 0x7f
 8004720:	d8f0      	bhi.n	8004704 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	61fa      	str	r2, [r7, #28]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	e00b      	b.n	8004754 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	b2da      	uxtb	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	1c59      	adds	r1, r3, #1
 8004744:	6179      	str	r1, [r7, #20]
 8004746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	09db      	lsrs	r3, r3, #7
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b7f      	cmp	r3, #127	; 0x7f
 8004758:	d8f0      	bhi.n	800473c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	617a      	str	r2, [r7, #20]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800476a:	2218      	movs	r2, #24
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	68b8      	ldr	r0, [r7, #8]
 8004770:	f7ff faf4 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004782:	4b04      	ldr	r3, [pc, #16]	; (8004794 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	4798      	blx	r3
  }
}
 8004788:	bf00      	nop
 800478a:	3730      	adds	r7, #48	; 0x30
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20014370 	.word	0x20014370
 8004794:	20014340 	.word	0x20014340

08004798 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b092      	sub	sp, #72	; 0x48
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80047a0:	f3ef 8311 	mrs	r3, BASEPRI
 80047a4:	f04f 0120 	mov.w	r1, #32
 80047a8:	f381 8811 	msr	BASEPRI, r1
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	486a      	ldr	r0, [pc, #424]	; (8004958 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80047b0:	f7ff f9e3 	bl	8003b7a <_PreparePacket>
 80047b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	647b      	str	r3, [r7, #68]	; 0x44
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b66      	ldr	r3, [pc, #408]	; (800495c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ca:	e00b      	b.n	80047e4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80047cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d2:	1c59      	adds	r1, r3, #1
 80047d4:	6479      	str	r1, [r7, #68]	; 0x44
 80047d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	09db      	lsrs	r3, r3, #7
 80047e2:	643b      	str	r3, [r7, #64]	; 0x40
 80047e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e6:	2b7f      	cmp	r3, #127	; 0x7f
 80047e8:	d8f0      	bhi.n	80047cc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80047ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	647a      	str	r2, [r7, #68]	; 0x44
 80047f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	63bb      	str	r3, [r7, #56]	; 0x38
 8004804:	e00b      	b.n	800481e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004808:	b2da      	uxtb	r2, r3
 800480a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480c:	1c59      	adds	r1, r3, #1
 800480e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	09db      	lsrs	r3, r3, #7
 800481c:	63bb      	str	r3, [r7, #56]	; 0x38
 800481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004820:	2b7f      	cmp	r3, #127	; 0x7f
 8004822:	d8f0      	bhi.n	8004806 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	63fa      	str	r2, [r7, #60]	; 0x3c
 800482a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004832:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	4619      	mov	r1, r3
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7ff f94f 	bl	8003ae0 <_EncodeStr>
 8004842:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004844:	2209      	movs	r2, #9
 8004846:	68f9      	ldr	r1, [r7, #12]
 8004848:	6938      	ldr	r0, [r7, #16]
 800484a:	f7ff fa87 	bl	8003d5c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b40      	ldr	r3, [pc, #256]	; (800495c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	633b      	str	r3, [r7, #48]	; 0x30
 8004862:	e00b      	b.n	800487c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	b2da      	uxtb	r2, r3
 8004868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486a:	1c59      	adds	r1, r3, #1
 800486c:	6379      	str	r1, [r7, #52]	; 0x34
 800486e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	09db      	lsrs	r3, r3, #7
 800487a:	633b      	str	r3, [r7, #48]	; 0x30
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	2b7f      	cmp	r3, #127	; 0x7f
 8004880:	d8f0      	bhi.n	8004864 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	637a      	str	r2, [r7, #52]	; 0x34
 8004888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004890:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
 800489c:	e00b      	b.n	80048b6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	1c59      	adds	r1, r3, #1
 80048a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	09db      	lsrs	r3, r3, #7
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	2b7f      	cmp	r3, #127	; 0x7f
 80048ba:	d8f0      	bhi.n	800489e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	623b      	str	r3, [r7, #32]
 80048d6:	e00b      	b.n	80048f0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	1c59      	adds	r1, r3, #1
 80048e0:	6279      	str	r1, [r7, #36]	; 0x24
 80048e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	09db      	lsrs	r3, r3, #7
 80048ee:	623b      	str	r3, [r7, #32]
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	2b7f      	cmp	r3, #127	; 0x7f
 80048f4:	d8f0      	bhi.n	80048d8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	627a      	str	r2, [r7, #36]	; 0x24
 80048fc:	6a3a      	ldr	r2, [r7, #32]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	e00b      	b.n	8004928 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	1c59      	adds	r1, r3, #1
 8004918:	61f9      	str	r1, [r7, #28]
 800491a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	09db      	lsrs	r3, r3, #7
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b7f      	cmp	r3, #127	; 0x7f
 800492c:	d8f0      	bhi.n	8004910 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	61fa      	str	r2, [r7, #28]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800493e:	2215      	movs	r2, #21
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	6938      	ldr	r0, [r7, #16]
 8004944:	f7ff fa0a 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f383 8811 	msr	BASEPRI, r3
}
 800494e:	bf00      	nop
 8004950:	3748      	adds	r7, #72	; 0x48
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20014370 	.word	0x20014370
 800495c:	20014340 	.word	0x20014340

08004960 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004976:	4b03      	ldr	r3, [pc, #12]	; (8004984 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4798      	blx	r3
  }
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20014340 	.word	0x20014340

08004988 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004990:	f3ef 8311 	mrs	r3, BASEPRI
 8004994:	f04f 0120 	mov.w	r1, #32
 8004998:	f381 8811 	msr	BASEPRI, r1
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	480b      	ldr	r0, [pc, #44]	; (80049cc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80049a0:	f7ff f8eb 	bl	8003b7a <_PreparePacket>
 80049a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80049a6:	2280      	movs	r2, #128	; 0x80
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	6938      	ldr	r0, [r7, #16]
 80049ac:	f7ff f898 	bl	8003ae0 <_EncodeStr>
 80049b0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80049b2:	220e      	movs	r2, #14
 80049b4:	68f9      	ldr	r1, [r7, #12]
 80049b6:	6938      	ldr	r0, [r7, #16]
 80049b8:	f7ff f9d0 	bl	8003d5c <_SendPacket>
  RECORD_END();
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f383 8811 	msr	BASEPRI, r3
}
 80049c2:	bf00      	nop
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20014370 	.word	0x20014370

080049d0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01a      	beq.n	8004a14 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d015      	beq.n	8004a14 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4798      	blx	r3
 80049f0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80049f4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80049f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	000a      	movs	r2, r1
 8004a04:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a06:	4613      	mov	r3, r2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	200d      	movs	r0, #13
 8004a0e:	f7ff fb39 	bl	8004084 <SEGGER_SYSVIEW_RecordU32x2>
 8004a12:	e006      	b.n	8004a22 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	200c      	movs	r0, #12
 8004a1c:	f7ff faf6 	bl	800400c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd90      	pop	{r4, r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20014340 	.word	0x20014340
 8004a30:	e0001004 	.word	0xe0001004

08004a34 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a3e:	f04f 0120 	mov.w	r1, #32
 8004a42:	f381 8811 	msr	BASEPRI, r1
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	4819      	ldr	r0, [pc, #100]	; (8004ab0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004a4a:	f7ff f896 	bl	8003b7a <_PreparePacket>
 8004a4e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004a54:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e00b      	b.n	8004a80 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	6179      	str	r1, [r7, #20]
 8004a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	09db      	lsrs	r3, r3, #7
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b7f      	cmp	r3, #127	; 0x7f
 8004a84:	d8f0      	bhi.n	8004a68 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	617a      	str	r2, [r7, #20]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004a96:	2202      	movs	r2, #2
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	68b8      	ldr	r0, [r7, #8]
 8004a9c:	f7ff f95e 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f383 8811 	msr	BASEPRI, r3
}
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20014370 	.word	0x20014370
 8004ab4:	e000ed04 	.word	0xe000ed04

08004ab8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004abe:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac2:	f04f 0120 	mov.w	r1, #32
 8004ac6:	f381 8811 	msr	BASEPRI, r1
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	4807      	ldr	r0, [pc, #28]	; (8004aec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004ace:	f7ff f854 	bl	8003b7a <_PreparePacket>
 8004ad2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	6839      	ldr	r1, [r7, #0]
 8004ad8:	6838      	ldr	r0, [r7, #0]
 8004ada:	f7ff f93f 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f383 8811 	msr	BASEPRI, r3
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20014370 	.word	0x20014370

08004af0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004af6:	f3ef 8311 	mrs	r3, BASEPRI
 8004afa:	f04f 0120 	mov.w	r1, #32
 8004afe:	f381 8811 	msr	BASEPRI, r1
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	4807      	ldr	r0, [pc, #28]	; (8004b24 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004b06:	f7ff f838 	bl	8003b7a <_PreparePacket>
 8004b0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004b0c:	2212      	movs	r2, #18
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	6838      	ldr	r0, [r7, #0]
 8004b12:	f7ff f923 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f383 8811 	msr	BASEPRI, r3
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20014370 	.word	0x20014370

08004b28 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b32:	f04f 0120 	mov.w	r1, #32
 8004b36:	f381 8811 	msr	BASEPRI, r1
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	4807      	ldr	r0, [pc, #28]	; (8004b5c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004b3e:	f7ff f81c 	bl	8003b7a <_PreparePacket>
 8004b42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004b44:	2211      	movs	r2, #17
 8004b46:	6839      	ldr	r1, [r7, #0]
 8004b48:	6838      	ldr	r0, [r7, #0]
 8004b4a:	f7ff f907 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f383 8811 	msr	BASEPRI, r3
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20014370 	.word	0x20014370

08004b60 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b68:	f3ef 8311 	mrs	r3, BASEPRI
 8004b6c:	f04f 0120 	mov.w	r1, #32
 8004b70:	f381 8811 	msr	BASEPRI, r1
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	4819      	ldr	r0, [pc, #100]	; (8004bdc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004b78:	f7fe ffff 	bl	8003b7a <_PreparePacket>
 8004b7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b82:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	e00b      	b.n	8004bae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	1c59      	adds	r1, r3, #1
 8004b9e:	61f9      	str	r1, [r7, #28]
 8004ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	09db      	lsrs	r3, r3, #7
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb2:	d8f0      	bhi.n	8004b96 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	61fa      	str	r2, [r7, #28]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	6938      	ldr	r0, [r7, #16]
 8004bca:	f7ff f8c7 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f383 8811 	msr	BASEPRI, r3
}
 8004bd4:	bf00      	nop
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20014370 	.word	0x20014370
 8004be0:	20014340 	.word	0x20014340

08004be4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bec:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf0:	f04f 0120 	mov.w	r1, #32
 8004bf4:	f381 8811 	msr	BASEPRI, r1
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	4819      	ldr	r0, [pc, #100]	; (8004c60 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004bfc:	f7fe ffbd 	bl	8003b7a <_PreparePacket>
 8004c00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c06:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	e00b      	b.n	8004c32 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	1c59      	adds	r1, r3, #1
 8004c22:	61f9      	str	r1, [r7, #28]
 8004c24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	09db      	lsrs	r3, r3, #7
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b7f      	cmp	r3, #127	; 0x7f
 8004c36:	d8f0      	bhi.n	8004c1a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	61fa      	str	r2, [r7, #28]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004c48:	2204      	movs	r2, #4
 8004c4a:	68f9      	ldr	r1, [r7, #12]
 8004c4c:	6938      	ldr	r0, [r7, #16]
 8004c4e:	f7ff f885 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f383 8811 	msr	BASEPRI, r3
}
 8004c58:	bf00      	nop
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20014370 	.word	0x20014370
 8004c64:	20014340 	.word	0x20014340

08004c68 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c70:	f3ef 8311 	mrs	r3, BASEPRI
 8004c74:	f04f 0120 	mov.w	r1, #32
 8004c78:	f381 8811 	msr	BASEPRI, r1
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	4819      	ldr	r0, [pc, #100]	; (8004ce4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004c80:	f7fe ff7b 	bl	8003b7a <_PreparePacket>
 8004c84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c8a:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	e00b      	b.n	8004cb6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	1c59      	adds	r1, r3, #1
 8004ca6:	61f9      	str	r1, [r7, #28]
 8004ca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	09db      	lsrs	r3, r3, #7
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cba:	d8f0      	bhi.n	8004c9e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	61fa      	str	r2, [r7, #28]
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004ccc:	2206      	movs	r2, #6
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	6938      	ldr	r0, [r7, #16]
 8004cd2:	f7ff f843 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f383 8811 	msr	BASEPRI, r3
}
 8004cdc:	bf00      	nop
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20014370 	.word	0x20014370
 8004ce8:	20014340 	.word	0x20014340

08004cec <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cfa:	f04f 0120 	mov.w	r1, #32
 8004cfe:	f381 8811 	msr	BASEPRI, r1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	4827      	ldr	r0, [pc, #156]	; (8004da4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004d06:	f7fe ff38 	bl	8003b7a <_PreparePacket>
 8004d0a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d10:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	e00b      	b.n	8004d3c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	1c59      	adds	r1, r3, #1
 8004d2c:	6279      	str	r1, [r7, #36]	; 0x24
 8004d2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	09db      	lsrs	r3, r3, #7
 8004d3a:	623b      	str	r3, [r7, #32]
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d40:	d8f0      	bhi.n	8004d24 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	627a      	str	r2, [r7, #36]	; 0x24
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	e00b      	b.n	8004d74 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	61f9      	str	r1, [r7, #28]
 8004d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	09db      	lsrs	r3, r3, #7
 8004d72:	61bb      	str	r3, [r7, #24]
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2b7f      	cmp	r3, #127	; 0x7f
 8004d78:	d8f0      	bhi.n	8004d5c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	61fa      	str	r2, [r7, #28]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004d8a:	2207      	movs	r2, #7
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	6938      	ldr	r0, [r7, #16]
 8004d90:	f7fe ffe4 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f383 8811 	msr	BASEPRI, r3
}
 8004d9a:	bf00      	nop
 8004d9c:	3728      	adds	r7, #40	; 0x28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20014370 	.word	0x20014370
 8004da8:	20014340 	.word	0x20014340

08004dac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004db4:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	1ad3      	subs	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	20014340 	.word	0x20014340

08004dcc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08c      	sub	sp, #48	; 0x30
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004dd6:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d06d      	beq.n	8004eba <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004dde:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004de4:	2300      	movs	r3, #0
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de8:	e008      	b.n	8004dfc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	3301      	adds	r3, #1
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d3f2      	bcc.n	8004dea <SEGGER_SYSVIEW_SendModule+0x1e>
 8004e04:	e000      	b.n	8004e08 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004e06:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d055      	beq.n	8004eba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e12:	f04f 0120 	mov.w	r1, #32
 8004e16:	f381 8811 	msr	BASEPRI, r1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	482a      	ldr	r0, [pc, #168]	; (8004ec8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004e1e:	f7fe feac 	bl	8003b7a <_PreparePacket>
 8004e22:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	e00b      	b.n	8004e4a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	1c59      	adds	r1, r3, #1
 8004e3a:	6279      	str	r1, [r7, #36]	; 0x24
 8004e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	09db      	lsrs	r3, r3, #7
 8004e48:	623b      	str	r3, [r7, #32]
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e4e:	d8f0      	bhi.n	8004e32 <SEGGER_SYSVIEW_SendModule+0x66>
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	627a      	str	r2, [r7, #36]	; 0x24
 8004e56:	6a3a      	ldr	r2, [r7, #32]
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e00b      	b.n	8004e84 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	1c59      	adds	r1, r3, #1
 8004e74:	61f9      	str	r1, [r7, #28]
 8004e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	09db      	lsrs	r3, r3, #7
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b7f      	cmp	r3, #127	; 0x7f
 8004e88:	d8f0      	bhi.n	8004e6c <SEGGER_SYSVIEW_SendModule+0xa0>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	61fa      	str	r2, [r7, #28]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7fe fe1c 	bl	8003ae0 <_EncodeStr>
 8004ea8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004eaa:	2216      	movs	r2, #22
 8004eac:	68f9      	ldr	r1, [r7, #12]
 8004eae:	6938      	ldr	r0, [r7, #16]
 8004eb0:	f7fe ff54 	bl	8003d5c <_SendPacket>
      RECORD_END();
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004eba:	bf00      	nop
 8004ebc:	3730      	adds	r7, #48	; 0x30
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20014368 	.word	0x20014368
 8004ec8:	20014370 	.word	0x20014370

08004ecc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00f      	beq.n	8004efa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004eda:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f2      	bne.n	8004ee0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20014368 	.word	0x20014368

08004f08 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f12:	f04f 0120 	mov.w	r1, #32
 8004f16:	f381 8811 	msr	BASEPRI, r1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	4817      	ldr	r0, [pc, #92]	; (8004f7c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004f1e:	f7fe fe2c 	bl	8003b7a <_PreparePacket>
 8004f22:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e00b      	b.n	8004f4c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	1c59      	adds	r1, r3, #1
 8004f3c:	6179      	str	r1, [r7, #20]
 8004f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	09db      	lsrs	r3, r3, #7
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f50:	d8f0      	bhi.n	8004f34 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	617a      	str	r2, [r7, #20]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004f62:	221b      	movs	r2, #27
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	68b8      	ldr	r0, [r7, #8]
 8004f68:	f7fe fef8 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f383 8811 	msr	BASEPRI, r3
}
 8004f72:	bf00      	nop
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20014370 	.word	0x20014370
 8004f80:	2001436c 	.word	0x2001436c

08004f84 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f90:	f04f 0120 	mov.w	r1, #32
 8004f94:	f381 8811 	msr	BASEPRI, r1
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	4827      	ldr	r0, [pc, #156]	; (8005038 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004f9c:	f7fe fded 	bl	8003b7a <_PreparePacket>
 8004fa0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fa2:	2280      	movs	r2, #128	; 0x80
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	6938      	ldr	r0, [r7, #16]
 8004fa8:	f7fe fd9a 	bl	8003ae0 <_EncodeStr>
 8004fac:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	e00b      	b.n	8004fd0 <SEGGER_SYSVIEW_Warn+0x4c>
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	1c59      	adds	r1, r3, #1
 8004fc0:	6279      	str	r1, [r7, #36]	; 0x24
 8004fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	09db      	lsrs	r3, r3, #7
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd4:	d8f0      	bhi.n	8004fb8 <SEGGER_SYSVIEW_Warn+0x34>
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	627a      	str	r2, [r7, #36]	; 0x24
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	e00b      	b.n	8005008 <SEGGER_SYSVIEW_Warn+0x84>
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	1c59      	adds	r1, r3, #1
 8004ff8:	61f9      	str	r1, [r7, #28]
 8004ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	09db      	lsrs	r3, r3, #7
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b7f      	cmp	r3, #127	; 0x7f
 800500c:	d8f0      	bhi.n	8004ff0 <SEGGER_SYSVIEW_Warn+0x6c>
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	61fa      	str	r2, [r7, #28]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800501e:	221a      	movs	r2, #26
 8005020:	68f9      	ldr	r1, [r7, #12]
 8005022:	6938      	ldr	r0, [r7, #16]
 8005024:	f7fe fe9a 	bl	8003d5c <_SendPacket>
  RECORD_END();
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
 8005030:	3728      	adds	r7, #40	; 0x28
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20014370 	.word	0x20014370

0800503c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005042:	f000 ffb3 	bl	8005fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005046:	f000 f8e3 	bl	8005210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800504a:	f000 f975 	bl	8005338 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800504e:	f000 f949 	bl	80052e4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_UART_MspInit(&huart2);
 8005052:	485a      	ldr	r0, [pc, #360]	; (80051bc <main+0x180>)
 8005054:	f000 fe78 	bl	8005d48 <HAL_UART_MspInit>

  //Enable the DWT (Data Watch Point) Cycle Count Feature
  DWT_CTRL |= (1 << 0);
 8005058:	4b59      	ldr	r3, [pc, #356]	; (80051c0 <main+0x184>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a58      	ldr	r2, [pc, #352]	; (80051c0 <main+0x184>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	6013      	str	r3, [r2, #0]

  //Enabling SEGGER SYSVIEW event tracing
  SEGGER_SYSVIEW_Conf();
 8005064:	f7fe fa3e 	bl	80034e4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8005068:	f7ff fa1c 	bl	80044a4 <SEGGER_SYSVIEW_Start>

  //HAL_UART_Receive_IT(&huart2,RxBuf,1);

  status = xTaskCreate(task_menu,"menu_task",1024,NULL,2,&task_handle_menu);
 800506c:	4b55      	ldr	r3, [pc, #340]	; (80051c4 <main+0x188>)
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	2302      	movs	r3, #2
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2300      	movs	r3, #0
 8005076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800507a:	4953      	ldr	r1, [pc, #332]	; (80051c8 <main+0x18c>)
 800507c:	4853      	ldr	r0, [pc, #332]	; (80051cc <main+0x190>)
 800507e:	f7fc f889 	bl	8001194 <xTaskCreate>
 8005082:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d00a      	beq.n	80050a0 <main+0x64>
        __asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	61bb      	str	r3, [r7, #24]
    }
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <main+0x62>

  status = xTaskCreate(task_led,"led_task",1024,NULL,2,&task_handle_led);
 80050a0:	4b4b      	ldr	r3, [pc, #300]	; (80051d0 <main+0x194>)
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	2302      	movs	r3, #2
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2300      	movs	r3, #0
 80050aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ae:	4949      	ldr	r1, [pc, #292]	; (80051d4 <main+0x198>)
 80050b0:	4849      	ldr	r0, [pc, #292]	; (80051d8 <main+0x19c>)
 80050b2:	f7fc f86f 	bl	8001194 <xTaskCreate>
 80050b6:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d00a      	beq.n	80050d4 <main+0x98>
        __asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	617b      	str	r3, [r7, #20]
    }
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <main+0x96>

  status = xTaskCreate(task_rtc,"rtc_task",1024,NULL,2,&task_handle_rtc);
 80050d4:	4b41      	ldr	r3, [pc, #260]	; (80051dc <main+0x1a0>)
 80050d6:	9301      	str	r3, [sp, #4]
 80050d8:	2302      	movs	r3, #2
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	2300      	movs	r3, #0
 80050de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050e2:	493f      	ldr	r1, [pc, #252]	; (80051e0 <main+0x1a4>)
 80050e4:	483f      	ldr	r0, [pc, #252]	; (80051e4 <main+0x1a8>)
 80050e6:	f7fc f855 	bl	8001194 <xTaskCreate>
 80050ea:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d00a      	beq.n	8005108 <main+0xcc>
        __asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	613b      	str	r3, [r7, #16]
    }
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <main+0xca>

  status = xTaskCreate(task_cmd,"cmd_task",1024,NULL,2,&task_handle_cmd);
 8005108:	4b37      	ldr	r3, [pc, #220]	; (80051e8 <main+0x1ac>)
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	2302      	movs	r3, #2
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005116:	4935      	ldr	r1, [pc, #212]	; (80051ec <main+0x1b0>)
 8005118:	4835      	ldr	r0, [pc, #212]	; (80051f0 <main+0x1b4>)
 800511a:	f7fc f83b 	bl	8001194 <xTaskCreate>
 800511e:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d00a      	beq.n	800513c <main+0x100>
        __asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
    }
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <main+0xfe>

  status = xTaskCreate(task_print,"print_task",1024,NULL,2,&task_handle_print);
 800513c:	4b2d      	ldr	r3, [pc, #180]	; (80051f4 <main+0x1b8>)
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	2302      	movs	r3, #2
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2300      	movs	r3, #0
 8005146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800514a:	492b      	ldr	r1, [pc, #172]	; (80051f8 <main+0x1bc>)
 800514c:	482b      	ldr	r0, [pc, #172]	; (80051fc <main+0x1c0>)
 800514e:	f7fc f821 	bl	8001194 <xTaskCreate>
 8005152:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d00a      	beq.n	8005170 <main+0x134>
        __asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	60bb      	str	r3, [r7, #8]
    }
 800516c:	bf00      	nop
 800516e:	e7fe      	b.n	800516e <main+0x132>

  print_queue = xQueueCreate(10,sizeof(unsigned long));
 8005170:	2200      	movs	r2, #0
 8005172:	2104      	movs	r1, #4
 8005174:	200a      	movs	r0, #10
 8005176:	f7fb fb1b 	bl	80007b0 <xQueueGenericCreate>
 800517a:	4603      	mov	r3, r0
 800517c:	4a20      	ldr	r2, [pc, #128]	; (8005200 <main+0x1c4>)
 800517e:	6013      	str	r3, [r2, #0]
  configASSERT(print_queue != NULL);
 8005180:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <main+0x1c4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <main+0x162>
        __asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	607b      	str	r3, [r7, #4]
    }
 800519a:	bf00      	nop
 800519c:	e7fe      	b.n	800519c <main+0x160>

  led_timer = xTimerCreate("led_timer",TIMER_PERIOD_TICKS,pdTRUE,"led_timer",led_timer_callback);
 800519e:	4b19      	ldr	r3, [pc, #100]	; (8005204 <main+0x1c8>)
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	4b19      	ldr	r3, [pc, #100]	; (8005208 <main+0x1cc>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80051aa:	4817      	ldr	r0, [pc, #92]	; (8005208 <main+0x1cc>)
 80051ac:	f7fd f978 	bl	80024a0 <xTimerCreate>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4a16      	ldr	r2, [pc, #88]	; (800520c <main+0x1d0>)
 80051b4:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 80051b6:	f7fc f951 	bl	800145c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80051ba:	e7fe      	b.n	80051ba <main+0x17e>
 80051bc:	20014454 	.word	0x20014454
 80051c0:	e0001000 	.word	0xe0001000
 80051c4:	200144a4 	.word	0x200144a4
 80051c8:	0800882c 	.word	0x0800882c
 80051cc:	080055f5 	.word	0x080055f5
 80051d0:	200144a8 	.word	0x200144a8
 80051d4:	08008838 	.word	0x08008838
 80051d8:	08005641 	.word	0x08005641
 80051dc:	200144ac 	.word	0x200144ac
 80051e0:	08008844 	.word	0x08008844
 80051e4:	080057e5 	.word	0x080057e5
 80051e8:	200144b0 	.word	0x200144b0
 80051ec:	08008850 	.word	0x08008850
 80051f0:	08005899 	.word	0x08005899
 80051f4:	200144b4 	.word	0x200144b4
 80051f8:	0800885c 	.word	0x0800885c
 80051fc:	08005971 	.word	0x08005971
 8005200:	200144b8 	.word	0x200144b8
 8005204:	080059e9 	.word	0x080059e9
 8005208:	08008868 	.word	0x08008868
 800520c:	200144bc 	.word	0x200144bc

08005210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b094      	sub	sp, #80	; 0x50
 8005214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005216:	f107 0320 	add.w	r3, r7, #32
 800521a:	2230      	movs	r2, #48	; 0x30
 800521c:	2100      	movs	r1, #0
 800521e:	4618      	mov	r0, r3
 8005220:	f003 fa7c 	bl	800871c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005224:	f107 030c 	add.w	r3, r7, #12
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	605a      	str	r2, [r3, #4]
 800522e:	609a      	str	r2, [r3, #8]
 8005230:	60da      	str	r2, [r3, #12]
 8005232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005234:	2300      	movs	r3, #0
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	4b28      	ldr	r3, [pc, #160]	; (80052dc <SystemClock_Config+0xcc>)
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	4a27      	ldr	r2, [pc, #156]	; (80052dc <SystemClock_Config+0xcc>)
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005242:	6413      	str	r3, [r2, #64]	; 0x40
 8005244:	4b25      	ldr	r3, [pc, #148]	; (80052dc <SystemClock_Config+0xcc>)
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005250:	2300      	movs	r3, #0
 8005252:	607b      	str	r3, [r7, #4]
 8005254:	4b22      	ldr	r3, [pc, #136]	; (80052e0 <SystemClock_Config+0xd0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <SystemClock_Config+0xd0>)
 800525a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <SystemClock_Config+0xd0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800526c:	2302      	movs	r3, #2
 800526e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005270:	2301      	movs	r3, #1
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005274:	2310      	movs	r3, #16
 8005276:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005278:	2302      	movs	r3, #2
 800527a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800527c:	2300      	movs	r3, #0
 800527e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005280:	2308      	movs	r3, #8
 8005282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8005284:	2332      	movs	r3, #50	; 0x32
 8005286:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005288:	2304      	movs	r3, #4
 800528a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800528c:	2307      	movs	r3, #7
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005290:	f107 0320 	add.w	r3, r7, #32
 8005294:	4618      	mov	r0, r3
 8005296:	f001 fa0f 	bl	80066b8 <HAL_RCC_OscConfig>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80052a0:	f000 fd22 	bl	8005ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80052a4:	230f      	movs	r3, #15
 80052a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80052a8:	2302      	movs	r3, #2
 80052aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80052b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80052b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80052b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80052bc:	f107 030c 	add.w	r3, r7, #12
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 fc70 	bl	8006ba8 <HAL_RCC_ClockConfig>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80052ce:	f000 fd0b 	bl	8005ce8 <Error_Handler>
  }
}
 80052d2:	bf00      	nop
 80052d4:	3750      	adds	r7, #80	; 0x50
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40007000 	.word	0x40007000

080052e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80052e8:	4b11      	ldr	r3, [pc, #68]	; (8005330 <MX_USART2_UART_Init+0x4c>)
 80052ea:	4a12      	ldr	r2, [pc, #72]	; (8005334 <MX_USART2_UART_Init+0x50>)
 80052ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <MX_USART2_UART_Init+0x4c>)
 80052f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052f6:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <MX_USART2_UART_Init+0x4c>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052fc:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <MX_USART2_UART_Init+0x4c>)
 80052fe:	2200      	movs	r2, #0
 8005300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <MX_USART2_UART_Init+0x4c>)
 8005304:	2200      	movs	r2, #0
 8005306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005308:	4b09      	ldr	r3, [pc, #36]	; (8005330 <MX_USART2_UART_Init+0x4c>)
 800530a:	220c      	movs	r2, #12
 800530c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <MX_USART2_UART_Init+0x4c>)
 8005310:	2200      	movs	r2, #0
 8005312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <MX_USART2_UART_Init+0x4c>)
 8005316:	2200      	movs	r2, #0
 8005318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800531a:	4805      	ldr	r0, [pc, #20]	; (8005330 <MX_USART2_UART_Init+0x4c>)
 800531c:	f002 f944 	bl	80075a8 <HAL_UART_Init>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005326:	f000 fcdf 	bl	8005ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800532a:	bf00      	nop
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20014454 	.word	0x20014454
 8005334:	40004400 	.word	0x40004400

08005338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08c      	sub	sp, #48	; 0x30
 800533c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800533e:	f107 031c 	add.w	r3, r7, #28
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	605a      	str	r2, [r3, #4]
 8005348:	609a      	str	r2, [r3, #8]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800534e:	2300      	movs	r3, #0
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	4ba2      	ldr	r3, [pc, #648]	; (80055dc <MX_GPIO_Init+0x2a4>)
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	4aa1      	ldr	r2, [pc, #644]	; (80055dc <MX_GPIO_Init+0x2a4>)
 8005358:	f043 0310 	orr.w	r3, r3, #16
 800535c:	6313      	str	r3, [r2, #48]	; 0x30
 800535e:	4b9f      	ldr	r3, [pc, #636]	; (80055dc <MX_GPIO_Init+0x2a4>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	4b9b      	ldr	r3, [pc, #620]	; (80055dc <MX_GPIO_Init+0x2a4>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	4a9a      	ldr	r2, [pc, #616]	; (80055dc <MX_GPIO_Init+0x2a4>)
 8005374:	f043 0304 	orr.w	r3, r3, #4
 8005378:	6313      	str	r3, [r2, #48]	; 0x30
 800537a:	4b98      	ldr	r3, [pc, #608]	; (80055dc <MX_GPIO_Init+0x2a4>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	4b94      	ldr	r3, [pc, #592]	; (80055dc <MX_GPIO_Init+0x2a4>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	4a93      	ldr	r2, [pc, #588]	; (80055dc <MX_GPIO_Init+0x2a4>)
 8005390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005394:	6313      	str	r3, [r2, #48]	; 0x30
 8005396:	4b91      	ldr	r3, [pc, #580]	; (80055dc <MX_GPIO_Init+0x2a4>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	4b8d      	ldr	r3, [pc, #564]	; (80055dc <MX_GPIO_Init+0x2a4>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	4a8c      	ldr	r2, [pc, #560]	; (80055dc <MX_GPIO_Init+0x2a4>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	6313      	str	r3, [r2, #48]	; 0x30
 80053b2:	4b8a      	ldr	r3, [pc, #552]	; (80055dc <MX_GPIO_Init+0x2a4>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	4b86      	ldr	r3, [pc, #536]	; (80055dc <MX_GPIO_Init+0x2a4>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	4a85      	ldr	r2, [pc, #532]	; (80055dc <MX_GPIO_Init+0x2a4>)
 80053c8:	f043 0302 	orr.w	r3, r3, #2
 80053cc:	6313      	str	r3, [r2, #48]	; 0x30
 80053ce:	4b83      	ldr	r3, [pc, #524]	; (80055dc <MX_GPIO_Init+0x2a4>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	60bb      	str	r3, [r7, #8]
 80053d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	607b      	str	r3, [r7, #4]
 80053de:	4b7f      	ldr	r3, [pc, #508]	; (80055dc <MX_GPIO_Init+0x2a4>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	4a7e      	ldr	r2, [pc, #504]	; (80055dc <MX_GPIO_Init+0x2a4>)
 80053e4:	f043 0308 	orr.w	r3, r3, #8
 80053e8:	6313      	str	r3, [r2, #48]	; 0x30
 80053ea:	4b7c      	ldr	r3, [pc, #496]	; (80055dc <MX_GPIO_Init+0x2a4>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	607b      	str	r3, [r7, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80053f6:	2200      	movs	r2, #0
 80053f8:	2108      	movs	r1, #8
 80053fa:	4879      	ldr	r0, [pc, #484]	; (80055e0 <MX_GPIO_Init+0x2a8>)
 80053fc:	f001 f928 	bl	8006650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8005400:	2201      	movs	r2, #1
 8005402:	2101      	movs	r1, #1
 8005404:	4877      	ldr	r0, [pc, #476]	; (80055e4 <MX_GPIO_Init+0x2ac>)
 8005406:	f001 f923 	bl	8006650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800540a:	2200      	movs	r2, #0
 800540c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8005410:	4875      	ldr	r0, [pc, #468]	; (80055e8 <MX_GPIO_Init+0x2b0>)
 8005412:	f001 f91d 	bl	8006650 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8005416:	2308      	movs	r3, #8
 8005418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800541a:	2301      	movs	r3, #1
 800541c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541e:	2300      	movs	r3, #0
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005422:	2300      	movs	r3, #0
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8005426:	f107 031c 	add.w	r3, r7, #28
 800542a:	4619      	mov	r1, r3
 800542c:	486c      	ldr	r0, [pc, #432]	; (80055e0 <MX_GPIO_Init+0x2a8>)
 800542e:	f000 ff73 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8005432:	2301      	movs	r3, #1
 8005434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005436:	2301      	movs	r3, #1
 8005438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543a:	2300      	movs	r3, #0
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543e:	2300      	movs	r3, #0
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005442:	f107 031c 	add.w	r3, r7, #28
 8005446:	4619      	mov	r1, r3
 8005448:	4866      	ldr	r0, [pc, #408]	; (80055e4 <MX_GPIO_Init+0x2ac>)
 800544a:	f000 ff65 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800544e:	2308      	movs	r3, #8
 8005450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005452:	2302      	movs	r3, #2
 8005454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005456:	2300      	movs	r3, #0
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545a:	2300      	movs	r3, #0
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800545e:	2305      	movs	r3, #5
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005462:	f107 031c 	add.w	r3, r7, #28
 8005466:	4619      	mov	r1, r3
 8005468:	485e      	ldr	r0, [pc, #376]	; (80055e4 <MX_GPIO_Init+0x2ac>)
 800546a:	f000 ff55 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800546e:	2301      	movs	r3, #1
 8005470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005472:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800547c:	f107 031c 	add.w	r3, r7, #28
 8005480:	4619      	mov	r1, r3
 8005482:	485a      	ldr	r0, [pc, #360]	; (80055ec <MX_GPIO_Init+0x2b4>)
 8005484:	f000 ff48 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005488:	2310      	movs	r3, #16
 800548a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548c:	2302      	movs	r3, #2
 800548e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005490:	2300      	movs	r3, #0
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005494:	2300      	movs	r3, #0
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005498:	2306      	movs	r3, #6
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800549c:	f107 031c 	add.w	r3, r7, #28
 80054a0:	4619      	mov	r1, r3
 80054a2:	4852      	ldr	r0, [pc, #328]	; (80055ec <MX_GPIO_Init+0x2b4>)
 80054a4:	f000 ff38 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80054a8:	23e0      	movs	r3, #224	; 0xe0
 80054aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ac:	2302      	movs	r3, #2
 80054ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b4:	2300      	movs	r3, #0
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80054b8:	2305      	movs	r3, #5
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054bc:	f107 031c 	add.w	r3, r7, #28
 80054c0:	4619      	mov	r1, r3
 80054c2:	484a      	ldr	r0, [pc, #296]	; (80055ec <MX_GPIO_Init+0x2b4>)
 80054c4:	f000 ff28 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80054c8:	2304      	movs	r3, #4
 80054ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054cc:	2300      	movs	r3, #0
 80054ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80054d4:	f107 031c 	add.w	r3, r7, #28
 80054d8:	4619      	mov	r1, r3
 80054da:	4845      	ldr	r0, [pc, #276]	; (80055f0 <MX_GPIO_Init+0x2b8>)
 80054dc:	f000 ff1c 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80054e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e6:	2302      	movs	r3, #2
 80054e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ee:	2300      	movs	r3, #0
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80054f2:	2305      	movs	r3, #5
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80054f6:	f107 031c 	add.w	r3, r7, #28
 80054fa:	4619      	mov	r1, r3
 80054fc:	483c      	ldr	r0, [pc, #240]	; (80055f0 <MX_GPIO_Init+0x2b8>)
 80054fe:	f000 ff0b 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8005502:	f24f 0310 	movw	r3, #61456	; 0xf010
 8005506:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005508:	2301      	movs	r3, #1
 800550a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550c:	2300      	movs	r3, #0
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005510:	2300      	movs	r3, #0
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005514:	f107 031c 	add.w	r3, r7, #28
 8005518:	4619      	mov	r1, r3
 800551a:	4833      	ldr	r0, [pc, #204]	; (80055e8 <MX_GPIO_Init+0x2b0>)
 800551c:	f000 fefc 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005520:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005526:	2302      	movs	r3, #2
 8005528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2300      	movs	r3, #0
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552e:	2300      	movs	r3, #0
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005532:	2306      	movs	r3, #6
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005536:	f107 031c 	add.w	r3, r7, #28
 800553a:	4619      	mov	r1, r3
 800553c:	4829      	ldr	r0, [pc, #164]	; (80055e4 <MX_GPIO_Init+0x2ac>)
 800553e:	f000 feeb 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005548:	2300      	movs	r3, #0
 800554a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554c:	2300      	movs	r3, #0
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005550:	f107 031c 	add.w	r3, r7, #28
 8005554:	4619      	mov	r1, r3
 8005556:	4825      	ldr	r0, [pc, #148]	; (80055ec <MX_GPIO_Init+0x2b4>)
 8005558:	f000 fede 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800555c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005562:	2302      	movs	r3, #2
 8005564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800556a:	2300      	movs	r3, #0
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800556e:	230a      	movs	r3, #10
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005572:	f107 031c 	add.w	r3, r7, #28
 8005576:	4619      	mov	r1, r3
 8005578:	481c      	ldr	r0, [pc, #112]	; (80055ec <MX_GPIO_Init+0x2b4>)
 800557a:	f000 fecd 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800557e:	2320      	movs	r3, #32
 8005580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005582:	2300      	movs	r3, #0
 8005584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005586:	2300      	movs	r3, #0
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800558a:	f107 031c 	add.w	r3, r7, #28
 800558e:	4619      	mov	r1, r3
 8005590:	4815      	ldr	r0, [pc, #84]	; (80055e8 <MX_GPIO_Init+0x2b0>)
 8005592:	f000 fec1 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8005596:	f44f 7310 	mov.w	r3, #576	; 0x240
 800559a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800559c:	2312      	movs	r3, #18
 800559e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a4:	2300      	movs	r3, #0
 80055a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80055a8:	2304      	movs	r3, #4
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ac:	f107 031c 	add.w	r3, r7, #28
 80055b0:	4619      	mov	r1, r3
 80055b2:	480f      	ldr	r0, [pc, #60]	; (80055f0 <MX_GPIO_Init+0x2b8>)
 80055b4:	f000 feb0 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80055b8:	2302      	movs	r3, #2
 80055ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80055bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80055c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80055c6:	f107 031c 	add.w	r3, r7, #28
 80055ca:	4619      	mov	r1, r3
 80055cc:	4804      	ldr	r0, [pc, #16]	; (80055e0 <MX_GPIO_Init+0x2a8>)
 80055ce:	f000 fea3 	bl	8006318 <HAL_GPIO_Init>

}
 80055d2:	bf00      	nop
 80055d4:	3730      	adds	r7, #48	; 0x30
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40020800 	.word	0x40020800
 80055e8:	40020c00 	.word	0x40020c00
 80055ec:	40020000 	.word	0x40020000
 80055f0:	40020400 	.word	0x40020400

080055f4 <task_menu>:

/* USER CODE BEGIN 4 */

static void task_menu(void *params)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	6078      	str	r0, [r7, #4]
	char *menu_msg = "\r\n"
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <task_menu+0x3c>)
 80055fe:	60fb      	str	r3, [r7, #12]
	                 "RTC Control --------> 2\r\n"
	                 "Enter Choice: ";

    while(1)
    {
    	xQueueSend(print_queue,&menu_msg,portMAX_DELAY);
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <task_menu+0x40>)
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	f107 010c 	add.w	r1, r7, #12
 8005608:	2300      	movs	r3, #0
 800560a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800560e:	f7fb f957 	bl	80008c0 <xQueueGenericSend>
    	HAL_UART_Receive_IT(&huart2,RxBuf,1);
 8005612:	2201      	movs	r2, #1
 8005614:	4908      	ldr	r1, [pc, #32]	; (8005638 <task_menu+0x44>)
 8005616:	4809      	ldr	r0, [pc, #36]	; (800563c <task_menu+0x48>)
 8005618:	f002 f8a5 	bl	8007766 <HAL_UART_Receive_IT>
    	xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800561c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	2300      	movs	r3, #0
 8005624:	2200      	movs	r2, #0
 8005626:	2100      	movs	r1, #0
 8005628:	2000      	movs	r0, #0
 800562a:	f7fc fbff 	bl	8001e2c <xTaskGenericNotifyWait>
    	xQueueSend(print_queue,&menu_msg,portMAX_DELAY);
 800562e:	e7e7      	b.n	8005600 <task_menu+0xc>
 8005630:	08008874 	.word	0x08008874
 8005634:	200144b8 	.word	0x200144b8
 8005638:	20014498 	.word	0x20014498
 800563c:	20014454 	.word	0x20014454

08005640 <task_led>:
    }
}

static void task_led(void *params)
{
 8005640:	b590      	push	{r4, r7, lr}
 8005642:	b087      	sub	sp, #28
 8005644:	af02      	add	r7, sp, #8
 8005646:	6078      	str	r0, [r7, #4]
	char *msg = "\r\n"
 8005648:	4b5e      	ldr	r3, [pc, #376]	; (80057c4 <task_led+0x184>)
 800564a:	60fb      	str	r3, [r7, #12]
			    "Main Menu   --------> 0\r\n"
	            "Enter Choice: ";

    while(1)
    {
    	if(app_state != APP_STATE_LED)
 800564c:	4b5e      	ldr	r3, [pc, #376]	; (80057c8 <task_led+0x188>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d009      	beq.n	8005668 <task_led+0x28>
    	{
    		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8005654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	2300      	movs	r3, #0
 800565c:	2200      	movs	r2, #0
 800565e:	2100      	movs	r1, #0
 8005660:	2000      	movs	r0, #0
 8005662:	f7fc fbe3 	bl	8001e2c <xTaskGenericNotifyWait>
 8005666:	e7f1      	b.n	800564c <task_led+0xc>
    	}
    	else
    	{
    		xQueueSend(print_queue,&msg,portMAX_DELAY);
 8005668:	4b58      	ldr	r3, [pc, #352]	; (80057cc <task_led+0x18c>)
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	f107 010c 	add.w	r1, r7, #12
 8005670:	2300      	movs	r3, #0
 8005672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005676:	f7fb f923 	bl	80008c0 <xQueueGenericSend>
    		HAL_UART_Receive_IT(&huart2,RxBuf,1);
 800567a:	2201      	movs	r2, #1
 800567c:	4954      	ldr	r1, [pc, #336]	; (80057d0 <task_led+0x190>)
 800567e:	4855      	ldr	r0, [pc, #340]	; (80057d4 <task_led+0x194>)
 8005680:	f002 f871 	bl	8007766 <HAL_UART_Receive_IT>
    		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8005684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	2200      	movs	r2, #0
 800568e:	2100      	movs	r1, #0
 8005690:	2000      	movs	r0, #0
 8005692:	f7fc fbcb 	bl	8001e2c <xTaskGenericNotifyWait>
    		if(RxBuf[0] == '1')
 8005696:	4b4e      	ldr	r3, [pc, #312]	; (80057d0 <task_led+0x190>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b31      	cmp	r3, #49	; 0x31
 800569c:	d11a      	bne.n	80056d4 <task_led+0x94>
    		{
    			current_led_pattern = LED_PATTERN_1;
 800569e:	4b4e      	ldr	r3, [pc, #312]	; (80057d8 <task_led+0x198>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]
    			xTimerStop(led_timer,portMAX_DELAY);
 80056a4:	4b4d      	ldr	r3, [pc, #308]	; (80057dc <task_led+0x19c>)
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	2200      	movs	r2, #0
 80056b2:	2103      	movs	r1, #3
 80056b4:	f7fc ff50 	bl	8002558 <xTimerGenericCommand>
    			xTimerStart(led_timer,portMAX_DELAY);
 80056b8:	4b48      	ldr	r3, [pc, #288]	; (80057dc <task_led+0x19c>)
 80056ba:	681c      	ldr	r4, [r3, #0]
 80056bc:	f7fb ffde 	bl	800167c <xTaskGetTickCount>
 80056c0:	4602      	mov	r2, r0
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2300      	movs	r3, #0
 80056ca:	2101      	movs	r1, #1
 80056cc:	4620      	mov	r0, r4
 80056ce:	f7fc ff43 	bl	8002558 <xTimerGenericCommand>
 80056d2:	e7bb      	b.n	800564c <task_led+0xc>
    		}
    		else if(RxBuf[0] == '2')
 80056d4:	4b3e      	ldr	r3, [pc, #248]	; (80057d0 <task_led+0x190>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b32      	cmp	r3, #50	; 0x32
 80056da:	d11a      	bne.n	8005712 <task_led+0xd2>
			{
    			current_led_pattern = LED_PATTERN_2;
 80056dc:	4b3e      	ldr	r3, [pc, #248]	; (80057d8 <task_led+0x198>)
 80056de:	2202      	movs	r2, #2
 80056e0:	701a      	strb	r2, [r3, #0]
    			xTimerStop(led_timer,portMAX_DELAY);
 80056e2:	4b3e      	ldr	r3, [pc, #248]	; (80057dc <task_led+0x19c>)
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	2300      	movs	r3, #0
 80056ee:	2200      	movs	r2, #0
 80056f0:	2103      	movs	r1, #3
 80056f2:	f7fc ff31 	bl	8002558 <xTimerGenericCommand>
    			xTimerStart(led_timer,portMAX_DELAY);
 80056f6:	4b39      	ldr	r3, [pc, #228]	; (80057dc <task_led+0x19c>)
 80056f8:	681c      	ldr	r4, [r3, #0]
 80056fa:	f7fb ffbf 	bl	800167c <xTaskGetTickCount>
 80056fe:	4602      	mov	r2, r0
 8005700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	2300      	movs	r3, #0
 8005708:	2101      	movs	r1, #1
 800570a:	4620      	mov	r0, r4
 800570c:	f7fc ff24 	bl	8002558 <xTimerGenericCommand>
 8005710:	e79c      	b.n	800564c <task_led+0xc>
			}
    		else if(RxBuf[0] == '3')
 8005712:	4b2f      	ldr	r3, [pc, #188]	; (80057d0 <task_led+0x190>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b33      	cmp	r3, #51	; 0x33
 8005718:	d11a      	bne.n	8005750 <task_led+0x110>
			{
    			current_led_pattern = LED_PATTERN_3;
 800571a:	4b2f      	ldr	r3, [pc, #188]	; (80057d8 <task_led+0x198>)
 800571c:	2203      	movs	r2, #3
 800571e:	701a      	strb	r2, [r3, #0]
    			xTimerStop(led_timer,portMAX_DELAY);
 8005720:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <task_led+0x19c>)
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	2300      	movs	r3, #0
 800572c:	2200      	movs	r2, #0
 800572e:	2103      	movs	r1, #3
 8005730:	f7fc ff12 	bl	8002558 <xTimerGenericCommand>
    			xTimerStart(led_timer,portMAX_DELAY);
 8005734:	4b29      	ldr	r3, [pc, #164]	; (80057dc <task_led+0x19c>)
 8005736:	681c      	ldr	r4, [r3, #0]
 8005738:	f7fb ffa0 	bl	800167c <xTaskGetTickCount>
 800573c:	4602      	mov	r2, r0
 800573e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	2300      	movs	r3, #0
 8005746:	2101      	movs	r1, #1
 8005748:	4620      	mov	r0, r4
 800574a:	f7fc ff05 	bl	8002558 <xTimerGenericCommand>
 800574e:	e77d      	b.n	800564c <task_led+0xc>
			}
    		else if(RxBuf[0] == '4')
 8005750:	4b1f      	ldr	r3, [pc, #124]	; (80057d0 <task_led+0x190>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b34      	cmp	r3, #52	; 0x34
 8005756:	d11a      	bne.n	800578e <task_led+0x14e>
			{
    			current_led_pattern = LED_PATTERN_4;
 8005758:	4b1f      	ldr	r3, [pc, #124]	; (80057d8 <task_led+0x198>)
 800575a:	2204      	movs	r2, #4
 800575c:	701a      	strb	r2, [r3, #0]
    			xTimerStop(led_timer,portMAX_DELAY);
 800575e:	4b1f      	ldr	r3, [pc, #124]	; (80057dc <task_led+0x19c>)
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	2300      	movs	r3, #0
 800576a:	2200      	movs	r2, #0
 800576c:	2103      	movs	r1, #3
 800576e:	f7fc fef3 	bl	8002558 <xTimerGenericCommand>
    			xTimerStart(led_timer,portMAX_DELAY);
 8005772:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <task_led+0x19c>)
 8005774:	681c      	ldr	r4, [r3, #0]
 8005776:	f7fb ff81 	bl	800167c <xTaskGetTickCount>
 800577a:	4602      	mov	r2, r0
 800577c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	2101      	movs	r1, #1
 8005786:	4620      	mov	r0, r4
 8005788:	f7fc fee6 	bl	8002558 <xTimerGenericCommand>
 800578c:	e75e      	b.n	800564c <task_led+0xc>
			}
    		else if(RxBuf[0] == '0')
 800578e:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <task_led+0x190>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b30      	cmp	r3, #48	; 0x30
 8005794:	f47f af5a 	bne.w	800564c <task_led+0xc>
    		{
    		   //Return to Menu Task
    			app_state = APP_STATE_MENU;
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <task_led+0x188>)
 800579a:	2201      	movs	r2, #1
 800579c:	701a      	strb	r2, [r3, #0]
    			xTaskNotify(task_handle_menu,0,eNoAction);
 800579e:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <task_led+0x1a0>)
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	2300      	movs	r3, #0
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	2300      	movs	r3, #0
 80057a8:	2200      	movs	r2, #0
 80057aa:	2100      	movs	r1, #0
 80057ac:	f7fc fbc6 	bl	8001f3c <xTaskGenericNotify>
    			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	2300      	movs	r3, #0
 80057b8:	2200      	movs	r2, #0
 80057ba:	2100      	movs	r1, #0
 80057bc:	2000      	movs	r0, #0
 80057be:	f7fc fb35 	bl	8001e2c <xTaskGenericNotifyWait>
    	if(app_state != APP_STATE_LED)
 80057c2:	e743      	b.n	800564c <task_led+0xc>
 80057c4:	0800898c 	.word	0x0800898c
 80057c8:	20000008 	.word	0x20000008
 80057cc:	200144b8 	.word	0x200144b8
 80057d0:	20014498 	.word	0x20014498
 80057d4:	20014454 	.word	0x20014454
 80057d8:	200144c0 	.word	0x200144c0
 80057dc:	200144bc 	.word	0x200144bc
 80057e0:	200144a4 	.word	0x200144a4

080057e4 <task_rtc>:
    	}
    }
}

static void task_rtc(void *params)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	6078      	str	r0, [r7, #4]
	char *msg = "\r\n"
 80057ec:	4b24      	ldr	r3, [pc, #144]	; (8005880 <task_rtc+0x9c>)
 80057ee:	60fb      	str	r3, [r7, #12]
			    "Display Date & Time   --------> 3\r\n"
			    "Main Menu             --------> 0\r\n"
	            "Enter Choice: ";
    while(1)
    {
    	if(app_state != APP_STATE_RTC)
 80057f0:	4b24      	ldr	r3, [pc, #144]	; (8005884 <task_rtc+0xa0>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d009      	beq.n	800580c <task_rtc+0x28>
    	{
        	xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80057f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	2300      	movs	r3, #0
 8005800:	2200      	movs	r2, #0
 8005802:	2100      	movs	r1, #0
 8005804:	2000      	movs	r0, #0
 8005806:	f7fc fb11 	bl	8001e2c <xTaskGenericNotifyWait>
 800580a:	e7f1      	b.n	80057f0 <task_rtc+0xc>
        }
        else
        {
        	xQueueSend(print_queue,&msg,portMAX_DELAY);
 800580c:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <task_rtc+0xa4>)
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	f107 010c 	add.w	r1, r7, #12
 8005814:	2300      	movs	r3, #0
 8005816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800581a:	f7fb f851 	bl	80008c0 <xQueueGenericSend>
        	HAL_UART_Receive_IT(&huart2,RxBuf,1);
 800581e:	2201      	movs	r2, #1
 8005820:	491a      	ldr	r1, [pc, #104]	; (800588c <task_rtc+0xa8>)
 8005822:	481b      	ldr	r0, [pc, #108]	; (8005890 <task_rtc+0xac>)
 8005824:	f001 ff9f 	bl	8007766 <HAL_UART_Receive_IT>
        	xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8005828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	2300      	movs	r3, #0
 8005830:	2200      	movs	r2, #0
 8005832:	2100      	movs	r1, #0
 8005834:	2000      	movs	r0, #0
 8005836:	f7fc faf9 	bl	8001e2c <xTaskGenericNotifyWait>
        	if((char) RxBuf[0] == '1')
 800583a:	4b14      	ldr	r3, [pc, #80]	; (800588c <task_rtc+0xa8>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b31      	cmp	r3, #49	; 0x31
 8005840:	d0d6      	beq.n	80057f0 <task_rtc+0xc>
        	{

        	}
        	else if((char) RxBuf[0] == '2')
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <task_rtc+0xa8>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b32      	cmp	r3, #50	; 0x32
 8005848:	d0d2      	beq.n	80057f0 <task_rtc+0xc>
    		{

    		}
        	else if((char) RxBuf[0] == '0')
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <task_rtc+0xa8>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b30      	cmp	r3, #48	; 0x30
 8005850:	d1ce      	bne.n	80057f0 <task_rtc+0xc>
        	{
        		//Return to Menu Task
        		app_state = APP_STATE_MENU;
 8005852:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <task_rtc+0xa0>)
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]
        		xTaskNotify(task_handle_menu,0,eNoAction);
 8005858:	4b0e      	ldr	r3, [pc, #56]	; (8005894 <task_rtc+0xb0>)
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	2300      	movs	r3, #0
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	2300      	movs	r3, #0
 8005862:	2200      	movs	r2, #0
 8005864:	2100      	movs	r1, #0
 8005866:	f7fc fb69 	bl	8001f3c <xTaskGenericNotify>
        		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800586a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	2300      	movs	r3, #0
 8005872:	2200      	movs	r2, #0
 8005874:	2100      	movs	r1, #0
 8005876:	2000      	movs	r0, #0
 8005878:	f7fc fad8 	bl	8001e2c <xTaskGenericNotifyWait>
    	if(app_state != APP_STATE_RTC)
 800587c:	e7b8      	b.n	80057f0 <task_rtc+0xc>
 800587e:	bf00      	nop
 8005880:	08008aec 	.word	0x08008aec
 8005884:	20000008 	.word	0x20000008
 8005888:	200144b8 	.word	0x200144b8
 800588c:	20014498 	.word	0x20014498
 8005890:	20014454 	.word	0x20014454
 8005894:	200144a4 	.word	0x200144a4

08005898 <task_cmd>:
        }
    }
}

static void task_cmd(void *params)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af02      	add	r7, sp, #8
 800589e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80058a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	2300      	movs	r3, #0
 80058a8:	2200      	movs	r2, #0
 80058aa:	2100      	movs	r1, #0
 80058ac:	2000      	movs	r0, #0
 80058ae:	f7fc fabd 	bl	8001e2c <xTaskGenericNotifyWait>
		process_cmd();
 80058b2:	f000 f801 	bl	80058b8 <process_cmd>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80058b6:	e7f3      	b.n	80058a0 <task_cmd+0x8>

080058b8 <process_cmd>:
	}
}

static void process_cmd(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af02      	add	r7, sp, #8
	if(app_state == APP_STATE_MENU)
 80058be:	4b27      	ldr	r3, [pc, #156]	; (800595c <process_cmd+0xa4>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d12b      	bne.n	800591e <process_cmd+0x66>
	{
		if(RxBuf[0] == '1')
 80058c6:	4b26      	ldr	r3, [pc, #152]	; (8005960 <process_cmd+0xa8>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b31      	cmp	r3, #49	; 0x31
 80058cc:	d10c      	bne.n	80058e8 <process_cmd+0x30>
		{
			app_state = APP_STATE_LED;
 80058ce:	4b23      	ldr	r3, [pc, #140]	; (800595c <process_cmd+0xa4>)
 80058d0:	2202      	movs	r2, #2
 80058d2:	701a      	strb	r2, [r3, #0]
			xTaskNotify(task_handle_led,0,eNoAction);
 80058d4:	4b23      	ldr	r3, [pc, #140]	; (8005964 <process_cmd+0xac>)
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	2300      	movs	r3, #0
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	2300      	movs	r3, #0
 80058de:	2200      	movs	r2, #0
 80058e0:	2100      	movs	r1, #0
 80058e2:	f7fc fb2b 	bl	8001f3c <xTaskGenericNotify>
	}
	else if(app_state == APP_STATE_RTC)
	{
		xTaskNotify(task_handle_rtc,0,eNoAction);
	}
}
 80058e6:	e035      	b.n	8005954 <process_cmd+0x9c>
		else if(RxBuf[0] == '2')
 80058e8:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <process_cmd+0xa8>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b32      	cmp	r3, #50	; 0x32
 80058ee:	d10c      	bne.n	800590a <process_cmd+0x52>
			app_state = APP_STATE_RTC;
 80058f0:	4b1a      	ldr	r3, [pc, #104]	; (800595c <process_cmd+0xa4>)
 80058f2:	2203      	movs	r2, #3
 80058f4:	701a      	strb	r2, [r3, #0]
			xTaskNotify(task_handle_rtc,0,eNoAction);
 80058f6:	4b1c      	ldr	r3, [pc, #112]	; (8005968 <process_cmd+0xb0>)
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	2300      	movs	r3, #0
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	2200      	movs	r2, #0
 8005902:	2100      	movs	r1, #0
 8005904:	f7fc fb1a 	bl	8001f3c <xTaskGenericNotify>
}
 8005908:	e024      	b.n	8005954 <process_cmd+0x9c>
			xTaskNotify(task_handle_menu,0,eNoAction);
 800590a:	4b18      	ldr	r3, [pc, #96]	; (800596c <process_cmd+0xb4>)
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	2300      	movs	r3, #0
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	2300      	movs	r3, #0
 8005914:	2200      	movs	r2, #0
 8005916:	2100      	movs	r1, #0
 8005918:	f7fc fb10 	bl	8001f3c <xTaskGenericNotify>
}
 800591c:	e01a      	b.n	8005954 <process_cmd+0x9c>
	else if(app_state == APP_STATE_LED)
 800591e:	4b0f      	ldr	r3, [pc, #60]	; (800595c <process_cmd+0xa4>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d109      	bne.n	800593a <process_cmd+0x82>
		xTaskNotify(task_handle_led,0,eNoAction);
 8005926:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <process_cmd+0xac>)
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	2300      	movs	r3, #0
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2300      	movs	r3, #0
 8005930:	2200      	movs	r2, #0
 8005932:	2100      	movs	r1, #0
 8005934:	f7fc fb02 	bl	8001f3c <xTaskGenericNotify>
}
 8005938:	e00c      	b.n	8005954 <process_cmd+0x9c>
	else if(app_state == APP_STATE_RTC)
 800593a:	4b08      	ldr	r3, [pc, #32]	; (800595c <process_cmd+0xa4>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b03      	cmp	r3, #3
 8005940:	d108      	bne.n	8005954 <process_cmd+0x9c>
		xTaskNotify(task_handle_rtc,0,eNoAction);
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <process_cmd+0xb0>)
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	2300      	movs	r3, #0
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	2200      	movs	r2, #0
 800594e:	2100      	movs	r1, #0
 8005950:	f7fc faf4 	bl	8001f3c <xTaskGenericNotify>
}
 8005954:	bf00      	nop
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000008 	.word	0x20000008
 8005960:	20014498 	.word	0x20014498
 8005964:	200144a8 	.word	0x200144a8
 8005968:	200144ac 	.word	0x200144ac
 800596c:	200144a4 	.word	0x200144a4

08005970 <task_print>:

static void task_print(void *params)
{
 8005970:	b590      	push	{r4, r7, lr}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

	uint8_t *msg;

	while(1)
	{
		if(print_queue != NULL)
 8005978:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <task_print+0x44>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0fb      	beq.n	8005978 <task_print+0x8>
		{
			if(xQueueReceive(print_queue,&msg,portMAX_DELAY) == pdTRUE)
 8005980:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <task_print+0x44>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f107 010c 	add.w	r1, r7, #12
 8005988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800598c:	4618      	mov	r0, r3
 800598e:	f7fb f97b 	bl	8000c88 <xQueueReceive>
 8005992:	4603      	mov	r3, r0
 8005994:	2b01      	cmp	r3, #1
 8005996:	d1ef      	bne.n	8005978 <task_print+0x8>
			{
				HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen((char *)msg),HAL_MAX_DELAY);
 8005998:	68fc      	ldr	r4, [r7, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4618      	mov	r0, r3
 800599e:	f7fa fc61 	bl	8000264 <strlen>
 80059a2:	4603      	mov	r3, r0
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059aa:	4621      	mov	r1, r4
 80059ac:	4802      	ldr	r0, [pc, #8]	; (80059b8 <task_print+0x48>)
 80059ae:	f001 fe48 	bl	8007642 <HAL_UART_Transmit>
		if(print_queue != NULL)
 80059b2:	e7e1      	b.n	8005978 <task_print+0x8>
 80059b4:	200144b8 	.word	0x200144b8
 80059b8:	20014454 	.word	0x20014454

080059bc <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	6078      	str	r0, [r7, #4]
	xTaskNotifyFromISR(task_handle_cmd,0,eNoAction,NULL);
 80059c4:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <HAL_UART_RxCpltCallback+0x28>)
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	2300      	movs	r3, #0
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	2300      	movs	r3, #0
 80059d2:	2200      	movs	r2, #0
 80059d4:	2100      	movs	r1, #0
 80059d6:	f7fc fba3 	bl	8002120 <xTaskGenericNotifyFromISR>
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200144b0 	.word	0x200144b0

080059e8 <led_timer_callback>:

static void led_timer_callback(TimerHandle_t timer)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	if(current_led_pattern == LED_PATTERN_1)
 80059f0:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <led_timer_callback+0x48>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d102      	bne.n	80059fe <led_timer_callback+0x16>
	{
		blink_led_pattern_1();
 80059f8:	f000 f81c 	bl	8005a34 <blink_led_pattern_1>
	}
	else if(current_led_pattern == LED_PATTERN_4)
	{
		blink_led_pattern_4();
	}
}
 80059fc:	e013      	b.n	8005a26 <led_timer_callback+0x3e>
	else if(current_led_pattern == LED_PATTERN_2)
 80059fe:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <led_timer_callback+0x48>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d102      	bne.n	8005a0c <led_timer_callback+0x24>
		blink_led_pattern_2();
 8005a06:	f000 f831 	bl	8005a6c <blink_led_pattern_2>
}
 8005a0a:	e00c      	b.n	8005a26 <led_timer_callback+0x3e>
	else if(current_led_pattern == LED_PATTERN_3)
 8005a0c:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <led_timer_callback+0x48>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d102      	bne.n	8005a1a <led_timer_callback+0x32>
		blink_led_pattern_3();
 8005a14:	f000 f846 	bl	8005aa4 <blink_led_pattern_3>
}
 8005a18:	e005      	b.n	8005a26 <led_timer_callback+0x3e>
	else if(current_led_pattern == LED_PATTERN_4)
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <led_timer_callback+0x48>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d101      	bne.n	8005a26 <led_timer_callback+0x3e>
		blink_led_pattern_4();
 8005a22:	f000 f8c7 	bl	8005bb4 <blink_led_pattern_4>
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	200144c0 	.word	0x200144c0

08005a34 <blink_led_pattern_1>:

static void blink_led_pattern_1(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a3e:	480a      	ldr	r0, [pc, #40]	; (8005a68 <blink_led_pattern_1+0x34>)
 8005a40:	f000 fe06 	bl	8006650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
 8005a44:	2200      	movs	r2, #0
 8005a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a4a:	4807      	ldr	r0, [pc, #28]	; (8005a68 <blink_led_pattern_1+0x34>)
 8005a4c:	f000 fe00 	bl	8006650 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
 8005a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a54:	4804      	ldr	r0, [pc, #16]	; (8005a68 <blink_led_pattern_1+0x34>)
 8005a56:	f000 fe14 	bl	8006682 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD,LD6_Pin);
 8005a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a5e:	4802      	ldr	r0, [pc, #8]	; (8005a68 <blink_led_pattern_1+0x34>)
 8005a60:	f000 fe0f 	bl	8006682 <HAL_GPIO_TogglePin>
}
 8005a64:	bf00      	nop
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40020c00 	.word	0x40020c00

08005a6c <blink_led_pattern_2>:

static void blink_led_pattern_2(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
 8005a70:	2200      	movs	r2, #0
 8005a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a76:	480a      	ldr	r0, [pc, #40]	; (8005aa0 <blink_led_pattern_2+0x34>)
 8005a78:	f000 fdea 	bl	8006650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a82:	4807      	ldr	r0, [pc, #28]	; (8005aa0 <blink_led_pattern_2+0x34>)
 8005a84:	f000 fde4 	bl	8006650 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOD,LD3_Pin);
 8005a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a8c:	4804      	ldr	r0, [pc, #16]	; (8005aa0 <blink_led_pattern_2+0x34>)
 8005a8e:	f000 fdf8 	bl	8006682 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD,LD5_Pin);
 8005a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a96:	4802      	ldr	r0, [pc, #8]	; (8005aa0 <blink_led_pattern_2+0x34>)
 8005a98:	f000 fdf3 	bl	8006682 <HAL_GPIO_TogglePin>
}
 8005a9c:	bf00      	nop
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40020c00 	.word	0x40020c00

08005aa4 <blink_led_pattern_3>:

static void blink_led_pattern_3(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
	static uint32_t count_led_pattern_3;

	count_led_pattern_3++;
 8005aa8:	4b40      	ldr	r3, [pc, #256]	; (8005bac <blink_led_pattern_3+0x108>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	4a3f      	ldr	r2, [pc, #252]	; (8005bac <blink_led_pattern_3+0x108>)
 8005ab0:	6013      	str	r3, [r2, #0]

	if(((count_led_pattern_3) % 4) == 0)
 8005ab2:	4b3e      	ldr	r3, [pc, #248]	; (8005bac <blink_led_pattern_3+0x108>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d118      	bne.n	8005af0 <blink_led_pattern_3+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,1);
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ac4:	483a      	ldr	r0, [pc, #232]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005ac6:	f000 fdc3 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
 8005aca:	2200      	movs	r2, #0
 8005acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ad0:	4837      	ldr	r0, [pc, #220]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005ad2:	f000 fdbd 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005adc:	4834      	ldr	r0, [pc, #208]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005ade:	f000 fdb7 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ae8:	4831      	ldr	r0, [pc, #196]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005aea:	f000 fdb1 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,1);
	}
}
 8005aee:	e05b      	b.n	8005ba8 <blink_led_pattern_3+0x104>
	else if(((count_led_pattern_3) % 4) == 1)
 8005af0:	4b2e      	ldr	r3, [pc, #184]	; (8005bac <blink_led_pattern_3+0x108>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d118      	bne.n	8005b2e <blink_led_pattern_3+0x8a>
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
 8005afc:	2200      	movs	r2, #0
 8005afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b02:	482b      	ldr	r0, [pc, #172]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b04:	f000 fda4 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,1);
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b0e:	4828      	ldr	r0, [pc, #160]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b10:	f000 fd9e 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
 8005b14:	2200      	movs	r2, #0
 8005b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b1a:	4825      	ldr	r0, [pc, #148]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b1c:	f000 fd98 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
 8005b20:	2200      	movs	r2, #0
 8005b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b26:	4822      	ldr	r0, [pc, #136]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b28:	f000 fd92 	bl	8006650 <HAL_GPIO_WritePin>
}
 8005b2c:	e03c      	b.n	8005ba8 <blink_led_pattern_3+0x104>
	else if(((count_led_pattern_3) % 4) == 2)
 8005b2e:	4b1f      	ldr	r3, [pc, #124]	; (8005bac <blink_led_pattern_3+0x108>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d118      	bne.n	8005b6c <blink_led_pattern_3+0xc8>
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b40:	481b      	ldr	r0, [pc, #108]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b42:	f000 fd85 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
 8005b46:	2200      	movs	r2, #0
 8005b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b4c:	4818      	ldr	r0, [pc, #96]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b4e:	f000 fd7f 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,1);
 8005b52:	2201      	movs	r2, #1
 8005b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b58:	4815      	ldr	r0, [pc, #84]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b5a:	f000 fd79 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b64:	4812      	ldr	r0, [pc, #72]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b66:	f000 fd73 	bl	8006650 <HAL_GPIO_WritePin>
}
 8005b6a:	e01d      	b.n	8005ba8 <blink_led_pattern_3+0x104>
	else if(((count_led_pattern_3) % 4) == 3)
 8005b6c:	4b0f      	ldr	r3, [pc, #60]	; (8005bac <blink_led_pattern_3+0x108>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d117      	bne.n	8005ba8 <blink_led_pattern_3+0x104>
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b7e:	480c      	ldr	r0, [pc, #48]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b80:	f000 fd66 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
 8005b84:	2200      	movs	r2, #0
 8005b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b8a:	4809      	ldr	r0, [pc, #36]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b8c:	f000 fd60 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
 8005b90:	2200      	movs	r2, #0
 8005b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b96:	4806      	ldr	r0, [pc, #24]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005b98:	f000 fd5a 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,1);
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ba2:	4803      	ldr	r0, [pc, #12]	; (8005bb0 <blink_led_pattern_3+0x10c>)
 8005ba4:	f000 fd54 	bl	8006650 <HAL_GPIO_WritePin>
}
 8005ba8:	bf00      	nop
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	200144c4 	.word	0x200144c4
 8005bb0:	40020c00 	.word	0x40020c00

08005bb4 <blink_led_pattern_4>:

static void blink_led_pattern_4(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
	static uint32_t count_led_pattern_4;

	count_led_pattern_4++;
 8005bb8:	4b40      	ldr	r3, [pc, #256]	; (8005cbc <blink_led_pattern_4+0x108>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4a3f      	ldr	r2, [pc, #252]	; (8005cbc <blink_led_pattern_4+0x108>)
 8005bc0:	6013      	str	r3, [r2, #0]
	if(((count_led_pattern_4) % 4) == 0)
 8005bc2:	4b3e      	ldr	r3, [pc, #248]	; (8005cbc <blink_led_pattern_4+0x108>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d118      	bne.n	8005c00 <blink_led_pattern_4+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,1);
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bd4:	483a      	ldr	r0, [pc, #232]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005bd6:	f000 fd3b 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005be0:	4837      	ldr	r0, [pc, #220]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005be2:	f000 fd35 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
 8005be6:	2200      	movs	r2, #0
 8005be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bec:	4834      	ldr	r0, [pc, #208]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005bee:	f000 fd2f 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bf8:	4831      	ldr	r0, [pc, #196]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005bfa:	f000 fd29 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,1);
	}
}
 8005bfe:	e05b      	b.n	8005cb8 <blink_led_pattern_4+0x104>
	else if(((count_led_pattern_4) % 4) == 1)
 8005c00:	4b2e      	ldr	r3, [pc, #184]	; (8005cbc <blink_led_pattern_4+0x108>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d118      	bne.n	8005c3e <blink_led_pattern_4+0x8a>
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c12:	482b      	ldr	r0, [pc, #172]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005c14:	f000 fd1c 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,1);
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c1e:	4828      	ldr	r0, [pc, #160]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005c20:	f000 fd16 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
 8005c24:	2200      	movs	r2, #0
 8005c26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c2a:	4825      	ldr	r0, [pc, #148]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005c2c:	f000 fd10 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
 8005c30:	2200      	movs	r2, #0
 8005c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c36:	4822      	ldr	r0, [pc, #136]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005c38:	f000 fd0a 	bl	8006650 <HAL_GPIO_WritePin>
}
 8005c3c:	e03c      	b.n	8005cb8 <blink_led_pattern_4+0x104>
	else if(((count_led_pattern_4) % 4) == 2)
 8005c3e:	4b1f      	ldr	r3, [pc, #124]	; (8005cbc <blink_led_pattern_4+0x108>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d118      	bne.n	8005c7c <blink_led_pattern_4+0xc8>
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c50:	481b      	ldr	r0, [pc, #108]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005c52:	f000 fcfd 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
 8005c56:	2200      	movs	r2, #0
 8005c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c5c:	4818      	ldr	r0, [pc, #96]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005c5e:	f000 fcf7 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,1);
 8005c62:	2201      	movs	r2, #1
 8005c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c68:	4815      	ldr	r0, [pc, #84]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005c6a:	f000 fcf1 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,0);
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c74:	4812      	ldr	r0, [pc, #72]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005c76:	f000 fceb 	bl	8006650 <HAL_GPIO_WritePin>
}
 8005c7a:	e01d      	b.n	8005cb8 <blink_led_pattern_4+0x104>
	else if(((count_led_pattern_4) % 4) == 3)
 8005c7c:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <blink_led_pattern_4+0x108>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d117      	bne.n	8005cb8 <blink_led_pattern_4+0x104>
		HAL_GPIO_WritePin(GPIOD,LD3_Pin,0);
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c8e:	480c      	ldr	r0, [pc, #48]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005c90:	f000 fcde 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD4_Pin,0);
 8005c94:	2200      	movs	r2, #0
 8005c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c9a:	4809      	ldr	r0, [pc, #36]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005c9c:	f000 fcd8 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD6_Pin,0);
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ca6:	4806      	ldr	r0, [pc, #24]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005ca8:	f000 fcd2 	bl	8006650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,LD5_Pin,1);
 8005cac:	2201      	movs	r2, #1
 8005cae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cb2:	4803      	ldr	r0, [pc, #12]	; (8005cc0 <blink_led_pattern_4+0x10c>)
 8005cb4:	f000 fccc 	bl	8006650 <HAL_GPIO_WritePin>
}
 8005cb8:	bf00      	nop
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	200144c8 	.word	0x200144c8
 8005cc0:	40020c00 	.word	0x40020c00

08005cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a04      	ldr	r2, [pc, #16]	; (8005ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d101      	bne.n	8005cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005cd6:	f000 f98b 	bl	8005ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40001000 	.word	0x40001000

08005ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005cec:	b672      	cpsid	i
}
 8005cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005cf0:	e7fe      	b.n	8005cf0 <Error_Handler+0x8>
	...

08005cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	607b      	str	r3, [r7, #4]
 8005cfe:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <HAL_MspInit+0x50>)
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	4a10      	ldr	r2, [pc, #64]	; (8005d44 <HAL_MspInit+0x50>)
 8005d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d08:	6453      	str	r3, [r2, #68]	; 0x44
 8005d0a:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <HAL_MspInit+0x50>)
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d12:	607b      	str	r3, [r7, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d16:	2300      	movs	r3, #0
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <HAL_MspInit+0x50>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <HAL_MspInit+0x50>)
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6413      	str	r3, [r2, #64]	; 0x40
 8005d26:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <HAL_MspInit+0x50>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d32:	2003      	movs	r0, #3
 8005d34:	f000 fa29 	bl	800618a <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 8005d38:	f7fd f81e 	bl	8002d78 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40023800 	.word	0x40023800

08005d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d50:	f107 0314 	add.w	r3, r7, #20
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1d      	ldr	r2, [pc, #116]	; (8005ddc <HAL_UART_MspInit+0x94>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d133      	bne.n	8005dd2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	4b1c      	ldr	r3, [pc, #112]	; (8005de0 <HAL_UART_MspInit+0x98>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <HAL_UART_MspInit+0x98>)
 8005d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d78:	6413      	str	r3, [r2, #64]	; 0x40
 8005d7a:	4b19      	ldr	r3, [pc, #100]	; (8005de0 <HAL_UART_MspInit+0x98>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <HAL_UART_MspInit+0x98>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	4a14      	ldr	r2, [pc, #80]	; (8005de0 <HAL_UART_MspInit+0x98>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6313      	str	r3, [r2, #48]	; 0x30
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <HAL_UART_MspInit+0x98>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005da2:	230c      	movs	r3, #12
 8005da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da6:	2302      	movs	r3, #2
 8005da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dae:	2303      	movs	r3, #3
 8005db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005db2:	2307      	movs	r3, #7
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005db6:	f107 0314 	add.w	r3, r7, #20
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4809      	ldr	r0, [pc, #36]	; (8005de4 <HAL_UART_MspInit+0x9c>)
 8005dbe:	f000 faab 	bl	8006318 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	210f      	movs	r1, #15
 8005dc6:	2026      	movs	r0, #38	; 0x26
 8005dc8:	f000 f9ea 	bl	80061a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005dcc:	2026      	movs	r0, #38	; 0x26
 8005dce:	f000 fa03 	bl	80061d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005dd2:	bf00      	nop
 8005dd4:	3728      	adds	r7, #40	; 0x28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40004400 	.word	0x40004400
 8005de0:	40023800 	.word	0x40023800
 8005de4:	40020000 	.word	0x40020000

08005de8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08e      	sub	sp, #56	; 0x38
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	4b33      	ldr	r3, [pc, #204]	; (8005ecc <HAL_InitTick+0xe4>)
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	4a32      	ldr	r2, [pc, #200]	; (8005ecc <HAL_InitTick+0xe4>)
 8005e02:	f043 0310 	orr.w	r3, r3, #16
 8005e06:	6413      	str	r3, [r2, #64]	; 0x40
 8005e08:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <HAL_InitTick+0xe4>)
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005e14:	f107 0210 	add.w	r2, r7, #16
 8005e18:	f107 0314 	add.w	r3, r7, #20
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 f8e2 	bl	8006fe8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005e2e:	f001 f8b3 	bl	8006f98 <HAL_RCC_GetPCLK1Freq>
 8005e32:	6378      	str	r0, [r7, #52]	; 0x34
 8005e34:	e004      	b.n	8005e40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005e36:	f001 f8af 	bl	8006f98 <HAL_RCC_GetPCLK1Freq>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e42:	4a23      	ldr	r2, [pc, #140]	; (8005ed0 <HAL_InitTick+0xe8>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	0c9b      	lsrs	r3, r3, #18
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005e4e:	4b21      	ldr	r3, [pc, #132]	; (8005ed4 <HAL_InitTick+0xec>)
 8005e50:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <HAL_InitTick+0xf0>)
 8005e52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005e54:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <HAL_InitTick+0xec>)
 8005e56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_InitTick+0xec>)
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <HAL_InitTick+0xec>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e68:	4b1a      	ldr	r3, [pc, #104]	; (8005ed4 <HAL_InitTick+0xec>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e6e:	4b19      	ldr	r3, [pc, #100]	; (8005ed4 <HAL_InitTick+0xec>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005e74:	4817      	ldr	r0, [pc, #92]	; (8005ed4 <HAL_InitTick+0xec>)
 8005e76:	f001 f8e9 	bl	800704c <HAL_TIM_Base_Init>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005e80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11b      	bne.n	8005ec0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005e88:	4812      	ldr	r0, [pc, #72]	; (8005ed4 <HAL_InitTick+0xec>)
 8005e8a:	f001 f939 	bl	8007100 <HAL_TIM_Base_Start_IT>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005e94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d111      	bne.n	8005ec0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005e9c:	2036      	movs	r0, #54	; 0x36
 8005e9e:	f000 f99b 	bl	80061d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b0f      	cmp	r3, #15
 8005ea6:	d808      	bhi.n	8005eba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	2036      	movs	r0, #54	; 0x36
 8005eae:	f000 f977 	bl	80061a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <HAL_InitTick+0xf4>)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	e002      	b.n	8005ec0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3738      	adds	r7, #56	; 0x38
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	431bde83 	.word	0x431bde83
 8005ed4:	200144cc 	.word	0x200144cc
 8005ed8:	40001000 	.word	0x40001000
 8005edc:	20000010 	.word	0x20000010

08005ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ee4:	e7fe      	b.n	8005ee4 <NMI_Handler+0x4>

08005ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005eea:	e7fe      	b.n	8005eea <HardFault_Handler+0x4>

08005eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ef0:	e7fe      	b.n	8005ef0 <MemManage_Handler+0x4>

08005ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ef6:	e7fe      	b.n	8005ef6 <BusFault_Handler+0x4>

08005ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005efc:	e7fe      	b.n	8005efc <UsageFault_Handler+0x4>

08005efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f10:	4802      	ldr	r0, [pc, #8]	; (8005f1c <USART2_IRQHandler+0x10>)
 8005f12:	f001 fc59 	bl	80077c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005f16:	bf00      	nop
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20014454 	.word	0x20014454

08005f20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005f24:	4802      	ldr	r0, [pc, #8]	; (8005f30 <TIM6_DAC_IRQHandler+0x10>)
 8005f26:	f001 f95b 	bl	80071e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005f2a:	bf00      	nop
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200144cc 	.word	0x200144cc

08005f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f38:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <SystemInit+0x20>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3e:	4a05      	ldr	r2, [pc, #20]	; (8005f54 <SystemInit+0x20>)
 8005f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f48:	bf00      	nop
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	e000ed00 	.word	0xe000ed00

08005f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f5c:	480d      	ldr	r0, [pc, #52]	; (8005f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005f5e:	490e      	ldr	r1, [pc, #56]	; (8005f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005f60:	4a0e      	ldr	r2, [pc, #56]	; (8005f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f64:	e002      	b.n	8005f6c <LoopCopyDataInit>

08005f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f6a:	3304      	adds	r3, #4

08005f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f70:	d3f9      	bcc.n	8005f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f72:	4a0b      	ldr	r2, [pc, #44]	; (8005fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005f74:	4c0b      	ldr	r4, [pc, #44]	; (8005fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f78:	e001      	b.n	8005f7e <LoopFillZerobss>

08005f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f7c:	3204      	adds	r2, #4

08005f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f80:	d3fb      	bcc.n	8005f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005f82:	f7ff ffd7 	bl	8005f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f86:	f002 fb87 	bl	8008698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f8a:	f7ff f857 	bl	800503c <main>
  bx  lr    
 8005f8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f98:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8005f9c:	08008c98 	.word	0x08008c98
  ldr r2, =_sbss
 8005fa0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8005fa4:	20014518 	.word	0x20014518

08005fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fa8:	e7fe      	b.n	8005fa8 <ADC_IRQHandler>
	...

08005fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <HAL_Init+0x40>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a0d      	ldr	r2, [pc, #52]	; (8005fec <HAL_Init+0x40>)
 8005fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <HAL_Init+0x40>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <HAL_Init+0x40>)
 8005fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fc8:	4b08      	ldr	r3, [pc, #32]	; (8005fec <HAL_Init+0x40>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a07      	ldr	r2, [pc, #28]	; (8005fec <HAL_Init+0x40>)
 8005fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fd4:	2003      	movs	r0, #3
 8005fd6:	f000 f8d8 	bl	800618a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f7ff ff04 	bl	8005de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fe0:	f7ff fe88 	bl	8005cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	40023c00 	.word	0x40023c00

08005ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ff4:	4b06      	ldr	r3, [pc, #24]	; (8006010 <HAL_IncTick+0x20>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4b06      	ldr	r3, [pc, #24]	; (8006014 <HAL_IncTick+0x24>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4413      	add	r3, r2
 8006000:	4a04      	ldr	r2, [pc, #16]	; (8006014 <HAL_IncTick+0x24>)
 8006002:	6013      	str	r3, [r2, #0]
}
 8006004:	bf00      	nop
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	20000014 	.word	0x20000014
 8006014:	20014514 	.word	0x20014514

08006018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  return uwTick;
 800601c:	4b03      	ldr	r3, [pc, #12]	; (800602c <HAL_GetTick+0x14>)
 800601e:	681b      	ldr	r3, [r3, #0]
}
 8006020:	4618      	mov	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	20014514 	.word	0x20014514

08006030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <__NVIC_SetPriorityGrouping+0x44>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800604c:	4013      	ands	r3, r2
 800604e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800605c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006062:	4a04      	ldr	r2, [pc, #16]	; (8006074 <__NVIC_SetPriorityGrouping+0x44>)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	60d3      	str	r3, [r2, #12]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	e000ed00 	.word	0xe000ed00

08006078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800607c:	4b04      	ldr	r3, [pc, #16]	; (8006090 <__NVIC_GetPriorityGrouping+0x18>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	0a1b      	lsrs	r3, r3, #8
 8006082:	f003 0307 	and.w	r3, r3, #7
}
 8006086:	4618      	mov	r0, r3
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	e000ed00 	.word	0xe000ed00

08006094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800609e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	db0b      	blt.n	80060be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	f003 021f 	and.w	r2, r3, #31
 80060ac:	4907      	ldr	r1, [pc, #28]	; (80060cc <__NVIC_EnableIRQ+0x38>)
 80060ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	2001      	movs	r0, #1
 80060b6:	fa00 f202 	lsl.w	r2, r0, r2
 80060ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	e000e100 	.word	0xe000e100

080060d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	6039      	str	r1, [r7, #0]
 80060da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	db0a      	blt.n	80060fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	490c      	ldr	r1, [pc, #48]	; (800611c <__NVIC_SetPriority+0x4c>)
 80060ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ee:	0112      	lsls	r2, r2, #4
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	440b      	add	r3, r1
 80060f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060f8:	e00a      	b.n	8006110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	4908      	ldr	r1, [pc, #32]	; (8006120 <__NVIC_SetPriority+0x50>)
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	3b04      	subs	r3, #4
 8006108:	0112      	lsls	r2, r2, #4
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	440b      	add	r3, r1
 800610e:	761a      	strb	r2, [r3, #24]
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	e000e100 	.word	0xe000e100
 8006120:	e000ed00 	.word	0xe000ed00

08006124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006124:	b480      	push	{r7}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f1c3 0307 	rsb	r3, r3, #7
 800613e:	2b04      	cmp	r3, #4
 8006140:	bf28      	it	cs
 8006142:	2304      	movcs	r3, #4
 8006144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	3304      	adds	r3, #4
 800614a:	2b06      	cmp	r3, #6
 800614c:	d902      	bls.n	8006154 <NVIC_EncodePriority+0x30>
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3b03      	subs	r3, #3
 8006152:	e000      	b.n	8006156 <NVIC_EncodePriority+0x32>
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43da      	mvns	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	401a      	ands	r2, r3
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800616c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	43d9      	mvns	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800617c:	4313      	orrs	r3, r2
         );
}
 800617e:	4618      	mov	r0, r3
 8006180:	3724      	adds	r7, #36	; 0x24
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff ff4c 	bl	8006030 <__NVIC_SetPriorityGrouping>
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061b2:	f7ff ff61 	bl	8006078 <__NVIC_GetPriorityGrouping>
 80061b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	6978      	ldr	r0, [r7, #20]
 80061be:	f7ff ffb1 	bl	8006124 <NVIC_EncodePriority>
 80061c2:	4602      	mov	r2, r0
 80061c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff ff80 	bl	80060d0 <__NVIC_SetPriority>
}
 80061d0:	bf00      	nop
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff ff54 	bl	8006094 <__NVIC_EnableIRQ>
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006200:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006202:	f7ff ff09 	bl	8006018 <HAL_GetTick>
 8006206:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d008      	beq.n	8006226 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2280      	movs	r2, #128	; 0x80
 8006218:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e052      	b.n	80062cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0216 	bic.w	r2, r2, #22
 8006234:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695a      	ldr	r2, [r3, #20]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006244:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <HAL_DMA_Abort+0x62>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0208 	bic.w	r2, r2, #8
 8006264:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006276:	e013      	b.n	80062a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006278:	f7ff fece 	bl	8006018 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b05      	cmp	r3, #5
 8006284:	d90c      	bls.n	80062a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2203      	movs	r2, #3
 8006290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e015      	b.n	80062cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e4      	bne.n	8006278 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b2:	223f      	movs	r2, #63	; 0x3f
 80062b4:	409a      	lsls	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d004      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2280      	movs	r2, #128	; 0x80
 80062ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e00c      	b.n	800630c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2205      	movs	r2, #5
 80062f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0201 	bic.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	; 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006326:	2300      	movs	r3, #0
 8006328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	e16b      	b.n	800660c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006334:	2201      	movs	r2, #1
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4013      	ands	r3, r2
 8006346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	429a      	cmp	r2, r3
 800634e:	f040 815a 	bne.w	8006606 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	2b01      	cmp	r3, #1
 800635c:	d005      	beq.n	800636a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006366:	2b02      	cmp	r3, #2
 8006368:	d130      	bne.n	80063cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	2203      	movs	r2, #3
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	43db      	mvns	r3, r3
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	4013      	ands	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4313      	orrs	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063a0:	2201      	movs	r2, #1
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	43db      	mvns	r3, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4013      	ands	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 0201 	and.w	r2, r3, #1
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d017      	beq.n	8006408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	2203      	movs	r2, #3
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	4013      	ands	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4313      	orrs	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d123      	bne.n	800645c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	08da      	lsrs	r2, r3, #3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3208      	adds	r2, #8
 800641c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	220f      	movs	r2, #15
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	43db      	mvns	r3, r3
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4013      	ands	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4313      	orrs	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	08da      	lsrs	r2, r3, #3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3208      	adds	r2, #8
 8006456:	69b9      	ldr	r1, [r7, #24]
 8006458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	2203      	movs	r2, #3
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	43db      	mvns	r3, r3
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	4013      	ands	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f003 0203 	and.w	r2, r3, #3
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4313      	orrs	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80b4 	beq.w	8006606 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	4b60      	ldr	r3, [pc, #384]	; (8006624 <HAL_GPIO_Init+0x30c>)
 80064a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a6:	4a5f      	ldr	r2, [pc, #380]	; (8006624 <HAL_GPIO_Init+0x30c>)
 80064a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ac:	6453      	str	r3, [r2, #68]	; 0x44
 80064ae:	4b5d      	ldr	r3, [pc, #372]	; (8006624 <HAL_GPIO_Init+0x30c>)
 80064b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064ba:	4a5b      	ldr	r2, [pc, #364]	; (8006628 <HAL_GPIO_Init+0x310>)
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	089b      	lsrs	r3, r3, #2
 80064c0:	3302      	adds	r3, #2
 80064c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	220f      	movs	r2, #15
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	43db      	mvns	r3, r3
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4013      	ands	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a52      	ldr	r2, [pc, #328]	; (800662c <HAL_GPIO_Init+0x314>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d02b      	beq.n	800653e <HAL_GPIO_Init+0x226>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a51      	ldr	r2, [pc, #324]	; (8006630 <HAL_GPIO_Init+0x318>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d025      	beq.n	800653a <HAL_GPIO_Init+0x222>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a50      	ldr	r2, [pc, #320]	; (8006634 <HAL_GPIO_Init+0x31c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01f      	beq.n	8006536 <HAL_GPIO_Init+0x21e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a4f      	ldr	r2, [pc, #316]	; (8006638 <HAL_GPIO_Init+0x320>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d019      	beq.n	8006532 <HAL_GPIO_Init+0x21a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a4e      	ldr	r2, [pc, #312]	; (800663c <HAL_GPIO_Init+0x324>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <HAL_GPIO_Init+0x216>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a4d      	ldr	r2, [pc, #308]	; (8006640 <HAL_GPIO_Init+0x328>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00d      	beq.n	800652a <HAL_GPIO_Init+0x212>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a4c      	ldr	r2, [pc, #304]	; (8006644 <HAL_GPIO_Init+0x32c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d007      	beq.n	8006526 <HAL_GPIO_Init+0x20e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a4b      	ldr	r2, [pc, #300]	; (8006648 <HAL_GPIO_Init+0x330>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d101      	bne.n	8006522 <HAL_GPIO_Init+0x20a>
 800651e:	2307      	movs	r3, #7
 8006520:	e00e      	b.n	8006540 <HAL_GPIO_Init+0x228>
 8006522:	2308      	movs	r3, #8
 8006524:	e00c      	b.n	8006540 <HAL_GPIO_Init+0x228>
 8006526:	2306      	movs	r3, #6
 8006528:	e00a      	b.n	8006540 <HAL_GPIO_Init+0x228>
 800652a:	2305      	movs	r3, #5
 800652c:	e008      	b.n	8006540 <HAL_GPIO_Init+0x228>
 800652e:	2304      	movs	r3, #4
 8006530:	e006      	b.n	8006540 <HAL_GPIO_Init+0x228>
 8006532:	2303      	movs	r3, #3
 8006534:	e004      	b.n	8006540 <HAL_GPIO_Init+0x228>
 8006536:	2302      	movs	r3, #2
 8006538:	e002      	b.n	8006540 <HAL_GPIO_Init+0x228>
 800653a:	2301      	movs	r3, #1
 800653c:	e000      	b.n	8006540 <HAL_GPIO_Init+0x228>
 800653e:	2300      	movs	r3, #0
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	f002 0203 	and.w	r2, r2, #3
 8006546:	0092      	lsls	r2, r2, #2
 8006548:	4093      	lsls	r3, r2
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	4313      	orrs	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006550:	4935      	ldr	r1, [pc, #212]	; (8006628 <HAL_GPIO_Init+0x310>)
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	089b      	lsrs	r3, r3, #2
 8006556:	3302      	adds	r3, #2
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800655e:	4b3b      	ldr	r3, [pc, #236]	; (800664c <HAL_GPIO_Init+0x334>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	43db      	mvns	r3, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	4013      	ands	r3, r2
 800656c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006582:	4a32      	ldr	r2, [pc, #200]	; (800664c <HAL_GPIO_Init+0x334>)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006588:	4b30      	ldr	r3, [pc, #192]	; (800664c <HAL_GPIO_Init+0x334>)
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	43db      	mvns	r3, r3
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	4013      	ands	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065ac:	4a27      	ldr	r2, [pc, #156]	; (800664c <HAL_GPIO_Init+0x334>)
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065b2:	4b26      	ldr	r3, [pc, #152]	; (800664c <HAL_GPIO_Init+0x334>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	43db      	mvns	r3, r3
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	4013      	ands	r3, r2
 80065c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065d6:	4a1d      	ldr	r2, [pc, #116]	; (800664c <HAL_GPIO_Init+0x334>)
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <HAL_GPIO_Init+0x334>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	43db      	mvns	r3, r3
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	4013      	ands	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006600:	4a12      	ldr	r2, [pc, #72]	; (800664c <HAL_GPIO_Init+0x334>)
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	3301      	adds	r3, #1
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b0f      	cmp	r3, #15
 8006610:	f67f ae90 	bls.w	8006334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	3724      	adds	r7, #36	; 0x24
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40023800 	.word	0x40023800
 8006628:	40013800 	.word	0x40013800
 800662c:	40020000 	.word	0x40020000
 8006630:	40020400 	.word	0x40020400
 8006634:	40020800 	.word	0x40020800
 8006638:	40020c00 	.word	0x40020c00
 800663c:	40021000 	.word	0x40021000
 8006640:	40021400 	.word	0x40021400
 8006644:	40021800 	.word	0x40021800
 8006648:	40021c00 	.word	0x40021c00
 800664c:	40013c00 	.word	0x40013c00

08006650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	807b      	strh	r3, [r7, #2]
 800665c:	4613      	mov	r3, r2
 800665e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006660:	787b      	ldrb	r3, [r7, #1]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006666:	887a      	ldrh	r2, [r7, #2]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800666c:	e003      	b.n	8006676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800666e:	887b      	ldrh	r3, [r7, #2]
 8006670:	041a      	lsls	r2, r3, #16
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	619a      	str	r2, [r3, #24]
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006694:	887a      	ldrh	r2, [r7, #2]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4013      	ands	r3, r2
 800669a:	041a      	lsls	r2, r3, #16
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	43d9      	mvns	r1, r3
 80066a0:	887b      	ldrh	r3, [r7, #2]
 80066a2:	400b      	ands	r3, r1
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	619a      	str	r2, [r3, #24]
}
 80066aa:	bf00      	nop
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e267      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d075      	beq.n	80067c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066d6:	4b88      	ldr	r3, [pc, #544]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d00c      	beq.n	80066fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066e2:	4b85      	ldr	r3, [pc, #532]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d112      	bne.n	8006714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ee:	4b82      	ldr	r3, [pc, #520]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066fa:	d10b      	bne.n	8006714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066fc:	4b7e      	ldr	r3, [pc, #504]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d05b      	beq.n	80067c0 <HAL_RCC_OscConfig+0x108>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d157      	bne.n	80067c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e242      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800671c:	d106      	bne.n	800672c <HAL_RCC_OscConfig+0x74>
 800671e:	4b76      	ldr	r3, [pc, #472]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a75      	ldr	r2, [pc, #468]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	e01d      	b.n	8006768 <HAL_RCC_OscConfig+0xb0>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006734:	d10c      	bne.n	8006750 <HAL_RCC_OscConfig+0x98>
 8006736:	4b70      	ldr	r3, [pc, #448]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a6f      	ldr	r2, [pc, #444]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 800673c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	4b6d      	ldr	r3, [pc, #436]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a6c      	ldr	r2, [pc, #432]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e00b      	b.n	8006768 <HAL_RCC_OscConfig+0xb0>
 8006750:	4b69      	ldr	r3, [pc, #420]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a68      	ldr	r2, [pc, #416]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4b66      	ldr	r3, [pc, #408]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a65      	ldr	r2, [pc, #404]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006770:	f7ff fc52 	bl	8006018 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006778:	f7ff fc4e 	bl	8006018 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	; 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e207      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678a:	4b5b      	ldr	r3, [pc, #364]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0xc0>
 8006796:	e014      	b.n	80067c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006798:	f7ff fc3e 	bl	8006018 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067a0:	f7ff fc3a 	bl	8006018 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b64      	cmp	r3, #100	; 0x64
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e1f3      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067b2:	4b51      	ldr	r3, [pc, #324]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f0      	bne.n	80067a0 <HAL_RCC_OscConfig+0xe8>
 80067be:	e000      	b.n	80067c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d063      	beq.n	8006896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067ce:	4b4a      	ldr	r3, [pc, #296]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 030c 	and.w	r3, r3, #12
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067da:	4b47      	ldr	r3, [pc, #284]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d11c      	bne.n	8006820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067e6:	4b44      	ldr	r3, [pc, #272]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d116      	bne.n	8006820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f2:	4b41      	ldr	r3, [pc, #260]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_RCC_OscConfig+0x152>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d001      	beq.n	800680a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e1c7      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680a:	4b3b      	ldr	r3, [pc, #236]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4937      	ldr	r1, [pc, #220]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 800681a:	4313      	orrs	r3, r2
 800681c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800681e:	e03a      	b.n	8006896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d020      	beq.n	800686a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006828:	4b34      	ldr	r3, [pc, #208]	; (80068fc <HAL_RCC_OscConfig+0x244>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682e:	f7ff fbf3 	bl	8006018 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006836:	f7ff fbef 	bl	8006018 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e1a8      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006848:	4b2b      	ldr	r3, [pc, #172]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006854:	4b28      	ldr	r3, [pc, #160]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	4925      	ldr	r1, [pc, #148]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006864:	4313      	orrs	r3, r2
 8006866:	600b      	str	r3, [r1, #0]
 8006868:	e015      	b.n	8006896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800686a:	4b24      	ldr	r3, [pc, #144]	; (80068fc <HAL_RCC_OscConfig+0x244>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006870:	f7ff fbd2 	bl	8006018 <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006878:	f7ff fbce 	bl	8006018 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e187      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800688a:	4b1b      	ldr	r3, [pc, #108]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f0      	bne.n	8006878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d036      	beq.n	8006910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d016      	beq.n	80068d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <HAL_RCC_OscConfig+0x248>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b0:	f7ff fbb2 	bl	8006018 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068b8:	f7ff fbae 	bl	8006018 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e167      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <HAL_RCC_OscConfig+0x240>)
 80068cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f0      	beq.n	80068b8 <HAL_RCC_OscConfig+0x200>
 80068d6:	e01b      	b.n	8006910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068d8:	4b09      	ldr	r3, [pc, #36]	; (8006900 <HAL_RCC_OscConfig+0x248>)
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068de:	f7ff fb9b 	bl	8006018 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068e4:	e00e      	b.n	8006904 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068e6:	f7ff fb97 	bl	8006018 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d907      	bls.n	8006904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e150      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
 80068f8:	40023800 	.word	0x40023800
 80068fc:	42470000 	.word	0x42470000
 8006900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006904:	4b88      	ldr	r3, [pc, #544]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1ea      	bne.n	80068e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 8097 	beq.w	8006a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800691e:	2300      	movs	r3, #0
 8006920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006922:	4b81      	ldr	r3, [pc, #516]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10f      	bne.n	800694e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	4b7d      	ldr	r3, [pc, #500]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	4a7c      	ldr	r2, [pc, #496]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693c:	6413      	str	r3, [r2, #64]	; 0x40
 800693e:	4b7a      	ldr	r3, [pc, #488]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006946:	60bb      	str	r3, [r7, #8]
 8006948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800694a:	2301      	movs	r3, #1
 800694c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800694e:	4b77      	ldr	r3, [pc, #476]	; (8006b2c <HAL_RCC_OscConfig+0x474>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d118      	bne.n	800698c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800695a:	4b74      	ldr	r3, [pc, #464]	; (8006b2c <HAL_RCC_OscConfig+0x474>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a73      	ldr	r2, [pc, #460]	; (8006b2c <HAL_RCC_OscConfig+0x474>)
 8006960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006966:	f7ff fb57 	bl	8006018 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800696c:	e008      	b.n	8006980 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800696e:	f7ff fb53 	bl	8006018 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e10c      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006980:	4b6a      	ldr	r3, [pc, #424]	; (8006b2c <HAL_RCC_OscConfig+0x474>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f0      	beq.n	800696e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d106      	bne.n	80069a2 <HAL_RCC_OscConfig+0x2ea>
 8006994:	4b64      	ldr	r3, [pc, #400]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006998:	4a63      	ldr	r2, [pc, #396]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 800699a:	f043 0301 	orr.w	r3, r3, #1
 800699e:	6713      	str	r3, [r2, #112]	; 0x70
 80069a0:	e01c      	b.n	80069dc <HAL_RCC_OscConfig+0x324>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d10c      	bne.n	80069c4 <HAL_RCC_OscConfig+0x30c>
 80069aa:	4b5f      	ldr	r3, [pc, #380]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ae:	4a5e      	ldr	r2, [pc, #376]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069b0:	f043 0304 	orr.w	r3, r3, #4
 80069b4:	6713      	str	r3, [r2, #112]	; 0x70
 80069b6:	4b5c      	ldr	r3, [pc, #368]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ba:	4a5b      	ldr	r2, [pc, #364]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	6713      	str	r3, [r2, #112]	; 0x70
 80069c2:	e00b      	b.n	80069dc <HAL_RCC_OscConfig+0x324>
 80069c4:	4b58      	ldr	r3, [pc, #352]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c8:	4a57      	ldr	r2, [pc, #348]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	6713      	str	r3, [r2, #112]	; 0x70
 80069d0:	4b55      	ldr	r3, [pc, #340]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d4:	4a54      	ldr	r2, [pc, #336]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069d6:	f023 0304 	bic.w	r3, r3, #4
 80069da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d015      	beq.n	8006a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e4:	f7ff fb18 	bl	8006018 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ea:	e00a      	b.n	8006a02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ec:	f7ff fb14 	bl	8006018 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e0cb      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a02:	4b49      	ldr	r3, [pc, #292]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0ee      	beq.n	80069ec <HAL_RCC_OscConfig+0x334>
 8006a0e:	e014      	b.n	8006a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a10:	f7ff fb02 	bl	8006018 <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a16:	e00a      	b.n	8006a2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a18:	f7ff fafe 	bl	8006018 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e0b5      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a2e:	4b3e      	ldr	r3, [pc, #248]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1ee      	bne.n	8006a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d105      	bne.n	8006a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a40:	4b39      	ldr	r3, [pc, #228]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a44:	4a38      	ldr	r2, [pc, #224]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80a1 	beq.w	8006b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a56:	4b34      	ldr	r3, [pc, #208]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 030c 	and.w	r3, r3, #12
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d05c      	beq.n	8006b1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d141      	bne.n	8006aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a6a:	4b31      	ldr	r3, [pc, #196]	; (8006b30 <HAL_RCC_OscConfig+0x478>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a70:	f7ff fad2 	bl	8006018 <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a78:	f7ff face 	bl	8006018 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e087      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a8a:	4b27      	ldr	r3, [pc, #156]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f0      	bne.n	8006a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69da      	ldr	r2, [r3, #28]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	019b      	lsls	r3, r3, #6
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	061b      	lsls	r3, r3, #24
 8006aba:	491b      	ldr	r1, [pc, #108]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ac0:	4b1b      	ldr	r3, [pc, #108]	; (8006b30 <HAL_RCC_OscConfig+0x478>)
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac6:	f7ff faa7 	bl	8006018 <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ace:	f7ff faa3 	bl	8006018 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e05c      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ae0:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d0f0      	beq.n	8006ace <HAL_RCC_OscConfig+0x416>
 8006aec:	e054      	b.n	8006b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <HAL_RCC_OscConfig+0x478>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af4:	f7ff fa90 	bl	8006018 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006afc:	f7ff fa8c 	bl	8006018 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e045      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b0e:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f0      	bne.n	8006afc <HAL_RCC_OscConfig+0x444>
 8006b1a:	e03d      	b.n	8006b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d107      	bne.n	8006b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e038      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	40007000 	.word	0x40007000
 8006b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b34:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <HAL_RCC_OscConfig+0x4ec>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d028      	beq.n	8006b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d121      	bne.n	8006b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d11a      	bne.n	8006b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b64:	4013      	ands	r3, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d111      	bne.n	8006b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	085b      	lsrs	r3, r3, #1
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d107      	bne.n	8006b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d001      	beq.n	8006b98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40023800 	.word	0x40023800

08006ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0cc      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bbc:	4b68      	ldr	r3, [pc, #416]	; (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d90c      	bls.n	8006be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bca:	4b65      	ldr	r3, [pc, #404]	; (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd2:	4b63      	ldr	r3, [pc, #396]	; (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e0b8      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d020      	beq.n	8006c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bfc:	4b59      	ldr	r3, [pc, #356]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	4a58      	ldr	r2, [pc, #352]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c14:	4b53      	ldr	r3, [pc, #332]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4a52      	ldr	r2, [pc, #328]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c20:	4b50      	ldr	r3, [pc, #320]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	494d      	ldr	r1, [pc, #308]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d044      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d107      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c46:	4b47      	ldr	r3, [pc, #284]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d119      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e07f      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d003      	beq.n	8006c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d107      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c66:	4b3f      	ldr	r3, [pc, #252]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e06f      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c76:	4b3b      	ldr	r3, [pc, #236]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e067      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c86:	4b37      	ldr	r3, [pc, #220]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f023 0203 	bic.w	r2, r3, #3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	4934      	ldr	r1, [pc, #208]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c98:	f7ff f9be 	bl	8006018 <HAL_GetTick>
 8006c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c9e:	e00a      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca0:	f7ff f9ba 	bl	8006018 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e04f      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cb6:	4b2b      	ldr	r3, [pc, #172]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 020c 	and.w	r2, r3, #12
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d1eb      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cc8:	4b25      	ldr	r3, [pc, #148]	; (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d20c      	bcs.n	8006cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cd6:	4b22      	ldr	r3, [pc, #136]	; (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cde:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e032      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cfc:	4b19      	ldr	r3, [pc, #100]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4916      	ldr	r1, [pc, #88]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d1a:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	490e      	ldr	r1, [pc, #56]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d2e:	f000 f821 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8006d32:	4602      	mov	r2, r0
 8006d34:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	091b      	lsrs	r3, r3, #4
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	490a      	ldr	r1, [pc, #40]	; (8006d68 <HAL_RCC_ClockConfig+0x1c0>)
 8006d40:	5ccb      	ldrb	r3, [r1, r3]
 8006d42:	fa22 f303 	lsr.w	r3, r2, r3
 8006d46:	4a09      	ldr	r2, [pc, #36]	; (8006d6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d4a:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <HAL_RCC_ClockConfig+0x1c8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff f84a 	bl	8005de8 <HAL_InitTick>

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40023c00 	.word	0x40023c00
 8006d64:	40023800 	.word	0x40023800
 8006d68:	08008c70 	.word	0x08008c70
 8006d6c:	2000000c 	.word	0x2000000c
 8006d70:	20000010 	.word	0x20000010

08006d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d78:	b094      	sub	sp, #80	; 0x50
 8006d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d80:	2300      	movs	r3, #0
 8006d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d84:	2300      	movs	r3, #0
 8006d86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d8c:	4b79      	ldr	r3, [pc, #484]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 030c 	and.w	r3, r3, #12
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d00d      	beq.n	8006db4 <HAL_RCC_GetSysClockFreq+0x40>
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	f200 80e1 	bhi.w	8006f60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_RCC_GetSysClockFreq+0x34>
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d003      	beq.n	8006dae <HAL_RCC_GetSysClockFreq+0x3a>
 8006da6:	e0db      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006da8:	4b73      	ldr	r3, [pc, #460]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8006daa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006dac:	e0db      	b.n	8006f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dae:	4b73      	ldr	r3, [pc, #460]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x208>)
 8006db0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006db2:	e0d8      	b.n	8006f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006db4:	4b6f      	ldr	r3, [pc, #444]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dbe:	4b6d      	ldr	r3, [pc, #436]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d063      	beq.n	8006e92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dca:	4b6a      	ldr	r3, [pc, #424]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	099b      	lsrs	r3, r3, #6
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8006dde:	2300      	movs	r3, #0
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
 8006de2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006de6:	4622      	mov	r2, r4
 8006de8:	462b      	mov	r3, r5
 8006dea:	f04f 0000 	mov.w	r0, #0
 8006dee:	f04f 0100 	mov.w	r1, #0
 8006df2:	0159      	lsls	r1, r3, #5
 8006df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006df8:	0150      	lsls	r0, r2, #5
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4621      	mov	r1, r4
 8006e00:	1a51      	subs	r1, r2, r1
 8006e02:	6139      	str	r1, [r7, #16]
 8006e04:	4629      	mov	r1, r5
 8006e06:	eb63 0301 	sbc.w	r3, r3, r1
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e18:	4659      	mov	r1, fp
 8006e1a:	018b      	lsls	r3, r1, #6
 8006e1c:	4651      	mov	r1, sl
 8006e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e22:	4651      	mov	r1, sl
 8006e24:	018a      	lsls	r2, r1, #6
 8006e26:	4651      	mov	r1, sl
 8006e28:	ebb2 0801 	subs.w	r8, r2, r1
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	eb63 0901 	sbc.w	r9, r3, r1
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e46:	4690      	mov	r8, r2
 8006e48:	4699      	mov	r9, r3
 8006e4a:	4623      	mov	r3, r4
 8006e4c:	eb18 0303 	adds.w	r3, r8, r3
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	462b      	mov	r3, r5
 8006e54:	eb49 0303 	adc.w	r3, r9, r3
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e66:	4629      	mov	r1, r5
 8006e68:	024b      	lsls	r3, r1, #9
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e70:	4621      	mov	r1, r4
 8006e72:	024a      	lsls	r2, r1, #9
 8006e74:	4610      	mov	r0, r2
 8006e76:	4619      	mov	r1, r3
 8006e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e84:	f7f9 f9f6 	bl	8000274 <__aeabi_uldivmod>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e90:	e058      	b.n	8006f44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e92:	4b38      	ldr	r3, [pc, #224]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	099b      	lsrs	r3, r3, #6
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ea2:	623b      	str	r3, [r7, #32]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	f04f 0000 	mov.w	r0, #0
 8006eb4:	f04f 0100 	mov.w	r1, #0
 8006eb8:	0159      	lsls	r1, r3, #5
 8006eba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ebe:	0150      	lsls	r0, r2, #5
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4641      	mov	r1, r8
 8006ec6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006eca:	4649      	mov	r1, r9
 8006ecc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006edc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ee0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ee4:	ebb2 040a 	subs.w	r4, r2, sl
 8006ee8:	eb63 050b 	sbc.w	r5, r3, fp
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	00eb      	lsls	r3, r5, #3
 8006ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006efa:	00e2      	lsls	r2, r4, #3
 8006efc:	4614      	mov	r4, r2
 8006efe:	461d      	mov	r5, r3
 8006f00:	4643      	mov	r3, r8
 8006f02:	18e3      	adds	r3, r4, r3
 8006f04:	603b      	str	r3, [r7, #0]
 8006f06:	464b      	mov	r3, r9
 8006f08:	eb45 0303 	adc.w	r3, r5, r3
 8006f0c:	607b      	str	r3, [r7, #4]
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	028b      	lsls	r3, r1, #10
 8006f1e:	4621      	mov	r1, r4
 8006f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f24:	4621      	mov	r1, r4
 8006f26:	028a      	lsls	r2, r1, #10
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f2e:	2200      	movs	r2, #0
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	61fa      	str	r2, [r7, #28]
 8006f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f38:	f7f9 f99c 	bl	8000274 <__aeabi_uldivmod>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4613      	mov	r3, r2
 8006f42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f44:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	0c1b      	lsrs	r3, r3, #16
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	3301      	adds	r3, #1
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f5e:	e002      	b.n	8006f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3750      	adds	r7, #80	; 0x50
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f72:	bf00      	nop
 8006f74:	40023800 	.word	0x40023800
 8006f78:	00f42400 	.word	0x00f42400
 8006f7c:	007a1200 	.word	0x007a1200

08006f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f84:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f86:	681b      	ldr	r3, [r3, #0]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	2000000c 	.word	0x2000000c

08006f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f9c:	f7ff fff0 	bl	8006f80 <HAL_RCC_GetHCLKFreq>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	0a9b      	lsrs	r3, r3, #10
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	4903      	ldr	r1, [pc, #12]	; (8006fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fae:	5ccb      	ldrb	r3, [r1, r3]
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	08008c80 	.word	0x08008c80

08006fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fc4:	f7ff ffdc 	bl	8006f80 <HAL_RCC_GetHCLKFreq>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	0b5b      	lsrs	r3, r3, #13
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	4903      	ldr	r1, [pc, #12]	; (8006fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fd6:	5ccb      	ldrb	r3, [r1, r3]
 8006fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	08008c80 	.word	0x08008c80

08006fe8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	220f      	movs	r2, #15
 8006ff6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ff8:	4b12      	ldr	r3, [pc, #72]	; (8007044 <HAL_RCC_GetClockConfig+0x5c>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0203 	and.w	r2, r3, #3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007004:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <HAL_RCC_GetClockConfig+0x5c>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007010:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <HAL_RCC_GetClockConfig+0x5c>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_RCC_GetClockConfig+0x5c>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	08db      	lsrs	r3, r3, #3
 8007022:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <HAL_RCC_GetClockConfig+0x60>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0207 	and.w	r2, r3, #7
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	601a      	str	r2, [r3, #0]
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40023800 	.word	0x40023800
 8007048:	40023c00 	.word	0x40023c00

0800704c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e041      	b.n	80070e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d106      	bne.n	8007078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f839 	bl	80070ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3304      	adds	r3, #4
 8007088:	4619      	mov	r1, r3
 800708a:	4610      	mov	r0, r2
 800708c:	f000 f9d8 	bl	8007440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b083      	sub	sp, #12
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80070f2:	bf00      	nop
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
	...

08007100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	d001      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e04e      	b.n	80071b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a23      	ldr	r2, [pc, #140]	; (80071c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d022      	beq.n	8007180 <HAL_TIM_Base_Start_IT+0x80>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007142:	d01d      	beq.n	8007180 <HAL_TIM_Base_Start_IT+0x80>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d018      	beq.n	8007180 <HAL_TIM_Base_Start_IT+0x80>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <HAL_TIM_Base_Start_IT+0xcc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d013      	beq.n	8007180 <HAL_TIM_Base_Start_IT+0x80>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00e      	beq.n	8007180 <HAL_TIM_Base_Start_IT+0x80>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d009      	beq.n	8007180 <HAL_TIM_Base_Start_IT+0x80>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <HAL_TIM_Base_Start_IT+0x80>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a18      	ldr	r2, [pc, #96]	; (80071dc <HAL_TIM_Base_Start_IT+0xdc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d111      	bne.n	80071a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b06      	cmp	r3, #6
 8007190:	d010      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0201 	orr.w	r2, r2, #1
 80071a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a2:	e007      	b.n	80071b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40000c00 	.word	0x40000c00
 80071d4:	40010400 	.word	0x40010400
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40001800 	.word	0x40001800

080071e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d122      	bne.n	800723c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b02      	cmp	r3, #2
 8007202:	d11b      	bne.n	800723c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f06f 0202 	mvn.w	r2, #2
 800720c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	f003 0303 	and.w	r3, r3, #3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f8ee 	bl	8007404 <HAL_TIM_IC_CaptureCallback>
 8007228:	e005      	b.n	8007236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f8e0 	bl	80073f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f8f1 	bl	8007418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b04      	cmp	r3, #4
 8007248:	d122      	bne.n	8007290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b04      	cmp	r3, #4
 8007256:	d11b      	bne.n	8007290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0204 	mvn.w	r2, #4
 8007260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8c4 	bl	8007404 <HAL_TIM_IC_CaptureCallback>
 800727c:	e005      	b.n	800728a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f8b6 	bl	80073f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f8c7 	bl	8007418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b08      	cmp	r3, #8
 800729c:	d122      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d11b      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0208 	mvn.w	r2, #8
 80072b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2204      	movs	r2, #4
 80072ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f89a 	bl	8007404 <HAL_TIM_IC_CaptureCallback>
 80072d0:	e005      	b.n	80072de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f88c 	bl	80073f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f89d 	bl	8007418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0310 	and.w	r3, r3, #16
 80072ee:	2b10      	cmp	r3, #16
 80072f0:	d122      	bne.n	8007338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0310 	and.w	r3, r3, #16
 80072fc:	2b10      	cmp	r3, #16
 80072fe:	d11b      	bne.n	8007338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0210 	mvn.w	r2, #16
 8007308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2208      	movs	r2, #8
 800730e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f870 	bl	8007404 <HAL_TIM_IC_CaptureCallback>
 8007324:	e005      	b.n	8007332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f862 	bl	80073f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f873 	bl	8007418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b01      	cmp	r3, #1
 8007344:	d10e      	bne.n	8007364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b01      	cmp	r3, #1
 8007352:	d107      	bne.n	8007364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0201 	mvn.w	r2, #1
 800735c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fe fcb0 	bl	8005cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736e:	2b80      	cmp	r3, #128	; 0x80
 8007370:	d10e      	bne.n	8007390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737c:	2b80      	cmp	r3, #128	; 0x80
 800737e:	d107      	bne.n	8007390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f902 	bl	8007594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d10e      	bne.n	80073bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b40      	cmp	r3, #64	; 0x40
 80073aa:	d107      	bne.n	80073bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f838 	bl	800742c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d10e      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	d107      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0220 	mvn.w	r2, #32
 80073e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f8cc 	bl	8007580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a40      	ldr	r2, [pc, #256]	; (8007554 <TIM_Base_SetConfig+0x114>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d013      	beq.n	8007480 <TIM_Base_SetConfig+0x40>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745e:	d00f      	beq.n	8007480 <TIM_Base_SetConfig+0x40>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a3d      	ldr	r2, [pc, #244]	; (8007558 <TIM_Base_SetConfig+0x118>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d00b      	beq.n	8007480 <TIM_Base_SetConfig+0x40>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a3c      	ldr	r2, [pc, #240]	; (800755c <TIM_Base_SetConfig+0x11c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d007      	beq.n	8007480 <TIM_Base_SetConfig+0x40>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a3b      	ldr	r2, [pc, #236]	; (8007560 <TIM_Base_SetConfig+0x120>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d003      	beq.n	8007480 <TIM_Base_SetConfig+0x40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a3a      	ldr	r2, [pc, #232]	; (8007564 <TIM_Base_SetConfig+0x124>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d108      	bne.n	8007492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a2f      	ldr	r2, [pc, #188]	; (8007554 <TIM_Base_SetConfig+0x114>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d02b      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a0:	d027      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a2c      	ldr	r2, [pc, #176]	; (8007558 <TIM_Base_SetConfig+0x118>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d023      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a2b      	ldr	r2, [pc, #172]	; (800755c <TIM_Base_SetConfig+0x11c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d01f      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a2a      	ldr	r2, [pc, #168]	; (8007560 <TIM_Base_SetConfig+0x120>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01b      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a29      	ldr	r2, [pc, #164]	; (8007564 <TIM_Base_SetConfig+0x124>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d017      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a28      	ldr	r2, [pc, #160]	; (8007568 <TIM_Base_SetConfig+0x128>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a27      	ldr	r2, [pc, #156]	; (800756c <TIM_Base_SetConfig+0x12c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00f      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a26      	ldr	r2, [pc, #152]	; (8007570 <TIM_Base_SetConfig+0x130>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00b      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a25      	ldr	r2, [pc, #148]	; (8007574 <TIM_Base_SetConfig+0x134>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d007      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a24      	ldr	r2, [pc, #144]	; (8007578 <TIM_Base_SetConfig+0x138>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a23      	ldr	r2, [pc, #140]	; (800757c <TIM_Base_SetConfig+0x13c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d108      	bne.n	8007504 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a0a      	ldr	r2, [pc, #40]	; (8007554 <TIM_Base_SetConfig+0x114>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_Base_SetConfig+0xf8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a0c      	ldr	r2, [pc, #48]	; (8007564 <TIM_Base_SetConfig+0x124>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d103      	bne.n	8007540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	615a      	str	r2, [r3, #20]
}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40010000 	.word	0x40010000
 8007558:	40000400 	.word	0x40000400
 800755c:	40000800 	.word	0x40000800
 8007560:	40000c00 	.word	0x40000c00
 8007564:	40010400 	.word	0x40010400
 8007568:	40014000 	.word	0x40014000
 800756c:	40014400 	.word	0x40014400
 8007570:	40014800 	.word	0x40014800
 8007574:	40001800 	.word	0x40001800
 8007578:	40001c00 	.word	0x40001c00
 800757c:	40002000 	.word	0x40002000

08007580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e03f      	b.n	800763a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fe fbba 	bl	8005d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2224      	movs	r2, #36	; 0x24
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fddf 	bl	80081b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	695a      	ldr	r2, [r3, #20]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2220      	movs	r2, #32
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b08a      	sub	sp, #40	; 0x28
 8007646:	af02      	add	r7, sp, #8
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	603b      	str	r3, [r7, #0]
 800764e:	4613      	mov	r3, r2
 8007650:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b20      	cmp	r3, #32
 8007660:	d17c      	bne.n	800775c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <HAL_UART_Transmit+0x2c>
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e075      	b.n	800775e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_UART_Transmit+0x3e>
 800767c:	2302      	movs	r3, #2
 800767e:	e06e      	b.n	800775e <HAL_UART_Transmit+0x11c>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2221      	movs	r2, #33	; 0x21
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007696:	f7fe fcbf 	bl	8006018 <HAL_GetTick>
 800769a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	88fa      	ldrh	r2, [r7, #6]
 80076a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	88fa      	ldrh	r2, [r7, #6]
 80076a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b0:	d108      	bne.n	80076c4 <HAL_UART_Transmit+0x82>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	61bb      	str	r3, [r7, #24]
 80076c2:	e003      	b.n	80076cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076d4:	e02a      	b.n	800772c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2200      	movs	r2, #0
 80076de:	2180      	movs	r1, #128	; 0x80
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fb1f 	bl	8007d24 <UART_WaitOnFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e036      	b.n	800775e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007704:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	3302      	adds	r3, #2
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	e007      	b.n	800771e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	781a      	ldrb	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1cf      	bne.n	80076d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2200      	movs	r2, #0
 800773e:	2140      	movs	r1, #64	; 0x40
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 faef 	bl	8007d24 <UART_WaitOnFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e006      	b.n	800775e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	e000      	b.n	800775e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800775c:	2302      	movs	r3, #2
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	3720      	adds	r7, #32
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	4613      	mov	r3, r2
 8007772:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b20      	cmp	r3, #32
 800777e:	d11d      	bne.n	80077bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <HAL_UART_Receive_IT+0x26>
 8007786:	88fb      	ldrh	r3, [r7, #6]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e016      	b.n	80077be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007796:	2b01      	cmp	r3, #1
 8007798:	d101      	bne.n	800779e <HAL_UART_Receive_IT+0x38>
 800779a:	2302      	movs	r3, #2
 800779c:	e00f      	b.n	80077be <HAL_UART_Receive_IT+0x58>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	461a      	mov	r2, r3
 80077b0:	68b9      	ldr	r1, [r7, #8]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fb24 	bl	8007e00 <UART_Start_Receive_IT>
 80077b8:	4603      	mov	r3, r0
 80077ba:	e000      	b.n	80077be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80077bc:	2302      	movs	r3, #2
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b0ba      	sub	sp, #232	; 0xe8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10f      	bne.n	800782e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <HAL_UART_IRQHandler+0x66>
 800781a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fc07 	bl	800803a <UART_Receive_IT>
      return;
 800782c:	e256      	b.n	8007cdc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800782e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 80de 	beq.w	80079f4 <HAL_UART_IRQHandler+0x22c>
 8007838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007848:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 80d1 	beq.w	80079f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <HAL_UART_IRQHandler+0xae>
 800785e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	f043 0201 	orr.w	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <HAL_UART_IRQHandler+0xd2>
 8007882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d005      	beq.n	800789a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	f043 0202 	orr.w	r2, r3, #2
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800789a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <HAL_UART_IRQHandler+0xf6>
 80078a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d005      	beq.n	80078be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	f043 0204 	orr.w	r2, r3, #4
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d011      	beq.n	80078ee <HAL_UART_IRQHandler+0x126>
 80078ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d105      	bne.n	80078e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d005      	beq.n	80078ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	f043 0208 	orr.w	r2, r3, #8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 81ed 	beq.w	8007cd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fc:	f003 0320 	and.w	r3, r3, #32
 8007900:	2b00      	cmp	r3, #0
 8007902:	d008      	beq.n	8007916 <HAL_UART_IRQHandler+0x14e>
 8007904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007908:	f003 0320 	and.w	r3, r3, #32
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fb92 	bl	800803a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	bf0c      	ite	eq
 8007924:	2301      	moveq	r3, #1
 8007926:	2300      	movne	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <HAL_UART_IRQHandler+0x17a>
 800793a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800793e:	2b00      	cmp	r3, #0
 8007940:	d04f      	beq.n	80079e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa9a 	bl	8007e7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007952:	2b40      	cmp	r3, #64	; 0x40
 8007954:	d141      	bne.n	80079da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3314      	adds	r3, #20
 800795c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800796c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3314      	adds	r3, #20
 800797e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007982:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800798e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800799a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1d9      	bne.n	8007956 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d013      	beq.n	80079d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	4a7d      	ldr	r2, [pc, #500]	; (8007ba4 <HAL_UART_IRQHandler+0x3dc>)
 80079b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fc8c 	bl	80062d4 <HAL_DMA_Abort_IT>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d016      	beq.n	80079f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d0:	e00e      	b.n	80079f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f990 	bl	8007cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d8:	e00a      	b.n	80079f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f98c 	bl	8007cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	e006      	b.n	80079f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f988 	bl	8007cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80079ee:	e170      	b.n	8007cd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f0:	bf00      	nop
    return;
 80079f2:	e16e      	b.n	8007cd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	f040 814a 	bne.w	8007c92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a02:	f003 0310 	and.w	r3, r3, #16
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8143 	beq.w	8007c92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a10:	f003 0310 	and.w	r3, r3, #16
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 813c 	beq.w	8007c92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60bb      	str	r3, [r7, #8]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60bb      	str	r3, [r7, #8]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3a:	2b40      	cmp	r3, #64	; 0x40
 8007a3c:	f040 80b4 	bne.w	8007ba8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 8140 	beq.w	8007cd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	f080 8139 	bcs.w	8007cd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a76:	f000 8088 	beq.w	8007b8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	330c      	adds	r3, #12
 8007aa2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007aa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1d9      	bne.n	8007a7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3314      	adds	r3, #20
 8007acc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3314      	adds	r3, #20
 8007ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007aea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007aee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e1      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3314      	adds	r3, #20
 8007b08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3314      	adds	r3, #20
 8007b22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e3      	bne.n	8007b02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	330c      	adds	r3, #12
 8007b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b5a:	f023 0310 	bic.w	r3, r3, #16
 8007b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	330c      	adds	r3, #12
 8007b68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b74:	e841 2300 	strex	r3, r2, [r1]
 8007b78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e3      	bne.n	8007b48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe fb35 	bl	80061f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f8b6 	bl	8007d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ba0:	e099      	b.n	8007cd6 <HAL_UART_IRQHandler+0x50e>
 8007ba2:	bf00      	nop
 8007ba4:	08007f43 	.word	0x08007f43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 808b 	beq.w	8007cda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 8086 	beq.w	8007cda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	330c      	adds	r3, #12
 8007bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007be4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	330c      	adds	r3, #12
 8007bee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007bf2:	647a      	str	r2, [r7, #68]	; 0x44
 8007bf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e3      	bne.n	8007bce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3314      	adds	r3, #20
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	623b      	str	r3, [r7, #32]
   return(result);
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3314      	adds	r3, #20
 8007c26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c2a:	633a      	str	r2, [r7, #48]	; 0x30
 8007c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e3      	bne.n	8007c06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	330c      	adds	r3, #12
 8007c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0310 	bic.w	r3, r3, #16
 8007c62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	330c      	adds	r3, #12
 8007c6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c70:	61fa      	str	r2, [r7, #28]
 8007c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	69b9      	ldr	r1, [r7, #24]
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e3      	bne.n	8007c4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f83e 	bl	8007d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c90:	e023      	b.n	8007cda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d009      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x4ea>
 8007c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f95d 	bl	8007f6a <UART_Transmit_IT>
    return;
 8007cb0:	e014      	b.n	8007cdc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00e      	beq.n	8007cdc <HAL_UART_IRQHandler+0x514>
 8007cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d008      	beq.n	8007cdc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f99d 	bl	800800a <UART_EndTransmit_IT>
    return;
 8007cd0:	e004      	b.n	8007cdc <HAL_UART_IRQHandler+0x514>
    return;
 8007cd2:	bf00      	nop
 8007cd4:	e002      	b.n	8007cdc <HAL_UART_IRQHandler+0x514>
      return;
 8007cd6:	bf00      	nop
 8007cd8:	e000      	b.n	8007cdc <HAL_UART_IRQHandler+0x514>
      return;
 8007cda:	bf00      	nop
  }
}
 8007cdc:	37e8      	adds	r7, #232	; 0xe8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop

08007ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b090      	sub	sp, #64	; 0x40
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	4613      	mov	r3, r2
 8007d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d34:	e050      	b.n	8007dd8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d3c:	d04c      	beq.n	8007dd8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d44:	f7fe f968 	bl	8006018 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d241      	bcs.n	8007dd8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	330c      	adds	r3, #12
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	330c      	adds	r3, #12
 8007d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d74:	637a      	str	r2, [r7, #52]	; 0x34
 8007d76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e5      	bne.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3314      	adds	r3, #20
 8007d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	613b      	str	r3, [r7, #16]
   return(result);
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f023 0301 	bic.w	r3, r3, #1
 8007d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3314      	adds	r3, #20
 8007da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007da8:	623a      	str	r2, [r7, #32]
 8007daa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	69f9      	ldr	r1, [r7, #28]
 8007dae:	6a3a      	ldr	r2, [r7, #32]
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e5      	bne.n	8007d88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e00f      	b.n	8007df8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4013      	ands	r3, r2
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	461a      	mov	r2, r3
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d09f      	beq.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3740      	adds	r7, #64	; 0x40
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	88fa      	ldrh	r2, [r7, #6]
 8007e18:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	88fa      	ldrh	r2, [r7, #6]
 8007e1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2222      	movs	r2, #34	; 0x22
 8007e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	695a      	ldr	r2, [r3, #20]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f042 0201 	orr.w	r2, r2, #1
 8007e5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f042 0220 	orr.w	r2, r2, #32
 8007e6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b095      	sub	sp, #84	; 0x54
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	330c      	adds	r3, #12
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	330c      	adds	r3, #12
 8007ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ea4:	643a      	str	r2, [r7, #64]	; 0x40
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007eaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e5      	bne.n	8007e84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3314      	adds	r3, #20
 8007ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3314      	adds	r3, #20
 8007ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e5      	bne.n	8007eb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d119      	bne.n	8007f28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	330c      	adds	r3, #12
 8007efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f023 0310 	bic.w	r3, r3, #16
 8007f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	330c      	adds	r3, #12
 8007f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f14:	61ba      	str	r2, [r7, #24]
 8007f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6979      	ldr	r1, [r7, #20]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	613b      	str	r3, [r7, #16]
   return(result);
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e5      	bne.n	8007ef4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f36:	bf00      	nop
 8007f38:	3754      	adds	r7, #84	; 0x54
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff fecb 	bl	8007cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b21      	cmp	r3, #33	; 0x21
 8007f7c:	d13e      	bne.n	8007ffc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f86:	d114      	bne.n	8007fb2 <UART_Transmit_IT+0x48>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d110      	bne.n	8007fb2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	1c9a      	adds	r2, r3, #2
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	621a      	str	r2, [r3, #32]
 8007fb0:	e008      	b.n	8007fc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	1c59      	adds	r1, r3, #1
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	6211      	str	r1, [r2, #32]
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10f      	bne.n	8007ff8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fe6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ff6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e000      	b.n	8007ffe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
  }
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008020:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff fe5a 	bl	8007ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b08c      	sub	sp, #48	; 0x30
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b22      	cmp	r3, #34	; 0x22
 800804c:	f040 80ab 	bne.w	80081a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008058:	d117      	bne.n	800808a <UART_Receive_IT+0x50>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d113      	bne.n	800808a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	b29b      	uxth	r3, r3
 8008074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008078:	b29a      	uxth	r2, r3
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008082:	1c9a      	adds	r2, r3, #2
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	629a      	str	r2, [r3, #40]	; 0x28
 8008088:	e026      	b.n	80080d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008090:	2300      	movs	r3, #0
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800809c:	d007      	beq.n	80080ae <UART_Receive_IT+0x74>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <UART_Receive_IT+0x82>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	e008      	b.n	80080ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	4619      	mov	r1, r3
 80080e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d15a      	bne.n	80081a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0220 	bic.w	r2, r2, #32
 80080fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800810a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695a      	ldr	r2, [r3, #20]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0201 	bic.w	r2, r2, #1
 800811a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	2b01      	cmp	r3, #1
 800812a:	d135      	bne.n	8008198 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	330c      	adds	r3, #12
 8008138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	613b      	str	r3, [r7, #16]
   return(result);
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f023 0310 	bic.w	r3, r3, #16
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	330c      	adds	r3, #12
 8008150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008152:	623a      	str	r2, [r7, #32]
 8008154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	69f9      	ldr	r1, [r7, #28]
 8008158:	6a3a      	ldr	r2, [r7, #32]
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e5      	bne.n	8008132 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0310 	and.w	r3, r3, #16
 8008170:	2b10      	cmp	r3, #16
 8008172:	d10a      	bne.n	800818a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff fdbb 	bl	8007d0c <HAL_UARTEx_RxEventCallback>
 8008196:	e002      	b.n	800819e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7fd fc0f 	bl	80059bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	e002      	b.n	80081a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e000      	b.n	80081a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081a6:	2302      	movs	r3, #2
  }
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3730      	adds	r7, #48	; 0x30
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081b4:	b0c0      	sub	sp, #256	; 0x100
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081cc:	68d9      	ldr	r1, [r3, #12]
 80081ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	ea40 0301 	orr.w	r3, r0, r1
 80081d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008208:	f021 010c 	bic.w	r1, r1, #12
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008216:	430b      	orrs	r3, r1
 8008218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822a:	6999      	ldr	r1, [r3, #24]
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	ea40 0301 	orr.w	r3, r0, r1
 8008236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b8f      	ldr	r3, [pc, #572]	; (800847c <UART_SetConfig+0x2cc>)
 8008240:	429a      	cmp	r2, r3
 8008242:	d005      	beq.n	8008250 <UART_SetConfig+0xa0>
 8008244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b8d      	ldr	r3, [pc, #564]	; (8008480 <UART_SetConfig+0x2d0>)
 800824c:	429a      	cmp	r2, r3
 800824e:	d104      	bne.n	800825a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008250:	f7fe feb6 	bl	8006fc0 <HAL_RCC_GetPCLK2Freq>
 8008254:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008258:	e003      	b.n	8008262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800825a:	f7fe fe9d 	bl	8006f98 <HAL_RCC_GetPCLK1Freq>
 800825e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800826c:	f040 810c 	bne.w	8008488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008274:	2200      	movs	r2, #0
 8008276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800827a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800827e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008282:	4622      	mov	r2, r4
 8008284:	462b      	mov	r3, r5
 8008286:	1891      	adds	r1, r2, r2
 8008288:	65b9      	str	r1, [r7, #88]	; 0x58
 800828a:	415b      	adcs	r3, r3
 800828c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800828e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008292:	4621      	mov	r1, r4
 8008294:	eb12 0801 	adds.w	r8, r2, r1
 8008298:	4629      	mov	r1, r5
 800829a:	eb43 0901 	adc.w	r9, r3, r1
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082b2:	4690      	mov	r8, r2
 80082b4:	4699      	mov	r9, r3
 80082b6:	4623      	mov	r3, r4
 80082b8:	eb18 0303 	adds.w	r3, r8, r3
 80082bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082c0:	462b      	mov	r3, r5
 80082c2:	eb49 0303 	adc.w	r3, r9, r3
 80082c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082de:	460b      	mov	r3, r1
 80082e0:	18db      	adds	r3, r3, r3
 80082e2:	653b      	str	r3, [r7, #80]	; 0x50
 80082e4:	4613      	mov	r3, r2
 80082e6:	eb42 0303 	adc.w	r3, r2, r3
 80082ea:	657b      	str	r3, [r7, #84]	; 0x54
 80082ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80082f4:	f7f7 ffbe 	bl	8000274 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4b61      	ldr	r3, [pc, #388]	; (8008484 <UART_SetConfig+0x2d4>)
 80082fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	011c      	lsls	r4, r3, #4
 8008306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800830a:	2200      	movs	r2, #0
 800830c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008310:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	1891      	adds	r1, r2, r2
 800831e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008320:	415b      	adcs	r3, r3
 8008322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008328:	4641      	mov	r1, r8
 800832a:	eb12 0a01 	adds.w	sl, r2, r1
 800832e:	4649      	mov	r1, r9
 8008330:	eb43 0b01 	adc.w	fp, r3, r1
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008348:	4692      	mov	sl, r2
 800834a:	469b      	mov	fp, r3
 800834c:	4643      	mov	r3, r8
 800834e:	eb1a 0303 	adds.w	r3, sl, r3
 8008352:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008356:	464b      	mov	r3, r9
 8008358:	eb4b 0303 	adc.w	r3, fp, r3
 800835c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800836c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008374:	460b      	mov	r3, r1
 8008376:	18db      	adds	r3, r3, r3
 8008378:	643b      	str	r3, [r7, #64]	; 0x40
 800837a:	4613      	mov	r3, r2
 800837c:	eb42 0303 	adc.w	r3, r2, r3
 8008380:	647b      	str	r3, [r7, #68]	; 0x44
 8008382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800838a:	f7f7 ff73 	bl	8000274 <__aeabi_uldivmod>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4611      	mov	r1, r2
 8008394:	4b3b      	ldr	r3, [pc, #236]	; (8008484 <UART_SetConfig+0x2d4>)
 8008396:	fba3 2301 	umull	r2, r3, r3, r1
 800839a:	095b      	lsrs	r3, r3, #5
 800839c:	2264      	movs	r2, #100	; 0x64
 800839e:	fb02 f303 	mul.w	r3, r2, r3
 80083a2:	1acb      	subs	r3, r1, r3
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083aa:	4b36      	ldr	r3, [pc, #216]	; (8008484 <UART_SetConfig+0x2d4>)
 80083ac:	fba3 2302 	umull	r2, r3, r3, r2
 80083b0:	095b      	lsrs	r3, r3, #5
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083b8:	441c      	add	r4, r3
 80083ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083cc:	4642      	mov	r2, r8
 80083ce:	464b      	mov	r3, r9
 80083d0:	1891      	adds	r1, r2, r2
 80083d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80083d4:	415b      	adcs	r3, r3
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083dc:	4641      	mov	r1, r8
 80083de:	1851      	adds	r1, r2, r1
 80083e0:	6339      	str	r1, [r7, #48]	; 0x30
 80083e2:	4649      	mov	r1, r9
 80083e4:	414b      	adcs	r3, r1
 80083e6:	637b      	str	r3, [r7, #52]	; 0x34
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80083f4:	4659      	mov	r1, fp
 80083f6:	00cb      	lsls	r3, r1, #3
 80083f8:	4651      	mov	r1, sl
 80083fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083fe:	4651      	mov	r1, sl
 8008400:	00ca      	lsls	r2, r1, #3
 8008402:	4610      	mov	r0, r2
 8008404:	4619      	mov	r1, r3
 8008406:	4603      	mov	r3, r0
 8008408:	4642      	mov	r2, r8
 800840a:	189b      	adds	r3, r3, r2
 800840c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008410:	464b      	mov	r3, r9
 8008412:	460a      	mov	r2, r1
 8008414:	eb42 0303 	adc.w	r3, r2, r3
 8008418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800841c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008428:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800842c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008430:	460b      	mov	r3, r1
 8008432:	18db      	adds	r3, r3, r3
 8008434:	62bb      	str	r3, [r7, #40]	; 0x28
 8008436:	4613      	mov	r3, r2
 8008438:	eb42 0303 	adc.w	r3, r2, r3
 800843c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800843e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008446:	f7f7 ff15 	bl	8000274 <__aeabi_uldivmod>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4b0d      	ldr	r3, [pc, #52]	; (8008484 <UART_SetConfig+0x2d4>)
 8008450:	fba3 1302 	umull	r1, r3, r3, r2
 8008454:	095b      	lsrs	r3, r3, #5
 8008456:	2164      	movs	r1, #100	; 0x64
 8008458:	fb01 f303 	mul.w	r3, r1, r3
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	3332      	adds	r3, #50	; 0x32
 8008462:	4a08      	ldr	r2, [pc, #32]	; (8008484 <UART_SetConfig+0x2d4>)
 8008464:	fba2 2303 	umull	r2, r3, r2, r3
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	f003 0207 	and.w	r2, r3, #7
 800846e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4422      	add	r2, r4
 8008476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008478:	e105      	b.n	8008686 <UART_SetConfig+0x4d6>
 800847a:	bf00      	nop
 800847c:	40011000 	.word	0x40011000
 8008480:	40011400 	.word	0x40011400
 8008484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800848c:	2200      	movs	r2, #0
 800848e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008492:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800849a:	4642      	mov	r2, r8
 800849c:	464b      	mov	r3, r9
 800849e:	1891      	adds	r1, r2, r2
 80084a0:	6239      	str	r1, [r7, #32]
 80084a2:	415b      	adcs	r3, r3
 80084a4:	627b      	str	r3, [r7, #36]	; 0x24
 80084a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084aa:	4641      	mov	r1, r8
 80084ac:	1854      	adds	r4, r2, r1
 80084ae:	4649      	mov	r1, r9
 80084b0:	eb43 0501 	adc.w	r5, r3, r1
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	00eb      	lsls	r3, r5, #3
 80084be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084c2:	00e2      	lsls	r2, r4, #3
 80084c4:	4614      	mov	r4, r2
 80084c6:	461d      	mov	r5, r3
 80084c8:	4643      	mov	r3, r8
 80084ca:	18e3      	adds	r3, r4, r3
 80084cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084d0:	464b      	mov	r3, r9
 80084d2:	eb45 0303 	adc.w	r3, r5, r3
 80084d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80084f6:	4629      	mov	r1, r5
 80084f8:	008b      	lsls	r3, r1, #2
 80084fa:	4621      	mov	r1, r4
 80084fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008500:	4621      	mov	r1, r4
 8008502:	008a      	lsls	r2, r1, #2
 8008504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008508:	f7f7 feb4 	bl	8000274 <__aeabi_uldivmod>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4b60      	ldr	r3, [pc, #384]	; (8008694 <UART_SetConfig+0x4e4>)
 8008512:	fba3 2302 	umull	r2, r3, r3, r2
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	011c      	lsls	r4, r3, #4
 800851a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800851e:	2200      	movs	r2, #0
 8008520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008524:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800852c:	4642      	mov	r2, r8
 800852e:	464b      	mov	r3, r9
 8008530:	1891      	adds	r1, r2, r2
 8008532:	61b9      	str	r1, [r7, #24]
 8008534:	415b      	adcs	r3, r3
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800853c:	4641      	mov	r1, r8
 800853e:	1851      	adds	r1, r2, r1
 8008540:	6139      	str	r1, [r7, #16]
 8008542:	4649      	mov	r1, r9
 8008544:	414b      	adcs	r3, r1
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	f04f 0300 	mov.w	r3, #0
 8008550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008554:	4659      	mov	r1, fp
 8008556:	00cb      	lsls	r3, r1, #3
 8008558:	4651      	mov	r1, sl
 800855a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800855e:	4651      	mov	r1, sl
 8008560:	00ca      	lsls	r2, r1, #3
 8008562:	4610      	mov	r0, r2
 8008564:	4619      	mov	r1, r3
 8008566:	4603      	mov	r3, r0
 8008568:	4642      	mov	r2, r8
 800856a:	189b      	adds	r3, r3, r2
 800856c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008570:	464b      	mov	r3, r9
 8008572:	460a      	mov	r2, r1
 8008574:	eb42 0303 	adc.w	r3, r2, r3
 8008578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800857c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	67bb      	str	r3, [r7, #120]	; 0x78
 8008586:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008594:	4649      	mov	r1, r9
 8008596:	008b      	lsls	r3, r1, #2
 8008598:	4641      	mov	r1, r8
 800859a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800859e:	4641      	mov	r1, r8
 80085a0:	008a      	lsls	r2, r1, #2
 80085a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085a6:	f7f7 fe65 	bl	8000274 <__aeabi_uldivmod>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4b39      	ldr	r3, [pc, #228]	; (8008694 <UART_SetConfig+0x4e4>)
 80085b0:	fba3 1302 	umull	r1, r3, r3, r2
 80085b4:	095b      	lsrs	r3, r3, #5
 80085b6:	2164      	movs	r1, #100	; 0x64
 80085b8:	fb01 f303 	mul.w	r3, r1, r3
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	3332      	adds	r3, #50	; 0x32
 80085c2:	4a34      	ldr	r2, [pc, #208]	; (8008694 <UART_SetConfig+0x4e4>)
 80085c4:	fba2 2303 	umull	r2, r3, r2, r3
 80085c8:	095b      	lsrs	r3, r3, #5
 80085ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085ce:	441c      	add	r4, r3
 80085d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085d4:	2200      	movs	r2, #0
 80085d6:	673b      	str	r3, [r7, #112]	; 0x70
 80085d8:	677a      	str	r2, [r7, #116]	; 0x74
 80085da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085de:	4642      	mov	r2, r8
 80085e0:	464b      	mov	r3, r9
 80085e2:	1891      	adds	r1, r2, r2
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	415b      	adcs	r3, r3
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085ee:	4641      	mov	r1, r8
 80085f0:	1851      	adds	r1, r2, r1
 80085f2:	6039      	str	r1, [r7, #0]
 80085f4:	4649      	mov	r1, r9
 80085f6:	414b      	adcs	r3, r1
 80085f8:	607b      	str	r3, [r7, #4]
 80085fa:	f04f 0200 	mov.w	r2, #0
 80085fe:	f04f 0300 	mov.w	r3, #0
 8008602:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008606:	4659      	mov	r1, fp
 8008608:	00cb      	lsls	r3, r1, #3
 800860a:	4651      	mov	r1, sl
 800860c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008610:	4651      	mov	r1, sl
 8008612:	00ca      	lsls	r2, r1, #3
 8008614:	4610      	mov	r0, r2
 8008616:	4619      	mov	r1, r3
 8008618:	4603      	mov	r3, r0
 800861a:	4642      	mov	r2, r8
 800861c:	189b      	adds	r3, r3, r2
 800861e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008620:	464b      	mov	r3, r9
 8008622:	460a      	mov	r2, r1
 8008624:	eb42 0303 	adc.w	r3, r2, r3
 8008628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800862a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	663b      	str	r3, [r7, #96]	; 0x60
 8008634:	667a      	str	r2, [r7, #100]	; 0x64
 8008636:	f04f 0200 	mov.w	r2, #0
 800863a:	f04f 0300 	mov.w	r3, #0
 800863e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008642:	4649      	mov	r1, r9
 8008644:	008b      	lsls	r3, r1, #2
 8008646:	4641      	mov	r1, r8
 8008648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800864c:	4641      	mov	r1, r8
 800864e:	008a      	lsls	r2, r1, #2
 8008650:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008654:	f7f7 fe0e 	bl	8000274 <__aeabi_uldivmod>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <UART_SetConfig+0x4e4>)
 800865e:	fba3 1302 	umull	r1, r3, r3, r2
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	2164      	movs	r1, #100	; 0x64
 8008666:	fb01 f303 	mul.w	r3, r1, r3
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	011b      	lsls	r3, r3, #4
 800866e:	3332      	adds	r3, #50	; 0x32
 8008670:	4a08      	ldr	r2, [pc, #32]	; (8008694 <UART_SetConfig+0x4e4>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	095b      	lsrs	r3, r3, #5
 8008678:	f003 020f 	and.w	r2, r3, #15
 800867c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4422      	add	r2, r4
 8008684:	609a      	str	r2, [r3, #8]
}
 8008686:	bf00      	nop
 8008688:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800868c:	46bd      	mov	sp, r7
 800868e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008692:	bf00      	nop
 8008694:	51eb851f 	.word	0x51eb851f

08008698 <__libc_init_array>:
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	4d0d      	ldr	r5, [pc, #52]	; (80086d0 <__libc_init_array+0x38>)
 800869c:	4c0d      	ldr	r4, [pc, #52]	; (80086d4 <__libc_init_array+0x3c>)
 800869e:	1b64      	subs	r4, r4, r5
 80086a0:	10a4      	asrs	r4, r4, #2
 80086a2:	2600      	movs	r6, #0
 80086a4:	42a6      	cmp	r6, r4
 80086a6:	d109      	bne.n	80086bc <__libc_init_array+0x24>
 80086a8:	4d0b      	ldr	r5, [pc, #44]	; (80086d8 <__libc_init_array+0x40>)
 80086aa:	4c0c      	ldr	r4, [pc, #48]	; (80086dc <__libc_init_array+0x44>)
 80086ac:	f000 f83e 	bl	800872c <_init>
 80086b0:	1b64      	subs	r4, r4, r5
 80086b2:	10a4      	asrs	r4, r4, #2
 80086b4:	2600      	movs	r6, #0
 80086b6:	42a6      	cmp	r6, r4
 80086b8:	d105      	bne.n	80086c6 <__libc_init_array+0x2e>
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
 80086bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c0:	4798      	blx	r3
 80086c2:	3601      	adds	r6, #1
 80086c4:	e7ee      	b.n	80086a4 <__libc_init_array+0xc>
 80086c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ca:	4798      	blx	r3
 80086cc:	3601      	adds	r6, #1
 80086ce:	e7f2      	b.n	80086b6 <__libc_init_array+0x1e>
 80086d0:	08008c90 	.word	0x08008c90
 80086d4:	08008c90 	.word	0x08008c90
 80086d8:	08008c90 	.word	0x08008c90
 80086dc:	08008c94 	.word	0x08008c94

080086e0 <memcmp>:
 80086e0:	b510      	push	{r4, lr}
 80086e2:	3901      	subs	r1, #1
 80086e4:	4402      	add	r2, r0
 80086e6:	4290      	cmp	r0, r2
 80086e8:	d101      	bne.n	80086ee <memcmp+0xe>
 80086ea:	2000      	movs	r0, #0
 80086ec:	e005      	b.n	80086fa <memcmp+0x1a>
 80086ee:	7803      	ldrb	r3, [r0, #0]
 80086f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	d001      	beq.n	80086fc <memcmp+0x1c>
 80086f8:	1b18      	subs	r0, r3, r4
 80086fa:	bd10      	pop	{r4, pc}
 80086fc:	3001      	adds	r0, #1
 80086fe:	e7f2      	b.n	80086e6 <memcmp+0x6>

08008700 <memcpy>:
 8008700:	440a      	add	r2, r1
 8008702:	4291      	cmp	r1, r2
 8008704:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008708:	d100      	bne.n	800870c <memcpy+0xc>
 800870a:	4770      	bx	lr
 800870c:	b510      	push	{r4, lr}
 800870e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008716:	4291      	cmp	r1, r2
 8008718:	d1f9      	bne.n	800870e <memcpy+0xe>
 800871a:	bd10      	pop	{r4, pc}

0800871c <memset>:
 800871c:	4402      	add	r2, r0
 800871e:	4603      	mov	r3, r0
 8008720:	4293      	cmp	r3, r2
 8008722:	d100      	bne.n	8008726 <memset+0xa>
 8008724:	4770      	bx	lr
 8008726:	f803 1b01 	strb.w	r1, [r3], #1
 800872a:	e7f9      	b.n	8008720 <memset+0x4>

0800872c <_init>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr

08008738 <_fini>:
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873a:	bf00      	nop
 800873c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873e:	bc08      	pop	{r3}
 8008740:	469e      	mov	lr, r3
 8008742:	4770      	bx	lr
