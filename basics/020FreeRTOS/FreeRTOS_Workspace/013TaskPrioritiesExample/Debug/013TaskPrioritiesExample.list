
013TaskPrioritiesExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006428  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800689c  0800689c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800689c  0800689c  0001689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068a4  080068a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080068ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00015030  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200150a8  200150a8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129dc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c3d  00000000  00000000  00032a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  000356c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001040  00000000  00000000  00036890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216fa  00000000  00000000  000378d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c58  00000000  00000000  00058fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7eb5  00000000  00000000  0006cc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144ad7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052dc  00000000  00000000  00144b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065a0 	.word	0x080065a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080065a0 	.word	0x080065a0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e64 	.word	0x20012e64
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f103 0208 	add.w	r2, r3, #8
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800062c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 0208 	add.w	r2, r3, #8
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f103 0208 	add.w	r2, r3, #8
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800066e:	b480      	push	{r7}
 8000670:	b085      	sub	sp, #20
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006b6:	b480      	push	{r7}
 80006b8:	b085      	sub	sp, #20
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006cc:	d103      	bne.n	80006d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e00c      	b.n	80006f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3308      	adds	r3, #8
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	e002      	b.n	80006e4 <vListInsert+0x2e>
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d2f6      	bcs.n	80006de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	685a      	ldr	r2, [r3, #4]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	6892      	ldr	r2, [r2, #8]
 800073e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	6852      	ldr	r2, [r2, #4]
 8000748:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	d103      	bne.n	800075c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689a      	ldr	r2, [r3, #8]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1e5a      	subs	r2, r3, #1
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	; 0x30
 8000780:	af04      	add	r7, sp, #16
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	4613      	mov	r3, r2
 800078a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800078c:	88fb      	ldrh	r3, [r7, #6]
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4618      	mov	r0, r3
 8000792:	f000 ffd3 	bl	800173c <pvPortMalloc>
 8000796:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d00e      	beq.n	80007bc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800079e:	2058      	movs	r0, #88	; 0x58
 80007a0:	f000 ffcc 	bl	800173c <pvPortMalloc>
 80007a4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
 80007b2:	e005      	b.n	80007c0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80007b4:	6978      	ldr	r0, [r7, #20]
 80007b6:	f001 f8a1 	bl	80018fc <vPortFree>
 80007ba:	e001      	b.n	80007c0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d013      	beq.n	80007ee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80007c6:	88fa      	ldrh	r2, [r7, #6]
 80007c8:	2300      	movs	r3, #0
 80007ca:	9303      	str	r3, [sp, #12]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	9302      	str	r3, [sp, #8]
 80007d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f000 f80e 	bl	80007fe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80007e2:	69f8      	ldr	r0, [r7, #28]
 80007e4:	f000 f8a2 	bl	800092c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	e002      	b.n	80007f4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007f2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80007f4:	69bb      	ldr	r3, [r7, #24]
    }
 80007f6:	4618      	mov	r0, r3
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b088      	sub	sp, #32
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800080c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	461a      	mov	r2, r3
 8000816:	21a5      	movs	r1, #165	; 0xa5
 8000818:	f004 fe94 	bl	8005544 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800081c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800081e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000826:	3b01      	subs	r3, #1
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	f023 0307 	bic.w	r3, r3, #7
 8000834:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	2b00      	cmp	r3, #0
 800083e:	d00a      	beq.n	8000856 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000852:	bf00      	nop
 8000854:	e7fe      	b.n	8000854 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d01f      	beq.n	800089c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
 8000860:	e012      	b.n	8000888 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	4413      	add	r3, r2
 8000868:	7819      	ldrb	r1, [r3, #0]
 800086a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	4413      	add	r3, r2
 8000870:	3334      	adds	r3, #52	; 0x34
 8000872:	460a      	mov	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d006      	beq.n	8000890 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3301      	adds	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	2b09      	cmp	r3, #9
 800088c:	d9e9      	bls.n	8000862 <prvInitialiseNewTask+0x64>
 800088e:	e000      	b.n	8000892 <prvInitialiseNewTask+0x94>
            {
                break;
 8000890:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000894:	2200      	movs	r2, #0
 8000896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800089a:	e003      	b.n	80008a4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800089c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80008a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d901      	bls.n	80008ae <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80008aa:	2304      	movs	r3, #4
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80008ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80008b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008b8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80008ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008bc:	2200      	movs	r2, #0
 80008be:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80008c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c2:	3304      	adds	r3, #4
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fec5 	bl	8000654 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80008ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008cc:	3318      	adds	r3, #24
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fec0 	bl	8000654 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80008d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	f1c3 0205 	rsb	r2, r3, #5
 80008e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80008e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80008ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ec:	3350      	adds	r3, #80	; 0x50
 80008ee:	2204      	movs	r2, #4
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 fe26 	bl	8005544 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80008f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008fa:	3354      	adds	r3, #84	; 0x54
 80008fc:	2201      	movs	r2, #1
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f004 fe1f 	bl	8005544 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	68f9      	ldr	r1, [r7, #12]
 800090a:	69b8      	ldr	r0, [r7, #24]
 800090c:	f000 fc3e 	bl	800118c <pxPortInitialiseStack>
 8000910:	4602      	mov	r2, r0
 8000912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000914:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000918:	2b00      	cmp	r3, #0
 800091a:	d002      	beq.n	8000922 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000920:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000922:	bf00      	nop
 8000924:	3720      	adds	r7, #32
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800092c:	b5b0      	push	{r4, r5, r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af02      	add	r7, sp, #8
 8000932:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000934:	f000 fdd6 	bl	80014e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000938:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <prvAddNewTaskToReadyList+0xfc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a3a      	ldr	r2, [pc, #232]	; (8000a28 <prvAddNewTaskToReadyList+0xfc>)
 8000940:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000942:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <prvAddNewTaskToReadyList+0x100>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d109      	bne.n	800095e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800094a:	4a38      	ldr	r2, [pc, #224]	; (8000a2c <prvAddNewTaskToReadyList+0x100>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000950:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <prvAddNewTaskToReadyList+0xfc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d110      	bne.n	800097a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000958:	f000 fb06 	bl	8000f68 <prvInitialiseTaskLists>
 800095c:	e00d      	b.n	800097a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800095e:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <prvAddNewTaskToReadyList+0x104>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d109      	bne.n	800097a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000966:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <prvAddNewTaskToReadyList+0x100>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000970:	429a      	cmp	r2, r3
 8000972:	d802      	bhi.n	800097a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000974:	4a2d      	ldr	r2, [pc, #180]	; (8000a2c <prvAddNewTaskToReadyList+0x100>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800097a:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <prvAddNewTaskToReadyList+0x108>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	4a2c      	ldr	r2, [pc, #176]	; (8000a34 <prvAddNewTaskToReadyList+0x108>)
 8000982:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <prvAddNewTaskToReadyList+0x108>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d016      	beq.n	80009c0 <prvAddNewTaskToReadyList+0x94>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fc61 	bl	800325c <SEGGER_SYSVIEW_OnTaskCreate>
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	461d      	mov	r5, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	461c      	mov	r4, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	1ae3      	subs	r3, r4, r3
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	462b      	mov	r3, r5
 80009bc:	f001 f96c 	bl	8001c98 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 fcce 	bl	8003364 <SEGGER_SYSVIEW_OnTaskStartReady>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009cc:	2201      	movs	r2, #1
 80009ce:	409a      	lsls	r2, r3
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <prvAddNewTaskToReadyList+0x10c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <prvAddNewTaskToReadyList+0x10c>)
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009de:	4613      	mov	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <prvAddNewTaskToReadyList+0x110>)
 80009e8:	441a      	add	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3304      	adds	r3, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4610      	mov	r0, r2
 80009f2:	f7ff fe3c 	bl	800066e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80009f6:	f000 fda5 	bl	8001544 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <prvAddNewTaskToReadyList+0x104>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00e      	beq.n	8000a20 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <prvAddNewTaskToReadyList+0x100>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <prvAddNewTaskToReadyList+0x114>)
 8000a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	f3bf 8f4f 	dsb	sy
 8000a1c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bdb0      	pop	{r4, r5, r7, pc}
 8000a28:	2000016c 	.word	0x2000016c
 8000a2c:	20000094 	.word	0x20000094
 8000a30:	20000178 	.word	0x20000178
 8000a34:	20000188 	.word	0x20000188
 8000a38:	20000174 	.word	0x20000174
 8000a3c:	20000098 	.word	0x20000098
 8000a40:	e000ed04 	.word	0xe000ed04

08000a44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d01b      	beq.n	8000a8e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <vTaskDelay+0x68>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00a      	beq.n	8000a74 <vTaskDelay+0x30>
        __asm volatile
 8000a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a62:	f383 8811 	msr	BASEPRI, r3
 8000a66:	f3bf 8f6f 	isb	sy
 8000a6a:	f3bf 8f4f 	dsb	sy
 8000a6e:	60bb      	str	r3, [r7, #8]
    }
 8000a70:	bf00      	nop
 8000a72:	e7fe      	b.n	8000a72 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000a74:	f000 f87a 	bl	8000b6c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	2023      	movs	r0, #35	; 0x23
 8000a7c:	f001 fffa 	bl	8002a74 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000a80:	2100      	movs	r1, #0
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 fb0a 	bl	800109c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000a88:	f000 f87e 	bl	8000b88 <xTaskResumeAll>
 8000a8c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d107      	bne.n	8000aa4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <vTaskDelay+0x6c>)
 8000a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	f3bf 8f4f 	dsb	sy
 8000aa0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000194 	.word	0x20000194
 8000ab0:	e000ed04 	.word	0xe000ed04

08000ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <vTaskStartScheduler+0x98>)
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2282      	movs	r2, #130	; 0x82
 8000ac6:	4922      	ldr	r1, [pc, #136]	; (8000b50 <vTaskStartScheduler+0x9c>)
 8000ac8:	4822      	ldr	r0, [pc, #136]	; (8000b54 <vTaskStartScheduler+0xa0>)
 8000aca:	f7ff fe57 	bl	800077c <xTaskCreate>
 8000ace:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d124      	bne.n	8000b20 <vTaskStartScheduler+0x6c>
        __asm volatile
 8000ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ada:	f383 8811 	msr	BASEPRI, r3
 8000ade:	f3bf 8f6f 	isb	sy
 8000ae2:	f3bf 8f4f 	dsb	sy
 8000ae6:	60bb      	str	r3, [r7, #8]
    }
 8000ae8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <vTaskStartScheduler+0xa4>)
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000af0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <vTaskStartScheduler+0xa8>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <vTaskStartScheduler+0xac>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <vTaskStartScheduler+0xb0>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <vTaskStartScheduler+0x98>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d102      	bne.n	8000b10 <vTaskStartScheduler+0x5c>
 8000b0a:	f002 fb8b 	bl	8003224 <SEGGER_SYSVIEW_OnIdle>
 8000b0e:	e004      	b.n	8000b1a <vTaskStartScheduler+0x66>
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <vTaskStartScheduler+0xb0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fbe3 	bl	80032e0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000b1a:	f000 fbc3 	bl	80012a4 <xPortStartScheduler>
 8000b1e:	e00e      	b.n	8000b3e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b26:	d10a      	bne.n	8000b3e <vTaskStartScheduler+0x8a>
        __asm volatile
 8000b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b2c:	f383 8811 	msr	BASEPRI, r3
 8000b30:	f3bf 8f6f 	isb	sy
 8000b34:	f3bf 8f4f 	dsb	sy
 8000b38:	607b      	str	r3, [r7, #4]
    }
 8000b3a:	bf00      	nop
 8000b3c:	e7fe      	b.n	8000b3c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <vTaskStartScheduler+0xb4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000190 	.word	0x20000190
 8000b50:	080065b8 	.word	0x080065b8
 8000b54:	08000f39 	.word	0x08000f39
 8000b58:	2000018c 	.word	0x2000018c
 8000b5c:	20000178 	.word	0x20000178
 8000b60:	20000170 	.word	0x20000170
 8000b64:	20000094 	.word	0x20000094
 8000b68:	20000000 	.word	0x20000000

08000b6c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <vTaskSuspendAll+0x18>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <vTaskSuspendAll+0x18>)
 8000b78:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	20000194 	.word	0x20000194

08000b88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000b96:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <xTaskResumeAll+0x11c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10a      	bne.n	8000bb4 <xTaskResumeAll+0x2c>
        __asm volatile
 8000b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	603b      	str	r3, [r7, #0]
    }
 8000bb0:	bf00      	nop
 8000bb2:	e7fe      	b.n	8000bb2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000bb4:	f000 fc96 	bl	80014e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <xTaskResumeAll+0x11c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	4a39      	ldr	r2, [pc, #228]	; (8000ca4 <xTaskResumeAll+0x11c>)
 8000bc0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000bc2:	4b38      	ldr	r3, [pc, #224]	; (8000ca4 <xTaskResumeAll+0x11c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d165      	bne.n	8000c96 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000bca:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <xTaskResumeAll+0x120>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d061      	beq.n	8000c96 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000bd2:	e032      	b.n	8000c3a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bd4:	4b35      	ldr	r3, [pc, #212]	; (8000cac <xTaskResumeAll+0x124>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3318      	adds	r3, #24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fda1 	bl	8000728 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3304      	adds	r3, #4
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fd9c 	bl	8000728 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fbb6 	bl	8003364 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <xTaskResumeAll+0x128>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	4a2a      	ldr	r2, [pc, #168]	; (8000cb0 <xTaskResumeAll+0x128>)
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <xTaskResumeAll+0x12c>)
 8000c18:	441a      	add	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4610      	mov	r0, r2
 8000c22:	f7ff fd24 	bl	800066e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <xTaskResumeAll+0x130>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d302      	bcc.n	8000c3a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8000c34:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <xTaskResumeAll+0x134>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <xTaskResumeAll+0x124>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1c8      	bne.n	8000bd4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000c48:	f000 fa0c 	bl	8001064 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <xTaskResumeAll+0x138>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d010      	beq.n	8000c7a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000c58:	f000 f848 	bl	8000cec <xTaskIncrementTick>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <xTaskResumeAll+0x134>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f1      	bne.n	8000c58 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <xTaskResumeAll+0x138>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <xTaskResumeAll+0x134>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d009      	beq.n	8000c96 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000c82:	2301      	movs	r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <xTaskResumeAll+0x13c>)
 8000c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	f3bf 8f4f 	dsb	sy
 8000c92:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000c96:	f000 fc55 	bl	8001544 <vPortExitCritical>

    return xAlreadyYielded;
 8000c9a:	68bb      	ldr	r3, [r7, #8]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000194 	.word	0x20000194
 8000ca8:	2000016c 	.word	0x2000016c
 8000cac:	2000012c 	.word	0x2000012c
 8000cb0:	20000174 	.word	0x20000174
 8000cb4:	20000098 	.word	0x20000098
 8000cb8:	20000094 	.word	0x20000094
 8000cbc:	20000180 	.word	0x20000180
 8000cc0:	2000017c 	.word	0x2000017c
 8000cc4:	e000ed04 	.word	0xe000ed04

08000cc8 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000cce:	f000 fcf5 	bl	80016bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <xTaskGetTickCountFromISR+0x20>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000cdc:	683b      	ldr	r3, [r7, #0]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000170 	.word	0x20000170

08000cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000cf6:	4b50      	ldr	r3, [pc, #320]	; (8000e38 <xTaskIncrementTick+0x14c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 8092 	bne.w	8000e24 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000d00:	4b4e      	ldr	r3, [pc, #312]	; (8000e3c <xTaskIncrementTick+0x150>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000d08:	4a4c      	ldr	r2, [pc, #304]	; (8000e3c <xTaskIncrementTick+0x150>)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d120      	bne.n	8000d56 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000d14:	4b4a      	ldr	r3, [pc, #296]	; (8000e40 <xTaskIncrementTick+0x154>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00a      	beq.n	8000d34 <xTaskIncrementTick+0x48>
        __asm volatile
 8000d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d22:	f383 8811 	msr	BASEPRI, r3
 8000d26:	f3bf 8f6f 	isb	sy
 8000d2a:	f3bf 8f4f 	dsb	sy
 8000d2e:	603b      	str	r3, [r7, #0]
    }
 8000d30:	bf00      	nop
 8000d32:	e7fe      	b.n	8000d32 <xTaskIncrementTick+0x46>
 8000d34:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <xTaskIncrementTick+0x154>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <xTaskIncrementTick+0x158>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a40      	ldr	r2, [pc, #256]	; (8000e40 <xTaskIncrementTick+0x154>)
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4a40      	ldr	r2, [pc, #256]	; (8000e44 <xTaskIncrementTick+0x158>)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <xTaskIncrementTick+0x15c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a3e      	ldr	r2, [pc, #248]	; (8000e48 <xTaskIncrementTick+0x15c>)
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	f000 f987 	bl	8001064 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <xTaskIncrementTick+0x160>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d34c      	bcc.n	8000dfa <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <xTaskIncrementTick+0x154>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d104      	bne.n	8000d74 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d6a:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <xTaskIncrementTick+0x160>)
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d70:	601a      	str	r2, [r3, #0]
                    break;
 8000d72:	e042      	b.n	8000dfa <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <xTaskIncrementTick+0x154>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d203      	bcs.n	8000d94 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000d8c:	4a2f      	ldr	r2, [pc, #188]	; (8000e4c <xTaskIncrementTick+0x160>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000d92:	e032      	b.n	8000dfa <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	3304      	adds	r3, #4
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fcc5 	bl	8000728 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	3318      	adds	r3, #24
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fcbc 	bl	8000728 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 fad6 	bl	8003364 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <xTaskIncrementTick+0x164>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	4a22      	ldr	r2, [pc, #136]	; (8000e50 <xTaskIncrementTick+0x164>)
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <xTaskIncrementTick+0x168>)
 8000dd8:	441a      	add	r2, r3
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4610      	mov	r0, r2
 8000de2:	f7ff fc44 	bl	800066e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <xTaskIncrementTick+0x16c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d3b5      	bcc.n	8000d60 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8000df4:	2301      	movs	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000df8:	e7b2      	b.n	8000d60 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <xTaskIncrementTick+0x16c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e00:	4914      	ldr	r1, [pc, #80]	; (8000e54 <xTaskIncrementTick+0x168>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d901      	bls.n	8000e16 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <xTaskIncrementTick+0x170>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e004      	b.n	8000e2e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <xTaskIncrementTick+0x174>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <xTaskIncrementTick+0x174>)
 8000e2c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000e2e:	697b      	ldr	r3, [r7, #20]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000194 	.word	0x20000194
 8000e3c:	20000170 	.word	0x20000170
 8000e40:	20000124 	.word	0x20000124
 8000e44:	20000128 	.word	0x20000128
 8000e48:	20000184 	.word	0x20000184
 8000e4c:	2000018c 	.word	0x2000018c
 8000e50:	20000174 	.word	0x20000174
 8000e54:	20000098 	.word	0x20000098
 8000e58:	20000094 	.word	0x20000094
 8000e5c:	20000180 	.word	0x20000180
 8000e60:	2000017c 	.word	0x2000017c

08000e64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <vTaskSwitchContext+0xbc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <vTaskSwitchContext+0xc0>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000e78:	e04d      	b.n	8000f16 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <vTaskSwitchContext+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <vTaskSwitchContext+0xc4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	fab3 f383 	clz	r3, r3
 8000e8c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000e8e:	7afb      	ldrb	r3, [r7, #11]
 8000e90:	f1c3 031f 	rsb	r3, r3, #31
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	4925      	ldr	r1, [pc, #148]	; (8000f2c <vTaskSwitchContext+0xc8>)
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10a      	bne.n	8000ec0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eae:	f383 8811 	msr	BASEPRI, r3
 8000eb2:	f3bf 8f6f 	isb	sy
 8000eb6:	f3bf 8f4f 	dsb	sy
 8000eba:	607b      	str	r3, [r7, #4]
    }
 8000ebc:	bf00      	nop
 8000ebe:	e7fe      	b.n	8000ebe <vTaskSwitchContext+0x5a>
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <vTaskSwitchContext+0xc8>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	3308      	adds	r3, #8
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d104      	bne.n	8000ef0 <vTaskSwitchContext+0x8c>
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <vTaskSwitchContext+0xcc>)
 8000ef8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <vTaskSwitchContext+0xcc>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <vTaskSwitchContext+0xd0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d102      	bne.n	8000f0c <vTaskSwitchContext+0xa8>
 8000f06:	f002 f98d 	bl	8003224 <SEGGER_SYSVIEW_OnIdle>
}
 8000f0a:	e004      	b.n	8000f16 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <vTaskSwitchContext+0xcc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 f9e5 	bl	80032e0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000194 	.word	0x20000194
 8000f24:	20000180 	.word	0x20000180
 8000f28:	20000174 	.word	0x20000174
 8000f2c:	20000098 	.word	0x20000098
 8000f30:	20000094 	.word	0x20000094
 8000f34:	20000190 	.word	0x20000190

08000f38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000f40:	f000 f852 	bl	8000fe8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <prvIdleTask+0x28>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d9f9      	bls.n	8000f40 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <prvIdleTask+0x2c>)
 8000f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	f3bf 8f4f 	dsb	sy
 8000f58:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000f5c:	e7f0      	b.n	8000f40 <prvIdleTask+0x8>
 8000f5e:	bf00      	nop
 8000f60:	20000098 	.word	0x20000098
 8000f64:	e000ed04 	.word	0xe000ed04

08000f68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	e00c      	b.n	8000f8e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <prvInitialiseTaskLists+0x60>)
 8000f80:	4413      	add	r3, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fb46 	bl	8000614 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d9ef      	bls.n	8000f74 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <prvInitialiseTaskLists+0x64>)
 8000f96:	f7ff fb3d 	bl	8000614 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <prvInitialiseTaskLists+0x68>)
 8000f9c:	f7ff fb3a 	bl	8000614 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <prvInitialiseTaskLists+0x6c>)
 8000fa2:	f7ff fb37 	bl	8000614 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <prvInitialiseTaskLists+0x70>)
 8000fa8:	f7ff fb34 	bl	8000614 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <prvInitialiseTaskLists+0x74>)
 8000fae:	f7ff fb31 	bl	8000614 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <prvInitialiseTaskLists+0x78>)
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <prvInitialiseTaskLists+0x64>)
 8000fb6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <prvInitialiseTaskLists+0x7c>)
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <prvInitialiseTaskLists+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000098 	.word	0x20000098
 8000fcc:	200000fc 	.word	0x200000fc
 8000fd0:	20000110 	.word	0x20000110
 8000fd4:	2000012c 	.word	0x2000012c
 8000fd8:	20000140 	.word	0x20000140
 8000fdc:	20000158 	.word	0x20000158
 8000fe0:	20000124 	.word	0x20000124
 8000fe4:	20000128 	.word	0x20000128

08000fe8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fee:	e019      	b.n	8001024 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000ff0:	f000 fa78 	bl	80014e4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <prvCheckTasksWaitingTermination+0x50>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3304      	adds	r3, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fb91 	bl	8000728 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <prvCheckTasksWaitingTermination+0x54>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3b01      	subs	r3, #1
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <prvCheckTasksWaitingTermination+0x54>)
 800100e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <prvCheckTasksWaitingTermination+0x58>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3b01      	subs	r3, #1
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <prvCheckTasksWaitingTermination+0x58>)
 8001018:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800101a:	f000 fa93 	bl	8001544 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f810 	bl	8001044 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <prvCheckTasksWaitingTermination+0x58>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1e1      	bne.n	8000ff0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000140 	.word	0x20000140
 800103c:	2000016c 	.word	0x2000016c
 8001040:	20000154 	.word	0x20000154

08001044 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fc53 	bl	80018fc <vPortFree>
                vPortFree( pxTCB );
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fc50 	bl	80018fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <prvResetNextTaskUnblockTime+0x30>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d104      	bne.n	800107c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <prvResetNextTaskUnblockTime+0x34>)
 8001074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001078:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800107a:	e005      	b.n	8001088 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <prvResetNextTaskUnblockTime+0x30>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <prvResetNextTaskUnblockTime+0x34>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000124 	.word	0x20000124
 8001098:	2000018c 	.word	0x2000018c

0800109c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <prvAddCurrentTaskToDelayedList+0xd4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010ac:	4b31      	ldr	r3, [pc, #196]	; (8001174 <prvAddCurrentTaskToDelayedList+0xd8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3304      	adds	r3, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fb38 	bl	8000728 <uxListRemove>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10b      	bne.n	80010d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <prvAddCurrentTaskToDelayedList+0xd8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	2201      	movs	r2, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <prvAddCurrentTaskToDelayedList+0xdc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4013      	ands	r3, r2
 80010d2:	4a29      	ldr	r2, [pc, #164]	; (8001178 <prvAddCurrentTaskToDelayedList+0xdc>)
 80010d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010dc:	d110      	bne.n	8001100 <prvAddCurrentTaskToDelayedList+0x64>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00d      	beq.n	8001100 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <prvAddCurrentTaskToDelayedList+0xd8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	211b      	movs	r1, #27
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 f97c 	bl	80033e8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <prvAddCurrentTaskToDelayedList+0xd8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3304      	adds	r3, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4820      	ldr	r0, [pc, #128]	; (800117c <prvAddCurrentTaskToDelayedList+0xe0>)
 80010fa:	f7ff fab8 	bl	800066e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80010fe:	e032      	b.n	8001166 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <prvAddCurrentTaskToDelayedList+0xd8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d20f      	bcs.n	8001138 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <prvAddCurrentTaskToDelayedList+0xd8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2104      	movs	r1, #4
 800111e:	4618      	mov	r0, r3
 8001120:	f002 f962 	bl	80033e8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <prvAddCurrentTaskToDelayedList+0xd8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3304      	adds	r3, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4610      	mov	r0, r2
 8001132:	f7ff fac0 	bl	80006b6 <vListInsert>
}
 8001136:	e016      	b.n	8001166 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <prvAddCurrentTaskToDelayedList+0xd8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2104      	movs	r1, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f002 f952 	bl	80033e8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <prvAddCurrentTaskToDelayedList+0xd8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3304      	adds	r3, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4610      	mov	r0, r2
 8001152:	f7ff fab0 	bl	80006b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <prvAddCurrentTaskToDelayedList+0xec>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	d202      	bcs.n	8001166 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001160:	4a09      	ldr	r2, [pc, #36]	; (8001188 <prvAddCurrentTaskToDelayedList+0xec>)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	6013      	str	r3, [r2, #0]
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000170 	.word	0x20000170
 8001174:	20000094 	.word	0x20000094
 8001178:	20000174 	.word	0x20000174
 800117c:	20000158 	.word	0x20000158
 8001180:	20000128 	.word	0x20000128
 8001184:	20000124 	.word	0x20000124
 8001188:	2000018c 	.word	0x2000018c

0800118c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3b04      	subs	r3, #4
 800119c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3b04      	subs	r3, #4
 80011aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f023 0201 	bic.w	r2, r3, #1
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3b04      	subs	r3, #4
 80011ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <pxPortInitialiseStack+0x64>)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3b14      	subs	r3, #20
 80011c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3b04      	subs	r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f06f 0202 	mvn.w	r2, #2
 80011da:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3b20      	subs	r3, #32
 80011e0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	080011f5 	.word	0x080011f5

080011f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <prvTaskExitError+0x54>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001206:	d00a      	beq.n	800121e <prvTaskExitError+0x2a>
        __asm volatile
 8001208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800120c:	f383 8811 	msr	BASEPRI, r3
 8001210:	f3bf 8f6f 	isb	sy
 8001214:	f3bf 8f4f 	dsb	sy
 8001218:	60fb      	str	r3, [r7, #12]
    }
 800121a:	bf00      	nop
 800121c:	e7fe      	b.n	800121c <prvTaskExitError+0x28>
        __asm volatile
 800121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001222:	f383 8811 	msr	BASEPRI, r3
 8001226:	f3bf 8f6f 	isb	sy
 800122a:	f3bf 8f4f 	dsb	sy
 800122e:	60bb      	str	r3, [r7, #8]
    }
 8001230:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001232:	bf00      	nop
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0fc      	beq.n	8001234 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000004 	.word	0x20000004
 800124c:	00000000 	.word	0x00000000

08001250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <pxCurrentTCBConst2>)
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	6808      	ldr	r0, [r1, #0]
 8001256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800125a:	f380 8809 	msr	PSP, r0
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	f04f 0000 	mov.w	r0, #0
 8001266:	f380 8811 	msr	BASEPRI, r0
 800126a:	4770      	bx	lr
 800126c:	f3af 8000 	nop.w

08001270 <pxCurrentTCBConst2>:
 8001270:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop

08001278 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <prvPortStartFirstTask+0x24>)
 800127a:	6800      	ldr	r0, [r0, #0]
 800127c:	6800      	ldr	r0, [r0, #0]
 800127e:	f380 8808 	msr	MSP, r0
 8001282:	f04f 0000 	mov.w	r0, #0
 8001286:	f380 8814 	msr	CONTROL, r0
 800128a:	b662      	cpsie	i
 800128c:	b661      	cpsie	f
 800128e:	f3bf 8f4f 	dsb	sy
 8001292:	f3bf 8f6f 	isb	sy
 8001296:	df00      	svc	0
 8001298:	bf00      	nop
 800129a:	0000      	.short	0x0000
 800129c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop

080012a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012aa:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <xPortStartScheduler+0x120>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a46      	ldr	r2, [pc, #280]	; (80013c8 <xPortStartScheduler+0x124>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d10a      	bne.n	80012ca <xPortStartScheduler+0x26>
        __asm volatile
 80012b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b8:	f383 8811 	msr	BASEPRI, r3
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f3bf 8f4f 	dsb	sy
 80012c4:	613b      	str	r3, [r7, #16]
    }
 80012c6:	bf00      	nop
 80012c8:	e7fe      	b.n	80012c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <xPortStartScheduler+0x120>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a3f      	ldr	r2, [pc, #252]	; (80013cc <xPortStartScheduler+0x128>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d10a      	bne.n	80012ea <xPortStartScheduler+0x46>
        __asm volatile
 80012d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d8:	f383 8811 	msr	BASEPRI, r3
 80012dc:	f3bf 8f6f 	isb	sy
 80012e0:	f3bf 8f4f 	dsb	sy
 80012e4:	60fb      	str	r3, [r7, #12]
    }
 80012e6:	bf00      	nop
 80012e8:	e7fe      	b.n	80012e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80012ea:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <xPortStartScheduler+0x12c>)
 80012ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <xPortStartScheduler+0x130>)
 8001310:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <xPortStartScheduler+0x134>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001318:	e009      	b.n	800132e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <xPortStartScheduler+0x134>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3b01      	subs	r3, #1
 8001320:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <xPortStartScheduler+0x134>)
 8001322:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001336:	2b80      	cmp	r3, #128	; 0x80
 8001338:	d0ef      	beq.n	800131a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <xPortStartScheduler+0x134>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	d00a      	beq.n	800135c <xPortStartScheduler+0xb8>
        __asm volatile
 8001346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800134a:	f383 8811 	msr	BASEPRI, r3
 800134e:	f3bf 8f6f 	isb	sy
 8001352:	f3bf 8f4f 	dsb	sy
 8001356:	60bb      	str	r3, [r7, #8]
    }
 8001358:	bf00      	nop
 800135a:	e7fe      	b.n	800135a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <xPortStartScheduler+0x134>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <xPortStartScheduler+0x134>)
 8001364:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <xPortStartScheduler+0x134>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800136e:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <xPortStartScheduler+0x134>)
 8001370:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <xPortStartScheduler+0x138>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <xPortStartScheduler+0x138>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001384:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <xPortStartScheduler+0x138>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <xPortStartScheduler+0x138>)
 800138c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001390:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001392:	f000 f963 	bl	800165c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <xPortStartScheduler+0x13c>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800139c:	f000 f982 	bl	80016a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <xPortStartScheduler+0x140>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <xPortStartScheduler+0x140>)
 80013a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80013aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80013ac:	f7ff ff64 	bl	8001278 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80013b0:	f7ff fd58 	bl	8000e64 <vTaskSwitchContext>
    prvTaskExitError();
 80013b4:	f7ff ff1e 	bl	80011f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	410fc271 	.word	0x410fc271
 80013cc:	410fc270 	.word	0x410fc270
 80013d0:	e000e400 	.word	0xe000e400
 80013d4:	20000198 	.word	0x20000198
 80013d8:	2000019c 	.word	0x2000019c
 80013dc:	e000ed20 	.word	0xe000ed20
 80013e0:	20000004 	.word	0x20000004
 80013e4:	e000ef34 	.word	0xe000ef34

080013e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <vInitPrioGroupValue+0xe4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a37      	ldr	r2, [pc, #220]	; (80014d0 <vInitPrioGroupValue+0xe8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d10a      	bne.n	800140e <vInitPrioGroupValue+0x26>
        __asm volatile
 80013f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fc:	f383 8811 	msr	BASEPRI, r3
 8001400:	f3bf 8f6f 	isb	sy
 8001404:	f3bf 8f4f 	dsb	sy
 8001408:	613b      	str	r3, [r7, #16]
    }
 800140a:	bf00      	nop
 800140c:	e7fe      	b.n	800140c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <vInitPrioGroupValue+0xe4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <vInitPrioGroupValue+0xec>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d10a      	bne.n	800142e <vInitPrioGroupValue+0x46>
        __asm volatile
 8001418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800141c:	f383 8811 	msr	BASEPRI, r3
 8001420:	f3bf 8f6f 	isb	sy
 8001424:	f3bf 8f4f 	dsb	sy
 8001428:	60fb      	str	r3, [r7, #12]
    }
 800142a:	bf00      	nop
 800142c:	e7fe      	b.n	800142c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <vInitPrioGroupValue+0xf0>)
 8001430:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	22ff      	movs	r2, #255	; 0xff
 800143e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <vInitPrioGroupValue+0xf4>)
 8001454:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800145c:	e009      	b.n	8001472 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 8001466:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	2b80      	cmp	r3, #128	; 0x80
 800147c:	d0ef      	beq.n	800145e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	d00a      	beq.n	80014a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800148a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800148e:	f383 8811 	msr	BASEPRI, r3
 8001492:	f3bf 8f6f 	isb	sy
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	60bb      	str	r3, [r7, #8]
    }
 800149c:	bf00      	nop
 800149e:	e7fe      	b.n	800149e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 80014a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 80014b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	410fc271 	.word	0x410fc271
 80014d4:	410fc270 	.word	0x410fc270
 80014d8:	e000e400 	.word	0xe000e400
 80014dc:	20000198 	.word	0x20000198
 80014e0:	2000019c 	.word	0x2000019c

080014e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
        __asm volatile
 80014ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ee:	f383 8811 	msr	BASEPRI, r3
 80014f2:	f3bf 8f6f 	isb	sy
 80014f6:	f3bf 8f4f 	dsb	sy
 80014fa:	607b      	str	r3, [r7, #4]
    }
 80014fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <vPortEnterCritical+0x58>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <vPortEnterCritical+0x58>)
 8001506:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <vPortEnterCritical+0x58>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d10f      	bne.n	8001530 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <vPortEnterCritical+0x5c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00a      	beq.n	8001530 <vPortEnterCritical+0x4c>
        __asm volatile
 800151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151e:	f383 8811 	msr	BASEPRI, r3
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	603b      	str	r3, [r7, #0]
    }
 800152c:	bf00      	nop
 800152e:	e7fe      	b.n	800152e <vPortEnterCritical+0x4a>
    }
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000004 	.word	0x20000004
 8001540:	e000ed04 	.word	0xe000ed04

08001544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <vPortExitCritical+0x50>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10a      	bne.n	8001568 <vPortExitCritical+0x24>
        __asm volatile
 8001552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	607b      	str	r3, [r7, #4]
    }
 8001564:	bf00      	nop
 8001566:	e7fe      	b.n	8001566 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <vPortExitCritical+0x50>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <vPortExitCritical+0x50>)
 8001570:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <vPortExitCritical+0x50>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d105      	bne.n	8001586 <vPortExitCritical+0x42>
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001584:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000004 	.word	0x20000004
	...

080015a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80015a0:	f3ef 8009 	mrs	r0, PSP
 80015a4:	f3bf 8f6f 	isb	sy
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <pxCurrentTCBConst>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f01e 0f10 	tst.w	lr, #16
 80015b0:	bf08      	it	eq
 80015b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80015b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ba:	6010      	str	r0, [r2, #0]
 80015bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80015c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015c4:	f380 8811 	msr	BASEPRI, r0
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	f3bf 8f6f 	isb	sy
 80015d0:	f7ff fc48 	bl	8000e64 <vTaskSwitchContext>
 80015d4:	f04f 0000 	mov.w	r0, #0
 80015d8:	f380 8811 	msr	BASEPRI, r0
 80015dc:	bc09      	pop	{r0, r3}
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	6808      	ldr	r0, [r1, #0]
 80015e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015e6:	f01e 0f10 	tst.w	lr, #16
 80015ea:	bf08      	it	eq
 80015ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80015f0:	f380 8809 	msr	PSP, r0
 80015f4:	f3bf 8f6f 	isb	sy
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w

08001600 <pxCurrentTCBConst>:
 8001600:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop

08001608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
        __asm volatile
 800160e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001612:	f383 8811 	msr	BASEPRI, r3
 8001616:	f3bf 8f6f 	isb	sy
 800161a:	f3bf 8f4f 	dsb	sy
 800161e:	607b      	str	r3, [r7, #4]
    }
 8001620:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001622:	f001 fd85 	bl	8003130 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001626:	f7ff fb61 	bl	8000cec <xTaskIncrementTick>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001630:	f001 fddc 	bl	80031ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <SysTick_Handler+0x50>)
 8001636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e001      	b.n	8001642 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800163e:	f001 fdb9 	bl	80031b4 <SEGGER_SYSVIEW_RecordExitISR>
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f383 8811 	msr	BASEPRI, r3
    }
 800164c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000ed04 	.word	0xe000ed04

0800165c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <vPortSetupTimerInterrupt+0x34>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <vPortSetupTimerInterrupt+0x38>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <vPortSetupTimerInterrupt+0x3c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <vPortSetupTimerInterrupt+0x40>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <vPortSetupTimerInterrupt+0x44>)
 800167a:	3b01      	subs	r3, #1
 800167c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <vPortSetupTimerInterrupt+0x34>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010
 8001694:	e000e018 	.word	0xe000e018
 8001698:	20000008 	.word	0x20000008
 800169c:	10624dd3 	.word	0x10624dd3
 80016a0:	e000e014 	.word	0xe000e014

080016a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80016a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80016b4 <vPortEnableVFP+0x10>
 80016a8:	6801      	ldr	r1, [r0, #0]
 80016aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80016ae:	6001      	str	r1, [r0, #0]
 80016b0:	4770      	bx	lr
 80016b2:	0000      	.short	0x0000
 80016b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop

080016bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80016c2:	f3ef 8305 	mrs	r3, IPSR
 80016c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	d914      	bls.n	80016f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <vPortValidateInterruptPriority+0x70>)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <vPortValidateInterruptPriority+0x74>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	7afa      	ldrb	r2, [r7, #11]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d20a      	bcs.n	80016f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80016e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e6:	f383 8811 	msr	BASEPRI, r3
 80016ea:	f3bf 8f6f 	isb	sy
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	607b      	str	r3, [r7, #4]
    }
 80016f4:	bf00      	nop
 80016f6:	e7fe      	b.n	80016f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <vPortValidateInterruptPriority+0x78>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <vPortValidateInterruptPriority+0x7c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d90a      	bls.n	800171e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800170c:	f383 8811 	msr	BASEPRI, r3
 8001710:	f3bf 8f6f 	isb	sy
 8001714:	f3bf 8f4f 	dsb	sy
 8001718:	603b      	str	r3, [r7, #0]
    }
 800171a:	bf00      	nop
 800171c:	e7fe      	b.n	800171c <vPortValidateInterruptPriority+0x60>
    }
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e3f0 	.word	0xe000e3f0
 8001730:	20000198 	.word	0x20000198
 8001734:	e000ed0c 	.word	0xe000ed0c
 8001738:	2000019c 	.word	0x2000019c

0800173c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001748:	f7ff fa10 	bl	8000b6c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800174c:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <pvPortMalloc+0x1a8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001754:	f000 f934 	bl	80019c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001758:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <pvPortMalloc+0x1ac>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 80a7 	bne.w	80018b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d02d      	beq.n	80017c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800176c:	2208      	movs	r2, #8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d227      	bcs.n	80017c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001778:	2208      	movs	r2, #8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	2b00      	cmp	r3, #0
 8001788:	d021      	beq.n	80017ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f023 0307 	bic.w	r3, r3, #7
 8001790:	3308      	adds	r3, #8
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	d214      	bcs.n	80017c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f023 0307 	bic.w	r3, r3, #7
 800179e:	3308      	adds	r3, #8
 80017a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d010      	beq.n	80017ce <pvPortMalloc+0x92>
        __asm volatile
 80017ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b0:	f383 8811 	msr	BASEPRI, r3
 80017b4:	f3bf 8f6f 	isb	sy
 80017b8:	f3bf 8f4f 	dsb	sy
 80017bc:	617b      	str	r3, [r7, #20]
    }
 80017be:	bf00      	nop
 80017c0:	e7fe      	b.n	80017c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017c6:	e002      	b.n	80017ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	e000      	b.n	80017d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d06e      	beq.n	80018b4 <pvPortMalloc+0x178>
 80017d6:	4b45      	ldr	r3, [pc, #276]	; (80018ec <pvPortMalloc+0x1b0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d869      	bhi.n	80018b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80017e0:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <pvPortMalloc+0x1b4>)
 80017e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80017e4:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <pvPortMalloc+0x1b4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017ea:	e004      	b.n	80017f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d903      	bls.n	8001808 <pvPortMalloc+0xcc>
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f1      	bne.n	80017ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <pvPortMalloc+0x1a8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180e:	429a      	cmp	r2, r3
 8001810:	d050      	beq.n	80018b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2208      	movs	r2, #8
 8001818:	4413      	add	r3, r2
 800181a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	1ad2      	subs	r2, r2, r3
 800182c:	2308      	movs	r3, #8
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	429a      	cmp	r2, r3
 8001832:	d91f      	bls.n	8001874 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00a      	beq.n	800185c <pvPortMalloc+0x120>
        __asm volatile
 8001846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184a:	f383 8811 	msr	BASEPRI, r3
 800184e:	f3bf 8f6f 	isb	sy
 8001852:	f3bf 8f4f 	dsb	sy
 8001856:	613b      	str	r3, [r7, #16]
    }
 8001858:	bf00      	nop
 800185a:	e7fe      	b.n	800185a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800186e:	69b8      	ldr	r0, [r7, #24]
 8001870:	f000 f908 	bl	8001a84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <pvPortMalloc+0x1b0>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <pvPortMalloc+0x1b0>)
 8001880:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <pvPortMalloc+0x1b0>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <pvPortMalloc+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d203      	bcs.n	8001896 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <pvPortMalloc+0x1b0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <pvPortMalloc+0x1b8>)
 8001894:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <pvPortMalloc+0x1ac>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	431a      	orrs	r2, r3
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <pvPortMalloc+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <pvPortMalloc+0x1bc>)
 80018b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80018b4:	f7ff f968 	bl	8000b88 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00a      	beq.n	80018d8 <pvPortMalloc+0x19c>
        __asm volatile
 80018c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c6:	f383 8811 	msr	BASEPRI, r3
 80018ca:	f3bf 8f6f 	isb	sy
 80018ce:	f3bf 8f4f 	dsb	sy
 80018d2:	60fb      	str	r3, [r7, #12]
    }
 80018d4:	bf00      	nop
 80018d6:	e7fe      	b.n	80018d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80018d8:	69fb      	ldr	r3, [r7, #28]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20012da8 	.word	0x20012da8
 80018e8:	20012dbc 	.word	0x20012dbc
 80018ec:	20012dac 	.word	0x20012dac
 80018f0:	20012da0 	.word	0x20012da0
 80018f4:	20012db0 	.word	0x20012db0
 80018f8:	20012db4 	.word	0x20012db4

080018fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d04d      	beq.n	80019aa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800190e:	2308      	movs	r3, #8
 8001910:	425b      	negs	r3, r3
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4413      	add	r3, r2
 8001916:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <vPortFree+0xb8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10a      	bne.n	8001940 <vPortFree+0x44>
        __asm volatile
 800192a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	60fb      	str	r3, [r7, #12]
    }
 800193c:	bf00      	nop
 800193e:	e7fe      	b.n	800193e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00a      	beq.n	800195e <vPortFree+0x62>
        __asm volatile
 8001948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194c:	f383 8811 	msr	BASEPRI, r3
 8001950:	f3bf 8f6f 	isb	sy
 8001954:	f3bf 8f4f 	dsb	sy
 8001958:	60bb      	str	r3, [r7, #8]
    }
 800195a:	bf00      	nop
 800195c:	e7fe      	b.n	800195c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <vPortFree+0xb8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01e      	beq.n	80019aa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d11a      	bne.n	80019aa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <vPortFree+0xb8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001984:	f7ff f8f2 	bl	8000b6c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <vPortFree+0xbc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4413      	add	r3, r2
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <vPortFree+0xbc>)
 8001994:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001996:	6938      	ldr	r0, [r7, #16]
 8001998:	f000 f874 	bl	8001a84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <vPortFree+0xc0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a06      	ldr	r2, [pc, #24]	; (80019bc <vPortFree+0xc0>)
 80019a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80019a6:	f7ff f8ef 	bl	8000b88 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20012dbc 	.word	0x20012dbc
 80019b8:	20012dac 	.word	0x20012dac
 80019bc:	20012db8 	.word	0x20012db8

080019c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80019c6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80019ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <prvHeapInit+0xac>)
 80019ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00c      	beq.n	80019f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3307      	adds	r3, #7
 80019de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <prvHeapInit+0xac>)
 80019f0:	4413      	add	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <prvHeapInit+0xb0>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <prvHeapInit+0xb0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 0307 	bic.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <prvHeapInit+0xb4>)
 8001a20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <prvHeapInit+0xb4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <prvHeapInit+0xb4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <prvHeapInit+0xb4>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <prvHeapInit+0xb8>)
 8001a4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <prvHeapInit+0xbc>)
 8001a56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <prvHeapInit+0xc0>)
 8001a5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a5e:	601a      	str	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	200001a0 	.word	0x200001a0
 8001a70:	20012da0 	.word	0x20012da0
 8001a74:	20012da8 	.word	0x20012da8
 8001a78:	20012db0 	.word	0x20012db0
 8001a7c:	20012dac 	.word	0x20012dac
 8001a80:	20012dbc 	.word	0x20012dbc

08001a84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <prvInsertBlockIntoFreeList+0xac>)
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e002      	b.n	8001a98 <prvInsertBlockIntoFreeList+0x14>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d8f7      	bhi.n	8001a92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	4413      	add	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d108      	bne.n	8001ac6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	441a      	add	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d118      	bne.n	8001b0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <prvInsertBlockIntoFreeList+0xb0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d00d      	beq.n	8001b02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	441a      	add	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e008      	b.n	8001b14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <prvInsertBlockIntoFreeList+0xb0>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e003      	b.n	8001b14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d002      	beq.n	8001b22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20012da0 	.word	0x20012da0
 8001b34:	20012da8 	.word	0x20012da8

08001b38 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <_cbSendSystemDesc+0x14>)
 8001b3e:	f001 faa1 	bl	8003084 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <_cbSendSystemDesc+0x18>)
 8001b44:	f001 fa9e 	bl	8003084 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	080065c0 	.word	0x080065c0
 8001b50:	08006608 	.word	0x08006608

08001b54 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <SEGGER_SYSVIEW_Conf+0x20>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SEGGER_SYSVIEW_Conf+0x20>)
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <SEGGER_SYSVIEW_Conf+0x24>)
 8001b62:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <SEGGER_SYSVIEW_Conf+0x28>)
 8001b64:	f000 ff14 	bl	8002990 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001b68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b6c:	f000 ff54 	bl	8002a18 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000008 	.word	0x20000008
 8001b78:	08001b39 	.word	0x08001b39
 8001b7c:	08006728 	.word	0x08006728

08001b80 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e033      	b.n	8001bf4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001b8c:	491e      	ldr	r1, [pc, #120]	; (8001c08 <_cbSendTaskList+0x88>)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	491a      	ldr	r1, [pc, #104]	; (8001c08 <_cbSendTaskList+0x88>)
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3304      	adds	r3, #4
 8001bac:	6819      	ldr	r1, [r3, #0]
 8001bae:	4c16      	ldr	r4, [pc, #88]	; (8001c08 <_cbSendTaskList+0x88>)
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4423      	add	r3, r4
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	681c      	ldr	r4, [r3, #0]
 8001bc0:	4d11      	ldr	r5, [pc, #68]	; (8001c08 <_cbSendTaskList+0x88>)
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	442b      	add	r3, r5
 8001bce:	330c      	adds	r3, #12
 8001bd0:	681d      	ldr	r5, [r3, #0]
 8001bd2:	4e0d      	ldr	r6, [pc, #52]	; (8001c08 <_cbSendTaskList+0x88>)
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4433      	add	r3, r6
 8001be0:	3310      	adds	r3, #16
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	462b      	mov	r3, r5
 8001be8:	4622      	mov	r2, r4
 8001bea:	f000 f8bd 	bl	8001d68 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <_cbSendTaskList+0x8c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d3c6      	bcc.n	8001b8c <_cbSendTaskList+0xc>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c08:	20012dc0 	.word	0x20012dc0
 8001c0c:	20012e60 	.word	0x20012e60

08001c10 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001c18:	f7ff f856 	bl	8000cc8 <xTaskGetTickCountFromISR>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2200      	movs	r2, #0
 8001c20:	469a      	mov	sl, r3
 8001c22:	4693      	mov	fp, r2
 8001c24:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	f04f 0a00 	mov.w	sl, #0
 8001c34:	f04f 0b00 	mov.w	fp, #0
 8001c38:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001c3c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001c40:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001c44:	4652      	mov	r2, sl
 8001c46:	465b      	mov	r3, fp
 8001c48:	1a14      	subs	r4, r2, r0
 8001c4a:	eb63 0501 	sbc.w	r5, r3, r1
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	00ab      	lsls	r3, r5, #2
 8001c58:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001c5c:	00a2      	lsls	r2, r4, #2
 8001c5e:	4614      	mov	r4, r2
 8001c60:	461d      	mov	r5, r3
 8001c62:	eb14 0800 	adds.w	r8, r4, r0
 8001c66:	eb45 0901 	adc.w	r9, r5, r1
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c7e:	4690      	mov	r8, r2
 8001c80:	4699      	mov	r9, r3
 8001c82:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001c86:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001c98 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001ca6:	2205      	movs	r2, #5
 8001ca8:	492b      	ldr	r1, [pc, #172]	; (8001d58 <SYSVIEW_AddTask+0xc0>)
 8001caa:	68b8      	ldr	r0, [r7, #8]
 8001cac:	f003 fc2c 	bl	8005508 <memcmp>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d04b      	beq.n	8001d4e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <SYSVIEW_AddTask+0xc4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b07      	cmp	r3, #7
 8001cbc:	d903      	bls.n	8001cc6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001cbe:	4828      	ldr	r0, [pc, #160]	; (8001d60 <SYSVIEW_AddTask+0xc8>)
 8001cc0:	f001 fce2 	bl	8003688 <SEGGER_SYSVIEW_Warn>
    return;
 8001cc4:	e044      	b.n	8001d50 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <SYSVIEW_AddTask+0xc4>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4926      	ldr	r1, [pc, #152]	; (8001d64 <SYSVIEW_AddTask+0xcc>)
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <SYSVIEW_AddTask+0xc4>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4921      	ldr	r1, [pc, #132]	; (8001d64 <SYSVIEW_AddTask+0xcc>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	3304      	adds	r3, #4
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <SYSVIEW_AddTask+0xc4>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	491b      	ldr	r1, [pc, #108]	; (8001d64 <SYSVIEW_AddTask+0xcc>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3308      	adds	r3, #8
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <SYSVIEW_AddTask+0xc4>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4916      	ldr	r1, [pc, #88]	; (8001d64 <SYSVIEW_AddTask+0xcc>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	330c      	adds	r3, #12
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <SYSVIEW_AddTask+0xc4>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4910      	ldr	r1, [pc, #64]	; (8001d64 <SYSVIEW_AddTask+0xcc>)
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3310      	adds	r3, #16
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <SYSVIEW_AddTask+0xc4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <SYSVIEW_AddTask+0xc4>)
 8001d3a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f80e 	bl	8001d68 <SYSVIEW_SendTaskInfo>
 8001d4c:	e000      	b.n	8001d50 <SYSVIEW_AddTask+0xb8>
    return;
 8001d4e:	bf00      	nop

}
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	08006618 	.word	0x08006618
 8001d5c:	20012e60 	.word	0x20012e60
 8001d60:	08006620 	.word	0x08006620
 8001d64:	20012dc0 	.word	0x20012dc0

08001d68 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	2214      	movs	r2, #20
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fbe0 	bl	8005544 <memset>
  TaskInfo.TaskID     = TaskID;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f001 f879 	bl	8002e94 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <_DoInit+0x98>)
 8001db4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2203      	movs	r2, #3
 8001dba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <_DoInit+0x9c>)
 8001dc6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a20      	ldr	r2, [pc, #128]	; (8001e4c <_DoInit+0xa0>)
 8001dcc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dd4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <_DoInit+0x9c>)
 8001dec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <_DoInit+0xa4>)
 8001df2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2210      	movs	r2, #16
 8001df8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3307      	adds	r3, #7
 8001e10:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <_DoInit+0xa8>)
 8001e12:	6810      	ldr	r0, [r2, #0]
 8001e14:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001e16:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <_DoInit+0xac>)
 8001e1e:	6810      	ldr	r0, [r2, #0]
 8001e20:	6018      	str	r0, [r3, #0]
 8001e22:	8891      	ldrh	r1, [r2, #4]
 8001e24:	7992      	ldrb	r2, [r2, #6]
 8001e26:	8099      	strh	r1, [r3, #4]
 8001e28:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001e2a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001e34:	f3bf 8f5f 	dmb	sy
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	20012e64 	.word	0x20012e64
 8001e48:	08006670 	.word	0x08006670
 8001e4c:	20012f0c 	.word	0x20012f0c
 8001e50:	20013f0c 	.word	0x20013f0c
 8001e54:	0800667c 	.word	0x0800667c
 8001e58:	08006680 	.word	0x08006680

08001e5c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d905      	bls.n	8001e8c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	e007      	b.n	8001e9c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	69b9      	ldr	r1, [r7, #24]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	1acb      	subs	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	bf28      	it	cs
 8001eaa:	4613      	movcs	r3, r2
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	bf28      	it	cs
 8001eb6:	4613      	movcs	r3, r2
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8001ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f003 fb2d 	bl	8005528 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001ece:	6a3a      	ldr	r2, [r7, #32]
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	4413      	add	r3, r2
 8001ed4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	4413      	add	r3, r2
 8001edc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	4413      	add	r3, r2
 8001eec:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d101      	bne.n	8001efc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001efc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1b2      	bne.n	8001e72 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b088      	sub	sp, #32
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d911      	bls.n	8001f5e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	4413      	add	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	6938      	ldr	r0, [r7, #16]
 8001f4a:	f003 faed 	bl	8005528 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001f4e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	441a      	add	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001f5c:	e01f      	b.n	8001f9e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	6938      	ldr	r0, [r7, #16]
 8001f72:	f003 fad9 	bl	8005528 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4413      	add	r3, r2
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6938      	ldr	r0, [r7, #16]
 8001f90:	f003 faca 	bl	8005528 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001f94:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	60da      	str	r2, [r3, #12]
}
 8001f9e:	bf00      	nop
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8001fa6:	b480      	push	{r7}
 8001fa8:	b087      	sub	sp, #28
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d808      	bhi.n	8001fd4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad2      	subs	r2, r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e004      	b.n	8001fde <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001fde:	697b      	ldr	r3, [r7, #20]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	; 0x30
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8001ff8:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <SEGGER_RTT_ReadNoLock+0x1e>
 8002006:	f7ff fed1 	bl	8001dac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	3360      	adds	r3, #96	; 0x60
 8002016:	4a37      	ldr	r2, [pc, #220]	; (80020f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8002018:	4413      	add	r3, r2
 800201a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800202c:	2300      	movs	r3, #0
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	429a      	cmp	r2, r3
 8002036:	d92b      	bls.n	8002090 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4293      	cmp	r3, r2
 8002048:	bf28      	it	cs
 800204a:	4613      	movcs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	4413      	add	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	6939      	ldr	r1, [r7, #16]
 800205c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800205e:	f003 fa63 	bl	8005528 <memcpy>
    NumBytesRead += NumBytesRem;
 8002062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	4413      	add	r3, r2
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	4413      	add	r3, r2
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800207a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	4413      	add	r3, r2
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002088:	429a      	cmp	r2, r3
 800208a:	d101      	bne.n	8002090 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4293      	cmp	r3, r2
 800209e:	bf28      	it	cs
 80020a0:	4613      	movcs	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d019      	beq.n	80020de <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	4413      	add	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	6939      	ldr	r1, [r7, #16]
 80020b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ba:	f003 fa35 	bl	8005528 <memcpy>
    NumBytesRead += NumBytesRem;
 80020be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4413      	add	r3, r2
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4413      	add	r3, r2
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80020d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	4413      	add	r3, r2
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020e8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80020ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3730      	adds	r7, #48	; 0x30
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20012e64 	.word	0x20012e64

080020f8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <SEGGER_RTT_WriteNoLock+0x9c>)
 8002116:	4413      	add	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d029      	beq.n	8002176 <SEGGER_RTT_WriteNoLock+0x7e>
 8002122:	2b02      	cmp	r3, #2
 8002124:	d82e      	bhi.n	8002184 <SEGGER_RTT_WriteNoLock+0x8c>
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <SEGGER_RTT_WriteNoLock+0x38>
 800212a:	2b01      	cmp	r3, #1
 800212c:	d013      	beq.n	8002156 <SEGGER_RTT_WriteNoLock+0x5e>
 800212e:	e029      	b.n	8002184 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002130:	6978      	ldr	r0, [r7, #20]
 8002132:	f7ff ff38 	bl	8001fa6 <_GetAvailWriteSpace>
 8002136:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d202      	bcs.n	8002146 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002144:	e021      	b.n	800218a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	69b9      	ldr	r1, [r7, #24]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff fee1 	bl	8001f16 <_WriteNoCheck>
    break;
 8002154:	e019      	b.n	800218a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff25 	bl	8001fa6 <_GetAvailWriteSpace>
 800215c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4293      	cmp	r3, r2
 8002164:	bf28      	it	cs
 8002166:	4613      	movcs	r3, r2
 8002168:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	69b9      	ldr	r1, [r7, #24]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff fed1 	bl	8001f16 <_WriteNoCheck>
    break;
 8002174:	e009      	b.n	800218a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	69b9      	ldr	r1, [r7, #24]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff fe6e 	bl	8001e5c <_WriteBlocking>
 8002180:	61f8      	str	r0, [r7, #28]
    break;
 8002182:	e002      	b.n	800218a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
    break;
 8002188:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800218a:	69fb      	ldr	r3, [r7, #28]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20012e64 	.word	0x20012e64

08002198 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80021a4:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <SEGGER_RTT_Write+0x48>)
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <SEGGER_RTT_Write+0x1e>
 80021b2:	f7ff fdfb 	bl	8001dac <_DoInit>
  SEGGER_RTT_LOCK();
 80021b6:	f3ef 8311 	mrs	r3, BASEPRI
 80021ba:	f04f 0120 	mov.w	r1, #32
 80021be:	f381 8811 	msr	BASEPRI, r1
 80021c2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7ff ff95 	bl	80020f8 <SEGGER_RTT_WriteNoLock>
 80021ce:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80021d6:	697b      	ldr	r3, [r7, #20]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20012e64 	.word	0x20012e64

080021e4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002200:	f7ff fdd4 	bl	8001dac <_DoInit>
  SEGGER_RTT_LOCK();
 8002204:	f3ef 8311 	mrs	r3, BASEPRI
 8002208:	f04f 0120 	mov.w	r1, #32
 800220c:	f381 8811 	msr	BASEPRI, r1
 8002210:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002212:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002214:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800221a:	6939      	ldr	r1, [r7, #16]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	3304      	adds	r3, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	429a      	cmp	r2, r3
 8002240:	dbeb      	blt.n	800221a <SEGGER_RTT_AllocUpBuffer+0x36>
 8002242:	e000      	b.n	8002246 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002244:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	da3f      	bge.n	80022d0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002250:	6939      	ldr	r1, [r7, #16]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002264:	6939      	ldr	r1, [r7, #16]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	3304      	adds	r3, #4
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800227a:	6939      	ldr	r1, [r7, #16]
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	3320      	adds	r3, #32
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800228e:	6939      	ldr	r1, [r7, #16]
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	3328      	adds	r3, #40	; 0x28
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80022a2:	6939      	ldr	r1, [r7, #16]
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3324      	adds	r3, #36	; 0x24
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80022b6:	6939      	ldr	r1, [r7, #16]
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	332c      	adds	r3, #44	; 0x2c
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80022ca:	f3bf 8f5f 	dmb	sy
 80022ce:	e002      	b.n	80022d6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80022dc:	69fb      	ldr	r3, [r7, #28]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20012e64 	.word	0x20012e64

080022ec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80022fa:	4b33      	ldr	r3, [pc, #204]	; (80023c8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002308:	f7ff fd50 	bl	8001dac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800230e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	461a      	mov	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4293      	cmp	r3, r2
 800231a:	d24d      	bcs.n	80023b8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800231c:	f3ef 8311 	mrs	r3, BASEPRI
 8002320:	f04f 0120 	mov.w	r1, #32
 8002324:	f381 8811 	msr	BASEPRI, r1
 8002328:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d031      	beq.n	8002394 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8002330:	6979      	ldr	r1, [r7, #20]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	3360      	adds	r3, #96	; 0x60
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002344:	6979      	ldr	r1, [r7, #20]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3364      	adds	r3, #100	; 0x64
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002358:	6979      	ldr	r1, [r7, #20]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	3368      	adds	r3, #104	; 0x68
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800236c:	6979      	ldr	r1, [r7, #20]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	3370      	adds	r3, #112	; 0x70
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8002380:	6979      	ldr	r1, [r7, #20]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	336c      	adds	r3, #108	; 0x6c
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8002394:	6979      	ldr	r1, [r7, #20]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	3374      	adds	r3, #116	; 0x74
 80023a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80023a8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e002      	b.n	80023be <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023bc:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80023be:	69fb      	ldr	r3, [r7, #28]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20012e64 	.word	0x20012e64

080023cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80023dc:	e002      	b.n	80023e4 <_EncodeStr+0x18>
    Len++;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	3301      	adds	r3, #1
 80023e2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f6      	bne.n	80023de <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d901      	bls.n	80023fc <_EncodeStr+0x30>
    Len = Limit;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2bfe      	cmp	r3, #254	; 0xfe
 8002400:	d806      	bhi.n	8002410 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	60fa      	str	r2, [r7, #12]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e011      	b.n	8002434 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	60fa      	str	r2, [r7, #12]
 8002416:	22ff      	movs	r2, #255	; 0xff
 8002418:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	60fa      	str	r2, [r7, #12]
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	0a19      	lsrs	r1, r3, #8
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	b2ca      	uxtb	r2, r1
 8002432:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002438:	e00a      	b.n	8002450 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	1c53      	adds	r3, r2, #1
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1c59      	adds	r1, r3, #1
 8002444:	60f9      	str	r1, [r7, #12]
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	701a      	strb	r2, [r3, #0]
    n++;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d3f0      	bcc.n	800243a <_EncodeStr+0x6e>
  }
  return pPayload;
 8002458:	68fb      	ldr	r3, [r7, #12]
}
 800245a:	4618      	mov	r0, r3
 800245c:	371c      	adds	r7, #28
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3304      	adds	r3, #4
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002486:	4b36      	ldr	r3, [pc, #216]	; (8002560 <_HandleIncomingPacket+0xe0>)
 8002488:	7e1b      	ldrb	r3, [r3, #24]
 800248a:	4618      	mov	r0, r3
 800248c:	1cfb      	adds	r3, r7, #3
 800248e:	2201      	movs	r2, #1
 8002490:	4619      	mov	r1, r3
 8002492:	f7ff fdab 	bl	8001fec <SEGGER_RTT_ReadNoLock>
 8002496:	4603      	mov	r3, r0
 8002498:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	dd54      	ble.n	800254a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d032      	beq.n	800250c <_HandleIncomingPacket+0x8c>
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	dc42      	bgt.n	8002530 <_HandleIncomingPacket+0xb0>
 80024aa:	2b07      	cmp	r3, #7
 80024ac:	dc16      	bgt.n	80024dc <_HandleIncomingPacket+0x5c>
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	dd3e      	ble.n	8002530 <_HandleIncomingPacket+0xb0>
 80024b2:	3b01      	subs	r3, #1
 80024b4:	2b06      	cmp	r3, #6
 80024b6:	d83b      	bhi.n	8002530 <_HandleIncomingPacket+0xb0>
 80024b8:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <_HandleIncomingPacket+0x40>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	080024e3 	.word	0x080024e3
 80024c4:	080024e9 	.word	0x080024e9
 80024c8:	080024ef 	.word	0x080024ef
 80024cc:	080024f5 	.word	0x080024f5
 80024d0:	080024fb 	.word	0x080024fb
 80024d4:	08002501 	.word	0x08002501
 80024d8:	08002507 	.word	0x08002507
 80024dc:	2b7f      	cmp	r3, #127	; 0x7f
 80024de:	d036      	beq.n	800254e <_HandleIncomingPacket+0xce>
 80024e0:	e026      	b.n	8002530 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80024e2:	f000 fb5d 	bl	8002ba0 <SEGGER_SYSVIEW_Start>
      break;
 80024e6:	e037      	b.n	8002558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80024e8:	f000 fc14 	bl	8002d14 <SEGGER_SYSVIEW_Stop>
      break;
 80024ec:	e034      	b.n	8002558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80024ee:	f000 fded 	bl	80030cc <SEGGER_SYSVIEW_RecordSystime>
      break;
 80024f2:	e031      	b.n	8002558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80024f4:	f000 fdb2 	bl	800305c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80024f8:	e02e      	b.n	8002558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80024fa:	f000 fc31 	bl	8002d60 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80024fe:	e02b      	b.n	8002558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002500:	f001 f870 	bl	80035e4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002504:	e028      	b.n	8002558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002506:	f001 f84f 	bl	80035a8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800250a:	e025      	b.n	8002558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <_HandleIncomingPacket+0xe0>)
 800250e:	7e1b      	ldrb	r3, [r3, #24]
 8002510:	4618      	mov	r0, r3
 8002512:	1cfb      	adds	r3, r7, #3
 8002514:	2201      	movs	r2, #1
 8002516:	4619      	mov	r1, r3
 8002518:	f7ff fd68 	bl	8001fec <SEGGER_RTT_ReadNoLock>
 800251c:	4603      	mov	r3, r0
 800251e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	dd15      	ble.n	8002552 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 ffbd 	bl	80034a8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800252e:	e010      	b.n	8002552 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	b25b      	sxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	da0e      	bge.n	8002556 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <_HandleIncomingPacket+0xe0>)
 800253a:	7e1b      	ldrb	r3, [r3, #24]
 800253c:	4618      	mov	r0, r3
 800253e:	1cfb      	adds	r3, r7, #3
 8002540:	2201      	movs	r2, #1
 8002542:	4619      	mov	r1, r3
 8002544:	f7ff fd52 	bl	8001fec <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002548:	e005      	b.n	8002556 <_HandleIncomingPacket+0xd6>
    }
  }
 800254a:	bf00      	nop
 800254c:	e004      	b.n	8002558 <_HandleIncomingPacket+0xd8>
      break;
 800254e:	bf00      	nop
 8002550:	e002      	b.n	8002558 <_HandleIncomingPacket+0xd8>
      break;
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <_HandleIncomingPacket+0xd8>
      break;
 8002556:	bf00      	nop
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20014f24 	.word	0x20014f24

08002564 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800256a:	2301      	movs	r3, #1
 800256c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	3301      	adds	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <_TrySendOverflowPacket+0xdc>)
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
 800257e:	e00b      	b.n	8002598 <_TrySendOverflowPacket+0x34>
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	b2da      	uxtb	r2, r3
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	1c59      	adds	r1, r3, #1
 8002588:	62f9      	str	r1, [r7, #44]	; 0x2c
 800258a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	09db      	lsrs	r3, r3, #7
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	2b7f      	cmp	r3, #127	; 0x7f
 800259c:	d8f0      	bhi.n	8002580 <_TrySendOverflowPacket+0x1c>
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <_TrySendOverflowPacket+0xe0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <_TrySendOverflowPacket+0xdc>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	623b      	str	r3, [r7, #32]
 80025c6:	e00b      	b.n	80025e0 <_TrySendOverflowPacket+0x7c>
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	1c59      	adds	r1, r3, #1
 80025d0:	6279      	str	r1, [r7, #36]	; 0x24
 80025d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	09db      	lsrs	r3, r3, #7
 80025de:	623b      	str	r3, [r7, #32]
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	2b7f      	cmp	r3, #127	; 0x7f
 80025e4:	d8f0      	bhi.n	80025c8 <_TrySendOverflowPacket+0x64>
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	627a      	str	r2, [r7, #36]	; 0x24
 80025ec:	6a3a      	ldr	r2, [r7, #32]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <_TrySendOverflowPacket+0xdc>)
 80025f8:	785b      	ldrb	r3, [r3, #1]
 80025fa:	4618      	mov	r0, r3
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	461a      	mov	r2, r3
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	4619      	mov	r1, r3
 8002608:	f7fd fde2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800260c:	4603      	mov	r3, r0
 800260e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <_TrySendOverflowPacket+0xdc>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <_TrySendOverflowPacket+0xdc>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	3b01      	subs	r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <_TrySendOverflowPacket+0xdc>)
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e004      	b.n	8002634 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <_TrySendOverflowPacket+0xdc>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <_TrySendOverflowPacket+0xdc>)
 8002632:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002634:	693b      	ldr	r3, [r7, #16]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3730      	adds	r7, #48	; 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20014f24 	.word	0x20014f24
 8002644:	e0001004 	.word	0xe0001004

08002648 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002654:	4b6c      	ldr	r3, [pc, #432]	; (8002808 <_SendPacket+0x1c0>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d010      	beq.n	800267e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <_SendPacket+0x1c0>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a3 	beq.w	80027ac <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002666:	4b68      	ldr	r3, [pc, #416]	; (8002808 <_SendPacket+0x1c0>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d109      	bne.n	8002682 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800266e:	f7ff ff79 	bl	8002564 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <_SendPacket+0x1c0>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	f040 809a 	bne.w	80027b0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800267c:	e001      	b.n	8002682 <_SendPacket+0x3a>
    goto Send;
 800267e:	bf00      	nop
 8002680:	e000      	b.n	8002684 <_SendPacket+0x3c>
Send:
 8002682:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b1f      	cmp	r3, #31
 8002688:	d809      	bhi.n	800269e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800268a:	4b5f      	ldr	r3, [pc, #380]	; (8002808 <_SendPacket+0x1c0>)
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 808b 	bne.w	80027b4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b17      	cmp	r3, #23
 80026a2:	d807      	bhi.n	80026b4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e03d      	b.n	8002730 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b7f      	cmp	r3, #127	; 0x7f
 80026c0:	d912      	bls.n	80026e8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	09da      	lsrs	r2, r3, #7
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	3a01      	subs	r2, #1
 80026da:	60fa      	str	r2, [r7, #12]
 80026dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e006      	b.n	80026f6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b7f      	cmp	r3, #127	; 0x7f
 80026fa:	d912      	bls.n	8002722 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	09da      	lsrs	r2, r3, #7
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3b01      	subs	r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	3a01      	subs	r2, #1
 8002714:	60fa      	str	r2, [r7, #12]
 8002716:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800271a:	b2da      	uxtb	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e006      	b.n	8002730 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3b01      	subs	r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <_SendPacket+0x1c4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002736:	4b34      	ldr	r3, [pc, #208]	; (8002808 <_SendPacket+0x1c0>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	623b      	str	r3, [r7, #32]
 8002748:	e00b      	b.n	8002762 <_SendPacket+0x11a>
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	1c59      	adds	r1, r3, #1
 8002752:	6279      	str	r1, [r7, #36]	; 0x24
 8002754:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	09db      	lsrs	r3, r3, #7
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	2b7f      	cmp	r3, #127	; 0x7f
 8002766:	d8f0      	bhi.n	800274a <_SendPacket+0x102>
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	627a      	str	r2, [r7, #36]	; 0x24
 800276e:	6a3a      	ldr	r2, [r7, #32]
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <_SendPacket+0x1c0>)
 800277a:	785b      	ldrb	r3, [r3, #1]
 800277c:	4618      	mov	r0, r3
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	461a      	mov	r2, r3
 8002786:	68f9      	ldr	r1, [r7, #12]
 8002788:	f7fd fd22 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800278c:	4603      	mov	r3, r0
 800278e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <_SendPacket+0x1c0>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	60d3      	str	r3, [r2, #12]
 800279c:	e00b      	b.n	80027b6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800279e:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <_SendPacket+0x1c0>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <_SendPacket+0x1c0>)
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e004      	b.n	80027b6 <_SendPacket+0x16e>
    goto SendDone;
 80027ac:	bf00      	nop
 80027ae:	e002      	b.n	80027b6 <_SendPacket+0x16e>
      goto SendDone;
 80027b0:	bf00      	nop
 80027b2:	e000      	b.n	80027b6 <_SendPacket+0x16e>
      goto SendDone;
 80027b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <_SendPacket+0x1c0>)
 80027b8:	7e1b      	ldrb	r3, [r3, #24]
 80027ba:	4619      	mov	r1, r3
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <_SendPacket+0x1c8>)
 80027be:	460b      	mov	r3, r1
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	440b      	add	r3, r1
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	336c      	adds	r3, #108	; 0x6c
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <_SendPacket+0x1c0>)
 80027ce:	7e1b      	ldrb	r3, [r3, #24]
 80027d0:	4618      	mov	r0, r3
 80027d2:	490f      	ldr	r1, [pc, #60]	; (8002810 <_SendPacket+0x1c8>)
 80027d4:	4603      	mov	r3, r0
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4403      	add	r3, r0
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	3370      	adds	r3, #112	; 0x70
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d00b      	beq.n	80027fe <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <_SendPacket+0x1c0>)
 80027e8:	789b      	ldrb	r3, [r3, #2]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <_SendPacket+0x1c0>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80027f4:	f7ff fe44 	bl	8002480 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <_SendPacket+0x1c0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20014f24 	.word	0x20014f24
 800280c:	e0001004 	.word	0xe0001004
 8002810:	20012e64 	.word	0x20012e64

08002814 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b0a2      	sub	sp, #136	; 0x88
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800282a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8002836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01d      	beq.n	800287a <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800283e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002842:	2b25      	cmp	r3, #37	; 0x25
 8002844:	d1f1      	bne.n	800282a <_VPrintHost+0x16>
      c = *p;
 8002846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	1d19      	adds	r1, r3, #4
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6011      	str	r1, [r2, #0]
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002864:	460a      	mov	r2, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3388      	adds	r3, #136	; 0x88
 800286a:	443b      	add	r3, r7
 800286c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8002870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002874:	2b10      	cmp	r3, #16
 8002876:	d002      	beq.n	800287e <_VPrintHost+0x6a>
    c = *p++;
 8002878:	e7d7      	b.n	800282a <_VPrintHost+0x16>
      break;
 800287a:	bf00      	nop
 800287c:	e000      	b.n	8002880 <_VPrintHost+0x6c>
        break;
 800287e:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8002880:	f3ef 8311 	mrs	r3, BASEPRI
 8002884:	f04f 0120 	mov.w	r1, #32
 8002888:	f381 8811 	msr	BASEPRI, r1
 800288c:	65bb      	str	r3, [r7, #88]	; 0x58
 800288e:	483f      	ldr	r0, [pc, #252]	; (800298c <_VPrintHost+0x178>)
 8002890:	f7ff fde9 	bl	8002466 <_PreparePacket>
 8002894:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800289c:	f7ff fd96 	bl	80023cc <_EncodeStr>
 80028a0:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 80028a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a4:	677b      	str	r3, [r7, #116]	; 0x74
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	673b      	str	r3, [r7, #112]	; 0x70
 80028aa:	e00b      	b.n	80028c4 <_VPrintHost+0xb0>
 80028ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	6779      	str	r1, [r7, #116]	; 0x74
 80028b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c0:	09db      	lsrs	r3, r3, #7
 80028c2:	673b      	str	r3, [r7, #112]	; 0x70
 80028c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c6:	2b7f      	cmp	r3, #127	; 0x7f
 80028c8:	d8f0      	bhi.n	80028ac <_VPrintHost+0x98>
 80028ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	677a      	str	r2, [r7, #116]	; 0x74
 80028d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d8:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 80028da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028e4:	e00b      	b.n	80028fe <_VPrintHost+0xea>
 80028e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ec:	1c59      	adds	r1, r3, #1
 80028ee:	66f9      	str	r1, [r7, #108]	; 0x6c
 80028f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028fa:	09db      	lsrs	r3, r3, #7
 80028fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80028fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002900:	2b7f      	cmp	r3, #127	; 0x7f
 8002902:	d8f0      	bhi.n	80028e6 <_VPrintHost+0xd2>
 8002904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	66fa      	str	r2, [r7, #108]	; 0x6c
 800290a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002912:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800291c:	e022      	b.n	8002964 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800291e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002920:	667b      	str	r3, [r7, #100]	; 0x64
 8002922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	663b      	str	r3, [r7, #96]	; 0x60
 800292a:	e00b      	b.n	8002944 <_VPrintHost+0x130>
 800292c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800292e:	b2da      	uxtb	r2, r3
 8002930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002932:	1c59      	adds	r1, r3, #1
 8002934:	6679      	str	r1, [r7, #100]	; 0x64
 8002936:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002940:	09db      	lsrs	r3, r3, #7
 8002942:	663b      	str	r3, [r7, #96]	; 0x60
 8002944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002946:	2b7f      	cmp	r3, #127	; 0x7f
 8002948:	d8f0      	bhi.n	800292c <_VPrintHost+0x118>
 800294a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	667a      	str	r2, [r7, #100]	; 0x64
 8002950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002958:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800295a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800295e:	3304      	adds	r3, #4
 8002960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8002964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002968:	1e5a      	subs	r2, r3, #1
 800296a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1d5      	bne.n	800291e <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002972:	221a      	movs	r2, #26
 8002974:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002976:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002978:	f7ff fe66 	bl	8002648 <_SendPacket>
    RECORD_END();
 800297c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800297e:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3788      	adds	r7, #136	; 0x88
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20014f54 	.word	0x20014f54

08002990 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800299e:	2300      	movs	r3, #0
 80029a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029a4:	4917      	ldr	r1, [pc, #92]	; (8002a04 <SEGGER_SYSVIEW_Init+0x74>)
 80029a6:	4818      	ldr	r0, [pc, #96]	; (8002a08 <SEGGER_SYSVIEW_Init+0x78>)
 80029a8:	f7ff fc1c 	bl	80021e4 <SEGGER_RTT_AllocUpBuffer>
 80029ac:	4603      	mov	r3, r0
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029b2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029b6:	785a      	ldrb	r2, [r3, #1]
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029ba:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029be:	7e1b      	ldrb	r3, [r3, #24]
 80029c0:	4618      	mov	r0, r3
 80029c2:	2300      	movs	r3, #0
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2308      	movs	r3, #8
 80029c8:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <SEGGER_SYSVIEW_Init+0x80>)
 80029ca:	490f      	ldr	r1, [pc, #60]	; (8002a08 <SEGGER_SYSVIEW_Init+0x78>)
 80029cc:	f7ff fc8e 	bl	80022ec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <SEGGER_SYSVIEW_Init+0x84>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a0c      	ldr	r2, [pc, #48]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029dc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80029de:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80029e4:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80029f0:	4a06      	ldr	r2, [pc, #24]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <SEGGER_SYSVIEW_Init+0x7c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20013f1c 	.word	0x20013f1c
 8002a08:	08006688 	.word	0x08006688
 8002a0c:	20014f24 	.word	0x20014f24
 8002a10:	20014f1c 	.word	0x20014f1c
 8002a14:	e0001004 	.word	0xe0001004

08002a18 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6113      	str	r3, [r2, #16]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20014f24 	.word	0x20014f24

08002a38 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002a40:	f3ef 8311 	mrs	r3, BASEPRI
 8002a44:	f04f 0120 	mov.w	r1, #32
 8002a48:	f381 8811 	msr	BASEPRI, r1
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002a50:	f7ff fd09 	bl	8002466 <_PreparePacket>
 8002a54:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	68b8      	ldr	r0, [r7, #8]
 8002a5c:	f7ff fdf4 	bl	8002648 <_SendPacket>
  RECORD_END();
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f383 8811 	msr	BASEPRI, r3
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20014f54 	.word	0x20014f54

08002a74 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002a82:	f04f 0120 	mov.w	r1, #32
 8002a86:	f381 8811 	msr	BASEPRI, r1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	4816      	ldr	r0, [pc, #88]	; (8002ae8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002a8e:	f7ff fcea 	bl	8002466 <_PreparePacket>
 8002a92:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e00b      	b.n	8002aba <SEGGER_SYSVIEW_RecordU32+0x46>
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	1c59      	adds	r1, r3, #1
 8002aaa:	61f9      	str	r1, [r7, #28]
 8002aac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	09db      	lsrs	r3, r3, #7
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b7f      	cmp	r3, #127	; 0x7f
 8002abe:	d8f0      	bhi.n	8002aa2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	61fa      	str	r2, [r7, #28]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	6938      	ldr	r0, [r7, #16]
 8002ad6:	f7ff fdb7 	bl	8002648 <_SendPacket>
  RECORD_END();
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f383 8811 	msr	BASEPRI, r3
}
 8002ae0:	bf00      	nop
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20014f54 	.word	0x20014f54

08002aec <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002af8:	f3ef 8311 	mrs	r3, BASEPRI
 8002afc:	f04f 0120 	mov.w	r1, #32
 8002b00:	f381 8811 	msr	BASEPRI, r1
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	4825      	ldr	r0, [pc, #148]	; (8002b9c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002b08:	f7ff fcad 	bl	8002466 <_PreparePacket>
 8002b0c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1a:	e00b      	b.n	8002b34 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	1c59      	adds	r1, r3, #1
 8002b24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	09db      	lsrs	r3, r3, #7
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	2b7f      	cmp	r3, #127	; 0x7f
 8002b38:	d8f0      	bhi.n	8002b1c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	623b      	str	r3, [r7, #32]
 8002b52:	e00b      	b.n	8002b6c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	1c59      	adds	r1, r3, #1
 8002b5c:	6279      	str	r1, [r7, #36]	; 0x24
 8002b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	09db      	lsrs	r3, r3, #7
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b70:	d8f0      	bhi.n	8002b54 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	627a      	str	r2, [r7, #36]	; 0x24
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6979      	ldr	r1, [r7, #20]
 8002b86:	69b8      	ldr	r0, [r7, #24]
 8002b88:	f7ff fd5e 	bl	8002648 <_SendPacket>
  RECORD_END();
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f383 8811 	msr	BASEPRI, r3
}
 8002b92:	bf00      	nop
 8002b94:	3730      	adds	r7, #48	; 0x30
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20014f54 	.word	0x20014f54

08002ba0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08c      	sub	sp, #48	; 0x30
 8002ba4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8002ba6:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <SEGGER_SYSVIEW_Start+0x168>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002bac:	f3ef 8311 	mrs	r3, BASEPRI
 8002bb0:	f04f 0120 	mov.w	r1, #32
 8002bb4:	f381 8811 	msr	BASEPRI, r1
 8002bb8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002bba:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <SEGGER_SYSVIEW_Start+0x168>)
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	220a      	movs	r2, #10
 8002bc0:	4952      	ldr	r1, [pc, #328]	; (8002d0c <SEGGER_SYSVIEW_Start+0x16c>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fb04 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002bce:	200a      	movs	r0, #10
 8002bd0:	f7ff ff32 	bl	8002a38 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8002bd8:	f04f 0120 	mov.w	r1, #32
 8002bdc:	f381 8811 	msr	BASEPRI, r1
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	484b      	ldr	r0, [pc, #300]	; (8002d10 <SEGGER_SYSVIEW_Start+0x170>)
 8002be4:	f7ff fc3f 	bl	8002466 <_PreparePacket>
 8002be8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf2:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <SEGGER_SYSVIEW_Start+0x168>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf8:	e00b      	b.n	8002c12 <SEGGER_SYSVIEW_Start+0x72>
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	1c59      	adds	r1, r3, #1
 8002c02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	09db      	lsrs	r3, r3, #7
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	2b7f      	cmp	r3, #127	; 0x7f
 8002c16:	d8f0      	bhi.n	8002bfa <SEGGER_SYSVIEW_Start+0x5a>
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2c:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <SEGGER_SYSVIEW_Start+0x168>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	623b      	str	r3, [r7, #32]
 8002c32:	e00b      	b.n	8002c4c <SEGGER_SYSVIEW_Start+0xac>
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	1c59      	adds	r1, r3, #1
 8002c3c:	6279      	str	r1, [r7, #36]	; 0x24
 8002c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	09db      	lsrs	r3, r3, #7
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c50:	d8f0      	bhi.n	8002c34 <SEGGER_SYSVIEW_Start+0x94>
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	627a      	str	r2, [r7, #36]	; 0x24
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <SEGGER_SYSVIEW_Start+0x168>)
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	e00b      	b.n	8002c86 <SEGGER_SYSVIEW_Start+0xe6>
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	1c59      	adds	r1, r3, #1
 8002c76:	61f9      	str	r1, [r7, #28]
 8002c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	09db      	lsrs	r3, r3, #7
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b7f      	cmp	r3, #127	; 0x7f
 8002c8a:	d8f0      	bhi.n	8002c6e <SEGGER_SYSVIEW_Start+0xce>
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	61fa      	str	r2, [r7, #28]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	e00b      	b.n	8002cbe <SEGGER_SYSVIEW_Start+0x11e>
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1c59      	adds	r1, r3, #1
 8002cae:	6179      	str	r1, [r7, #20]
 8002cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	09db      	lsrs	r3, r3, #7
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8002cc2:	d8f0      	bhi.n	8002ca6 <SEGGER_SYSVIEW_Start+0x106>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	617a      	str	r2, [r7, #20]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002cd4:	2218      	movs	r2, #24
 8002cd6:	6839      	ldr	r1, [r7, #0]
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fcb5 	bl	8002648 <_SendPacket>
      RECORD_END();
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <SEGGER_SYSVIEW_Start+0x168>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <SEGGER_SYSVIEW_Start+0x168>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002cf2:	f000 f9eb 	bl	80030cc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002cf6:	f000 f9b1 	bl	800305c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002cfa:	f000 fc73 	bl	80035e4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8002cfe:	bf00      	nop
 8002d00:	3730      	adds	r7, #48	; 0x30
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20014f24 	.word	0x20014f24
 8002d0c:	08006730 	.word	0x08006730
 8002d10:	20014f54 	.word	0x20014f54

08002d14 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8002d1e:	f04f 0120 	mov.w	r1, #32
 8002d22:	f381 8811 	msr	BASEPRI, r1
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	480b      	ldr	r0, [pc, #44]	; (8002d58 <SEGGER_SYSVIEW_Stop+0x44>)
 8002d2a:	f7ff fb9c 	bl	8002466 <_PreparePacket>
 8002d2e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <SEGGER_SYSVIEW_Stop+0x48>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002d38:	220b      	movs	r2, #11
 8002d3a:	6839      	ldr	r1, [r7, #0]
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	f7ff fc83 	bl	8002648 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <SEGGER_SYSVIEW_Stop+0x48>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f383 8811 	msr	BASEPRI, r3
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20014f54 	.word	0x20014f54
 8002d5c:	20014f24 	.word	0x20014f24

08002d60 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08c      	sub	sp, #48	; 0x30
 8002d64:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002d66:	f3ef 8311 	mrs	r3, BASEPRI
 8002d6a:	f04f 0120 	mov.w	r1, #32
 8002d6e:	f381 8811 	msr	BASEPRI, r1
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	4845      	ldr	r0, [pc, #276]	; (8002e8c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002d76:	f7ff fb76 	bl	8002466 <_PreparePacket>
 8002d7a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d84:	4b42      	ldr	r3, [pc, #264]	; (8002e90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8a:	e00b      	b.n	8002da4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	1c59      	adds	r1, r3, #1
 8002d94:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002d96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	09db      	lsrs	r3, r3, #7
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	2b7f      	cmp	r3, #127	; 0x7f
 8002da8:	d8f0      	bhi.n	8002d8c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	623b      	str	r3, [r7, #32]
 8002dc4:	e00b      	b.n	8002dde <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	1c59      	adds	r1, r3, #1
 8002dce:	6279      	str	r1, [r7, #36]	; 0x24
 8002dd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	09db      	lsrs	r3, r3, #7
 8002ddc:	623b      	str	r3, [r7, #32]
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	2b7f      	cmp	r3, #127	; 0x7f
 8002de2:	d8f0      	bhi.n	8002dc6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	627a      	str	r2, [r7, #36]	; 0x24
 8002dea:	6a3a      	ldr	r2, [r7, #32]
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e00b      	b.n	8002e18 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	1c59      	adds	r1, r3, #1
 8002e08:	61f9      	str	r1, [r7, #28]
 8002e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	09db      	lsrs	r3, r3, #7
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e1c:	d8f0      	bhi.n	8002e00 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	61fa      	str	r2, [r7, #28]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	e00b      	b.n	8002e50 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1c59      	adds	r1, r3, #1
 8002e40:	6179      	str	r1, [r7, #20]
 8002e42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	09db      	lsrs	r3, r3, #7
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b7f      	cmp	r3, #127	; 0x7f
 8002e54:	d8f0      	bhi.n	8002e38 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	617a      	str	r2, [r7, #20]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002e66:	2218      	movs	r2, #24
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	68b8      	ldr	r0, [r7, #8]
 8002e6c:	f7ff fbec 	bl	8002648 <_SendPacket>
  RECORD_END();
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	4798      	blx	r3
  }
}
 8002e84:	bf00      	nop
 8002e86:	3730      	adds	r7, #48	; 0x30
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20014f54 	.word	0x20014f54
 8002e90:	20014f24 	.word	0x20014f24

08002e94 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b092      	sub	sp, #72	; 0x48
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8002ea0:	f04f 0120 	mov.w	r1, #32
 8002ea4:	f381 8811 	msr	BASEPRI, r1
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	486a      	ldr	r0, [pc, #424]	; (8003054 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8002eac:	f7ff fadb 	bl	8002466 <_PreparePacket>
 8002eb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4b66      	ldr	r3, [pc, #408]	; (8003058 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec6:	e00b      	b.n	8002ee0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8002ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	6479      	str	r1, [r7, #68]	; 0x44
 8002ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002edc:	09db      	lsrs	r3, r3, #7
 8002ede:	643b      	str	r3, [r7, #64]	; 0x40
 8002ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ee4:	d8f0      	bhi.n	8002ec8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8002ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	647a      	str	r2, [r7, #68]	; 0x44
 8002eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f00:	e00b      	b.n	8002f1a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8002f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	1c59      	adds	r1, r3, #1
 8002f0a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	09db      	lsrs	r3, r3, #7
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f1e:	d8f0      	bhi.n	8002f02 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8002f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	4619      	mov	r1, r3
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff fa47 	bl	80023cc <_EncodeStr>
 8002f3e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002f40:	2209      	movs	r2, #9
 8002f42:	68f9      	ldr	r1, [r7, #12]
 8002f44:	6938      	ldr	r0, [r7, #16]
 8002f46:	f7ff fb7f 	bl	8002648 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	4b40      	ldr	r3, [pc, #256]	; (8003058 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f5e:	e00b      	b.n	8002f78 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f66:	1c59      	adds	r1, r3, #1
 8002f68:	6379      	str	r1, [r7, #52]	; 0x34
 8002f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	09db      	lsrs	r3, r3, #7
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f7c:	d8f0      	bhi.n	8002f60 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	637a      	str	r2, [r7, #52]	; 0x34
 8002f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f98:	e00b      	b.n	8002fb2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	1c59      	adds	r1, r3, #1
 8002fa2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	09db      	lsrs	r3, r3, #7
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fb6:	d8f0      	bhi.n	8002f9a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8002fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	623b      	str	r3, [r7, #32]
 8002fd2:	e00b      	b.n	8002fec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	1c59      	adds	r1, r3, #1
 8002fdc:	6279      	str	r1, [r7, #36]	; 0x24
 8002fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	09db      	lsrs	r3, r3, #7
 8002fea:	623b      	str	r3, [r7, #32]
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff0:	d8f0      	bhi.n	8002fd4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	627a      	str	r2, [r7, #36]	; 0x24
 8002ff8:	6a3a      	ldr	r2, [r7, #32]
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	e00b      	b.n	8003024 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	1c59      	adds	r1, r3, #1
 8003014:	61f9      	str	r1, [r7, #28]
 8003016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	09db      	lsrs	r3, r3, #7
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b7f      	cmp	r3, #127	; 0x7f
 8003028:	d8f0      	bhi.n	800300c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	61fa      	str	r2, [r7, #28]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800303a:	2215      	movs	r2, #21
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	6938      	ldr	r0, [r7, #16]
 8003040:	f7ff fb02 	bl	8002648 <_SendPacket>
  RECORD_END();
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f383 8811 	msr	BASEPRI, r3
}
 800304a:	bf00      	nop
 800304c:	3748      	adds	r7, #72	; 0x48
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20014f54 	.word	0x20014f54
 8003058:	20014f24 	.word	0x20014f24

0800305c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003060:	4b07      	ldr	r3, [pc, #28]	; (8003080 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003072:	4b03      	ldr	r3, [pc, #12]	; (8003080 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4798      	blx	r3
  }
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20014f24 	.word	0x20014f24

08003084 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800308c:	f3ef 8311 	mrs	r3, BASEPRI
 8003090:	f04f 0120 	mov.w	r1, #32
 8003094:	f381 8811 	msr	BASEPRI, r1
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	480b      	ldr	r0, [pc, #44]	; (80030c8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800309c:	f7ff f9e3 	bl	8002466 <_PreparePacket>
 80030a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80030a2:	2280      	movs	r2, #128	; 0x80
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	6938      	ldr	r0, [r7, #16]
 80030a8:	f7ff f990 	bl	80023cc <_EncodeStr>
 80030ac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80030ae:	220e      	movs	r2, #14
 80030b0:	68f9      	ldr	r1, [r7, #12]
 80030b2:	6938      	ldr	r0, [r7, #16]
 80030b4:	f7ff fac8 	bl	8002648 <_SendPacket>
  RECORD_END();
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f383 8811 	msr	BASEPRI, r3
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20014f54 	.word	0x20014f54

080030cc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01a      	beq.n	8003110 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d015      	beq.n	8003110 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4798      	blx	r3
 80030ec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80030f0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80030f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	000a      	movs	r2, r1
 8003100:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003102:	4613      	mov	r3, r2
 8003104:	461a      	mov	r2, r3
 8003106:	4621      	mov	r1, r4
 8003108:	200d      	movs	r0, #13
 800310a:	f7ff fcef 	bl	8002aec <SEGGER_SYSVIEW_RecordU32x2>
 800310e:	e006      	b.n	800311e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4619      	mov	r1, r3
 8003116:	200c      	movs	r0, #12
 8003118:	f7ff fcac 	bl	8002a74 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}
 8003126:	bf00      	nop
 8003128:	20014f24 	.word	0x20014f24
 800312c:	e0001004 	.word	0xe0001004

08003130 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003136:	f3ef 8311 	mrs	r3, BASEPRI
 800313a:	f04f 0120 	mov.w	r1, #32
 800313e:	f381 8811 	msr	BASEPRI, r1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	4819      	ldr	r0, [pc, #100]	; (80031ac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003146:	f7ff f98e 	bl	8002466 <_PreparePacket>
 800314a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003158:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	e00b      	b.n	800317c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1c59      	adds	r1, r3, #1
 800316c:	6179      	str	r1, [r7, #20]
 800316e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	09db      	lsrs	r3, r3, #7
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b7f      	cmp	r3, #127	; 0x7f
 8003180:	d8f0      	bhi.n	8003164 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	617a      	str	r2, [r7, #20]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003192:	2202      	movs	r2, #2
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	68b8      	ldr	r0, [r7, #8]
 8003198:	f7ff fa56 	bl	8002648 <_SendPacket>
  RECORD_END();
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f383 8811 	msr	BASEPRI, r3
}
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20014f54 	.word	0x20014f54
 80031b0:	e000ed04 	.word	0xe000ed04

080031b4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80031ba:	f3ef 8311 	mrs	r3, BASEPRI
 80031be:	f04f 0120 	mov.w	r1, #32
 80031c2:	f381 8811 	msr	BASEPRI, r1
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	4807      	ldr	r0, [pc, #28]	; (80031e8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80031ca:	f7ff f94c 	bl	8002466 <_PreparePacket>
 80031ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80031d0:	2203      	movs	r2, #3
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	6838      	ldr	r0, [r7, #0]
 80031d6:	f7ff fa37 	bl	8002648 <_SendPacket>
  RECORD_END();
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f383 8811 	msr	BASEPRI, r3
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20014f54 	.word	0x20014f54

080031ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80031f2:	f3ef 8311 	mrs	r3, BASEPRI
 80031f6:	f04f 0120 	mov.w	r1, #32
 80031fa:	f381 8811 	msr	BASEPRI, r1
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	4807      	ldr	r0, [pc, #28]	; (8003220 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003202:	f7ff f930 	bl	8002466 <_PreparePacket>
 8003206:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003208:	2212      	movs	r2, #18
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	6838      	ldr	r0, [r7, #0]
 800320e:	f7ff fa1b 	bl	8002648 <_SendPacket>
  RECORD_END();
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f383 8811 	msr	BASEPRI, r3
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20014f54 	.word	0x20014f54

08003224 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800322a:	f3ef 8311 	mrs	r3, BASEPRI
 800322e:	f04f 0120 	mov.w	r1, #32
 8003232:	f381 8811 	msr	BASEPRI, r1
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	4807      	ldr	r0, [pc, #28]	; (8003258 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800323a:	f7ff f914 	bl	8002466 <_PreparePacket>
 800323e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003240:	2211      	movs	r2, #17
 8003242:	6839      	ldr	r1, [r7, #0]
 8003244:	6838      	ldr	r0, [r7, #0]
 8003246:	f7ff f9ff 	bl	8002648 <_SendPacket>
  RECORD_END();
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f383 8811 	msr	BASEPRI, r3
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20014f54 	.word	0x20014f54

0800325c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003264:	f3ef 8311 	mrs	r3, BASEPRI
 8003268:	f04f 0120 	mov.w	r1, #32
 800326c:	f381 8811 	msr	BASEPRI, r1
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	4819      	ldr	r0, [pc, #100]	; (80032d8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003274:	f7ff f8f7 	bl	8002466 <_PreparePacket>
 8003278:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e00b      	b.n	80032aa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	1c59      	adds	r1, r3, #1
 800329a:	61f9      	str	r1, [r7, #28]
 800329c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	09db      	lsrs	r3, r3, #7
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b7f      	cmp	r3, #127	; 0x7f
 80032ae:	d8f0      	bhi.n	8003292 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	61fa      	str	r2, [r7, #28]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80032c0:	2208      	movs	r2, #8
 80032c2:	68f9      	ldr	r1, [r7, #12]
 80032c4:	6938      	ldr	r0, [r7, #16]
 80032c6:	f7ff f9bf 	bl	8002648 <_SendPacket>
  RECORD_END();
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f383 8811 	msr	BASEPRI, r3
}
 80032d0:	bf00      	nop
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20014f54 	.word	0x20014f54
 80032dc:	20014f24 	.word	0x20014f24

080032e0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80032e8:	f3ef 8311 	mrs	r3, BASEPRI
 80032ec:	f04f 0120 	mov.w	r1, #32
 80032f0:	f381 8811 	msr	BASEPRI, r1
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	4819      	ldr	r0, [pc, #100]	; (800335c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80032f8:	f7ff f8b5 	bl	8002466 <_PreparePacket>
 80032fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e00b      	b.n	800332e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	1c59      	adds	r1, r3, #1
 800331e:	61f9      	str	r1, [r7, #28]
 8003320:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	09db      	lsrs	r3, r3, #7
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b7f      	cmp	r3, #127	; 0x7f
 8003332:	d8f0      	bhi.n	8003316 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	61fa      	str	r2, [r7, #28]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003344:	2204      	movs	r2, #4
 8003346:	68f9      	ldr	r1, [r7, #12]
 8003348:	6938      	ldr	r0, [r7, #16]
 800334a:	f7ff f97d 	bl	8002648 <_SendPacket>
  RECORD_END();
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f383 8811 	msr	BASEPRI, r3
}
 8003354:	bf00      	nop
 8003356:	3720      	adds	r7, #32
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20014f54 	.word	0x20014f54
 8003360:	20014f24 	.word	0x20014f24

08003364 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800336c:	f3ef 8311 	mrs	r3, BASEPRI
 8003370:	f04f 0120 	mov.w	r1, #32
 8003374:	f381 8811 	msr	BASEPRI, r1
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	4819      	ldr	r0, [pc, #100]	; (80033e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800337c:	f7ff f873 	bl	8002466 <_PreparePacket>
 8003380:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003386:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	e00b      	b.n	80033b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	1c59      	adds	r1, r3, #1
 80033a2:	61f9      	str	r1, [r7, #28]
 80033a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	701a      	strb	r2, [r3, #0]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	09db      	lsrs	r3, r3, #7
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b7f      	cmp	r3, #127	; 0x7f
 80033b6:	d8f0      	bhi.n	800339a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	61fa      	str	r2, [r7, #28]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80033c8:	2206      	movs	r2, #6
 80033ca:	68f9      	ldr	r1, [r7, #12]
 80033cc:	6938      	ldr	r0, [r7, #16]
 80033ce:	f7ff f93b 	bl	8002648 <_SendPacket>
  RECORD_END();
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f383 8811 	msr	BASEPRI, r3
}
 80033d8:	bf00      	nop
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20014f54 	.word	0x20014f54
 80033e4:	20014f24 	.word	0x20014f24

080033e8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80033f2:	f3ef 8311 	mrs	r3, BASEPRI
 80033f6:	f04f 0120 	mov.w	r1, #32
 80033fa:	f381 8811 	msr	BASEPRI, r1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	4827      	ldr	r0, [pc, #156]	; (80034a0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8003402:	f7ff f830 	bl	8002466 <_PreparePacket>
 8003406:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	623b      	str	r3, [r7, #32]
 800341e:	e00b      	b.n	8003438 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	1c59      	adds	r1, r3, #1
 8003428:	6279      	str	r1, [r7, #36]	; 0x24
 800342a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	09db      	lsrs	r3, r3, #7
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	2b7f      	cmp	r3, #127	; 0x7f
 800343c:	d8f0      	bhi.n	8003420 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	627a      	str	r2, [r7, #36]	; 0x24
 8003444:	6a3a      	ldr	r2, [r7, #32]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	e00b      	b.n	8003470 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	1c59      	adds	r1, r3, #1
 8003460:	61f9      	str	r1, [r7, #28]
 8003462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	09db      	lsrs	r3, r3, #7
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b7f      	cmp	r3, #127	; 0x7f
 8003474:	d8f0      	bhi.n	8003458 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	61fa      	str	r2, [r7, #28]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8003486:	2207      	movs	r2, #7
 8003488:	68f9      	ldr	r1, [r7, #12]
 800348a:	6938      	ldr	r0, [r7, #16]
 800348c:	f7ff f8dc 	bl	8002648 <_SendPacket>
  RECORD_END();
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f383 8811 	msr	BASEPRI, r3
}
 8003496:	bf00      	nop
 8003498:	3728      	adds	r7, #40	; 0x28
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20014f54 	.word	0x20014f54
 80034a4:	20014f24 	.word	0x20014f24

080034a8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08c      	sub	sp, #48	; 0x30
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80034b2:	4b3b      	ldr	r3, [pc, #236]	; (80035a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d06d      	beq.n	8003596 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80034ba:	4b39      	ldr	r3, [pc, #228]	; (80035a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80034c0:	2300      	movs	r3, #0
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c4:	e008      	b.n	80034d8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	3301      	adds	r3, #1
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034dc:	429a      	cmp	r2, r3
 80034de:	d3f2      	bcc.n	80034c6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80034e0:	e000      	b.n	80034e4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80034e2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d055      	beq.n	8003596 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80034ea:	f3ef 8311 	mrs	r3, BASEPRI
 80034ee:	f04f 0120 	mov.w	r1, #32
 80034f2:	f381 8811 	msr	BASEPRI, r1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	482a      	ldr	r0, [pc, #168]	; (80035a4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80034fa:	f7fe ffb4 	bl	8002466 <_PreparePacket>
 80034fe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	623b      	str	r3, [r7, #32]
 800350c:	e00b      	b.n	8003526 <SEGGER_SYSVIEW_SendModule+0x7e>
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	1c59      	adds	r1, r3, #1
 8003516:	6279      	str	r1, [r7, #36]	; 0x24
 8003518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	09db      	lsrs	r3, r3, #7
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	2b7f      	cmp	r3, #127	; 0x7f
 800352a:	d8f0      	bhi.n	800350e <SEGGER_SYSVIEW_SendModule+0x66>
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	627a      	str	r2, [r7, #36]	; 0x24
 8003532:	6a3a      	ldr	r2, [r7, #32]
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e00b      	b.n	8003560 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	61f9      	str	r1, [r7, #28]
 8003552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	09db      	lsrs	r3, r3, #7
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b7f      	cmp	r3, #127	; 0x7f
 8003564:	d8f0      	bhi.n	8003548 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	61fa      	str	r2, [r7, #28]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	4619      	mov	r1, r3
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f7fe ff24 	bl	80023cc <_EncodeStr>
 8003584:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003586:	2216      	movs	r2, #22
 8003588:	68f9      	ldr	r1, [r7, #12]
 800358a:	6938      	ldr	r0, [r7, #16]
 800358c:	f7ff f85c 	bl	8002648 <_SendPacket>
      RECORD_END();
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003596:	bf00      	nop
 8003598:	3730      	adds	r7, #48	; 0x30
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20014f4c 	.word	0x20014f4c
 80035a4:	20014f54 	.word	0x20014f54

080035a8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00f      	beq.n	80035d6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f2      	bne.n	80035bc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20014f4c 	.word	0x20014f4c

080035e4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80035ea:	f3ef 8311 	mrs	r3, BASEPRI
 80035ee:	f04f 0120 	mov.w	r1, #32
 80035f2:	f381 8811 	msr	BASEPRI, r1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	4817      	ldr	r0, [pc, #92]	; (8003658 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80035fa:	f7fe ff34 	bl	8002466 <_PreparePacket>
 80035fe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	e00b      	b.n	8003628 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1c59      	adds	r1, r3, #1
 8003618:	6179      	str	r1, [r7, #20]
 800361a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	09db      	lsrs	r3, r3, #7
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b7f      	cmp	r3, #127	; 0x7f
 800362c:	d8f0      	bhi.n	8003610 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	617a      	str	r2, [r7, #20]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800363e:	221b      	movs	r2, #27
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	68b8      	ldr	r0, [r7, #8]
 8003644:	f7ff f800 	bl	8002648 <_SendPacket>
  RECORD_END();
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f383 8811 	msr	BASEPRI, r3
}
 800364e:	bf00      	nop
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20014f54 	.word	0x20014f54
 800365c:	20014f50 	.word	0x20014f50

08003660 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8003660:	b40f      	push	{r0, r1, r2, r3}
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	461a      	mov	r2, r3
 8003672:	2100      	movs	r1, #0
 8003674:	6938      	ldr	r0, [r7, #16]
 8003676:	f7ff f8cd 	bl	8002814 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003684:	b004      	add	sp, #16
 8003686:	4770      	bx	lr

08003688 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003690:	f3ef 8311 	mrs	r3, BASEPRI
 8003694:	f04f 0120 	mov.w	r1, #32
 8003698:	f381 8811 	msr	BASEPRI, r1
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	4827      	ldr	r0, [pc, #156]	; (800373c <SEGGER_SYSVIEW_Warn+0xb4>)
 80036a0:	f7fe fee1 	bl	8002466 <_PreparePacket>
 80036a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	6938      	ldr	r0, [r7, #16]
 80036ac:	f7fe fe8e 	bl	80023cc <_EncodeStr>
 80036b0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
 80036b6:	2301      	movs	r3, #1
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	e00b      	b.n	80036d4 <SEGGER_SYSVIEW_Warn+0x4c>
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	6279      	str	r1, [r7, #36]	; 0x24
 80036c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	09db      	lsrs	r3, r3, #7
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	2b7f      	cmp	r3, #127	; 0x7f
 80036d8:	d8f0      	bhi.n	80036bc <SEGGER_SYSVIEW_Warn+0x34>
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	627a      	str	r2, [r7, #36]	; 0x24
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	e00b      	b.n	800370c <SEGGER_SYSVIEW_Warn+0x84>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	1c59      	adds	r1, r3, #1
 80036fc:	61f9      	str	r1, [r7, #28]
 80036fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	09db      	lsrs	r3, r3, #7
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b7f      	cmp	r3, #127	; 0x7f
 8003710:	d8f0      	bhi.n	80036f4 <SEGGER_SYSVIEW_Warn+0x6c>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	61fa      	str	r2, [r7, #28]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003722:	221a      	movs	r2, #26
 8003724:	68f9      	ldr	r1, [r7, #12]
 8003726:	6938      	ldr	r0, [r7, #16]
 8003728:	f7fe ff8e 	bl	8002648 <_SendPacket>
  RECORD_END();
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f383 8811 	msr	BASEPRI, r3
}
 8003732:	bf00      	nop
 8003734:	3728      	adds	r7, #40	; 0x28
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20014f54 	.word	0x20014f54

08003740 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	2000      	movs	r0, #0
 8003754:	f7fe fd20 	bl	8002198 <SEGGER_RTT_Write>
  return len;
 8003758:	683b      	ldr	r3, [r7, #0]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800376a:	f000 fc65 	bl	8004038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800376e:	f000 f871 	bl	8003854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003772:	f000 f8d9 	bl	8003928 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Enable the DWT (Data Watch Point) Cycle Count Feature
  DWT_CTRL |= (1 << 0);
 8003776:	4b2d      	ldr	r3, [pc, #180]	; (800382c <main+0xc8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2c      	ldr	r2, [pc, #176]	; (800382c <main+0xc8>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	6013      	str	r3, [r2, #0]

  //Enabling SEGGER SYSVIEW event tracing
  SEGGER_SYSVIEW_Conf();
 8003782:	f7fe f9e7 	bl	8001b54 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8003786:	f7ff fa0b 	bl	8002ba0 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task_1,"task_1",1024,NULL,3,&task_1_handle);
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <main+0xcc>)
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	2303      	movs	r3, #3
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	2300      	movs	r3, #0
 8003794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003798:	4926      	ldr	r1, [pc, #152]	; (8003834 <main+0xd0>)
 800379a:	4827      	ldr	r0, [pc, #156]	; (8003838 <main+0xd4>)
 800379c:	f7fc ffee 	bl	800077c <xTaskCreate>
 80037a0:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d00a      	beq.n	80037be <main+0x5a>
        __asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	60bb      	str	r3, [r7, #8]
    }
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <main+0x58>

  status = xTaskCreate(task_2,"task_2",1024,NULL,2,&task_2_handle);
 80037be:	4b1f      	ldr	r3, [pc, #124]	; (800383c <main+0xd8>)
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	2302      	movs	r3, #2
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2300      	movs	r3, #0
 80037c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037cc:	491c      	ldr	r1, [pc, #112]	; (8003840 <main+0xdc>)
 80037ce:	481d      	ldr	r0, [pc, #116]	; (8003844 <main+0xe0>)
 80037d0:	f7fc ffd4 	bl	800077c <xTaskCreate>
 80037d4:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d00a      	beq.n	80037f2 <main+0x8e>
        __asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	607b      	str	r3, [r7, #4]
    }
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <main+0x8c>

  status = xTaskCreate(task_3,"task_3",1024,NULL,2,&task_3_handle);
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <main+0xe4>)
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	2302      	movs	r3, #2
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2300      	movs	r3, #0
 80037fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003800:	4912      	ldr	r1, [pc, #72]	; (800384c <main+0xe8>)
 8003802:	4813      	ldr	r0, [pc, #76]	; (8003850 <main+0xec>)
 8003804:	f7fc ffba 	bl	800077c <xTaskCreate>
 8003808:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d00a      	beq.n	8003826 <main+0xc2>
        __asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	603b      	str	r3, [r7, #0]
    }
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <main+0xc0>

  vTaskStartScheduler();
 8003826:	f7fd f945 	bl	8000ab4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800382a:	e7fe      	b.n	800382a <main+0xc6>
 800382c:	e0001000 	.word	0xe0001000
 8003830:	20015038 	.word	0x20015038
 8003834:	08006690 	.word	0x08006690
 8003838:	08003be5 	.word	0x08003be5
 800383c:	2001503c 	.word	0x2001503c
 8003840:	08006698 	.word	0x08006698
 8003844:	08003c3d 	.word	0x08003c3d
 8003848:	20015040 	.word	0x20015040
 800384c:	080066a0 	.word	0x080066a0
 8003850:	08003c47 	.word	0x08003c47

08003854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b094      	sub	sp, #80	; 0x50
 8003858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800385a:	f107 0320 	add.w	r3, r7, #32
 800385e:	2230      	movs	r2, #48	; 0x30
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f001 fe6e 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003868:	f107 030c 	add.w	r3, r7, #12
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003878:	2300      	movs	r3, #0
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <SystemClock_Config+0xcc>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a27      	ldr	r2, [pc, #156]	; (8003920 <SystemClock_Config+0xcc>)
 8003882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <SystemClock_Config+0xcc>)
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003894:	2300      	movs	r3, #0
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	4b22      	ldr	r3, [pc, #136]	; (8003924 <SystemClock_Config+0xd0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a21      	ldr	r2, [pc, #132]	; (8003924 <SystemClock_Config+0xd0>)
 800389e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <SystemClock_Config+0xd0>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038b0:	2302      	movs	r3, #2
 80038b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038b4:	2301      	movs	r3, #1
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038b8:	2310      	movs	r3, #16
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038bc:	2302      	movs	r3, #2
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038c0:	2300      	movs	r3, #0
 80038c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038c4:	2308      	movs	r3, #8
 80038c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80038c8:	2332      	movs	r3, #50	; 0x32
 80038ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80038cc:	2304      	movs	r3, #4
 80038ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80038d0:	2307      	movs	r3, #7
 80038d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038d4:	f107 0320 	add.w	r3, r7, #32
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fe87 	bl	80045ec <HAL_RCC_OscConfig>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80038e4:	f000 f9f6 	bl	8003cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038e8:	230f      	movs	r3, #15
 80038ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038ec:	2302      	movs	r3, #2
 80038ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f001 f8e8 	bl	8004adc <HAL_RCC_ClockConfig>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003912:	f000 f9df 	bl	8003cd4 <Error_Handler>
  }
}
 8003916:	bf00      	nop
 8003918:	3750      	adds	r7, #80	; 0x50
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	40007000 	.word	0x40007000

08003928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08c      	sub	sp, #48	; 0x30
 800392c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392e:	f107 031c 	add.w	r3, r7, #28
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	4ba2      	ldr	r3, [pc, #648]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4aa1      	ldr	r2, [pc, #644]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 8003948:	f043 0310 	orr.w	r3, r3, #16
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b9f      	ldr	r3, [pc, #636]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	4b9b      	ldr	r3, [pc, #620]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	4a9a      	ldr	r2, [pc, #616]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	6313      	str	r3, [r2, #48]	; 0x30
 800396a:	4b98      	ldr	r3, [pc, #608]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	4b94      	ldr	r3, [pc, #592]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a93      	ldr	r2, [pc, #588]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 8003980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b91      	ldr	r3, [pc, #580]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	4b8d      	ldr	r3, [pc, #564]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a8c      	ldr	r2, [pc, #560]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	4b8a      	ldr	r3, [pc, #552]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	4b86      	ldr	r3, [pc, #536]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a85      	ldr	r2, [pc, #532]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b83      	ldr	r3, [pc, #524]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	4a7e      	ldr	r2, [pc, #504]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 80039d4:	f043 0308 	orr.w	r3, r3, #8
 80039d8:	6313      	str	r3, [r2, #48]	; 0x30
 80039da:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <MX_GPIO_Init+0x2a4>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80039e6:	2200      	movs	r2, #0
 80039e8:	2108      	movs	r1, #8
 80039ea:	4879      	ldr	r0, [pc, #484]	; (8003bd0 <MX_GPIO_Init+0x2a8>)
 80039ec:	f000 fde4 	bl	80045b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80039f0:	2201      	movs	r2, #1
 80039f2:	2101      	movs	r1, #1
 80039f4:	4877      	ldr	r0, [pc, #476]	; (8003bd4 <MX_GPIO_Init+0x2ac>)
 80039f6:	f000 fddf 	bl	80045b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80039fa:	2200      	movs	r2, #0
 80039fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003a00:	4875      	ldr	r0, [pc, #468]	; (8003bd8 <MX_GPIO_Init+0x2b0>)
 8003a02:	f000 fdd9 	bl	80045b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003a06:	2308      	movs	r3, #8
 8003a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003a16:	f107 031c 	add.w	r3, r7, #28
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	486c      	ldr	r0, [pc, #432]	; (8003bd0 <MX_GPIO_Init+0x2a8>)
 8003a1e:	f000 fc2f 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003a22:	2301      	movs	r3, #1
 8003a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a26:	2301      	movs	r3, #1
 8003a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003a32:	f107 031c 	add.w	r3, r7, #28
 8003a36:	4619      	mov	r1, r3
 8003a38:	4866      	ldr	r0, [pc, #408]	; (8003bd4 <MX_GPIO_Init+0x2ac>)
 8003a3a:	f000 fc21 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003a3e:	2308      	movs	r3, #8
 8003a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a42:	2302      	movs	r3, #2
 8003a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a4e:	2305      	movs	r3, #5
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003a52:	f107 031c 	add.w	r3, r7, #28
 8003a56:	4619      	mov	r1, r3
 8003a58:	485e      	ldr	r0, [pc, #376]	; (8003bd4 <MX_GPIO_Init+0x2ac>)
 8003a5a:	f000 fc11 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a6c:	f107 031c 	add.w	r3, r7, #28
 8003a70:	4619      	mov	r1, r3
 8003a72:	485a      	ldr	r0, [pc, #360]	; (8003bdc <MX_GPIO_Init+0x2b4>)
 8003a74:	f000 fc04 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003a78:	2310      	movs	r3, #16
 8003a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a84:	2300      	movs	r3, #0
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a88:	2306      	movs	r3, #6
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003a8c:	f107 031c 	add.w	r3, r7, #28
 8003a90:	4619      	mov	r1, r3
 8003a92:	4852      	ldr	r0, [pc, #328]	; (8003bdc <MX_GPIO_Init+0x2b4>)
 8003a94:	f000 fbf4 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003a98:	23e0      	movs	r3, #224	; 0xe0
 8003a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003aa8:	2305      	movs	r3, #5
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aac:	f107 031c 	add.w	r3, r7, #28
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	484a      	ldr	r0, [pc, #296]	; (8003bdc <MX_GPIO_Init+0x2b4>)
 8003ab4:	f000 fbe4 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003ab8:	2304      	movs	r3, #4
 8003aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003abc:	2300      	movs	r3, #0
 8003abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003ac4:	f107 031c 	add.w	r3, r7, #28
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4845      	ldr	r0, [pc, #276]	; (8003be0 <MX_GPIO_Init+0x2b8>)
 8003acc:	f000 fbd8 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ae2:	2305      	movs	r3, #5
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003ae6:	f107 031c 	add.w	r3, r7, #28
 8003aea:	4619      	mov	r1, r3
 8003aec:	483c      	ldr	r0, [pc, #240]	; (8003be0 <MX_GPIO_Init+0x2b8>)
 8003aee:	f000 fbc7 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003af2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003af6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af8:	2301      	movs	r3, #1
 8003afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b04:	f107 031c 	add.w	r3, r7, #28
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4833      	ldr	r0, [pc, #204]	; (8003bd8 <MX_GPIO_Init+0x2b0>)
 8003b0c:	f000 fbb8 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003b10:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b16:	2302      	movs	r3, #2
 8003b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b22:	2306      	movs	r3, #6
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b26:	f107 031c 	add.w	r3, r7, #28
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4829      	ldr	r0, [pc, #164]	; (8003bd4 <MX_GPIO_Init+0x2ac>)
 8003b2e:	f000 fba7 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003b40:	f107 031c 	add.w	r3, r7, #28
 8003b44:	4619      	mov	r1, r3
 8003b46:	4825      	ldr	r0, [pc, #148]	; (8003bdc <MX_GPIO_Init+0x2b4>)
 8003b48:	f000 fb9a 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003b4c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b52:	2302      	movs	r3, #2
 8003b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b5e:	230a      	movs	r3, #10
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b62:	f107 031c 	add.w	r3, r7, #28
 8003b66:	4619      	mov	r1, r3
 8003b68:	481c      	ldr	r0, [pc, #112]	; (8003bdc <MX_GPIO_Init+0x2b4>)
 8003b6a:	f000 fb89 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003b6e:	2320      	movs	r3, #32
 8003b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b72:	2300      	movs	r3, #0
 8003b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b7a:	f107 031c 	add.w	r3, r7, #28
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4815      	ldr	r0, [pc, #84]	; (8003bd8 <MX_GPIO_Init+0x2b0>)
 8003b82:	f000 fb7d 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003b86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b8c:	2312      	movs	r3, #18
 8003b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b94:	2300      	movs	r3, #0
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b98:	2304      	movs	r3, #4
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b9c:	f107 031c 	add.w	r3, r7, #28
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	480f      	ldr	r0, [pc, #60]	; (8003be0 <MX_GPIO_Init+0x2b8>)
 8003ba4:	f000 fb6c 	bl	8004280 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003bac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003bb6:	f107 031c 	add.w	r3, r7, #28
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4804      	ldr	r0, [pc, #16]	; (8003bd0 <MX_GPIO_Init+0x2a8>)
 8003bbe:	f000 fb5f 	bl	8004280 <HAL_GPIO_Init>

}
 8003bc2:	bf00      	nop
 8003bc4:	3730      	adds	r7, #48	; 0x30
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40020000 	.word	0x40020000
 8003be0:	40020400 	.word	0x40020400

08003be4 <task_1>:

/* USER CODE BEGIN 4 */
static void task_1(void *params)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	static uint32_t task_run_time;

	while(1)
	{
		task_run_time = get_delay_count();
 8003bec:	f000 f846 	bl	8003c7c <get_delay_count>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4a0d      	ldr	r2, [pc, #52]	; (8003c28 <task_1+0x44>)
 8003bf4:	6013      	str	r3, [r2, #0]
		SEGGER_SYSVIEW_PrintfHost("Task 1: Spinning for %d iterations",task_run_time);
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <task_1+0x44>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	480b      	ldr	r0, [pc, #44]	; (8003c2c <task_1+0x48>)
 8003bfe:	f7ff fd2f 	bl	8003660 <SEGGER_SYSVIEW_PrintfHost>
		delay(task_run_time);
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <task_1+0x44>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f822 	bl	8003c50 <delay>
		SEGGER_SYSVIEW_PrintfHost("Task 1: Spinning Completed");
 8003c0c:	4808      	ldr	r0, [pc, #32]	; (8003c30 <task_1+0x4c>)
 8003c0e:	f7ff fd27 	bl	8003660 <SEGGER_SYSVIEW_PrintfHost>
		SEGGER_SYSVIEW_PrintfHost("Task 1: Going to sleep for %d ticks",TASK1_SLEEP_INTERVAL);
 8003c12:	2132      	movs	r1, #50	; 0x32
 8003c14:	4807      	ldr	r0, [pc, #28]	; (8003c34 <task_1+0x50>)
 8003c16:	f7ff fd23 	bl	8003660 <SEGGER_SYSVIEW_PrintfHost>
		vTaskDelay(TASK1_SLEEP_INTERVAL);
 8003c1a:	2032      	movs	r0, #50	; 0x32
 8003c1c:	f7fc ff12 	bl	8000a44 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfHost("Task 1: Waked up from sleep");
 8003c20:	4805      	ldr	r0, [pc, #20]	; (8003c38 <task_1+0x54>)
 8003c22:	f7ff fd1d 	bl	8003660 <SEGGER_SYSVIEW_PrintfHost>
		task_run_time = get_delay_count();
 8003c26:	e7e1      	b.n	8003bec <task_1+0x8>
 8003c28:	20015044 	.word	0x20015044
 8003c2c:	080066a8 	.word	0x080066a8
 8003c30:	080066cc 	.word	0x080066cc
 8003c34:	080066e8 	.word	0x080066e8
 8003c38:	0800670c 	.word	0x0800670c

08003c3c <task_2>:
	}
}

static void task_2(void *params)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	while(1)
 8003c44:	e7fe      	b.n	8003c44 <task_2+0x8>

08003c46 <task_3>:

	}
}

static void task_3(void *params)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
	while(1)
 8003c4e:	e7fe      	b.n	8003c4e <task_3+0x8>

08003c50 <delay>:

	}
}

static void delay(uint32_t count)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for(i=0;i<count;i++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	e002      	b.n	8003c64 <delay+0x14>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3301      	adds	r3, #1
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d3f8      	bcc.n	8003c5e <delay+0xe>
	{

	}
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <get_delay_count>:

static uint32_t get_delay_count(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
	return ((rand() + MIN_DELAY_COUNT) % MAX_DELAY_COUNT);
 8003c80:	f001 fc68 	bl	8005554 <rand>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003c8a:	3310      	adds	r3, #16
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <get_delay_count+0x2c>)
 8003c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8003c92:	1351      	asrs	r1, r2, #13
 8003c94:	17da      	asrs	r2, r3, #31
 8003c96:	1a8a      	subs	r2, r1, r2
 8003c98:	4904      	ldr	r1, [pc, #16]	; (8003cac <get_delay_count+0x30>)
 8003c9a:	fb01 f202 	mul.w	r2, r1, r2
 8003c9e:	1a9a      	subs	r2, r3, r2
 8003ca0:	4613      	mov	r3, r2
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	14f8b589 	.word	0x14f8b589
 8003cac:	000186a0 	.word	0x000186a0

08003cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003cc2:	f000 f9db 	bl	800407c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40001000 	.word	0x40001000

08003cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd8:	b672      	cpsid	i
}
 8003cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cdc:	e7fe      	b.n	8003cdc <Error_Handler+0x8>
	...

08003ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <HAL_MspInit+0x50>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	4a10      	ldr	r2, [pc, #64]	; (8003d30 <HAL_MspInit+0x50>)
 8003cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <HAL_MspInit+0x50>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfe:	607b      	str	r3, [r7, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <HAL_MspInit+0x50>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <HAL_MspInit+0x50>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6413      	str	r3, [r2, #64]	; 0x40
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <HAL_MspInit+0x50>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d1e:	2003      	movs	r0, #3
 8003d20:	f000 fa79 	bl	8004216 <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 8003d24:	f7fd fb60 	bl	80013e8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800

08003d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08e      	sub	sp, #56	; 0x38
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	4b33      	ldr	r3, [pc, #204]	; (8003e18 <HAL_InitTick+0xe4>)
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	4a32      	ldr	r2, [pc, #200]	; (8003e18 <HAL_InitTick+0xe4>)
 8003d4e:	f043 0310 	orr.w	r3, r3, #16
 8003d52:	6413      	str	r3, [r2, #64]	; 0x40
 8003d54:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <HAL_InitTick+0xe4>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d60:	f107 0210 	add.w	r2, r7, #16
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 f8c2 	bl	8004ef4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d7a:	f001 f8a7 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8003d7e:	6378      	str	r0, [r7, #52]	; 0x34
 8003d80:	e004      	b.n	8003d8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d82:	f001 f8a3 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8003d86:	4603      	mov	r3, r0
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8e:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <HAL_InitTick+0xe8>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	0c9b      	lsrs	r3, r3, #18
 8003d96:	3b01      	subs	r3, #1
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d9a:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <HAL_InitTick+0xec>)
 8003d9c:	4a21      	ldr	r2, [pc, #132]	; (8003e24 <HAL_InitTick+0xf0>)
 8003d9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003da0:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_InitTick+0xec>)
 8003da2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003da6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003da8:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <HAL_InitTick+0xec>)
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003dae:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <HAL_InitTick+0xec>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <HAL_InitTick+0xec>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dba:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_InitTick+0xec>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003dc0:	4817      	ldr	r0, [pc, #92]	; (8003e20 <HAL_InitTick+0xec>)
 8003dc2:	f001 f8c9 	bl	8004f58 <HAL_TIM_Base_Init>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11b      	bne.n	8003e0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003dd4:	4812      	ldr	r0, [pc, #72]	; (8003e20 <HAL_InitTick+0xec>)
 8003dd6:	f001 f919 	bl	800500c <HAL_TIM_Base_Start_IT>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003de0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d111      	bne.n	8003e0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003de8:	2036      	movs	r0, #54	; 0x36
 8003dea:	f000 fa3b 	bl	8004264 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b0f      	cmp	r3, #15
 8003df2:	d808      	bhi.n	8003e06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003df4:	2200      	movs	r2, #0
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	2036      	movs	r0, #54	; 0x36
 8003dfa:	f000 fa17 	bl	800422c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <HAL_InitTick+0xf4>)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e002      	b.n	8003e0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3738      	adds	r7, #56	; 0x38
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	431bde83 	.word	0x431bde83
 8003e20:	20015048 	.word	0x20015048
 8003e24:	40001000 	.word	0x40001000
 8003e28:	2000000c 	.word	0x2000000c

08003e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e30:	e7fe      	b.n	8003e30 <NMI_Handler+0x4>

08003e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <HardFault_Handler+0x4>

08003e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e3c:	e7fe      	b.n	8003e3c <MemManage_Handler+0x4>

08003e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e42:	e7fe      	b.n	8003e42 <BusFault_Handler+0x4>

08003e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <UsageFault_Handler+0x4>

08003e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e5c:	4802      	ldr	r0, [pc, #8]	; (8003e68 <TIM6_DAC_IRQHandler+0x10>)
 8003e5e:	f001 f945 	bl	80050ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20015048 	.word	0x20015048

08003e6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return 1;
 8003e70:	2301      	movs	r3, #1
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_kill>:

int _kill(int pid, int sig)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e86:	f001 fb15 	bl	80054b4 <__errno>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2216      	movs	r2, #22
 8003e8e:	601a      	str	r2, [r3, #0]
  return -1;
 8003e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_exit>:

void _exit (int status)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ffe7 	bl	8003e7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003eae:	e7fe      	b.n	8003eae <_exit+0x12>

08003eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e00a      	b.n	8003ed8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ec2:	f3af 8000 	nop.w
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	60ba      	str	r2, [r7, #8]
 8003ece:	b2ca      	uxtb	r2, r1
 8003ed0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	dbf0      	blt.n	8003ec2 <_read+0x12>
  }

  return len;
 8003ee0:	687b      	ldr	r3, [r7, #4]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <_close>:
  }
  return len;
}

int _close(int file)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f12:	605a      	str	r2, [r3, #4]
  return 0;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <_isatty>:

int _isatty(int file)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f2a:	2301      	movs	r3, #1
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <_sbrk+0x5c>)
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <_sbrk+0x60>)
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <_sbrk+0x64>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <_sbrk+0x64>)
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <_sbrk+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <_sbrk+0x64>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d207      	bcs.n	8003f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f84:	f001 fa96 	bl	80054b4 <__errno>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	220c      	movs	r2, #12
 8003f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f92:	e009      	b.n	8003fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <_sbrk+0x64>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <_sbrk+0x64>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	4a05      	ldr	r2, [pc, #20]	; (8003fb8 <_sbrk+0x64>)
 8003fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20020000 	.word	0x20020000
 8003fb4:	00000400 	.word	0x00000400
 8003fb8:	20015090 	.word	0x20015090
 8003fbc:	200150a8 	.word	0x200150a8

08003fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <SystemInit+0x20>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <SystemInit+0x20>)
 8003fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800401c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fe8:	480d      	ldr	r0, [pc, #52]	; (8004020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fea:	490e      	ldr	r1, [pc, #56]	; (8004024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fec:	4a0e      	ldr	r2, [pc, #56]	; (8004028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ff0:	e002      	b.n	8003ff8 <LoopCopyDataInit>

08003ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ff6:	3304      	adds	r3, #4

08003ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ffc:	d3f9      	bcc.n	8003ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ffe:	4a0b      	ldr	r2, [pc, #44]	; (800402c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004000:	4c0b      	ldr	r4, [pc, #44]	; (8004030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004004:	e001      	b.n	800400a <LoopFillZerobss>

08004006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004008:	3204      	adds	r2, #4

0800400a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800400a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800400c:	d3fb      	bcc.n	8004006 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800400e:	f7ff ffd7 	bl	8003fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004012:	f001 fa55 	bl	80054c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004016:	f7ff fba5 	bl	8003764 <main>
  bx  lr    
 800401a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800401c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004024:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004028:	080068ac 	.word	0x080068ac
  ldr r2, =_sbss
 800402c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004030:	200150a8 	.word	0x200150a8

08004034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004034:	e7fe      	b.n	8004034 <ADC_IRQHandler>
	...

08004038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_Init+0x40>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <HAL_Init+0x40>)
 8004042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_Init+0x40>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <HAL_Init+0x40>)
 800404e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004054:	4b08      	ldr	r3, [pc, #32]	; (8004078 <HAL_Init+0x40>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a07      	ldr	r2, [pc, #28]	; (8004078 <HAL_Init+0x40>)
 800405a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004060:	2003      	movs	r0, #3
 8004062:	f000 f8d8 	bl	8004216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004066:	2000      	movs	r0, #0
 8004068:	f7ff fe64 	bl	8003d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800406c:	f7ff fe38 	bl	8003ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40023c00 	.word	0x40023c00

0800407c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_IncTick+0x20>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_IncTick+0x24>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4413      	add	r3, r2
 800408c:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <HAL_IncTick+0x24>)
 800408e:	6013      	str	r3, [r2, #0]
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000010 	.word	0x20000010
 80040a0:	20015094 	.word	0x20015094

080040a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return uwTick;
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <HAL_GetTick+0x14>)
 80040aa:	681b      	ldr	r3, [r3, #0]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20015094 	.word	0x20015094

080040bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <__NVIC_SetPriorityGrouping+0x44>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040d8:	4013      	ands	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <__NVIC_SetPriorityGrouping+0x44>)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	60d3      	str	r3, [r2, #12]
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000ed00 	.word	0xe000ed00

08004104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004108:	4b04      	ldr	r3, [pc, #16]	; (800411c <__NVIC_GetPriorityGrouping+0x18>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	0a1b      	lsrs	r3, r3, #8
 800410e:	f003 0307 	and.w	r3, r3, #7
}
 8004112:	4618      	mov	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	e000ed00 	.word	0xe000ed00

08004120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412e:	2b00      	cmp	r3, #0
 8004130:	db0b      	blt.n	800414a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	f003 021f 	and.w	r2, r3, #31
 8004138:	4907      	ldr	r1, [pc, #28]	; (8004158 <__NVIC_EnableIRQ+0x38>)
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2001      	movs	r0, #1
 8004142:	fa00 f202 	lsl.w	r2, r0, r2
 8004146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	e000e100 	.word	0xe000e100

0800415c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	6039      	str	r1, [r7, #0]
 8004166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416c:	2b00      	cmp	r3, #0
 800416e:	db0a      	blt.n	8004186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	b2da      	uxtb	r2, r3
 8004174:	490c      	ldr	r1, [pc, #48]	; (80041a8 <__NVIC_SetPriority+0x4c>)
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	0112      	lsls	r2, r2, #4
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	440b      	add	r3, r1
 8004180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004184:	e00a      	b.n	800419c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4908      	ldr	r1, [pc, #32]	; (80041ac <__NVIC_SetPriority+0x50>)
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	3b04      	subs	r3, #4
 8004194:	0112      	lsls	r2, r2, #4
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	440b      	add	r3, r1
 800419a:	761a      	strb	r2, [r3, #24]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000e100 	.word	0xe000e100
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b089      	sub	sp, #36	; 0x24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f1c3 0307 	rsb	r3, r3, #7
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	bf28      	it	cs
 80041ce:	2304      	movcs	r3, #4
 80041d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3304      	adds	r3, #4
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d902      	bls.n	80041e0 <NVIC_EncodePriority+0x30>
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3b03      	subs	r3, #3
 80041de:	e000      	b.n	80041e2 <NVIC_EncodePriority+0x32>
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43da      	mvns	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	401a      	ands	r2, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004202:	43d9      	mvns	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004208:	4313      	orrs	r3, r2
         );
}
 800420a:	4618      	mov	r0, r3
 800420c:	3724      	adds	r7, #36	; 0x24
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ff4c 	bl	80040bc <__NVIC_SetPriorityGrouping>
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800423e:	f7ff ff61 	bl	8004104 <__NVIC_GetPriorityGrouping>
 8004242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	6978      	ldr	r0, [r7, #20]
 800424a:	f7ff ffb1 	bl	80041b0 <NVIC_EncodePriority>
 800424e:	4602      	mov	r2, r0
 8004250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff ff80 	bl	800415c <__NVIC_SetPriority>
}
 800425c:	bf00      	nop
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff ff54 	bl	8004120 <__NVIC_EnableIRQ>
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004280:	b480      	push	{r7}
 8004282:	b089      	sub	sp, #36	; 0x24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800428e:	2300      	movs	r3, #0
 8004290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004292:	2300      	movs	r3, #0
 8004294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	e16b      	b.n	8004574 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800429c:	2201      	movs	r2, #1
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4013      	ands	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	f040 815a 	bne.w	800456e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d005      	beq.n	80042d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d130      	bne.n	8004334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	2203      	movs	r2, #3
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4013      	ands	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004308:	2201      	movs	r2, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 0201 	and.w	r2, r3, #1
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	2b03      	cmp	r3, #3
 800433e:	d017      	beq.n	8004370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	2203      	movs	r2, #3
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d123      	bne.n	80043c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	08da      	lsrs	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3208      	adds	r2, #8
 8004384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	220f      	movs	r2, #15
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	08da      	lsrs	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3208      	adds	r2, #8
 80043be:	69b9      	ldr	r1, [r7, #24]
 80043c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	2203      	movs	r2, #3
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 0203 	and.w	r2, r3, #3
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80b4 	beq.w	800456e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	4b60      	ldr	r3, [pc, #384]	; (800458c <HAL_GPIO_Init+0x30c>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	4a5f      	ldr	r2, [pc, #380]	; (800458c <HAL_GPIO_Init+0x30c>)
 8004410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004414:	6453      	str	r3, [r2, #68]	; 0x44
 8004416:	4b5d      	ldr	r3, [pc, #372]	; (800458c <HAL_GPIO_Init+0x30c>)
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004422:	4a5b      	ldr	r2, [pc, #364]	; (8004590 <HAL_GPIO_Init+0x310>)
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	3302      	adds	r3, #2
 800442a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	220f      	movs	r2, #15
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a52      	ldr	r2, [pc, #328]	; (8004594 <HAL_GPIO_Init+0x314>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d02b      	beq.n	80044a6 <HAL_GPIO_Init+0x226>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a51      	ldr	r2, [pc, #324]	; (8004598 <HAL_GPIO_Init+0x318>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d025      	beq.n	80044a2 <HAL_GPIO_Init+0x222>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a50      	ldr	r2, [pc, #320]	; (800459c <HAL_GPIO_Init+0x31c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01f      	beq.n	800449e <HAL_GPIO_Init+0x21e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a4f      	ldr	r2, [pc, #316]	; (80045a0 <HAL_GPIO_Init+0x320>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d019      	beq.n	800449a <HAL_GPIO_Init+0x21a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a4e      	ldr	r2, [pc, #312]	; (80045a4 <HAL_GPIO_Init+0x324>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_GPIO_Init+0x216>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a4d      	ldr	r2, [pc, #308]	; (80045a8 <HAL_GPIO_Init+0x328>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00d      	beq.n	8004492 <HAL_GPIO_Init+0x212>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a4c      	ldr	r2, [pc, #304]	; (80045ac <HAL_GPIO_Init+0x32c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d007      	beq.n	800448e <HAL_GPIO_Init+0x20e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a4b      	ldr	r2, [pc, #300]	; (80045b0 <HAL_GPIO_Init+0x330>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_GPIO_Init+0x20a>
 8004486:	2307      	movs	r3, #7
 8004488:	e00e      	b.n	80044a8 <HAL_GPIO_Init+0x228>
 800448a:	2308      	movs	r3, #8
 800448c:	e00c      	b.n	80044a8 <HAL_GPIO_Init+0x228>
 800448e:	2306      	movs	r3, #6
 8004490:	e00a      	b.n	80044a8 <HAL_GPIO_Init+0x228>
 8004492:	2305      	movs	r3, #5
 8004494:	e008      	b.n	80044a8 <HAL_GPIO_Init+0x228>
 8004496:	2304      	movs	r3, #4
 8004498:	e006      	b.n	80044a8 <HAL_GPIO_Init+0x228>
 800449a:	2303      	movs	r3, #3
 800449c:	e004      	b.n	80044a8 <HAL_GPIO_Init+0x228>
 800449e:	2302      	movs	r3, #2
 80044a0:	e002      	b.n	80044a8 <HAL_GPIO_Init+0x228>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <HAL_GPIO_Init+0x228>
 80044a6:	2300      	movs	r3, #0
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	f002 0203 	and.w	r2, r2, #3
 80044ae:	0092      	lsls	r2, r2, #2
 80044b0:	4093      	lsls	r3, r2
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044b8:	4935      	ldr	r1, [pc, #212]	; (8004590 <HAL_GPIO_Init+0x310>)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	089b      	lsrs	r3, r3, #2
 80044be:	3302      	adds	r3, #2
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_GPIO_Init+0x334>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	43db      	mvns	r3, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4013      	ands	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ea:	4a32      	ldr	r2, [pc, #200]	; (80045b4 <HAL_GPIO_Init+0x334>)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044f0:	4b30      	ldr	r3, [pc, #192]	; (80045b4 <HAL_GPIO_Init+0x334>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004514:	4a27      	ldr	r2, [pc, #156]	; (80045b4 <HAL_GPIO_Init+0x334>)
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800451a:	4b26      	ldr	r3, [pc, #152]	; (80045b4 <HAL_GPIO_Init+0x334>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <HAL_GPIO_Init+0x334>)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <HAL_GPIO_Init+0x334>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004568:	4a12      	ldr	r2, [pc, #72]	; (80045b4 <HAL_GPIO_Init+0x334>)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3301      	adds	r3, #1
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2b0f      	cmp	r3, #15
 8004578:	f67f ae90 	bls.w	800429c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	3724      	adds	r7, #36	; 0x24
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	40013800 	.word	0x40013800
 8004594:	40020000 	.word	0x40020000
 8004598:	40020400 	.word	0x40020400
 800459c:	40020800 	.word	0x40020800
 80045a0:	40020c00 	.word	0x40020c00
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40021400 	.word	0x40021400
 80045ac:	40021800 	.word	0x40021800
 80045b0:	40021c00 	.word	0x40021c00
 80045b4:	40013c00 	.word	0x40013c00

080045b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]
 80045c4:	4613      	mov	r3, r2
 80045c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045c8:	787b      	ldrb	r3, [r7, #1]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045d4:	e003      	b.n	80045de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045d6:	887b      	ldrh	r3, [r7, #2]
 80045d8:	041a      	lsls	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	619a      	str	r2, [r3, #24]
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e267      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d075      	beq.n	80046f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800460a:	4b88      	ldr	r3, [pc, #544]	; (800482c <HAL_RCC_OscConfig+0x240>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b04      	cmp	r3, #4
 8004614:	d00c      	beq.n	8004630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004616:	4b85      	ldr	r3, [pc, #532]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800461e:	2b08      	cmp	r3, #8
 8004620:	d112      	bne.n	8004648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004622:	4b82      	ldr	r3, [pc, #520]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462e:	d10b      	bne.n	8004648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	4b7e      	ldr	r3, [pc, #504]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d05b      	beq.n	80046f4 <HAL_RCC_OscConfig+0x108>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d157      	bne.n	80046f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e242      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004650:	d106      	bne.n	8004660 <HAL_RCC_OscConfig+0x74>
 8004652:	4b76      	ldr	r3, [pc, #472]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a75      	ldr	r2, [pc, #468]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e01d      	b.n	800469c <HAL_RCC_OscConfig+0xb0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004668:	d10c      	bne.n	8004684 <HAL_RCC_OscConfig+0x98>
 800466a:	4b70      	ldr	r3, [pc, #448]	; (800482c <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6f      	ldr	r2, [pc, #444]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b6d      	ldr	r3, [pc, #436]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6c      	ldr	r2, [pc, #432]	; (800482c <HAL_RCC_OscConfig+0x240>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e00b      	b.n	800469c <HAL_RCC_OscConfig+0xb0>
 8004684:	4b69      	ldr	r3, [pc, #420]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a68      	ldr	r2, [pc, #416]	; (800482c <HAL_RCC_OscConfig+0x240>)
 800468a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b66      	ldr	r3, [pc, #408]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a65      	ldr	r2, [pc, #404]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d013      	beq.n	80046cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7ff fcfe 	bl	80040a4 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ac:	f7ff fcfa 	bl	80040a4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e207      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046be:	4b5b      	ldr	r3, [pc, #364]	; (800482c <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0xc0>
 80046ca:	e014      	b.n	80046f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7ff fcea 	bl	80040a4 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d4:	f7ff fce6 	bl	80040a4 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e1f3      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e6:	4b51      	ldr	r3, [pc, #324]	; (800482c <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0xe8>
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d063      	beq.n	80047ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004702:	4b4a      	ldr	r3, [pc, #296]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800470e:	4b47      	ldr	r3, [pc, #284]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004716:	2b08      	cmp	r3, #8
 8004718:	d11c      	bne.n	8004754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471a:	4b44      	ldr	r3, [pc, #272]	; (800482c <HAL_RCC_OscConfig+0x240>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d116      	bne.n	8004754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004726:	4b41      	ldr	r3, [pc, #260]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_RCC_OscConfig+0x152>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d001      	beq.n	800473e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e1c7      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473e:	4b3b      	ldr	r3, [pc, #236]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4937      	ldr	r1, [pc, #220]	; (800482c <HAL_RCC_OscConfig+0x240>)
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004752:	e03a      	b.n	80047ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d020      	beq.n	800479e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800475c:	4b34      	ldr	r3, [pc, #208]	; (8004830 <HAL_RCC_OscConfig+0x244>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7ff fc9f 	bl	80040a4 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476a:	f7ff fc9b 	bl	80040a4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e1a8      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <HAL_RCC_OscConfig+0x240>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	4b28      	ldr	r3, [pc, #160]	; (800482c <HAL_RCC_OscConfig+0x240>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	4925      	ldr	r1, [pc, #148]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]
 800479c:	e015      	b.n	80047ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <HAL_RCC_OscConfig+0x244>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7ff fc7e 	bl	80040a4 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ac:	f7ff fc7a 	bl	80040a4 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e187      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047be:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d036      	beq.n	8004844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d016      	beq.n	800480c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047de:	4b15      	ldr	r3, [pc, #84]	; (8004834 <HAL_RCC_OscConfig+0x248>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e4:	f7ff fc5e 	bl	80040a4 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ec:	f7ff fc5a 	bl	80040a4 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e167      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fe:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCC_OscConfig+0x240>)
 8004800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x200>
 800480a:	e01b      	b.n	8004844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800480c:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_RCC_OscConfig+0x248>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004812:	f7ff fc47 	bl	80040a4 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004818:	e00e      	b.n	8004838 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481a:	f7ff fc43 	bl	80040a4 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d907      	bls.n	8004838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e150      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
 800482c:	40023800 	.word	0x40023800
 8004830:	42470000 	.word	0x42470000
 8004834:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004838:	4b88      	ldr	r3, [pc, #544]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 800483a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ea      	bne.n	800481a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8097 	beq.w	8004980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004852:	2300      	movs	r3, #0
 8004854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004856:	4b81      	ldr	r3, [pc, #516]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10f      	bne.n	8004882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	4b7d      	ldr	r3, [pc, #500]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	4a7c      	ldr	r2, [pc, #496]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 800486c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004870:	6413      	str	r3, [r2, #64]	; 0x40
 8004872:	4b7a      	ldr	r3, [pc, #488]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004882:	4b77      	ldr	r3, [pc, #476]	; (8004a60 <HAL_RCC_OscConfig+0x474>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d118      	bne.n	80048c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800488e:	4b74      	ldr	r3, [pc, #464]	; (8004a60 <HAL_RCC_OscConfig+0x474>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a73      	ldr	r2, [pc, #460]	; (8004a60 <HAL_RCC_OscConfig+0x474>)
 8004894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489a:	f7ff fc03 	bl	80040a4 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a2:	f7ff fbff 	bl	80040a4 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e10c      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b4:	4b6a      	ldr	r3, [pc, #424]	; (8004a60 <HAL_RCC_OscConfig+0x474>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d106      	bne.n	80048d6 <HAL_RCC_OscConfig+0x2ea>
 80048c8:	4b64      	ldr	r3, [pc, #400]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	4a63      	ldr	r2, [pc, #396]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6713      	str	r3, [r2, #112]	; 0x70
 80048d4:	e01c      	b.n	8004910 <HAL_RCC_OscConfig+0x324>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x30c>
 80048de:	4b5f      	ldr	r3, [pc, #380]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a5e      	ldr	r2, [pc, #376]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 80048e4:	f043 0304 	orr.w	r3, r3, #4
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ea:	4b5c      	ldr	r3, [pc, #368]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a5b      	ldr	r2, [pc, #364]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
 80048f6:	e00b      	b.n	8004910 <HAL_RCC_OscConfig+0x324>
 80048f8:	4b58      	ldr	r3, [pc, #352]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	4a57      	ldr	r2, [pc, #348]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	6713      	str	r3, [r2, #112]	; 0x70
 8004904:	4b55      	ldr	r3, [pc, #340]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	4a54      	ldr	r2, [pc, #336]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 800490a:	f023 0304 	bic.w	r3, r3, #4
 800490e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d015      	beq.n	8004944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004918:	f7ff fbc4 	bl	80040a4 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491e:	e00a      	b.n	8004936 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004920:	f7ff fbc0 	bl	80040a4 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f241 3288 	movw	r2, #5000	; 0x1388
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e0cb      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004936:	4b49      	ldr	r3, [pc, #292]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0ee      	beq.n	8004920 <HAL_RCC_OscConfig+0x334>
 8004942:	e014      	b.n	800496e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004944:	f7ff fbae 	bl	80040a4 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494a:	e00a      	b.n	8004962 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f7ff fbaa 	bl	80040a4 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	; 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0b5      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004962:	4b3e      	ldr	r3, [pc, #248]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1ee      	bne.n	800494c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800496e:	7dfb      	ldrb	r3, [r7, #23]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d105      	bne.n	8004980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004974:	4b39      	ldr	r3, [pc, #228]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	4a38      	ldr	r2, [pc, #224]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 800497a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800497e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80a1 	beq.w	8004acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800498a:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	2b08      	cmp	r3, #8
 8004994:	d05c      	beq.n	8004a50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d141      	bne.n	8004a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499e:	4b31      	ldr	r3, [pc, #196]	; (8004a64 <HAL_RCC_OscConfig+0x478>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7ff fb7e 	bl	80040a4 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ac:	f7ff fb7a 	bl	80040a4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e087      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049be:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	019b      	lsls	r3, r3, #6
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	3b01      	subs	r3, #1
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	491b      	ldr	r1, [pc, #108]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f4:	4b1b      	ldr	r3, [pc, #108]	; (8004a64 <HAL_RCC_OscConfig+0x478>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fa:	f7ff fb53 	bl	80040a4 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a02:	f7ff fb4f 	bl	80040a4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e05c      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x416>
 8004a20:	e054      	b.n	8004acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a22:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <HAL_RCC_OscConfig+0x478>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7ff fb3c 	bl	80040a4 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a30:	f7ff fb38 	bl	80040a4 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e045      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_RCC_OscConfig+0x470>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x444>
 8004a4e:	e03d      	b.n	8004acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e038      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	40007000 	.word	0x40007000
 8004a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a68:	4b1b      	ldr	r3, [pc, #108]	; (8004ad8 <HAL_RCC_OscConfig+0x4ec>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d028      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d121      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d11a      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d111      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d107      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800

08004adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0cc      	b.n	8004c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af0:	4b68      	ldr	r3, [pc, #416]	; (8004c94 <HAL_RCC_ClockConfig+0x1b8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d90c      	bls.n	8004b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b65      	ldr	r3, [pc, #404]	; (8004c94 <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	4b63      	ldr	r3, [pc, #396]	; (8004c94 <HAL_RCC_ClockConfig+0x1b8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0b8      	b.n	8004c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b30:	4b59      	ldr	r3, [pc, #356]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4a58      	ldr	r2, [pc, #352]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b48:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4a52      	ldr	r2, [pc, #328]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b54:	4b50      	ldr	r3, [pc, #320]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	494d      	ldr	r1, [pc, #308]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d044      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d107      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d119      	bne.n	8004bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e07f      	b.n	8004c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d003      	beq.n	8004b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9a:	4b3f      	ldr	r3, [pc, #252]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e06f      	b.n	8004c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004baa:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e067      	b.n	8004c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bba:	4b37      	ldr	r3, [pc, #220]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f023 0203 	bic.w	r2, r3, #3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4934      	ldr	r1, [pc, #208]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bcc:	f7ff fa6a 	bl	80040a4 <HAL_GetTick>
 8004bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd2:	e00a      	b.n	8004bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd4:	f7ff fa66 	bl	80040a4 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e04f      	b.n	8004c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bea:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 020c 	and.w	r2, r3, #12
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d1eb      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bfc:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <HAL_RCC_ClockConfig+0x1b8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d20c      	bcs.n	8004c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0a:	4b22      	ldr	r3, [pc, #136]	; (8004c94 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c12:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_RCC_ClockConfig+0x1b8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e032      	b.n	8004c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c30:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4916      	ldr	r1, [pc, #88]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d009      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c4e:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	490e      	ldr	r1, [pc, #56]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c62:	f000 f821 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8004c66:	4602      	mov	r2, r0
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	091b      	lsrs	r3, r3, #4
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	490a      	ldr	r1, [pc, #40]	; (8004c9c <HAL_RCC_ClockConfig+0x1c0>)
 8004c74:	5ccb      	ldrb	r3, [r1, r3]
 8004c76:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7a:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c7e:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff f856 	bl	8003d34 <HAL_InitTick>

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40023c00 	.word	0x40023c00
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	0800673c 	.word	0x0800673c
 8004ca0:	20000008 	.word	0x20000008
 8004ca4:	2000000c 	.word	0x2000000c

08004ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cac:	b094      	sub	sp, #80	; 0x50
 8004cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb8:	2300      	movs	r3, #0
 8004cba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cc0:	4b79      	ldr	r3, [pc, #484]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d00d      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	f200 80e1 	bhi.w	8004e94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_RCC_GetSysClockFreq+0x34>
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d003      	beq.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cda:	e0db      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cdc:	4b73      	ldr	r3, [pc, #460]	; (8004eac <HAL_RCC_GetSysClockFreq+0x204>)
 8004cde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ce0:	e0db      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ce2:	4b73      	ldr	r3, [pc, #460]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ce6:	e0d8      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ce8:	4b6f      	ldr	r3, [pc, #444]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cf2:	4b6d      	ldr	r3, [pc, #436]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d063      	beq.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cfe:	4b6a      	ldr	r3, [pc, #424]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	099b      	lsrs	r3, r3, #6
 8004d04:	2200      	movs	r2, #0
 8004d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d10:	633b      	str	r3, [r7, #48]	; 0x30
 8004d12:	2300      	movs	r3, #0
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
 8004d16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	f04f 0000 	mov.w	r0, #0
 8004d22:	f04f 0100 	mov.w	r1, #0
 8004d26:	0159      	lsls	r1, r3, #5
 8004d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d2c:	0150      	lsls	r0, r2, #5
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4621      	mov	r1, r4
 8004d34:	1a51      	subs	r1, r2, r1
 8004d36:	6139      	str	r1, [r7, #16]
 8004d38:	4629      	mov	r1, r5
 8004d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d4c:	4659      	mov	r1, fp
 8004d4e:	018b      	lsls	r3, r1, #6
 8004d50:	4651      	mov	r1, sl
 8004d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d56:	4651      	mov	r1, sl
 8004d58:	018a      	lsls	r2, r1, #6
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	ebb2 0801 	subs.w	r8, r2, r1
 8004d60:	4659      	mov	r1, fp
 8004d62:	eb63 0901 	sbc.w	r9, r3, r1
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d7a:	4690      	mov	r8, r2
 8004d7c:	4699      	mov	r9, r3
 8004d7e:	4623      	mov	r3, r4
 8004d80:	eb18 0303 	adds.w	r3, r8, r3
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	462b      	mov	r3, r5
 8004d88:	eb49 0303 	adc.w	r3, r9, r3
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	024b      	lsls	r3, r1, #9
 8004d9e:	4621      	mov	r1, r4
 8004da0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004da4:	4621      	mov	r1, r4
 8004da6:	024a      	lsls	r2, r1, #9
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dae:	2200      	movs	r2, #0
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004db4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004db8:	f7fb faaa 	bl	8000310 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc4:	e058      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc6:	4b38      	ldr	r3, [pc, #224]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	099b      	lsrs	r3, r3, #6
 8004dcc:	2200      	movs	r2, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dd6:	623b      	str	r3, [r7, #32]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
 8004ddc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	f04f 0000 	mov.w	r0, #0
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	0159      	lsls	r1, r3, #5
 8004dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df2:	0150      	lsls	r0, r2, #5
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4641      	mov	r1, r8
 8004dfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dfe:	4649      	mov	r1, r9
 8004e00:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e18:	ebb2 040a 	subs.w	r4, r2, sl
 8004e1c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	00eb      	lsls	r3, r5, #3
 8004e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e2e:	00e2      	lsls	r2, r4, #3
 8004e30:	4614      	mov	r4, r2
 8004e32:	461d      	mov	r5, r3
 8004e34:	4643      	mov	r3, r8
 8004e36:	18e3      	adds	r3, r4, r3
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	eb45 0303 	adc.w	r3, r5, r3
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	028b      	lsls	r3, r1, #10
 8004e52:	4621      	mov	r1, r4
 8004e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e58:	4621      	mov	r1, r4
 8004e5a:	028a      	lsls	r2, r1, #10
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e62:	2200      	movs	r2, #0
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	61fa      	str	r2, [r7, #28]
 8004e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e6c:	f7fb fa50 	bl	8000310 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	3301      	adds	r3, #1
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e92:	e002      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetSysClockFreq+0x204>)
 8004e96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3750      	adds	r7, #80	; 0x50
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	007a1200 	.word	0x007a1200

08004eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000008 	.word	0x20000008

08004ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ed0:	f7ff fff0 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	0a9b      	lsrs	r3, r3, #10
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4903      	ldr	r1, [pc, #12]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	0800674c 	.word	0x0800674c

08004ef4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	220f      	movs	r2, #15
 8004f02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f04:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <HAL_RCC_GetClockConfig+0x5c>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0203 	and.w	r2, r3, #3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_RCC_GetClockConfig+0x5c>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <HAL_RCC_GetClockConfig+0x5c>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_RCC_GetClockConfig+0x5c>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f36:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <HAL_RCC_GetClockConfig+0x60>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0207 	and.w	r2, r3, #7
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	601a      	str	r2, [r3, #0]
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800
 8004f54:	40023c00 	.word	0x40023c00

08004f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e041      	b.n	8004fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f839 	bl	8004ff6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 f9d8 	bl	800534c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d001      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e04e      	b.n	80050c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a23      	ldr	r2, [pc, #140]	; (80050d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d01d      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_TIM_Base_Start_IT+0xd0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a18      	ldr	r2, [pc, #96]	; (80050e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d111      	bne.n	80050b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b06      	cmp	r3, #6
 800509c:	d010      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ae:	e007      	b.n	80050c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40001800 	.word	0x40001800

080050ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d122      	bne.n	8005148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b02      	cmp	r3, #2
 800510e:	d11b      	bne.n	8005148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0202 	mvn.w	r2, #2
 8005118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8ee 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8e0 	bl	80052fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8f1 	bl	8005324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b04      	cmp	r3, #4
 8005154:	d122      	bne.n	800519c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b04      	cmp	r3, #4
 8005162:	d11b      	bne.n	800519c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0204 	mvn.w	r2, #4
 800516c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f8c4 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f8b6 	bl	80052fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8c7 	bl	8005324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d122      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d11b      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0208 	mvn.w	r2, #8
 80051c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2204      	movs	r2, #4
 80051c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f89a 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f88c 	bl	80052fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f89d 	bl	8005324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b10      	cmp	r3, #16
 80051fc:	d122      	bne.n	8005244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b10      	cmp	r3, #16
 800520a:	d11b      	bne.n	8005244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0210 	mvn.w	r2, #16
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2208      	movs	r2, #8
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f870 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f862 	bl	80052fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f873 	bl	8005324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d10e      	bne.n	8005270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0201 	mvn.w	r2, #1
 8005268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fe fd20 	bl	8003cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b80      	cmp	r3, #128	; 0x80
 800527c:	d10e      	bne.n	800529c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005288:	2b80      	cmp	r3, #128	; 0x80
 800528a:	d107      	bne.n	800529c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f902 	bl	80054a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a6:	2b40      	cmp	r3, #64	; 0x40
 80052a8:	d10e      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d107      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f838 	bl	8005338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d10e      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d107      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0220 	mvn.w	r2, #32
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f8cc 	bl	800548c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a40      	ldr	r2, [pc, #256]	; (8005460 <TIM_Base_SetConfig+0x114>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536a:	d00f      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3d      	ldr	r2, [pc, #244]	; (8005464 <TIM_Base_SetConfig+0x118>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00b      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3c      	ldr	r2, [pc, #240]	; (8005468 <TIM_Base_SetConfig+0x11c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d007      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3b      	ldr	r2, [pc, #236]	; (800546c <TIM_Base_SetConfig+0x120>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a3a      	ldr	r2, [pc, #232]	; (8005470 <TIM_Base_SetConfig+0x124>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d108      	bne.n	800539e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <TIM_Base_SetConfig+0x114>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d02b      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d027      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2c      	ldr	r2, [pc, #176]	; (8005464 <TIM_Base_SetConfig+0x118>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d023      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2b      	ldr	r2, [pc, #172]	; (8005468 <TIM_Base_SetConfig+0x11c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01f      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2a      	ldr	r2, [pc, #168]	; (800546c <TIM_Base_SetConfig+0x120>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01b      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a29      	ldr	r2, [pc, #164]	; (8005470 <TIM_Base_SetConfig+0x124>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d017      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a28      	ldr	r2, [pc, #160]	; (8005474 <TIM_Base_SetConfig+0x128>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a27      	ldr	r2, [pc, #156]	; (8005478 <TIM_Base_SetConfig+0x12c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00f      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a26      	ldr	r2, [pc, #152]	; (800547c <TIM_Base_SetConfig+0x130>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00b      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a25      	ldr	r2, [pc, #148]	; (8005480 <TIM_Base_SetConfig+0x134>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a24      	ldr	r2, [pc, #144]	; (8005484 <TIM_Base_SetConfig+0x138>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a23      	ldr	r2, [pc, #140]	; (8005488 <TIM_Base_SetConfig+0x13c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d108      	bne.n	8005410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <TIM_Base_SetConfig+0x114>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_Base_SetConfig+0xf8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <TIM_Base_SetConfig+0x124>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d103      	bne.n	800544c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	615a      	str	r2, [r3, #20]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40010400 	.word	0x40010400
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400
 800547c:	40014800 	.word	0x40014800
 8005480:	40001800 	.word	0x40001800
 8005484:	40001c00 	.word	0x40001c00
 8005488:	40002000 	.word	0x40002000

0800548c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <__errno>:
 80054b4:	4b01      	ldr	r3, [pc, #4]	; (80054bc <__errno+0x8>)
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	20000014 	.word	0x20000014

080054c0 <__libc_init_array>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	4d0d      	ldr	r5, [pc, #52]	; (80054f8 <__libc_init_array+0x38>)
 80054c4:	4c0d      	ldr	r4, [pc, #52]	; (80054fc <__libc_init_array+0x3c>)
 80054c6:	1b64      	subs	r4, r4, r5
 80054c8:	10a4      	asrs	r4, r4, #2
 80054ca:	2600      	movs	r6, #0
 80054cc:	42a6      	cmp	r6, r4
 80054ce:	d109      	bne.n	80054e4 <__libc_init_array+0x24>
 80054d0:	4d0b      	ldr	r5, [pc, #44]	; (8005500 <__libc_init_array+0x40>)
 80054d2:	4c0c      	ldr	r4, [pc, #48]	; (8005504 <__libc_init_array+0x44>)
 80054d4:	f001 f864 	bl	80065a0 <_init>
 80054d8:	1b64      	subs	r4, r4, r5
 80054da:	10a4      	asrs	r4, r4, #2
 80054dc:	2600      	movs	r6, #0
 80054de:	42a6      	cmp	r6, r4
 80054e0:	d105      	bne.n	80054ee <__libc_init_array+0x2e>
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e8:	4798      	blx	r3
 80054ea:	3601      	adds	r6, #1
 80054ec:	e7ee      	b.n	80054cc <__libc_init_array+0xc>
 80054ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f2:	4798      	blx	r3
 80054f4:	3601      	adds	r6, #1
 80054f6:	e7f2      	b.n	80054de <__libc_init_array+0x1e>
 80054f8:	080068a4 	.word	0x080068a4
 80054fc:	080068a4 	.word	0x080068a4
 8005500:	080068a4 	.word	0x080068a4
 8005504:	080068a8 	.word	0x080068a8

08005508 <memcmp>:
 8005508:	b510      	push	{r4, lr}
 800550a:	3901      	subs	r1, #1
 800550c:	4402      	add	r2, r0
 800550e:	4290      	cmp	r0, r2
 8005510:	d101      	bne.n	8005516 <memcmp+0xe>
 8005512:	2000      	movs	r0, #0
 8005514:	e005      	b.n	8005522 <memcmp+0x1a>
 8005516:	7803      	ldrb	r3, [r0, #0]
 8005518:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800551c:	42a3      	cmp	r3, r4
 800551e:	d001      	beq.n	8005524 <memcmp+0x1c>
 8005520:	1b18      	subs	r0, r3, r4
 8005522:	bd10      	pop	{r4, pc}
 8005524:	3001      	adds	r0, #1
 8005526:	e7f2      	b.n	800550e <memcmp+0x6>

08005528 <memcpy>:
 8005528:	440a      	add	r2, r1
 800552a:	4291      	cmp	r1, r2
 800552c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005530:	d100      	bne.n	8005534 <memcpy+0xc>
 8005532:	4770      	bx	lr
 8005534:	b510      	push	{r4, lr}
 8005536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800553a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800553e:	4291      	cmp	r1, r2
 8005540:	d1f9      	bne.n	8005536 <memcpy+0xe>
 8005542:	bd10      	pop	{r4, pc}

08005544 <memset>:
 8005544:	4402      	add	r2, r0
 8005546:	4603      	mov	r3, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <rand>:
 8005554:	4b16      	ldr	r3, [pc, #88]	; (80055b0 <rand+0x5c>)
 8005556:	b510      	push	{r4, lr}
 8005558:	681c      	ldr	r4, [r3, #0]
 800555a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800555c:	b9b3      	cbnz	r3, 800558c <rand+0x38>
 800555e:	2018      	movs	r0, #24
 8005560:	f000 f866 	bl	8005630 <malloc>
 8005564:	63a0      	str	r0, [r4, #56]	; 0x38
 8005566:	b928      	cbnz	r0, 8005574 <rand+0x20>
 8005568:	4602      	mov	r2, r0
 800556a:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <rand+0x60>)
 800556c:	4812      	ldr	r0, [pc, #72]	; (80055b8 <rand+0x64>)
 800556e:	214e      	movs	r1, #78	; 0x4e
 8005570:	f000 f82e 	bl	80055d0 <__assert_func>
 8005574:	4a11      	ldr	r2, [pc, #68]	; (80055bc <rand+0x68>)
 8005576:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <rand+0x6c>)
 8005578:	e9c0 2300 	strd	r2, r3, [r0]
 800557c:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <rand+0x70>)
 800557e:	6083      	str	r3, [r0, #8]
 8005580:	230b      	movs	r3, #11
 8005582:	8183      	strh	r3, [r0, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	2300      	movs	r3, #0
 8005588:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800558c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800558e:	4a0e      	ldr	r2, [pc, #56]	; (80055c8 <rand+0x74>)
 8005590:	6920      	ldr	r0, [r4, #16]
 8005592:	6963      	ldr	r3, [r4, #20]
 8005594:	490d      	ldr	r1, [pc, #52]	; (80055cc <rand+0x78>)
 8005596:	4342      	muls	r2, r0
 8005598:	fb01 2203 	mla	r2, r1, r3, r2
 800559c:	fba0 0101 	umull	r0, r1, r0, r1
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	eb42 0001 	adc.w	r0, r2, r1
 80055a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80055aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80055ae:	bd10      	pop	{r4, pc}
 80055b0:	20000014 	.word	0x20000014
 80055b4:	08006758 	.word	0x08006758
 80055b8:	0800676f 	.word	0x0800676f
 80055bc:	abcd330e 	.word	0xabcd330e
 80055c0:	e66d1234 	.word	0xe66d1234
 80055c4:	0005deec 	.word	0x0005deec
 80055c8:	5851f42d 	.word	0x5851f42d
 80055cc:	4c957f2d 	.word	0x4c957f2d

080055d0 <__assert_func>:
 80055d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055d2:	4614      	mov	r4, r2
 80055d4:	461a      	mov	r2, r3
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <__assert_func+0x2c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4605      	mov	r5, r0
 80055dc:	68d8      	ldr	r0, [r3, #12]
 80055de:	b14c      	cbz	r4, 80055f4 <__assert_func+0x24>
 80055e0:	4b07      	ldr	r3, [pc, #28]	; (8005600 <__assert_func+0x30>)
 80055e2:	9100      	str	r1, [sp, #0]
 80055e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055e8:	4906      	ldr	r1, [pc, #24]	; (8005604 <__assert_func+0x34>)
 80055ea:	462b      	mov	r3, r5
 80055ec:	f000 f80e 	bl	800560c <fiprintf>
 80055f0:	f000 fcc4 	bl	8005f7c <abort>
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <__assert_func+0x38>)
 80055f6:	461c      	mov	r4, r3
 80055f8:	e7f3      	b.n	80055e2 <__assert_func+0x12>
 80055fa:	bf00      	nop
 80055fc:	20000014 	.word	0x20000014
 8005600:	080067ca 	.word	0x080067ca
 8005604:	080067d7 	.word	0x080067d7
 8005608:	08006805 	.word	0x08006805

0800560c <fiprintf>:
 800560c:	b40e      	push	{r1, r2, r3}
 800560e:	b503      	push	{r0, r1, lr}
 8005610:	4601      	mov	r1, r0
 8005612:	ab03      	add	r3, sp, #12
 8005614:	4805      	ldr	r0, [pc, #20]	; (800562c <fiprintf+0x20>)
 8005616:	f853 2b04 	ldr.w	r2, [r3], #4
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	f000 f919 	bl	8005854 <_vfiprintf_r>
 8005622:	b002      	add	sp, #8
 8005624:	f85d eb04 	ldr.w	lr, [sp], #4
 8005628:	b003      	add	sp, #12
 800562a:	4770      	bx	lr
 800562c:	20000014 	.word	0x20000014

08005630 <malloc>:
 8005630:	4b02      	ldr	r3, [pc, #8]	; (800563c <malloc+0xc>)
 8005632:	4601      	mov	r1, r0
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	f000 b86f 	b.w	8005718 <_malloc_r>
 800563a:	bf00      	nop
 800563c:	20000014 	.word	0x20000014

08005640 <_free_r>:
 8005640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005642:	2900      	cmp	r1, #0
 8005644:	d044      	beq.n	80056d0 <_free_r+0x90>
 8005646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800564a:	9001      	str	r0, [sp, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f1a1 0404 	sub.w	r4, r1, #4
 8005652:	bfb8      	it	lt
 8005654:	18e4      	addlt	r4, r4, r3
 8005656:	f000 feb9 	bl	80063cc <__malloc_lock>
 800565a:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <_free_r+0x94>)
 800565c:	9801      	ldr	r0, [sp, #4]
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	b933      	cbnz	r3, 8005670 <_free_r+0x30>
 8005662:	6063      	str	r3, [r4, #4]
 8005664:	6014      	str	r4, [r2, #0]
 8005666:	b003      	add	sp, #12
 8005668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800566c:	f000 beb4 	b.w	80063d8 <__malloc_unlock>
 8005670:	42a3      	cmp	r3, r4
 8005672:	d908      	bls.n	8005686 <_free_r+0x46>
 8005674:	6825      	ldr	r5, [r4, #0]
 8005676:	1961      	adds	r1, r4, r5
 8005678:	428b      	cmp	r3, r1
 800567a:	bf01      	itttt	eq
 800567c:	6819      	ldreq	r1, [r3, #0]
 800567e:	685b      	ldreq	r3, [r3, #4]
 8005680:	1949      	addeq	r1, r1, r5
 8005682:	6021      	streq	r1, [r4, #0]
 8005684:	e7ed      	b.n	8005662 <_free_r+0x22>
 8005686:	461a      	mov	r2, r3
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	b10b      	cbz	r3, 8005690 <_free_r+0x50>
 800568c:	42a3      	cmp	r3, r4
 800568e:	d9fa      	bls.n	8005686 <_free_r+0x46>
 8005690:	6811      	ldr	r1, [r2, #0]
 8005692:	1855      	adds	r5, r2, r1
 8005694:	42a5      	cmp	r5, r4
 8005696:	d10b      	bne.n	80056b0 <_free_r+0x70>
 8005698:	6824      	ldr	r4, [r4, #0]
 800569a:	4421      	add	r1, r4
 800569c:	1854      	adds	r4, r2, r1
 800569e:	42a3      	cmp	r3, r4
 80056a0:	6011      	str	r1, [r2, #0]
 80056a2:	d1e0      	bne.n	8005666 <_free_r+0x26>
 80056a4:	681c      	ldr	r4, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	6053      	str	r3, [r2, #4]
 80056aa:	4421      	add	r1, r4
 80056ac:	6011      	str	r1, [r2, #0]
 80056ae:	e7da      	b.n	8005666 <_free_r+0x26>
 80056b0:	d902      	bls.n	80056b8 <_free_r+0x78>
 80056b2:	230c      	movs	r3, #12
 80056b4:	6003      	str	r3, [r0, #0]
 80056b6:	e7d6      	b.n	8005666 <_free_r+0x26>
 80056b8:	6825      	ldr	r5, [r4, #0]
 80056ba:	1961      	adds	r1, r4, r5
 80056bc:	428b      	cmp	r3, r1
 80056be:	bf04      	itt	eq
 80056c0:	6819      	ldreq	r1, [r3, #0]
 80056c2:	685b      	ldreq	r3, [r3, #4]
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	bf04      	itt	eq
 80056c8:	1949      	addeq	r1, r1, r5
 80056ca:	6021      	streq	r1, [r4, #0]
 80056cc:	6054      	str	r4, [r2, #4]
 80056ce:	e7ca      	b.n	8005666 <_free_r+0x26>
 80056d0:	b003      	add	sp, #12
 80056d2:	bd30      	pop	{r4, r5, pc}
 80056d4:	20015098 	.word	0x20015098

080056d8 <sbrk_aligned>:
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	4e0e      	ldr	r6, [pc, #56]	; (8005714 <sbrk_aligned+0x3c>)
 80056dc:	460c      	mov	r4, r1
 80056de:	6831      	ldr	r1, [r6, #0]
 80056e0:	4605      	mov	r5, r0
 80056e2:	b911      	cbnz	r1, 80056ea <sbrk_aligned+0x12>
 80056e4:	f000 fb7a 	bl	8005ddc <_sbrk_r>
 80056e8:	6030      	str	r0, [r6, #0]
 80056ea:	4621      	mov	r1, r4
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 fb75 	bl	8005ddc <_sbrk_r>
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	d00a      	beq.n	800570c <sbrk_aligned+0x34>
 80056f6:	1cc4      	adds	r4, r0, #3
 80056f8:	f024 0403 	bic.w	r4, r4, #3
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d007      	beq.n	8005710 <sbrk_aligned+0x38>
 8005700:	1a21      	subs	r1, r4, r0
 8005702:	4628      	mov	r0, r5
 8005704:	f000 fb6a 	bl	8005ddc <_sbrk_r>
 8005708:	3001      	adds	r0, #1
 800570a:	d101      	bne.n	8005710 <sbrk_aligned+0x38>
 800570c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005710:	4620      	mov	r0, r4
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	2001509c 	.word	0x2001509c

08005718 <_malloc_r>:
 8005718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800571c:	1ccd      	adds	r5, r1, #3
 800571e:	f025 0503 	bic.w	r5, r5, #3
 8005722:	3508      	adds	r5, #8
 8005724:	2d0c      	cmp	r5, #12
 8005726:	bf38      	it	cc
 8005728:	250c      	movcc	r5, #12
 800572a:	2d00      	cmp	r5, #0
 800572c:	4607      	mov	r7, r0
 800572e:	db01      	blt.n	8005734 <_malloc_r+0x1c>
 8005730:	42a9      	cmp	r1, r5
 8005732:	d905      	bls.n	8005740 <_malloc_r+0x28>
 8005734:	230c      	movs	r3, #12
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	2600      	movs	r6, #0
 800573a:	4630      	mov	r0, r6
 800573c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005740:	4e2e      	ldr	r6, [pc, #184]	; (80057fc <_malloc_r+0xe4>)
 8005742:	f000 fe43 	bl	80063cc <__malloc_lock>
 8005746:	6833      	ldr	r3, [r6, #0]
 8005748:	461c      	mov	r4, r3
 800574a:	bb34      	cbnz	r4, 800579a <_malloc_r+0x82>
 800574c:	4629      	mov	r1, r5
 800574e:	4638      	mov	r0, r7
 8005750:	f7ff ffc2 	bl	80056d8 <sbrk_aligned>
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	4604      	mov	r4, r0
 8005758:	d14d      	bne.n	80057f6 <_malloc_r+0xde>
 800575a:	6834      	ldr	r4, [r6, #0]
 800575c:	4626      	mov	r6, r4
 800575e:	2e00      	cmp	r6, #0
 8005760:	d140      	bne.n	80057e4 <_malloc_r+0xcc>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	4631      	mov	r1, r6
 8005766:	4638      	mov	r0, r7
 8005768:	eb04 0803 	add.w	r8, r4, r3
 800576c:	f000 fb36 	bl	8005ddc <_sbrk_r>
 8005770:	4580      	cmp	r8, r0
 8005772:	d13a      	bne.n	80057ea <_malloc_r+0xd2>
 8005774:	6821      	ldr	r1, [r4, #0]
 8005776:	3503      	adds	r5, #3
 8005778:	1a6d      	subs	r5, r5, r1
 800577a:	f025 0503 	bic.w	r5, r5, #3
 800577e:	3508      	adds	r5, #8
 8005780:	2d0c      	cmp	r5, #12
 8005782:	bf38      	it	cc
 8005784:	250c      	movcc	r5, #12
 8005786:	4629      	mov	r1, r5
 8005788:	4638      	mov	r0, r7
 800578a:	f7ff ffa5 	bl	80056d8 <sbrk_aligned>
 800578e:	3001      	adds	r0, #1
 8005790:	d02b      	beq.n	80057ea <_malloc_r+0xd2>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	442b      	add	r3, r5
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	e00e      	b.n	80057b8 <_malloc_r+0xa0>
 800579a:	6822      	ldr	r2, [r4, #0]
 800579c:	1b52      	subs	r2, r2, r5
 800579e:	d41e      	bmi.n	80057de <_malloc_r+0xc6>
 80057a0:	2a0b      	cmp	r2, #11
 80057a2:	d916      	bls.n	80057d2 <_malloc_r+0xba>
 80057a4:	1961      	adds	r1, r4, r5
 80057a6:	42a3      	cmp	r3, r4
 80057a8:	6025      	str	r5, [r4, #0]
 80057aa:	bf18      	it	ne
 80057ac:	6059      	strne	r1, [r3, #4]
 80057ae:	6863      	ldr	r3, [r4, #4]
 80057b0:	bf08      	it	eq
 80057b2:	6031      	streq	r1, [r6, #0]
 80057b4:	5162      	str	r2, [r4, r5]
 80057b6:	604b      	str	r3, [r1, #4]
 80057b8:	4638      	mov	r0, r7
 80057ba:	f104 060b 	add.w	r6, r4, #11
 80057be:	f000 fe0b 	bl	80063d8 <__malloc_unlock>
 80057c2:	f026 0607 	bic.w	r6, r6, #7
 80057c6:	1d23      	adds	r3, r4, #4
 80057c8:	1af2      	subs	r2, r6, r3
 80057ca:	d0b6      	beq.n	800573a <_malloc_r+0x22>
 80057cc:	1b9b      	subs	r3, r3, r6
 80057ce:	50a3      	str	r3, [r4, r2]
 80057d0:	e7b3      	b.n	800573a <_malloc_r+0x22>
 80057d2:	6862      	ldr	r2, [r4, #4]
 80057d4:	42a3      	cmp	r3, r4
 80057d6:	bf0c      	ite	eq
 80057d8:	6032      	streq	r2, [r6, #0]
 80057da:	605a      	strne	r2, [r3, #4]
 80057dc:	e7ec      	b.n	80057b8 <_malloc_r+0xa0>
 80057de:	4623      	mov	r3, r4
 80057e0:	6864      	ldr	r4, [r4, #4]
 80057e2:	e7b2      	b.n	800574a <_malloc_r+0x32>
 80057e4:	4634      	mov	r4, r6
 80057e6:	6876      	ldr	r6, [r6, #4]
 80057e8:	e7b9      	b.n	800575e <_malloc_r+0x46>
 80057ea:	230c      	movs	r3, #12
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	4638      	mov	r0, r7
 80057f0:	f000 fdf2 	bl	80063d8 <__malloc_unlock>
 80057f4:	e7a1      	b.n	800573a <_malloc_r+0x22>
 80057f6:	6025      	str	r5, [r4, #0]
 80057f8:	e7de      	b.n	80057b8 <_malloc_r+0xa0>
 80057fa:	bf00      	nop
 80057fc:	20015098 	.word	0x20015098

08005800 <__sfputc_r>:
 8005800:	6893      	ldr	r3, [r2, #8]
 8005802:	3b01      	subs	r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	b410      	push	{r4}
 8005808:	6093      	str	r3, [r2, #8]
 800580a:	da08      	bge.n	800581e <__sfputc_r+0x1e>
 800580c:	6994      	ldr	r4, [r2, #24]
 800580e:	42a3      	cmp	r3, r4
 8005810:	db01      	blt.n	8005816 <__sfputc_r+0x16>
 8005812:	290a      	cmp	r1, #10
 8005814:	d103      	bne.n	800581e <__sfputc_r+0x1e>
 8005816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800581a:	f000 baef 	b.w	8005dfc <__swbuf_r>
 800581e:	6813      	ldr	r3, [r2, #0]
 8005820:	1c58      	adds	r0, r3, #1
 8005822:	6010      	str	r0, [r2, #0]
 8005824:	7019      	strb	r1, [r3, #0]
 8005826:	4608      	mov	r0, r1
 8005828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800582c:	4770      	bx	lr

0800582e <__sfputs_r>:
 800582e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005830:	4606      	mov	r6, r0
 8005832:	460f      	mov	r7, r1
 8005834:	4614      	mov	r4, r2
 8005836:	18d5      	adds	r5, r2, r3
 8005838:	42ac      	cmp	r4, r5
 800583a:	d101      	bne.n	8005840 <__sfputs_r+0x12>
 800583c:	2000      	movs	r0, #0
 800583e:	e007      	b.n	8005850 <__sfputs_r+0x22>
 8005840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005844:	463a      	mov	r2, r7
 8005846:	4630      	mov	r0, r6
 8005848:	f7ff ffda 	bl	8005800 <__sfputc_r>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d1f3      	bne.n	8005838 <__sfputs_r+0xa>
 8005850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005854 <_vfiprintf_r>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	460d      	mov	r5, r1
 800585a:	b09d      	sub	sp, #116	; 0x74
 800585c:	4614      	mov	r4, r2
 800585e:	4698      	mov	r8, r3
 8005860:	4606      	mov	r6, r0
 8005862:	b118      	cbz	r0, 800586c <_vfiprintf_r+0x18>
 8005864:	6983      	ldr	r3, [r0, #24]
 8005866:	b90b      	cbnz	r3, 800586c <_vfiprintf_r+0x18>
 8005868:	f000 fcaa 	bl	80061c0 <__sinit>
 800586c:	4b89      	ldr	r3, [pc, #548]	; (8005a94 <_vfiprintf_r+0x240>)
 800586e:	429d      	cmp	r5, r3
 8005870:	d11b      	bne.n	80058aa <_vfiprintf_r+0x56>
 8005872:	6875      	ldr	r5, [r6, #4]
 8005874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005876:	07d9      	lsls	r1, r3, #31
 8005878:	d405      	bmi.n	8005886 <_vfiprintf_r+0x32>
 800587a:	89ab      	ldrh	r3, [r5, #12]
 800587c:	059a      	lsls	r2, r3, #22
 800587e:	d402      	bmi.n	8005886 <_vfiprintf_r+0x32>
 8005880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005882:	f000 fd3b 	bl	80062fc <__retarget_lock_acquire_recursive>
 8005886:	89ab      	ldrh	r3, [r5, #12]
 8005888:	071b      	lsls	r3, r3, #28
 800588a:	d501      	bpl.n	8005890 <_vfiprintf_r+0x3c>
 800588c:	692b      	ldr	r3, [r5, #16]
 800588e:	b9eb      	cbnz	r3, 80058cc <_vfiprintf_r+0x78>
 8005890:	4629      	mov	r1, r5
 8005892:	4630      	mov	r0, r6
 8005894:	f000 fb04 	bl	8005ea0 <__swsetup_r>
 8005898:	b1c0      	cbz	r0, 80058cc <_vfiprintf_r+0x78>
 800589a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800589c:	07dc      	lsls	r4, r3, #31
 800589e:	d50e      	bpl.n	80058be <_vfiprintf_r+0x6a>
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058a4:	b01d      	add	sp, #116	; 0x74
 80058a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058aa:	4b7b      	ldr	r3, [pc, #492]	; (8005a98 <_vfiprintf_r+0x244>)
 80058ac:	429d      	cmp	r5, r3
 80058ae:	d101      	bne.n	80058b4 <_vfiprintf_r+0x60>
 80058b0:	68b5      	ldr	r5, [r6, #8]
 80058b2:	e7df      	b.n	8005874 <_vfiprintf_r+0x20>
 80058b4:	4b79      	ldr	r3, [pc, #484]	; (8005a9c <_vfiprintf_r+0x248>)
 80058b6:	429d      	cmp	r5, r3
 80058b8:	bf08      	it	eq
 80058ba:	68f5      	ldreq	r5, [r6, #12]
 80058bc:	e7da      	b.n	8005874 <_vfiprintf_r+0x20>
 80058be:	89ab      	ldrh	r3, [r5, #12]
 80058c0:	0598      	lsls	r0, r3, #22
 80058c2:	d4ed      	bmi.n	80058a0 <_vfiprintf_r+0x4c>
 80058c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c6:	f000 fd1a 	bl	80062fe <__retarget_lock_release_recursive>
 80058ca:	e7e9      	b.n	80058a0 <_vfiprintf_r+0x4c>
 80058cc:	2300      	movs	r3, #0
 80058ce:	9309      	str	r3, [sp, #36]	; 0x24
 80058d0:	2320      	movs	r3, #32
 80058d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80058da:	2330      	movs	r3, #48	; 0x30
 80058dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005aa0 <_vfiprintf_r+0x24c>
 80058e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e4:	f04f 0901 	mov.w	r9, #1
 80058e8:	4623      	mov	r3, r4
 80058ea:	469a      	mov	sl, r3
 80058ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f0:	b10a      	cbz	r2, 80058f6 <_vfiprintf_r+0xa2>
 80058f2:	2a25      	cmp	r2, #37	; 0x25
 80058f4:	d1f9      	bne.n	80058ea <_vfiprintf_r+0x96>
 80058f6:	ebba 0b04 	subs.w	fp, sl, r4
 80058fa:	d00b      	beq.n	8005914 <_vfiprintf_r+0xc0>
 80058fc:	465b      	mov	r3, fp
 80058fe:	4622      	mov	r2, r4
 8005900:	4629      	mov	r1, r5
 8005902:	4630      	mov	r0, r6
 8005904:	f7ff ff93 	bl	800582e <__sfputs_r>
 8005908:	3001      	adds	r0, #1
 800590a:	f000 80aa 	beq.w	8005a62 <_vfiprintf_r+0x20e>
 800590e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005910:	445a      	add	r2, fp
 8005912:	9209      	str	r2, [sp, #36]	; 0x24
 8005914:	f89a 3000 	ldrb.w	r3, [sl]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80a2 	beq.w	8005a62 <_vfiprintf_r+0x20e>
 800591e:	2300      	movs	r3, #0
 8005920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005928:	f10a 0a01 	add.w	sl, sl, #1
 800592c:	9304      	str	r3, [sp, #16]
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005934:	931a      	str	r3, [sp, #104]	; 0x68
 8005936:	4654      	mov	r4, sl
 8005938:	2205      	movs	r2, #5
 800593a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593e:	4858      	ldr	r0, [pc, #352]	; (8005aa0 <_vfiprintf_r+0x24c>)
 8005940:	f7fa fc96 	bl	8000270 <memchr>
 8005944:	9a04      	ldr	r2, [sp, #16]
 8005946:	b9d8      	cbnz	r0, 8005980 <_vfiprintf_r+0x12c>
 8005948:	06d1      	lsls	r1, r2, #27
 800594a:	bf44      	itt	mi
 800594c:	2320      	movmi	r3, #32
 800594e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005952:	0713      	lsls	r3, r2, #28
 8005954:	bf44      	itt	mi
 8005956:	232b      	movmi	r3, #43	; 0x2b
 8005958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595c:	f89a 3000 	ldrb.w	r3, [sl]
 8005960:	2b2a      	cmp	r3, #42	; 0x2a
 8005962:	d015      	beq.n	8005990 <_vfiprintf_r+0x13c>
 8005964:	9a07      	ldr	r2, [sp, #28]
 8005966:	4654      	mov	r4, sl
 8005968:	2000      	movs	r0, #0
 800596a:	f04f 0c0a 	mov.w	ip, #10
 800596e:	4621      	mov	r1, r4
 8005970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005974:	3b30      	subs	r3, #48	; 0x30
 8005976:	2b09      	cmp	r3, #9
 8005978:	d94e      	bls.n	8005a18 <_vfiprintf_r+0x1c4>
 800597a:	b1b0      	cbz	r0, 80059aa <_vfiprintf_r+0x156>
 800597c:	9207      	str	r2, [sp, #28]
 800597e:	e014      	b.n	80059aa <_vfiprintf_r+0x156>
 8005980:	eba0 0308 	sub.w	r3, r0, r8
 8005984:	fa09 f303 	lsl.w	r3, r9, r3
 8005988:	4313      	orrs	r3, r2
 800598a:	9304      	str	r3, [sp, #16]
 800598c:	46a2      	mov	sl, r4
 800598e:	e7d2      	b.n	8005936 <_vfiprintf_r+0xe2>
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	1d19      	adds	r1, r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	9103      	str	r1, [sp, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	bfbb      	ittet	lt
 800599c:	425b      	neglt	r3, r3
 800599e:	f042 0202 	orrlt.w	r2, r2, #2
 80059a2:	9307      	strge	r3, [sp, #28]
 80059a4:	9307      	strlt	r3, [sp, #28]
 80059a6:	bfb8      	it	lt
 80059a8:	9204      	strlt	r2, [sp, #16]
 80059aa:	7823      	ldrb	r3, [r4, #0]
 80059ac:	2b2e      	cmp	r3, #46	; 0x2e
 80059ae:	d10c      	bne.n	80059ca <_vfiprintf_r+0x176>
 80059b0:	7863      	ldrb	r3, [r4, #1]
 80059b2:	2b2a      	cmp	r3, #42	; 0x2a
 80059b4:	d135      	bne.n	8005a22 <_vfiprintf_r+0x1ce>
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	1d1a      	adds	r2, r3, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	9203      	str	r2, [sp, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bfb8      	it	lt
 80059c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059c6:	3402      	adds	r4, #2
 80059c8:	9305      	str	r3, [sp, #20]
 80059ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ab0 <_vfiprintf_r+0x25c>
 80059ce:	7821      	ldrb	r1, [r4, #0]
 80059d0:	2203      	movs	r2, #3
 80059d2:	4650      	mov	r0, sl
 80059d4:	f7fa fc4c 	bl	8000270 <memchr>
 80059d8:	b140      	cbz	r0, 80059ec <_vfiprintf_r+0x198>
 80059da:	2340      	movs	r3, #64	; 0x40
 80059dc:	eba0 000a 	sub.w	r0, r0, sl
 80059e0:	fa03 f000 	lsl.w	r0, r3, r0
 80059e4:	9b04      	ldr	r3, [sp, #16]
 80059e6:	4303      	orrs	r3, r0
 80059e8:	3401      	adds	r4, #1
 80059ea:	9304      	str	r3, [sp, #16]
 80059ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f0:	482c      	ldr	r0, [pc, #176]	; (8005aa4 <_vfiprintf_r+0x250>)
 80059f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f6:	2206      	movs	r2, #6
 80059f8:	f7fa fc3a 	bl	8000270 <memchr>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d03f      	beq.n	8005a80 <_vfiprintf_r+0x22c>
 8005a00:	4b29      	ldr	r3, [pc, #164]	; (8005aa8 <_vfiprintf_r+0x254>)
 8005a02:	bb1b      	cbnz	r3, 8005a4c <_vfiprintf_r+0x1f8>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	3307      	adds	r3, #7
 8005a08:	f023 0307 	bic.w	r3, r3, #7
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a12:	443b      	add	r3, r7
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	e767      	b.n	80058e8 <_vfiprintf_r+0x94>
 8005a18:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	2001      	movs	r0, #1
 8005a20:	e7a5      	b.n	800596e <_vfiprintf_r+0x11a>
 8005a22:	2300      	movs	r3, #0
 8005a24:	3401      	adds	r4, #1
 8005a26:	9305      	str	r3, [sp, #20]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f04f 0c0a 	mov.w	ip, #10
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a34:	3a30      	subs	r2, #48	; 0x30
 8005a36:	2a09      	cmp	r2, #9
 8005a38:	d903      	bls.n	8005a42 <_vfiprintf_r+0x1ee>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0c5      	beq.n	80059ca <_vfiprintf_r+0x176>
 8005a3e:	9105      	str	r1, [sp, #20]
 8005a40:	e7c3      	b.n	80059ca <_vfiprintf_r+0x176>
 8005a42:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a46:	4604      	mov	r4, r0
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e7f0      	b.n	8005a2e <_vfiprintf_r+0x1da>
 8005a4c:	ab03      	add	r3, sp, #12
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	462a      	mov	r2, r5
 8005a52:	4b16      	ldr	r3, [pc, #88]	; (8005aac <_vfiprintf_r+0x258>)
 8005a54:	a904      	add	r1, sp, #16
 8005a56:	4630      	mov	r0, r6
 8005a58:	f3af 8000 	nop.w
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	1c78      	adds	r0, r7, #1
 8005a60:	d1d6      	bne.n	8005a10 <_vfiprintf_r+0x1bc>
 8005a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a64:	07d9      	lsls	r1, r3, #31
 8005a66:	d405      	bmi.n	8005a74 <_vfiprintf_r+0x220>
 8005a68:	89ab      	ldrh	r3, [r5, #12]
 8005a6a:	059a      	lsls	r2, r3, #22
 8005a6c:	d402      	bmi.n	8005a74 <_vfiprintf_r+0x220>
 8005a6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a70:	f000 fc45 	bl	80062fe <__retarget_lock_release_recursive>
 8005a74:	89ab      	ldrh	r3, [r5, #12]
 8005a76:	065b      	lsls	r3, r3, #25
 8005a78:	f53f af12 	bmi.w	80058a0 <_vfiprintf_r+0x4c>
 8005a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a7e:	e711      	b.n	80058a4 <_vfiprintf_r+0x50>
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	462a      	mov	r2, r5
 8005a86:	4b09      	ldr	r3, [pc, #36]	; (8005aac <_vfiprintf_r+0x258>)
 8005a88:	a904      	add	r1, sp, #16
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f000 f880 	bl	8005b90 <_printf_i>
 8005a90:	e7e4      	b.n	8005a5c <_vfiprintf_r+0x208>
 8005a92:	bf00      	nop
 8005a94:	0800685c 	.word	0x0800685c
 8005a98:	0800687c 	.word	0x0800687c
 8005a9c:	0800683c 	.word	0x0800683c
 8005aa0:	08006806 	.word	0x08006806
 8005aa4:	08006810 	.word	0x08006810
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	0800582f 	.word	0x0800582f
 8005ab0:	0800680c 	.word	0x0800680c

08005ab4 <_printf_common>:
 8005ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	4616      	mov	r6, r2
 8005aba:	4699      	mov	r9, r3
 8005abc:	688a      	ldr	r2, [r1, #8]
 8005abe:	690b      	ldr	r3, [r1, #16]
 8005ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	bfb8      	it	lt
 8005ac8:	4613      	movlt	r3, r2
 8005aca:	6033      	str	r3, [r6, #0]
 8005acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	b10a      	cbz	r2, 8005ada <_printf_common+0x26>
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	6033      	str	r3, [r6, #0]
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	0699      	lsls	r1, r3, #26
 8005ade:	bf42      	ittt	mi
 8005ae0:	6833      	ldrmi	r3, [r6, #0]
 8005ae2:	3302      	addmi	r3, #2
 8005ae4:	6033      	strmi	r3, [r6, #0]
 8005ae6:	6825      	ldr	r5, [r4, #0]
 8005ae8:	f015 0506 	ands.w	r5, r5, #6
 8005aec:	d106      	bne.n	8005afc <_printf_common+0x48>
 8005aee:	f104 0a19 	add.w	sl, r4, #25
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	6832      	ldr	r2, [r6, #0]
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dc26      	bgt.n	8005b4a <_printf_common+0x96>
 8005afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b00:	1e13      	subs	r3, r2, #0
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	bf18      	it	ne
 8005b06:	2301      	movne	r3, #1
 8005b08:	0692      	lsls	r2, r2, #26
 8005b0a:	d42b      	bmi.n	8005b64 <_printf_common+0xb0>
 8005b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b10:	4649      	mov	r1, r9
 8005b12:	4638      	mov	r0, r7
 8005b14:	47c0      	blx	r8
 8005b16:	3001      	adds	r0, #1
 8005b18:	d01e      	beq.n	8005b58 <_printf_common+0xa4>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	68e5      	ldr	r5, [r4, #12]
 8005b1e:	6832      	ldr	r2, [r6, #0]
 8005b20:	f003 0306 	and.w	r3, r3, #6
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	bf08      	it	eq
 8005b28:	1aad      	subeq	r5, r5, r2
 8005b2a:	68a3      	ldr	r3, [r4, #8]
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	bf0c      	ite	eq
 8005b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b34:	2500      	movne	r5, #0
 8005b36:	4293      	cmp	r3, r2
 8005b38:	bfc4      	itt	gt
 8005b3a:	1a9b      	subgt	r3, r3, r2
 8005b3c:	18ed      	addgt	r5, r5, r3
 8005b3e:	2600      	movs	r6, #0
 8005b40:	341a      	adds	r4, #26
 8005b42:	42b5      	cmp	r5, r6
 8005b44:	d11a      	bne.n	8005b7c <_printf_common+0xc8>
 8005b46:	2000      	movs	r0, #0
 8005b48:	e008      	b.n	8005b5c <_printf_common+0xa8>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	4649      	mov	r1, r9
 8005b50:	4638      	mov	r0, r7
 8005b52:	47c0      	blx	r8
 8005b54:	3001      	adds	r0, #1
 8005b56:	d103      	bne.n	8005b60 <_printf_common+0xac>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b60:	3501      	adds	r5, #1
 8005b62:	e7c6      	b.n	8005af2 <_printf_common+0x3e>
 8005b64:	18e1      	adds	r1, r4, r3
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	2030      	movs	r0, #48	; 0x30
 8005b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b6e:	4422      	add	r2, r4
 8005b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b78:	3302      	adds	r3, #2
 8005b7a:	e7c7      	b.n	8005b0c <_printf_common+0x58>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4622      	mov	r2, r4
 8005b80:	4649      	mov	r1, r9
 8005b82:	4638      	mov	r0, r7
 8005b84:	47c0      	blx	r8
 8005b86:	3001      	adds	r0, #1
 8005b88:	d0e6      	beq.n	8005b58 <_printf_common+0xa4>
 8005b8a:	3601      	adds	r6, #1
 8005b8c:	e7d9      	b.n	8005b42 <_printf_common+0x8e>
	...

08005b90 <_printf_i>:
 8005b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b94:	7e0f      	ldrb	r7, [r1, #24]
 8005b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b98:	2f78      	cmp	r7, #120	; 0x78
 8005b9a:	4691      	mov	r9, r2
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	469a      	mov	sl, r3
 8005ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ba6:	d807      	bhi.n	8005bb8 <_printf_i+0x28>
 8005ba8:	2f62      	cmp	r7, #98	; 0x62
 8005baa:	d80a      	bhi.n	8005bc2 <_printf_i+0x32>
 8005bac:	2f00      	cmp	r7, #0
 8005bae:	f000 80d8 	beq.w	8005d62 <_printf_i+0x1d2>
 8005bb2:	2f58      	cmp	r7, #88	; 0x58
 8005bb4:	f000 80a3 	beq.w	8005cfe <_printf_i+0x16e>
 8005bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bc0:	e03a      	b.n	8005c38 <_printf_i+0xa8>
 8005bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bc6:	2b15      	cmp	r3, #21
 8005bc8:	d8f6      	bhi.n	8005bb8 <_printf_i+0x28>
 8005bca:	a101      	add	r1, pc, #4	; (adr r1, 8005bd0 <_printf_i+0x40>)
 8005bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bd0:	08005c29 	.word	0x08005c29
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005bb9 	.word	0x08005bb9
 8005bdc:	08005bb9 	.word	0x08005bb9
 8005be0:	08005bb9 	.word	0x08005bb9
 8005be4:	08005bb9 	.word	0x08005bb9
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005bb9 	.word	0x08005bb9
 8005bf0:	08005bb9 	.word	0x08005bb9
 8005bf4:	08005bb9 	.word	0x08005bb9
 8005bf8:	08005bb9 	.word	0x08005bb9
 8005bfc:	08005d49 	.word	0x08005d49
 8005c00:	08005c6d 	.word	0x08005c6d
 8005c04:	08005d2b 	.word	0x08005d2b
 8005c08:	08005bb9 	.word	0x08005bb9
 8005c0c:	08005bb9 	.word	0x08005bb9
 8005c10:	08005d6b 	.word	0x08005d6b
 8005c14:	08005bb9 	.word	0x08005bb9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005bb9 	.word	0x08005bb9
 8005c20:	08005bb9 	.word	0x08005bb9
 8005c24:	08005d33 	.word	0x08005d33
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	1d1a      	adds	r2, r3, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	602a      	str	r2, [r5, #0]
 8005c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0a3      	b.n	8005d84 <_printf_i+0x1f4>
 8005c3c:	6820      	ldr	r0, [r4, #0]
 8005c3e:	6829      	ldr	r1, [r5, #0]
 8005c40:	0606      	lsls	r6, r0, #24
 8005c42:	f101 0304 	add.w	r3, r1, #4
 8005c46:	d50a      	bpl.n	8005c5e <_printf_i+0xce>
 8005c48:	680e      	ldr	r6, [r1, #0]
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	2e00      	cmp	r6, #0
 8005c4e:	da03      	bge.n	8005c58 <_printf_i+0xc8>
 8005c50:	232d      	movs	r3, #45	; 0x2d
 8005c52:	4276      	negs	r6, r6
 8005c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c58:	485e      	ldr	r0, [pc, #376]	; (8005dd4 <_printf_i+0x244>)
 8005c5a:	230a      	movs	r3, #10
 8005c5c:	e019      	b.n	8005c92 <_printf_i+0x102>
 8005c5e:	680e      	ldr	r6, [r1, #0]
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c66:	bf18      	it	ne
 8005c68:	b236      	sxthne	r6, r6
 8005c6a:	e7ef      	b.n	8005c4c <_printf_i+0xbc>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	1d19      	adds	r1, r3, #4
 8005c72:	6029      	str	r1, [r5, #0]
 8005c74:	0601      	lsls	r1, r0, #24
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0xec>
 8005c78:	681e      	ldr	r6, [r3, #0]
 8005c7a:	e002      	b.n	8005c82 <_printf_i+0xf2>
 8005c7c:	0646      	lsls	r6, r0, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0xe8>
 8005c80:	881e      	ldrh	r6, [r3, #0]
 8005c82:	4854      	ldr	r0, [pc, #336]	; (8005dd4 <_printf_i+0x244>)
 8005c84:	2f6f      	cmp	r7, #111	; 0x6f
 8005c86:	bf0c      	ite	eq
 8005c88:	2308      	moveq	r3, #8
 8005c8a:	230a      	movne	r3, #10
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c92:	6865      	ldr	r5, [r4, #4]
 8005c94:	60a5      	str	r5, [r4, #8]
 8005c96:	2d00      	cmp	r5, #0
 8005c98:	bfa2      	ittt	ge
 8005c9a:	6821      	ldrge	r1, [r4, #0]
 8005c9c:	f021 0104 	bicge.w	r1, r1, #4
 8005ca0:	6021      	strge	r1, [r4, #0]
 8005ca2:	b90e      	cbnz	r6, 8005ca8 <_printf_i+0x118>
 8005ca4:	2d00      	cmp	r5, #0
 8005ca6:	d04d      	beq.n	8005d44 <_printf_i+0x1b4>
 8005ca8:	4615      	mov	r5, r2
 8005caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cae:	fb03 6711 	mls	r7, r3, r1, r6
 8005cb2:	5dc7      	ldrb	r7, [r0, r7]
 8005cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cb8:	4637      	mov	r7, r6
 8005cba:	42bb      	cmp	r3, r7
 8005cbc:	460e      	mov	r6, r1
 8005cbe:	d9f4      	bls.n	8005caa <_printf_i+0x11a>
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d10b      	bne.n	8005cdc <_printf_i+0x14c>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	07de      	lsls	r6, r3, #31
 8005cc8:	d508      	bpl.n	8005cdc <_printf_i+0x14c>
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	6861      	ldr	r1, [r4, #4]
 8005cce:	4299      	cmp	r1, r3
 8005cd0:	bfde      	ittt	le
 8005cd2:	2330      	movle	r3, #48	; 0x30
 8005cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005cdc:	1b52      	subs	r2, r2, r5
 8005cde:	6122      	str	r2, [r4, #16]
 8005ce0:	f8cd a000 	str.w	sl, [sp]
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	aa03      	add	r2, sp, #12
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4640      	mov	r0, r8
 8005cec:	f7ff fee2 	bl	8005ab4 <_printf_common>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d14c      	bne.n	8005d8e <_printf_i+0x1fe>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf8:	b004      	add	sp, #16
 8005cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfe:	4835      	ldr	r0, [pc, #212]	; (8005dd4 <_printf_i+0x244>)
 8005d00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d04:	6829      	ldr	r1, [r5, #0]
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d0c:	6029      	str	r1, [r5, #0]
 8005d0e:	061d      	lsls	r5, r3, #24
 8005d10:	d514      	bpl.n	8005d3c <_printf_i+0x1ac>
 8005d12:	07df      	lsls	r7, r3, #31
 8005d14:	bf44      	itt	mi
 8005d16:	f043 0320 	orrmi.w	r3, r3, #32
 8005d1a:	6023      	strmi	r3, [r4, #0]
 8005d1c:	b91e      	cbnz	r6, 8005d26 <_printf_i+0x196>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	f023 0320 	bic.w	r3, r3, #32
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	2310      	movs	r3, #16
 8005d28:	e7b0      	b.n	8005c8c <_printf_i+0xfc>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f043 0320 	orr.w	r3, r3, #32
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	2378      	movs	r3, #120	; 0x78
 8005d34:	4828      	ldr	r0, [pc, #160]	; (8005dd8 <_printf_i+0x248>)
 8005d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d3a:	e7e3      	b.n	8005d04 <_printf_i+0x174>
 8005d3c:	0659      	lsls	r1, r3, #25
 8005d3e:	bf48      	it	mi
 8005d40:	b2b6      	uxthmi	r6, r6
 8005d42:	e7e6      	b.n	8005d12 <_printf_i+0x182>
 8005d44:	4615      	mov	r5, r2
 8005d46:	e7bb      	b.n	8005cc0 <_printf_i+0x130>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	6826      	ldr	r6, [r4, #0]
 8005d4c:	6961      	ldr	r1, [r4, #20]
 8005d4e:	1d18      	adds	r0, r3, #4
 8005d50:	6028      	str	r0, [r5, #0]
 8005d52:	0635      	lsls	r5, r6, #24
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	d501      	bpl.n	8005d5c <_printf_i+0x1cc>
 8005d58:	6019      	str	r1, [r3, #0]
 8005d5a:	e002      	b.n	8005d62 <_printf_i+0x1d2>
 8005d5c:	0670      	lsls	r0, r6, #25
 8005d5e:	d5fb      	bpl.n	8005d58 <_printf_i+0x1c8>
 8005d60:	8019      	strh	r1, [r3, #0]
 8005d62:	2300      	movs	r3, #0
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	4615      	mov	r5, r2
 8005d68:	e7ba      	b.n	8005ce0 <_printf_i+0x150>
 8005d6a:	682b      	ldr	r3, [r5, #0]
 8005d6c:	1d1a      	adds	r2, r3, #4
 8005d6e:	602a      	str	r2, [r5, #0]
 8005d70:	681d      	ldr	r5, [r3, #0]
 8005d72:	6862      	ldr	r2, [r4, #4]
 8005d74:	2100      	movs	r1, #0
 8005d76:	4628      	mov	r0, r5
 8005d78:	f7fa fa7a 	bl	8000270 <memchr>
 8005d7c:	b108      	cbz	r0, 8005d82 <_printf_i+0x1f2>
 8005d7e:	1b40      	subs	r0, r0, r5
 8005d80:	6060      	str	r0, [r4, #4]
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	6123      	str	r3, [r4, #16]
 8005d86:	2300      	movs	r3, #0
 8005d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8c:	e7a8      	b.n	8005ce0 <_printf_i+0x150>
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	462a      	mov	r2, r5
 8005d92:	4649      	mov	r1, r9
 8005d94:	4640      	mov	r0, r8
 8005d96:	47d0      	blx	sl
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d0ab      	beq.n	8005cf4 <_printf_i+0x164>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	079b      	lsls	r3, r3, #30
 8005da0:	d413      	bmi.n	8005dca <_printf_i+0x23a>
 8005da2:	68e0      	ldr	r0, [r4, #12]
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	4298      	cmp	r0, r3
 8005da8:	bfb8      	it	lt
 8005daa:	4618      	movlt	r0, r3
 8005dac:	e7a4      	b.n	8005cf8 <_printf_i+0x168>
 8005dae:	2301      	movs	r3, #1
 8005db0:	4632      	mov	r2, r6
 8005db2:	4649      	mov	r1, r9
 8005db4:	4640      	mov	r0, r8
 8005db6:	47d0      	blx	sl
 8005db8:	3001      	adds	r0, #1
 8005dba:	d09b      	beq.n	8005cf4 <_printf_i+0x164>
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	68e3      	ldr	r3, [r4, #12]
 8005dc0:	9903      	ldr	r1, [sp, #12]
 8005dc2:	1a5b      	subs	r3, r3, r1
 8005dc4:	42ab      	cmp	r3, r5
 8005dc6:	dcf2      	bgt.n	8005dae <_printf_i+0x21e>
 8005dc8:	e7eb      	b.n	8005da2 <_printf_i+0x212>
 8005dca:	2500      	movs	r5, #0
 8005dcc:	f104 0619 	add.w	r6, r4, #25
 8005dd0:	e7f5      	b.n	8005dbe <_printf_i+0x22e>
 8005dd2:	bf00      	nop
 8005dd4:	08006817 	.word	0x08006817
 8005dd8:	08006828 	.word	0x08006828

08005ddc <_sbrk_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d06      	ldr	r5, [pc, #24]	; (8005df8 <_sbrk_r+0x1c>)
 8005de0:	2300      	movs	r3, #0
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	602b      	str	r3, [r5, #0]
 8005de8:	f7fe f8b4 	bl	8003f54 <_sbrk>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_sbrk_r+0x1a>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_sbrk_r+0x1a>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	200150a4 	.word	0x200150a4

08005dfc <__swbuf_r>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	460e      	mov	r6, r1
 8005e00:	4614      	mov	r4, r2
 8005e02:	4605      	mov	r5, r0
 8005e04:	b118      	cbz	r0, 8005e0e <__swbuf_r+0x12>
 8005e06:	6983      	ldr	r3, [r0, #24]
 8005e08:	b90b      	cbnz	r3, 8005e0e <__swbuf_r+0x12>
 8005e0a:	f000 f9d9 	bl	80061c0 <__sinit>
 8005e0e:	4b21      	ldr	r3, [pc, #132]	; (8005e94 <__swbuf_r+0x98>)
 8005e10:	429c      	cmp	r4, r3
 8005e12:	d12b      	bne.n	8005e6c <__swbuf_r+0x70>
 8005e14:	686c      	ldr	r4, [r5, #4]
 8005e16:	69a3      	ldr	r3, [r4, #24]
 8005e18:	60a3      	str	r3, [r4, #8]
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	071a      	lsls	r2, r3, #28
 8005e1e:	d52f      	bpl.n	8005e80 <__swbuf_r+0x84>
 8005e20:	6923      	ldr	r3, [r4, #16]
 8005e22:	b36b      	cbz	r3, 8005e80 <__swbuf_r+0x84>
 8005e24:	6923      	ldr	r3, [r4, #16]
 8005e26:	6820      	ldr	r0, [r4, #0]
 8005e28:	1ac0      	subs	r0, r0, r3
 8005e2a:	6963      	ldr	r3, [r4, #20]
 8005e2c:	b2f6      	uxtb	r6, r6
 8005e2e:	4283      	cmp	r3, r0
 8005e30:	4637      	mov	r7, r6
 8005e32:	dc04      	bgt.n	8005e3e <__swbuf_r+0x42>
 8005e34:	4621      	mov	r1, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 f92e 	bl	8006098 <_fflush_r>
 8005e3c:	bb30      	cbnz	r0, 8005e8c <__swbuf_r+0x90>
 8005e3e:	68a3      	ldr	r3, [r4, #8]
 8005e40:	3b01      	subs	r3, #1
 8005e42:	60a3      	str	r3, [r4, #8]
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	6022      	str	r2, [r4, #0]
 8005e4a:	701e      	strb	r6, [r3, #0]
 8005e4c:	6963      	ldr	r3, [r4, #20]
 8005e4e:	3001      	adds	r0, #1
 8005e50:	4283      	cmp	r3, r0
 8005e52:	d004      	beq.n	8005e5e <__swbuf_r+0x62>
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	07db      	lsls	r3, r3, #31
 8005e58:	d506      	bpl.n	8005e68 <__swbuf_r+0x6c>
 8005e5a:	2e0a      	cmp	r6, #10
 8005e5c:	d104      	bne.n	8005e68 <__swbuf_r+0x6c>
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4628      	mov	r0, r5
 8005e62:	f000 f919 	bl	8006098 <_fflush_r>
 8005e66:	b988      	cbnz	r0, 8005e8c <__swbuf_r+0x90>
 8005e68:	4638      	mov	r0, r7
 8005e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <__swbuf_r+0x9c>)
 8005e6e:	429c      	cmp	r4, r3
 8005e70:	d101      	bne.n	8005e76 <__swbuf_r+0x7a>
 8005e72:	68ac      	ldr	r4, [r5, #8]
 8005e74:	e7cf      	b.n	8005e16 <__swbuf_r+0x1a>
 8005e76:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <__swbuf_r+0xa0>)
 8005e78:	429c      	cmp	r4, r3
 8005e7a:	bf08      	it	eq
 8005e7c:	68ec      	ldreq	r4, [r5, #12]
 8005e7e:	e7ca      	b.n	8005e16 <__swbuf_r+0x1a>
 8005e80:	4621      	mov	r1, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 f80c 	bl	8005ea0 <__swsetup_r>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d0cb      	beq.n	8005e24 <__swbuf_r+0x28>
 8005e8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e90:	e7ea      	b.n	8005e68 <__swbuf_r+0x6c>
 8005e92:	bf00      	nop
 8005e94:	0800685c 	.word	0x0800685c
 8005e98:	0800687c 	.word	0x0800687c
 8005e9c:	0800683c 	.word	0x0800683c

08005ea0 <__swsetup_r>:
 8005ea0:	4b32      	ldr	r3, [pc, #200]	; (8005f6c <__swsetup_r+0xcc>)
 8005ea2:	b570      	push	{r4, r5, r6, lr}
 8005ea4:	681d      	ldr	r5, [r3, #0]
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	b125      	cbz	r5, 8005eb6 <__swsetup_r+0x16>
 8005eac:	69ab      	ldr	r3, [r5, #24]
 8005eae:	b913      	cbnz	r3, 8005eb6 <__swsetup_r+0x16>
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	f000 f985 	bl	80061c0 <__sinit>
 8005eb6:	4b2e      	ldr	r3, [pc, #184]	; (8005f70 <__swsetup_r+0xd0>)
 8005eb8:	429c      	cmp	r4, r3
 8005eba:	d10f      	bne.n	8005edc <__swsetup_r+0x3c>
 8005ebc:	686c      	ldr	r4, [r5, #4]
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ec4:	0719      	lsls	r1, r3, #28
 8005ec6:	d42c      	bmi.n	8005f22 <__swsetup_r+0x82>
 8005ec8:	06dd      	lsls	r5, r3, #27
 8005eca:	d411      	bmi.n	8005ef0 <__swsetup_r+0x50>
 8005ecc:	2309      	movs	r3, #9
 8005ece:	6033      	str	r3, [r6, #0]
 8005ed0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eda:	e03e      	b.n	8005f5a <__swsetup_r+0xba>
 8005edc:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <__swsetup_r+0xd4>)
 8005ede:	429c      	cmp	r4, r3
 8005ee0:	d101      	bne.n	8005ee6 <__swsetup_r+0x46>
 8005ee2:	68ac      	ldr	r4, [r5, #8]
 8005ee4:	e7eb      	b.n	8005ebe <__swsetup_r+0x1e>
 8005ee6:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <__swsetup_r+0xd8>)
 8005ee8:	429c      	cmp	r4, r3
 8005eea:	bf08      	it	eq
 8005eec:	68ec      	ldreq	r4, [r5, #12]
 8005eee:	e7e6      	b.n	8005ebe <__swsetup_r+0x1e>
 8005ef0:	0758      	lsls	r0, r3, #29
 8005ef2:	d512      	bpl.n	8005f1a <__swsetup_r+0x7a>
 8005ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ef6:	b141      	cbz	r1, 8005f0a <__swsetup_r+0x6a>
 8005ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005efc:	4299      	cmp	r1, r3
 8005efe:	d002      	beq.n	8005f06 <__swsetup_r+0x66>
 8005f00:	4630      	mov	r0, r6
 8005f02:	f7ff fb9d 	bl	8005640 <_free_r>
 8005f06:	2300      	movs	r3, #0
 8005f08:	6363      	str	r3, [r4, #52]	; 0x34
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	2300      	movs	r3, #0
 8005f14:	6063      	str	r3, [r4, #4]
 8005f16:	6923      	ldr	r3, [r4, #16]
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	f043 0308 	orr.w	r3, r3, #8
 8005f20:	81a3      	strh	r3, [r4, #12]
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	b94b      	cbnz	r3, 8005f3a <__swsetup_r+0x9a>
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f30:	d003      	beq.n	8005f3a <__swsetup_r+0x9a>
 8005f32:	4621      	mov	r1, r4
 8005f34:	4630      	mov	r0, r6
 8005f36:	f000 fa09 	bl	800634c <__smakebuf_r>
 8005f3a:	89a0      	ldrh	r0, [r4, #12]
 8005f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f40:	f010 0301 	ands.w	r3, r0, #1
 8005f44:	d00a      	beq.n	8005f5c <__swsetup_r+0xbc>
 8005f46:	2300      	movs	r3, #0
 8005f48:	60a3      	str	r3, [r4, #8]
 8005f4a:	6963      	ldr	r3, [r4, #20]
 8005f4c:	425b      	negs	r3, r3
 8005f4e:	61a3      	str	r3, [r4, #24]
 8005f50:	6923      	ldr	r3, [r4, #16]
 8005f52:	b943      	cbnz	r3, 8005f66 <__swsetup_r+0xc6>
 8005f54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f58:	d1ba      	bne.n	8005ed0 <__swsetup_r+0x30>
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	0781      	lsls	r1, r0, #30
 8005f5e:	bf58      	it	pl
 8005f60:	6963      	ldrpl	r3, [r4, #20]
 8005f62:	60a3      	str	r3, [r4, #8]
 8005f64:	e7f4      	b.n	8005f50 <__swsetup_r+0xb0>
 8005f66:	2000      	movs	r0, #0
 8005f68:	e7f7      	b.n	8005f5a <__swsetup_r+0xba>
 8005f6a:	bf00      	nop
 8005f6c:	20000014 	.word	0x20000014
 8005f70:	0800685c 	.word	0x0800685c
 8005f74:	0800687c 	.word	0x0800687c
 8005f78:	0800683c 	.word	0x0800683c

08005f7c <abort>:
 8005f7c:	b508      	push	{r3, lr}
 8005f7e:	2006      	movs	r0, #6
 8005f80:	f000 fa58 	bl	8006434 <raise>
 8005f84:	2001      	movs	r0, #1
 8005f86:	f7fd ff89 	bl	8003e9c <_exit>
	...

08005f8c <__sflush_r>:
 8005f8c:	898a      	ldrh	r2, [r1, #12]
 8005f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f92:	4605      	mov	r5, r0
 8005f94:	0710      	lsls	r0, r2, #28
 8005f96:	460c      	mov	r4, r1
 8005f98:	d458      	bmi.n	800604c <__sflush_r+0xc0>
 8005f9a:	684b      	ldr	r3, [r1, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	dc05      	bgt.n	8005fac <__sflush_r+0x20>
 8005fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	dc02      	bgt.n	8005fac <__sflush_r+0x20>
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fae:	2e00      	cmp	r6, #0
 8005fb0:	d0f9      	beq.n	8005fa6 <__sflush_r+0x1a>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fb8:	682f      	ldr	r7, [r5, #0]
 8005fba:	602b      	str	r3, [r5, #0]
 8005fbc:	d032      	beq.n	8006024 <__sflush_r+0x98>
 8005fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	075a      	lsls	r2, r3, #29
 8005fc4:	d505      	bpl.n	8005fd2 <__sflush_r+0x46>
 8005fc6:	6863      	ldr	r3, [r4, #4]
 8005fc8:	1ac0      	subs	r0, r0, r3
 8005fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fcc:	b10b      	cbz	r3, 8005fd2 <__sflush_r+0x46>
 8005fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fd0:	1ac0      	subs	r0, r0, r3
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fd8:	6a21      	ldr	r1, [r4, #32]
 8005fda:	4628      	mov	r0, r5
 8005fdc:	47b0      	blx	r6
 8005fde:	1c43      	adds	r3, r0, #1
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	d106      	bne.n	8005ff2 <__sflush_r+0x66>
 8005fe4:	6829      	ldr	r1, [r5, #0]
 8005fe6:	291d      	cmp	r1, #29
 8005fe8:	d82c      	bhi.n	8006044 <__sflush_r+0xb8>
 8005fea:	4a2a      	ldr	r2, [pc, #168]	; (8006094 <__sflush_r+0x108>)
 8005fec:	40ca      	lsrs	r2, r1
 8005fee:	07d6      	lsls	r6, r2, #31
 8005ff0:	d528      	bpl.n	8006044 <__sflush_r+0xb8>
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	6062      	str	r2, [r4, #4]
 8005ff6:	04d9      	lsls	r1, r3, #19
 8005ff8:	6922      	ldr	r2, [r4, #16]
 8005ffa:	6022      	str	r2, [r4, #0]
 8005ffc:	d504      	bpl.n	8006008 <__sflush_r+0x7c>
 8005ffe:	1c42      	adds	r2, r0, #1
 8006000:	d101      	bne.n	8006006 <__sflush_r+0x7a>
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	b903      	cbnz	r3, 8006008 <__sflush_r+0x7c>
 8006006:	6560      	str	r0, [r4, #84]	; 0x54
 8006008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800600a:	602f      	str	r7, [r5, #0]
 800600c:	2900      	cmp	r1, #0
 800600e:	d0ca      	beq.n	8005fa6 <__sflush_r+0x1a>
 8006010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006014:	4299      	cmp	r1, r3
 8006016:	d002      	beq.n	800601e <__sflush_r+0x92>
 8006018:	4628      	mov	r0, r5
 800601a:	f7ff fb11 	bl	8005640 <_free_r>
 800601e:	2000      	movs	r0, #0
 8006020:	6360      	str	r0, [r4, #52]	; 0x34
 8006022:	e7c1      	b.n	8005fa8 <__sflush_r+0x1c>
 8006024:	6a21      	ldr	r1, [r4, #32]
 8006026:	2301      	movs	r3, #1
 8006028:	4628      	mov	r0, r5
 800602a:	47b0      	blx	r6
 800602c:	1c41      	adds	r1, r0, #1
 800602e:	d1c7      	bne.n	8005fc0 <__sflush_r+0x34>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0c4      	beq.n	8005fc0 <__sflush_r+0x34>
 8006036:	2b1d      	cmp	r3, #29
 8006038:	d001      	beq.n	800603e <__sflush_r+0xb2>
 800603a:	2b16      	cmp	r3, #22
 800603c:	d101      	bne.n	8006042 <__sflush_r+0xb6>
 800603e:	602f      	str	r7, [r5, #0]
 8006040:	e7b1      	b.n	8005fa6 <__sflush_r+0x1a>
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006048:	81a3      	strh	r3, [r4, #12]
 800604a:	e7ad      	b.n	8005fa8 <__sflush_r+0x1c>
 800604c:	690f      	ldr	r7, [r1, #16]
 800604e:	2f00      	cmp	r7, #0
 8006050:	d0a9      	beq.n	8005fa6 <__sflush_r+0x1a>
 8006052:	0793      	lsls	r3, r2, #30
 8006054:	680e      	ldr	r6, [r1, #0]
 8006056:	bf08      	it	eq
 8006058:	694b      	ldreq	r3, [r1, #20]
 800605a:	600f      	str	r7, [r1, #0]
 800605c:	bf18      	it	ne
 800605e:	2300      	movne	r3, #0
 8006060:	eba6 0807 	sub.w	r8, r6, r7
 8006064:	608b      	str	r3, [r1, #8]
 8006066:	f1b8 0f00 	cmp.w	r8, #0
 800606a:	dd9c      	ble.n	8005fa6 <__sflush_r+0x1a>
 800606c:	6a21      	ldr	r1, [r4, #32]
 800606e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006070:	4643      	mov	r3, r8
 8006072:	463a      	mov	r2, r7
 8006074:	4628      	mov	r0, r5
 8006076:	47b0      	blx	r6
 8006078:	2800      	cmp	r0, #0
 800607a:	dc06      	bgt.n	800608a <__sflush_r+0xfe>
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006088:	e78e      	b.n	8005fa8 <__sflush_r+0x1c>
 800608a:	4407      	add	r7, r0
 800608c:	eba8 0800 	sub.w	r8, r8, r0
 8006090:	e7e9      	b.n	8006066 <__sflush_r+0xda>
 8006092:	bf00      	nop
 8006094:	20400001 	.word	0x20400001

08006098 <_fflush_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	690b      	ldr	r3, [r1, #16]
 800609c:	4605      	mov	r5, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	b913      	cbnz	r3, 80060a8 <_fflush_r+0x10>
 80060a2:	2500      	movs	r5, #0
 80060a4:	4628      	mov	r0, r5
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	b118      	cbz	r0, 80060b2 <_fflush_r+0x1a>
 80060aa:	6983      	ldr	r3, [r0, #24]
 80060ac:	b90b      	cbnz	r3, 80060b2 <_fflush_r+0x1a>
 80060ae:	f000 f887 	bl	80061c0 <__sinit>
 80060b2:	4b14      	ldr	r3, [pc, #80]	; (8006104 <_fflush_r+0x6c>)
 80060b4:	429c      	cmp	r4, r3
 80060b6:	d11b      	bne.n	80060f0 <_fflush_r+0x58>
 80060b8:	686c      	ldr	r4, [r5, #4]
 80060ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ef      	beq.n	80060a2 <_fflush_r+0xa>
 80060c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060c4:	07d0      	lsls	r0, r2, #31
 80060c6:	d404      	bmi.n	80060d2 <_fflush_r+0x3a>
 80060c8:	0599      	lsls	r1, r3, #22
 80060ca:	d402      	bmi.n	80060d2 <_fflush_r+0x3a>
 80060cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ce:	f000 f915 	bl	80062fc <__retarget_lock_acquire_recursive>
 80060d2:	4628      	mov	r0, r5
 80060d4:	4621      	mov	r1, r4
 80060d6:	f7ff ff59 	bl	8005f8c <__sflush_r>
 80060da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060dc:	07da      	lsls	r2, r3, #31
 80060de:	4605      	mov	r5, r0
 80060e0:	d4e0      	bmi.n	80060a4 <_fflush_r+0xc>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	059b      	lsls	r3, r3, #22
 80060e6:	d4dd      	bmi.n	80060a4 <_fflush_r+0xc>
 80060e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ea:	f000 f908 	bl	80062fe <__retarget_lock_release_recursive>
 80060ee:	e7d9      	b.n	80060a4 <_fflush_r+0xc>
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <_fflush_r+0x70>)
 80060f2:	429c      	cmp	r4, r3
 80060f4:	d101      	bne.n	80060fa <_fflush_r+0x62>
 80060f6:	68ac      	ldr	r4, [r5, #8]
 80060f8:	e7df      	b.n	80060ba <_fflush_r+0x22>
 80060fa:	4b04      	ldr	r3, [pc, #16]	; (800610c <_fflush_r+0x74>)
 80060fc:	429c      	cmp	r4, r3
 80060fe:	bf08      	it	eq
 8006100:	68ec      	ldreq	r4, [r5, #12]
 8006102:	e7da      	b.n	80060ba <_fflush_r+0x22>
 8006104:	0800685c 	.word	0x0800685c
 8006108:	0800687c 	.word	0x0800687c
 800610c:	0800683c 	.word	0x0800683c

08006110 <std>:
 8006110:	2300      	movs	r3, #0
 8006112:	b510      	push	{r4, lr}
 8006114:	4604      	mov	r4, r0
 8006116:	e9c0 3300 	strd	r3, r3, [r0]
 800611a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800611e:	6083      	str	r3, [r0, #8]
 8006120:	8181      	strh	r1, [r0, #12]
 8006122:	6643      	str	r3, [r0, #100]	; 0x64
 8006124:	81c2      	strh	r2, [r0, #14]
 8006126:	6183      	str	r3, [r0, #24]
 8006128:	4619      	mov	r1, r3
 800612a:	2208      	movs	r2, #8
 800612c:	305c      	adds	r0, #92	; 0x5c
 800612e:	f7ff fa09 	bl	8005544 <memset>
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <std+0x38>)
 8006134:	6263      	str	r3, [r4, #36]	; 0x24
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <std+0x3c>)
 8006138:	62a3      	str	r3, [r4, #40]	; 0x28
 800613a:	4b05      	ldr	r3, [pc, #20]	; (8006150 <std+0x40>)
 800613c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <std+0x44>)
 8006140:	6224      	str	r4, [r4, #32]
 8006142:	6323      	str	r3, [r4, #48]	; 0x30
 8006144:	bd10      	pop	{r4, pc}
 8006146:	bf00      	nop
 8006148:	0800646d 	.word	0x0800646d
 800614c:	0800648f 	.word	0x0800648f
 8006150:	080064c7 	.word	0x080064c7
 8006154:	080064eb 	.word	0x080064eb

08006158 <_cleanup_r>:
 8006158:	4901      	ldr	r1, [pc, #4]	; (8006160 <_cleanup_r+0x8>)
 800615a:	f000 b8af 	b.w	80062bc <_fwalk_reent>
 800615e:	bf00      	nop
 8006160:	08006099 	.word	0x08006099

08006164 <__sfmoreglue>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	2268      	movs	r2, #104	; 0x68
 8006168:	1e4d      	subs	r5, r1, #1
 800616a:	4355      	muls	r5, r2
 800616c:	460e      	mov	r6, r1
 800616e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006172:	f7ff fad1 	bl	8005718 <_malloc_r>
 8006176:	4604      	mov	r4, r0
 8006178:	b140      	cbz	r0, 800618c <__sfmoreglue+0x28>
 800617a:	2100      	movs	r1, #0
 800617c:	e9c0 1600 	strd	r1, r6, [r0]
 8006180:	300c      	adds	r0, #12
 8006182:	60a0      	str	r0, [r4, #8]
 8006184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006188:	f7ff f9dc 	bl	8005544 <memset>
 800618c:	4620      	mov	r0, r4
 800618e:	bd70      	pop	{r4, r5, r6, pc}

08006190 <__sfp_lock_acquire>:
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <__sfp_lock_acquire+0x8>)
 8006192:	f000 b8b3 	b.w	80062fc <__retarget_lock_acquire_recursive>
 8006196:	bf00      	nop
 8006198:	200150a1 	.word	0x200150a1

0800619c <__sfp_lock_release>:
 800619c:	4801      	ldr	r0, [pc, #4]	; (80061a4 <__sfp_lock_release+0x8>)
 800619e:	f000 b8ae 	b.w	80062fe <__retarget_lock_release_recursive>
 80061a2:	bf00      	nop
 80061a4:	200150a1 	.word	0x200150a1

080061a8 <__sinit_lock_acquire>:
 80061a8:	4801      	ldr	r0, [pc, #4]	; (80061b0 <__sinit_lock_acquire+0x8>)
 80061aa:	f000 b8a7 	b.w	80062fc <__retarget_lock_acquire_recursive>
 80061ae:	bf00      	nop
 80061b0:	200150a2 	.word	0x200150a2

080061b4 <__sinit_lock_release>:
 80061b4:	4801      	ldr	r0, [pc, #4]	; (80061bc <__sinit_lock_release+0x8>)
 80061b6:	f000 b8a2 	b.w	80062fe <__retarget_lock_release_recursive>
 80061ba:	bf00      	nop
 80061bc:	200150a2 	.word	0x200150a2

080061c0 <__sinit>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	4604      	mov	r4, r0
 80061c4:	f7ff fff0 	bl	80061a8 <__sinit_lock_acquire>
 80061c8:	69a3      	ldr	r3, [r4, #24]
 80061ca:	b11b      	cbz	r3, 80061d4 <__sinit+0x14>
 80061cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d0:	f7ff bff0 	b.w	80061b4 <__sinit_lock_release>
 80061d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061d8:	6523      	str	r3, [r4, #80]	; 0x50
 80061da:	4b13      	ldr	r3, [pc, #76]	; (8006228 <__sinit+0x68>)
 80061dc:	4a13      	ldr	r2, [pc, #76]	; (800622c <__sinit+0x6c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	bf04      	itt	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	61a3      	streq	r3, [r4, #24]
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 f820 	bl	8006230 <__sfp>
 80061f0:	6060      	str	r0, [r4, #4]
 80061f2:	4620      	mov	r0, r4
 80061f4:	f000 f81c 	bl	8006230 <__sfp>
 80061f8:	60a0      	str	r0, [r4, #8]
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 f818 	bl	8006230 <__sfp>
 8006200:	2200      	movs	r2, #0
 8006202:	60e0      	str	r0, [r4, #12]
 8006204:	2104      	movs	r1, #4
 8006206:	6860      	ldr	r0, [r4, #4]
 8006208:	f7ff ff82 	bl	8006110 <std>
 800620c:	68a0      	ldr	r0, [r4, #8]
 800620e:	2201      	movs	r2, #1
 8006210:	2109      	movs	r1, #9
 8006212:	f7ff ff7d 	bl	8006110 <std>
 8006216:	68e0      	ldr	r0, [r4, #12]
 8006218:	2202      	movs	r2, #2
 800621a:	2112      	movs	r1, #18
 800621c:	f7ff ff78 	bl	8006110 <std>
 8006220:	2301      	movs	r3, #1
 8006222:	61a3      	str	r3, [r4, #24]
 8006224:	e7d2      	b.n	80061cc <__sinit+0xc>
 8006226:	bf00      	nop
 8006228:	08006754 	.word	0x08006754
 800622c:	08006159 	.word	0x08006159

08006230 <__sfp>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	4607      	mov	r7, r0
 8006234:	f7ff ffac 	bl	8006190 <__sfp_lock_acquire>
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <__sfp+0x84>)
 800623a:	681e      	ldr	r6, [r3, #0]
 800623c:	69b3      	ldr	r3, [r6, #24]
 800623e:	b913      	cbnz	r3, 8006246 <__sfp+0x16>
 8006240:	4630      	mov	r0, r6
 8006242:	f7ff ffbd 	bl	80061c0 <__sinit>
 8006246:	3648      	adds	r6, #72	; 0x48
 8006248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800624c:	3b01      	subs	r3, #1
 800624e:	d503      	bpl.n	8006258 <__sfp+0x28>
 8006250:	6833      	ldr	r3, [r6, #0]
 8006252:	b30b      	cbz	r3, 8006298 <__sfp+0x68>
 8006254:	6836      	ldr	r6, [r6, #0]
 8006256:	e7f7      	b.n	8006248 <__sfp+0x18>
 8006258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800625c:	b9d5      	cbnz	r5, 8006294 <__sfp+0x64>
 800625e:	4b16      	ldr	r3, [pc, #88]	; (80062b8 <__sfp+0x88>)
 8006260:	60e3      	str	r3, [r4, #12]
 8006262:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006266:	6665      	str	r5, [r4, #100]	; 0x64
 8006268:	f000 f847 	bl	80062fa <__retarget_lock_init_recursive>
 800626c:	f7ff ff96 	bl	800619c <__sfp_lock_release>
 8006270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006278:	6025      	str	r5, [r4, #0]
 800627a:	61a5      	str	r5, [r4, #24]
 800627c:	2208      	movs	r2, #8
 800627e:	4629      	mov	r1, r5
 8006280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006284:	f7ff f95e 	bl	8005544 <memset>
 8006288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800628c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006290:	4620      	mov	r0, r4
 8006292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006294:	3468      	adds	r4, #104	; 0x68
 8006296:	e7d9      	b.n	800624c <__sfp+0x1c>
 8006298:	2104      	movs	r1, #4
 800629a:	4638      	mov	r0, r7
 800629c:	f7ff ff62 	bl	8006164 <__sfmoreglue>
 80062a0:	4604      	mov	r4, r0
 80062a2:	6030      	str	r0, [r6, #0]
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d1d5      	bne.n	8006254 <__sfp+0x24>
 80062a8:	f7ff ff78 	bl	800619c <__sfp_lock_release>
 80062ac:	230c      	movs	r3, #12
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	e7ee      	b.n	8006290 <__sfp+0x60>
 80062b2:	bf00      	nop
 80062b4:	08006754 	.word	0x08006754
 80062b8:	ffff0001 	.word	0xffff0001

080062bc <_fwalk_reent>:
 80062bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c0:	4606      	mov	r6, r0
 80062c2:	4688      	mov	r8, r1
 80062c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062c8:	2700      	movs	r7, #0
 80062ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062ce:	f1b9 0901 	subs.w	r9, r9, #1
 80062d2:	d505      	bpl.n	80062e0 <_fwalk_reent+0x24>
 80062d4:	6824      	ldr	r4, [r4, #0]
 80062d6:	2c00      	cmp	r4, #0
 80062d8:	d1f7      	bne.n	80062ca <_fwalk_reent+0xe>
 80062da:	4638      	mov	r0, r7
 80062dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e0:	89ab      	ldrh	r3, [r5, #12]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d907      	bls.n	80062f6 <_fwalk_reent+0x3a>
 80062e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062ea:	3301      	adds	r3, #1
 80062ec:	d003      	beq.n	80062f6 <_fwalk_reent+0x3a>
 80062ee:	4629      	mov	r1, r5
 80062f0:	4630      	mov	r0, r6
 80062f2:	47c0      	blx	r8
 80062f4:	4307      	orrs	r7, r0
 80062f6:	3568      	adds	r5, #104	; 0x68
 80062f8:	e7e9      	b.n	80062ce <_fwalk_reent+0x12>

080062fa <__retarget_lock_init_recursive>:
 80062fa:	4770      	bx	lr

080062fc <__retarget_lock_acquire_recursive>:
 80062fc:	4770      	bx	lr

080062fe <__retarget_lock_release_recursive>:
 80062fe:	4770      	bx	lr

08006300 <__swhatbuf_r>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	460e      	mov	r6, r1
 8006304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006308:	2900      	cmp	r1, #0
 800630a:	b096      	sub	sp, #88	; 0x58
 800630c:	4614      	mov	r4, r2
 800630e:	461d      	mov	r5, r3
 8006310:	da08      	bge.n	8006324 <__swhatbuf_r+0x24>
 8006312:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	061a      	lsls	r2, r3, #24
 800631c:	d410      	bmi.n	8006340 <__swhatbuf_r+0x40>
 800631e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006322:	e00e      	b.n	8006342 <__swhatbuf_r+0x42>
 8006324:	466a      	mov	r2, sp
 8006326:	f000 f8f5 	bl	8006514 <_fstat_r>
 800632a:	2800      	cmp	r0, #0
 800632c:	dbf1      	blt.n	8006312 <__swhatbuf_r+0x12>
 800632e:	9a01      	ldr	r2, [sp, #4]
 8006330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006338:	425a      	negs	r2, r3
 800633a:	415a      	adcs	r2, r3
 800633c:	602a      	str	r2, [r5, #0]
 800633e:	e7ee      	b.n	800631e <__swhatbuf_r+0x1e>
 8006340:	2340      	movs	r3, #64	; 0x40
 8006342:	2000      	movs	r0, #0
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	b016      	add	sp, #88	; 0x58
 8006348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800634c <__smakebuf_r>:
 800634c:	898b      	ldrh	r3, [r1, #12]
 800634e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006350:	079d      	lsls	r5, r3, #30
 8006352:	4606      	mov	r6, r0
 8006354:	460c      	mov	r4, r1
 8006356:	d507      	bpl.n	8006368 <__smakebuf_r+0x1c>
 8006358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	2301      	movs	r3, #1
 8006362:	6163      	str	r3, [r4, #20]
 8006364:	b002      	add	sp, #8
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	ab01      	add	r3, sp, #4
 800636a:	466a      	mov	r2, sp
 800636c:	f7ff ffc8 	bl	8006300 <__swhatbuf_r>
 8006370:	9900      	ldr	r1, [sp, #0]
 8006372:	4605      	mov	r5, r0
 8006374:	4630      	mov	r0, r6
 8006376:	f7ff f9cf 	bl	8005718 <_malloc_r>
 800637a:	b948      	cbnz	r0, 8006390 <__smakebuf_r+0x44>
 800637c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006380:	059a      	lsls	r2, r3, #22
 8006382:	d4ef      	bmi.n	8006364 <__smakebuf_r+0x18>
 8006384:	f023 0303 	bic.w	r3, r3, #3
 8006388:	f043 0302 	orr.w	r3, r3, #2
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	e7e3      	b.n	8006358 <__smakebuf_r+0xc>
 8006390:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <__smakebuf_r+0x7c>)
 8006392:	62b3      	str	r3, [r6, #40]	; 0x28
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	6020      	str	r0, [r4, #0]
 8006398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	9b00      	ldr	r3, [sp, #0]
 80063a0:	6163      	str	r3, [r4, #20]
 80063a2:	9b01      	ldr	r3, [sp, #4]
 80063a4:	6120      	str	r0, [r4, #16]
 80063a6:	b15b      	cbz	r3, 80063c0 <__smakebuf_r+0x74>
 80063a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 f8c3 	bl	8006538 <_isatty_r>
 80063b2:	b128      	cbz	r0, 80063c0 <__smakebuf_r+0x74>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	89a0      	ldrh	r0, [r4, #12]
 80063c2:	4305      	orrs	r5, r0
 80063c4:	81a5      	strh	r5, [r4, #12]
 80063c6:	e7cd      	b.n	8006364 <__smakebuf_r+0x18>
 80063c8:	08006159 	.word	0x08006159

080063cc <__malloc_lock>:
 80063cc:	4801      	ldr	r0, [pc, #4]	; (80063d4 <__malloc_lock+0x8>)
 80063ce:	f7ff bf95 	b.w	80062fc <__retarget_lock_acquire_recursive>
 80063d2:	bf00      	nop
 80063d4:	200150a0 	.word	0x200150a0

080063d8 <__malloc_unlock>:
 80063d8:	4801      	ldr	r0, [pc, #4]	; (80063e0 <__malloc_unlock+0x8>)
 80063da:	f7ff bf90 	b.w	80062fe <__retarget_lock_release_recursive>
 80063de:	bf00      	nop
 80063e0:	200150a0 	.word	0x200150a0

080063e4 <_raise_r>:
 80063e4:	291f      	cmp	r1, #31
 80063e6:	b538      	push	{r3, r4, r5, lr}
 80063e8:	4604      	mov	r4, r0
 80063ea:	460d      	mov	r5, r1
 80063ec:	d904      	bls.n	80063f8 <_raise_r+0x14>
 80063ee:	2316      	movs	r3, #22
 80063f0:	6003      	str	r3, [r0, #0]
 80063f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80063fa:	b112      	cbz	r2, 8006402 <_raise_r+0x1e>
 80063fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006400:	b94b      	cbnz	r3, 8006416 <_raise_r+0x32>
 8006402:	4620      	mov	r0, r4
 8006404:	f000 f830 	bl	8006468 <_getpid_r>
 8006408:	462a      	mov	r2, r5
 800640a:	4601      	mov	r1, r0
 800640c:	4620      	mov	r0, r4
 800640e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006412:	f000 b817 	b.w	8006444 <_kill_r>
 8006416:	2b01      	cmp	r3, #1
 8006418:	d00a      	beq.n	8006430 <_raise_r+0x4c>
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	d103      	bne.n	8006426 <_raise_r+0x42>
 800641e:	2316      	movs	r3, #22
 8006420:	6003      	str	r3, [r0, #0]
 8006422:	2001      	movs	r0, #1
 8006424:	e7e7      	b.n	80063f6 <_raise_r+0x12>
 8006426:	2400      	movs	r4, #0
 8006428:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800642c:	4628      	mov	r0, r5
 800642e:	4798      	blx	r3
 8006430:	2000      	movs	r0, #0
 8006432:	e7e0      	b.n	80063f6 <_raise_r+0x12>

08006434 <raise>:
 8006434:	4b02      	ldr	r3, [pc, #8]	; (8006440 <raise+0xc>)
 8006436:	4601      	mov	r1, r0
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	f7ff bfd3 	b.w	80063e4 <_raise_r>
 800643e:	bf00      	nop
 8006440:	20000014 	.word	0x20000014

08006444 <_kill_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4d07      	ldr	r5, [pc, #28]	; (8006464 <_kill_r+0x20>)
 8006448:	2300      	movs	r3, #0
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	f7fd fd13 	bl	8003e7c <_kill>
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	d102      	bne.n	8006460 <_kill_r+0x1c>
 800645a:	682b      	ldr	r3, [r5, #0]
 800645c:	b103      	cbz	r3, 8006460 <_kill_r+0x1c>
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	bd38      	pop	{r3, r4, r5, pc}
 8006462:	bf00      	nop
 8006464:	200150a4 	.word	0x200150a4

08006468 <_getpid_r>:
 8006468:	f7fd bd00 	b.w	8003e6c <_getpid>

0800646c <__sread>:
 800646c:	b510      	push	{r4, lr}
 800646e:	460c      	mov	r4, r1
 8006470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006474:	f000 f882 	bl	800657c <_read_r>
 8006478:	2800      	cmp	r0, #0
 800647a:	bfab      	itete	ge
 800647c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800647e:	89a3      	ldrhlt	r3, [r4, #12]
 8006480:	181b      	addge	r3, r3, r0
 8006482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006486:	bfac      	ite	ge
 8006488:	6563      	strge	r3, [r4, #84]	; 0x54
 800648a:	81a3      	strhlt	r3, [r4, #12]
 800648c:	bd10      	pop	{r4, pc}

0800648e <__swrite>:
 800648e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006492:	461f      	mov	r7, r3
 8006494:	898b      	ldrh	r3, [r1, #12]
 8006496:	05db      	lsls	r3, r3, #23
 8006498:	4605      	mov	r5, r0
 800649a:	460c      	mov	r4, r1
 800649c:	4616      	mov	r6, r2
 800649e:	d505      	bpl.n	80064ac <__swrite+0x1e>
 80064a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a4:	2302      	movs	r3, #2
 80064a6:	2200      	movs	r2, #0
 80064a8:	f000 f856 	bl	8006558 <_lseek_r>
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064b6:	81a3      	strh	r3, [r4, #12]
 80064b8:	4632      	mov	r2, r6
 80064ba:	463b      	mov	r3, r7
 80064bc:	4628      	mov	r0, r5
 80064be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064c2:	f7fd b93d 	b.w	8003740 <_write_r>

080064c6 <__sseek>:
 80064c6:	b510      	push	{r4, lr}
 80064c8:	460c      	mov	r4, r1
 80064ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ce:	f000 f843 	bl	8006558 <_lseek_r>
 80064d2:	1c43      	adds	r3, r0, #1
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	bf15      	itete	ne
 80064d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80064da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064e2:	81a3      	strheq	r3, [r4, #12]
 80064e4:	bf18      	it	ne
 80064e6:	81a3      	strhne	r3, [r4, #12]
 80064e8:	bd10      	pop	{r4, pc}

080064ea <__sclose>:
 80064ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ee:	f000 b801 	b.w	80064f4 <_close_r>
	...

080064f4 <_close_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	4d06      	ldr	r5, [pc, #24]	; (8006510 <_close_r+0x1c>)
 80064f8:	2300      	movs	r3, #0
 80064fa:	4604      	mov	r4, r0
 80064fc:	4608      	mov	r0, r1
 80064fe:	602b      	str	r3, [r5, #0]
 8006500:	f7fd fcf3 	bl	8003eea <_close>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <_close_r+0x1a>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b103      	cbz	r3, 800650e <_close_r+0x1a>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	200150a4 	.word	0x200150a4

08006514 <_fstat_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d07      	ldr	r5, [pc, #28]	; (8006534 <_fstat_r+0x20>)
 8006518:	2300      	movs	r3, #0
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	f7fd fcee 	bl	8003f02 <_fstat>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	d102      	bne.n	8006530 <_fstat_r+0x1c>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	b103      	cbz	r3, 8006530 <_fstat_r+0x1c>
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	bf00      	nop
 8006534:	200150a4 	.word	0x200150a4

08006538 <_isatty_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d06      	ldr	r5, [pc, #24]	; (8006554 <_isatty_r+0x1c>)
 800653c:	2300      	movs	r3, #0
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	602b      	str	r3, [r5, #0]
 8006544:	f7fd fced 	bl	8003f22 <_isatty>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_isatty_r+0x1a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_isatty_r+0x1a>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	200150a4 	.word	0x200150a4

08006558 <_lseek_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d07      	ldr	r5, [pc, #28]	; (8006578 <_lseek_r+0x20>)
 800655c:	4604      	mov	r4, r0
 800655e:	4608      	mov	r0, r1
 8006560:	4611      	mov	r1, r2
 8006562:	2200      	movs	r2, #0
 8006564:	602a      	str	r2, [r5, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	f7fd fce6 	bl	8003f38 <_lseek>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_lseek_r+0x1e>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_lseek_r+0x1e>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	200150a4 	.word	0x200150a4

0800657c <_read_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d07      	ldr	r5, [pc, #28]	; (800659c <_read_r+0x20>)
 8006580:	4604      	mov	r4, r0
 8006582:	4608      	mov	r0, r1
 8006584:	4611      	mov	r1, r2
 8006586:	2200      	movs	r2, #0
 8006588:	602a      	str	r2, [r5, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	f7fd fc90 	bl	8003eb0 <_read>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_read_r+0x1e>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	b103      	cbz	r3, 800659a <_read_r+0x1e>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	200150a4 	.word	0x200150a4

080065a0 <_init>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr

080065ac <_fini>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	bf00      	nop
 80065b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b2:	bc08      	pop	{r3}
 80065b4:	469e      	mov	lr, r3
 80065b6:	4770      	bx	lr
