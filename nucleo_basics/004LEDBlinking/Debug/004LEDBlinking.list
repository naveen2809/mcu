
004LEDBlinking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000678  08000680  00010680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000678  08000678  00010680  2**0
                  CONTENTS
  4 .ARM          00000000  08000678  08000678  00010680  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000678  08000680  00010680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000678  08000678  00010678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800067c  0800067c  0001067c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000680  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000680  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010680  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007c9  00000000  00000000  000106aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000026e  00000000  00000000  00010e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  000110e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c0  00000000  00000000  000111e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002166  00000000  00000000  000112a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001332  00000000  00000000  00013406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008b17  00000000  00000000  00014738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001d24f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002f8  00000000  00000000  0001d2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000660 	.word	0x08000660

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000660 	.word	0x08000660

08000204 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
 8000210:	4613      	mov	r3, r2
 8000212:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	78fa      	ldrb	r2, [r7, #3]
 800021e:	0052      	lsls	r2, r2, #1
 8000220:	2103      	movs	r1, #3
 8000222:	fa01 f202 	lsl.w	r2, r1, r2
 8000226:	43d2      	mvns	r2, r2
 8000228:	401a      	ands	r2, r3
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	78b9      	ldrb	r1, [r7, #2]
 8000234:	78fa      	ldrb	r2, [r7, #3]
 8000236:	0052      	lsls	r2, r2, #1
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	431a      	orrs	r2, r3
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	601a      	str	r2, [r3, #0]

}
 8000242:	bf00      	nop
 8000244:	3714      	adds	r7, #20
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <GPIOReadPin>:

uint8_t GPIOReadPin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 800024c:	b480      	push	{r7}
 800024e:	b087      	sub	sp, #28
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	460b      	mov	r3, r1
 8000256:	70fb      	strb	r3, [r7, #3]
	uint32_t value, temp;

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	617b      	str	r3, [r7, #20]

	temp = pGPIO->IDR;
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	613b      	str	r3, [r7, #16]
	temp &= (1 << GPIOPinNum);
 8000262:	78fb      	ldrb	r3, [r7, #3]
 8000264:	2201      	movs	r2, #1
 8000266:	fa02 f303 	lsl.w	r3, r2, r3
 800026a:	461a      	mov	r2, r3
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	4013      	ands	r3, r2
 8000270:	613b      	str	r3, [r7, #16]
	value = (temp >> GPIOPinNum);
 8000272:	78fb      	ldrb	r3, [r7, #3]
 8000274:	693a      	ldr	r2, [r7, #16]
 8000276:	fa22 f303 	lsr.w	r3, r2, r3
 800027a:	60fb      	str	r3, [r7, #12]

	return value;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	b2db      	uxtb	r3, r3
}
 8000280:	4618      	mov	r0, r3
 8000282:	371c      	adds	r7, #28
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr

0800028a <GPIOTogglePin>:
	pGPIO->ODR &= ~(1 << GPIOPinNum);
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
}

void GPIOTogglePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 800028a:	b480      	push	{r7}
 800028c:	b085      	sub	sp, #20
 800028e:	af00      	add	r7, sp, #0
 8000290:	6078      	str	r0, [r7, #4]
 8000292:	460b      	mov	r3, r1
 8000294:	70fb      	strb	r3, [r7, #3]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR ^= (1 << GPIOPinNum);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	78fa      	ldrb	r2, [r7, #3]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	405a      	eors	r2, r3
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	615a      	str	r2, [r3, #20]
}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
	...

080002b8 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a8a      	ldr	r2, [pc, #552]	; (80004ec <EnablePeriClk+0x234>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d108      	bne.n	80002da <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80002c8:	4b89      	ldr	r3, [pc, #548]	; (80004f0 <EnablePeriClk+0x238>)
 80002ca:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f043 0201 	orr.w	r2, r3, #1
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == USART6) {
				pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
				*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
	}
}
 80002d8:	e102      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOB) {
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a85      	ldr	r2, [pc, #532]	; (80004f4 <EnablePeriClk+0x23c>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d108      	bne.n	80002f4 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80002e2:	4b83      	ldr	r3, [pc, #524]	; (80004f0 <EnablePeriClk+0x238>)
 80002e4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f043 0202 	orr.w	r2, r3, #2
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	601a      	str	r2, [r3, #0]
}
 80002f2:	e0f5      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOC) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a80      	ldr	r2, [pc, #512]	; (80004f8 <EnablePeriClk+0x240>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d108      	bne.n	800030e <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80002fc:	4b7c      	ldr	r3, [pc, #496]	; (80004f0 <EnablePeriClk+0x238>)
 80002fe:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f043 0204 	orr.w	r2, r3, #4
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	601a      	str	r2, [r3, #0]
}
 800030c:	e0e8      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOD) {
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a7a      	ldr	r2, [pc, #488]	; (80004fc <EnablePeriClk+0x244>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d108      	bne.n	8000328 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000316:	4b76      	ldr	r3, [pc, #472]	; (80004f0 <EnablePeriClk+0x238>)
 8000318:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f043 0208 	orr.w	r2, r3, #8
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	601a      	str	r2, [r3, #0]
}
 8000326:	e0db      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOE) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a75      	ldr	r2, [pc, #468]	; (8000500 <EnablePeriClk+0x248>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d108      	bne.n	8000342 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000330:	4b6f      	ldr	r3, [pc, #444]	; (80004f0 <EnablePeriClk+0x238>)
 8000332:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f043 0210 	orr.w	r2, r3, #16
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	e0ce      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOF) {
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a6f      	ldr	r2, [pc, #444]	; (8000504 <EnablePeriClk+0x24c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d108      	bne.n	800035c <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800034a:	4b69      	ldr	r3, [pc, #420]	; (80004f0 <EnablePeriClk+0x238>)
 800034c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f043 0220 	orr.w	r2, r3, #32
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	601a      	str	r2, [r3, #0]
}
 800035a:	e0c1      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOG) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a6a      	ldr	r2, [pc, #424]	; (8000508 <EnablePeriClk+0x250>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d108      	bne.n	8000376 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000364:	4b62      	ldr	r3, [pc, #392]	; (80004f0 <EnablePeriClk+0x238>)
 8000366:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	601a      	str	r2, [r3, #0]
}
 8000374:	e0b4      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOH) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a64      	ldr	r2, [pc, #400]	; (800050c <EnablePeriClk+0x254>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d108      	bne.n	8000390 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800037e:	4b5c      	ldr	r3, [pc, #368]	; (80004f0 <EnablePeriClk+0x238>)
 8000380:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	601a      	str	r2, [r3, #0]
}
 800038e:	e0a7      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOI) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a5f      	ldr	r2, [pc, #380]	; (8000510 <EnablePeriClk+0x258>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d108      	bne.n	80003aa <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000398:	4b55      	ldr	r3, [pc, #340]	; (80004f0 <EnablePeriClk+0x238>)
 800039a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	601a      	str	r2, [r3, #0]
}
 80003a8:	e09a      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == SPI1) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a59      	ldr	r2, [pc, #356]	; (8000514 <EnablePeriClk+0x25c>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d108      	bne.n	80003c4 <EnablePeriClk+0x10c>
			pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80003b2:	4b59      	ldr	r3, [pc, #356]	; (8000518 <EnablePeriClk+0x260>)
 80003b4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	601a      	str	r2, [r3, #0]
}
 80003c2:	e08d      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == SPI2) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a55      	ldr	r2, [pc, #340]	; (800051c <EnablePeriClk+0x264>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d108      	bne.n	80003de <EnablePeriClk+0x126>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80003cc:	4b54      	ldr	r3, [pc, #336]	; (8000520 <EnablePeriClk+0x268>)
 80003ce:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	601a      	str	r2, [r3, #0]
}
 80003dc:	e080      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == SPI3) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a50      	ldr	r2, [pc, #320]	; (8000524 <EnablePeriClk+0x26c>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d108      	bne.n	80003f8 <EnablePeriClk+0x140>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80003e6:	4b4e      	ldr	r3, [pc, #312]	; (8000520 <EnablePeriClk+0x268>)
 80003e8:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	601a      	str	r2, [r3, #0]
}
 80003f6:	e073      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == I2C1) {
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a4b      	ldr	r2, [pc, #300]	; (8000528 <EnablePeriClk+0x270>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d108      	bne.n	8000412 <EnablePeriClk+0x15a>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000400:	4b47      	ldr	r3, [pc, #284]	; (8000520 <EnablePeriClk+0x268>)
 8000402:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	601a      	str	r2, [r3, #0]
}
 8000410:	e066      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == I2C2) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a45      	ldr	r2, [pc, #276]	; (800052c <EnablePeriClk+0x274>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d108      	bne.n	800042c <EnablePeriClk+0x174>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800041a:	4b41      	ldr	r3, [pc, #260]	; (8000520 <EnablePeriClk+0x268>)
 800041c:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	601a      	str	r2, [r3, #0]
}
 800042a:	e059      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == I2C3) {
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a40      	ldr	r2, [pc, #256]	; (8000530 <EnablePeriClk+0x278>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d108      	bne.n	8000446 <EnablePeriClk+0x18e>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000434:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <EnablePeriClk+0x268>)
 8000436:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	601a      	str	r2, [r3, #0]
}
 8000444:	e04c      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == USART1) {
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a3a      	ldr	r2, [pc, #232]	; (8000534 <EnablePeriClk+0x27c>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d108      	bne.n	8000460 <EnablePeriClk+0x1a8>
				pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800044e:	4b32      	ldr	r3, [pc, #200]	; (8000518 <EnablePeriClk+0x260>)
 8000450:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f043 0210 	orr.w	r2, r3, #16
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	601a      	str	r2, [r3, #0]
}
 800045e:	e03f      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == USART2) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a35      	ldr	r2, [pc, #212]	; (8000538 <EnablePeriClk+0x280>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d108      	bne.n	800047a <EnablePeriClk+0x1c2>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000468:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <EnablePeriClk+0x268>)
 800046a:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	601a      	str	r2, [r3, #0]
}
 8000478:	e032      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == USART3) {
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a2f      	ldr	r2, [pc, #188]	; (800053c <EnablePeriClk+0x284>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d108      	bne.n	8000494 <EnablePeriClk+0x1dc>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000482:	4b27      	ldr	r3, [pc, #156]	; (8000520 <EnablePeriClk+0x268>)
 8000484:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	601a      	str	r2, [r3, #0]
}
 8000492:	e025      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == UART4) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a2a      	ldr	r2, [pc, #168]	; (8000540 <EnablePeriClk+0x288>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d108      	bne.n	80004ae <EnablePeriClk+0x1f6>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800049c:	4b20      	ldr	r3, [pc, #128]	; (8000520 <EnablePeriClk+0x268>)
 800049e:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	601a      	str	r2, [r3, #0]
}
 80004ac:	e018      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == UART5) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a24      	ldr	r2, [pc, #144]	; (8000544 <EnablePeriClk+0x28c>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d108      	bne.n	80004c8 <EnablePeriClk+0x210>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <EnablePeriClk+0x268>)
 80004b8:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	601a      	str	r2, [r3, #0]
}
 80004c6:	e00b      	b.n	80004e0 <EnablePeriClk+0x228>
	else if (PeripheralAddress == USART6) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a1f      	ldr	r2, [pc, #124]	; (8000548 <EnablePeriClk+0x290>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d107      	bne.n	80004e0 <EnablePeriClk+0x228>
				pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <EnablePeriClk+0x260>)
 80004d2:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f043 0220 	orr.w	r2, r3, #32
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	601a      	str	r2, [r3, #0]
}
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40020000 	.word	0x40020000
 80004f0:	40023830 	.word	0x40023830
 80004f4:	40020400 	.word	0x40020400
 80004f8:	40020800 	.word	0x40020800
 80004fc:	40020c00 	.word	0x40020c00
 8000500:	40021000 	.word	0x40021000
 8000504:	40021400 	.word	0x40021400
 8000508:	40021800 	.word	0x40021800
 800050c:	40021c00 	.word	0x40021c00
 8000510:	40022000 	.word	0x40022000
 8000514:	40013000 	.word	0x40013000
 8000518:	40023844 	.word	0x40023844
 800051c:	40003800 	.word	0x40003800
 8000520:	40023840 	.word	0x40023840
 8000524:	40003c00 	.word	0x40003c00
 8000528:	40005400 	.word	0x40005400
 800052c:	40005800 	.word	0x40005800
 8000530:	40005c00 	.word	0x40005c00
 8000534:	40011000 	.word	0x40011000
 8000538:	40004400 	.word	0x40004400
 800053c:	40004800 	.word	0x40004800
 8000540:	40004c00 	.word	0x40004c00
 8000544:	40005000 	.word	0x40005000
 8000548:	40011400 	.word	0x40011400

0800054c <delay>:
#define GPIO_PIN_NUM_INPUT		GPIO_PIN_13
#define GPIO_PIN_NUM_OUTPUT		GPIO_PIN_5
#define SLEEP_COUNT				500000

void delay(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
	uint32_t j;
	for(j=0;j<SLEEP_COUNT;j++);
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	e002      	b.n	800055e <delay+0x12>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3301      	adds	r3, #1
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <delay+0x28>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d9f8      	bls.n	8000558 <delay+0xc>
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	0007a11f 	.word	0x0007a11f

08000578 <main>:

int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration for Button and LED
	EnablePeriClk(GPIOA);
 800057c:	480f      	ldr	r0, [pc, #60]	; (80005bc <main+0x44>)
 800057e:	f7ff fe9b 	bl	80002b8 <EnablePeriClk>
	EnablePeriClk(GPIOC);
 8000582:	480f      	ldr	r0, [pc, #60]	; (80005c0 <main+0x48>)
 8000584:	f7ff fe98 	bl	80002b8 <EnablePeriClk>
	GPIOSetMode(GPIOA,GPIO_PIN_NUM_OUTPUT,GPIO_MODE_OUTPUT);
 8000588:	2201      	movs	r2, #1
 800058a:	2105      	movs	r1, #5
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <main+0x44>)
 800058e:	f7ff fe39 	bl	8000204 <GPIOSetMode>
	GPIOSetMode(GPIOC,GPIO_PIN_NUM_INPUT,GPIO_MODE_INPUT);
 8000592:	2200      	movs	r2, #0
 8000594:	210d      	movs	r1, #13
 8000596:	480a      	ldr	r0, [pc, #40]	; (80005c0 <main+0x48>)
 8000598:	f7ff fe34 	bl	8000204 <GPIOSetMode>

	while(1)
	{
			while(GPIOReadPin(GPIOC,GPIO_PIN_NUM_INPUT) == GPIO_HIGH);
 800059c:	bf00      	nop
 800059e:	210d      	movs	r1, #13
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <main+0x48>)
 80005a2:	f7ff fe53 	bl	800024c <GPIOReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d0f8      	beq.n	800059e <main+0x26>
			GPIOTogglePin(GPIOA,GPIO_PIN_NUM_OUTPUT);
 80005ac:	2105      	movs	r1, #5
 80005ae:	4803      	ldr	r0, [pc, #12]	; (80005bc <main+0x44>)
 80005b0:	f7ff fe6b 	bl	800028a <GPIOTogglePin>
			delay();
 80005b4:	f7ff ffca 	bl	800054c <delay>
			while(GPIOReadPin(GPIOC,GPIO_PIN_NUM_INPUT) == GPIO_HIGH);
 80005b8:	e7f0      	b.n	800059c <main+0x24>
 80005ba:	bf00      	nop
 80005bc:	40020000 	.word	0x40020000
 80005c0:	40020800 	.word	0x40020800

080005c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ce:	490d      	ldr	r1, [pc, #52]	; (8000604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <LoopForever+0xe>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e4:	4c0a      	ldr	r4, [pc, #40]	; (8000610 <LoopForever+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005f2:	f000 f811 	bl	8000618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff ffbf 	bl	8000578 <main>

080005fa <LoopForever>:

LoopForever:
  b LoopForever
 80005fa:	e7fe      	b.n	80005fa <LoopForever>
  ldr   r0, =_estack
 80005fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000608:	08000680 	.word	0x08000680
  ldr r2, =_sbss
 800060c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000610:	2000001c 	.word	0x2000001c

08000614 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC_IRQHandler>
	...

08000618 <__libc_init_array>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	4d0d      	ldr	r5, [pc, #52]	; (8000650 <__libc_init_array+0x38>)
 800061c:	4c0d      	ldr	r4, [pc, #52]	; (8000654 <__libc_init_array+0x3c>)
 800061e:	1b64      	subs	r4, r4, r5
 8000620:	10a4      	asrs	r4, r4, #2
 8000622:	2600      	movs	r6, #0
 8000624:	42a6      	cmp	r6, r4
 8000626:	d109      	bne.n	800063c <__libc_init_array+0x24>
 8000628:	4d0b      	ldr	r5, [pc, #44]	; (8000658 <__libc_init_array+0x40>)
 800062a:	4c0c      	ldr	r4, [pc, #48]	; (800065c <__libc_init_array+0x44>)
 800062c:	f000 f818 	bl	8000660 <_init>
 8000630:	1b64      	subs	r4, r4, r5
 8000632:	10a4      	asrs	r4, r4, #2
 8000634:	2600      	movs	r6, #0
 8000636:	42a6      	cmp	r6, r4
 8000638:	d105      	bne.n	8000646 <__libc_init_array+0x2e>
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000640:	4798      	blx	r3
 8000642:	3601      	adds	r6, #1
 8000644:	e7ee      	b.n	8000624 <__libc_init_array+0xc>
 8000646:	f855 3b04 	ldr.w	r3, [r5], #4
 800064a:	4798      	blx	r3
 800064c:	3601      	adds	r6, #1
 800064e:	e7f2      	b.n	8000636 <__libc_init_array+0x1e>
 8000650:	08000678 	.word	0x08000678
 8000654:	08000678 	.word	0x08000678
 8000658:	08000678 	.word	0x08000678
 800065c:	0800067c 	.word	0x0800067c

08000660 <_init>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	bf00      	nop
 8000664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000666:	bc08      	pop	{r3}
 8000668:	469e      	mov	lr, r3
 800066a:	4770      	bx	lr

0800066c <_fini>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	bf00      	nop
 8000670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000672:	bc08      	pop	{r3}
 8000674:	469e      	mov	lr, r3
 8000676:	4770      	bx	lr
