
003I2CTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003094  08003094  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003094  08003094  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003094  08003094  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800309c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000064  08003100  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003100  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003255  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cc3  00000000  00000000  000232e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000438  00000000  00000000  00023fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000380  00000000  00000000  000243e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002607  00000000  00000000  00024760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000054d4  00000000  00000000  00026d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000e61d  00000000  00000000  0002c23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003a858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001748  00000000  00000000  0003a8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002f4c 	.word	0x08002f4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08002f4c 	.word	0x08002f4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <delay_us>:
struct USART_Handle_t Test_USART;
uint32_t * I2C_DEVICE = I2C1;
uint8_t SlaveAddress = 0x27;

void delay_us(uint32_t delay)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <delay_us+0x2c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002c0:	bf00      	nop
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <delay_us+0x2c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	011b      	lsls	r3, r3, #4
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d3f8      	bcc.n	80002c2 <delay_us+0x12>
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	20000080 	.word	0x20000080

080002e0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <configure_delay_timer+0x3c>)
 80002e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ea:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002ec:	2228      	movs	r2, #40	; 0x28
 80002ee:	2100      	movs	r1, #0
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <configure_delay_timer+0x40>)
 80002f2:	f001 fe27 	bl	8001f44 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <configure_delay_timer+0x3c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <configure_delay_timer+0x3c>)
 80002fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000302:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 8000304:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000308:	f001 f86e 	bl	80013e8 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 800030c:	4803      	ldr	r0, [pc, #12]	; (800031c <configure_delay_timer+0x3c>)
 800030e:	f000 f9b5 	bl	800067c <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 8000312:	4802      	ldr	r0, [pc, #8]	; (800031c <configure_delay_timer+0x3c>)
 8000314:	f000 fbf3 	bl	8000afe <General_Purpose_Timer_PeripheralEnable>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000080 	.word	0x20000080
 8000320:	20000084 	.word	0x20000084

08000324 <configure_spi>:

void configure_spi(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
	struct SPI_Config_t SPI_Dev_Config;

	//Configuring the GPIO Pins for the SPI Port
	EnablePeriClk(SPI_PORT);
 800032a:	4825      	ldr	r0, [pc, #148]	; (80003c0 <configure_spi+0x9c>)
 800032c:	f001 f85c 	bl	80013e8 <EnablePeriClk>
	GPIOSetMode(SPI_PORT,SPI_PIN_MOSI,GPIO_MODE_ALTFN);
 8000330:	2202      	movs	r2, #2
 8000332:	210f      	movs	r1, #15
 8000334:	4822      	ldr	r0, [pc, #136]	; (80003c0 <configure_spi+0x9c>)
 8000336:	f000 fbf3 	bl	8000b20 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_MISO,GPIO_MODE_ALTFN);
 800033a:	2202      	movs	r2, #2
 800033c:	210e      	movs	r1, #14
 800033e:	4820      	ldr	r0, [pc, #128]	; (80003c0 <configure_spi+0x9c>)
 8000340:	f000 fbee 	bl	8000b20 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_CLK,GPIO_MODE_ALTFN);
 8000344:	2202      	movs	r2, #2
 8000346:	210d      	movs	r1, #13
 8000348:	481d      	ldr	r0, [pc, #116]	; (80003c0 <configure_spi+0x9c>)
 800034a:	f000 fbe9 	bl	8000b20 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_SS,GPIO_MODE_ALTFN);
 800034e:	2202      	movs	r2, #2
 8000350:	210c      	movs	r1, #12
 8000352:	481b      	ldr	r0, [pc, #108]	; (80003c0 <configure_spi+0x9c>)
 8000354:	f000 fbe4 	bl	8000b20 <GPIOSetMode>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MOSI,GPIO_ALTFN_5);
 8000358:	2205      	movs	r2, #5
 800035a:	210f      	movs	r1, #15
 800035c:	4818      	ldr	r0, [pc, #96]	; (80003c0 <configure_spi+0x9c>)
 800035e:	f000 fc25 	bl	8000bac <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MISO,GPIO_ALTFN_5);
 8000362:	2205      	movs	r2, #5
 8000364:	210e      	movs	r1, #14
 8000366:	4816      	ldr	r0, [pc, #88]	; (80003c0 <configure_spi+0x9c>)
 8000368:	f000 fc20 	bl	8000bac <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_CLK,GPIO_ALTFN_5);
 800036c:	2205      	movs	r2, #5
 800036e:	210d      	movs	r1, #13
 8000370:	4813      	ldr	r0, [pc, #76]	; (80003c0 <configure_spi+0x9c>)
 8000372:	f000 fc1b 	bl	8000bac <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_SS,GPIO_ALTFN_5);
 8000376:	2205      	movs	r2, #5
 8000378:	210c      	movs	r1, #12
 800037a:	4811      	ldr	r0, [pc, #68]	; (80003c0 <configure_spi+0x9c>)
 800037c:	f000 fc16 	bl	8000bac <GPIOSetAltFn>

	//Configuring the SPI Peripheral
	SPI_Dev_Config.SPIDeviceMode = SPI_DEVICE_MODE_MASTER;
 8000380:	2301      	movs	r3, #1
 8000382:	71bb      	strb	r3, [r7, #6]
	SPI_Dev_Config.SPIClockPol = SPI_CLK_POL_0;
 8000384:	2300      	movs	r3, #0
 8000386:	713b      	strb	r3, [r7, #4]
	SPI_Dev_Config.SPIClockPhase = SPI_CLK_PHA_LE;
 8000388:	2300      	movs	r3, #0
 800038a:	717b      	strb	r3, [r7, #5]
	SPI_Dev_Config.SPIClockFreq = SPI_CLK_FREQ_DIV8;
 800038c:	2302      	movs	r3, #2
 800038e:	723b      	strb	r3, [r7, #8]
	SPI_Dev_Config.SPIDataFrameFormat = SPI_DFF_8_BITS;
 8000390:	2300      	movs	r3, #0
 8000392:	727b      	strb	r3, [r7, #9]
	SPI_Dev_Config.SPISoftwareSlaveManagement = SPI_SW_SLAVE_MGNT_DI;
 8000394:	2300      	movs	r3, #0
 8000396:	72bb      	strb	r3, [r7, #10]
	SPI_Dev_Config.SPISSIFlag = SPI_SSI_1;
 8000398:	2301      	movs	r3, #1
 800039a:	72fb      	strb	r3, [r7, #11]
	SPI_Dev_Config.SPISSOEFlag = SPI_SSOE_EN;
 800039c:	2301      	movs	r3, #1
 800039e:	733b      	strb	r3, [r7, #12]

	EnablePeriClk(SPI_DEV);
 80003a0:	4808      	ldr	r0, [pc, #32]	; (80003c4 <configure_spi+0xa0>)
 80003a2:	f001 f821 	bl	80013e8 <EnablePeriClk>
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4619      	mov	r1, r3
 80003aa:	4806      	ldr	r0, [pc, #24]	; (80003c4 <configure_spi+0xa0>)
 80003ac:	f000 ff04 	bl	80011b8 <SPIPeriConfig>
	SPIEnable(SPI_DEV);
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <configure_spi+0xa0>)
 80003b2:	f000 ff7c 	bl	80012ae <SPIEnable>
}
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40020400 	.word	0x40020400
 80003c4:	40003800 	.word	0x40003800

080003c8 <configure_uart>:

void configure_uart(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 80003cc:	482a      	ldr	r0, [pc, #168]	; (8000478 <configure_uart+0xb0>)
 80003ce:	f001 f80b 	bl	80013e8 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 80003d2:	2202      	movs	r2, #2
 80003d4:	2109      	movs	r1, #9
 80003d6:	4828      	ldr	r0, [pc, #160]	; (8000478 <configure_uart+0xb0>)
 80003d8:	f000 fba2 	bl	8000b20 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 80003dc:	2202      	movs	r2, #2
 80003de:	210a      	movs	r1, #10
 80003e0:	4825      	ldr	r0, [pc, #148]	; (8000478 <configure_uart+0xb0>)
 80003e2:	f000 fb9d 	bl	8000b20 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 80003e6:	2207      	movs	r2, #7
 80003e8:	2109      	movs	r1, #9
 80003ea:	4823      	ldr	r0, [pc, #140]	; (8000478 <configure_uart+0xb0>)
 80003ec:	f000 fbde 	bl	8000bac <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 80003f0:	2207      	movs	r2, #7
 80003f2:	210a      	movs	r1, #10
 80003f4:	4820      	ldr	r0, [pc, #128]	; (8000478 <configure_uart+0xb0>)
 80003f6:	f000 fbd9 	bl	8000bac <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2109      	movs	r1, #9
 80003fe:	481e      	ldr	r0, [pc, #120]	; (8000478 <configure_uart+0xb0>)
 8000400:	f000 fc0d 	bl	8000c1e <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000404:	2200      	movs	r2, #0
 8000406:	210a      	movs	r1, #10
 8000408:	481b      	ldr	r0, [pc, #108]	; (8000478 <configure_uart+0xb0>)
 800040a:	f000 fc08 	bl	8000c1e <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 800040e:	2202      	movs	r2, #2
 8000410:	2109      	movs	r1, #9
 8000412:	4819      	ldr	r0, [pc, #100]	; (8000478 <configure_uart+0xb0>)
 8000414:	f000 fc49 	bl	8000caa <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 8000418:	2202      	movs	r2, #2
 800041a:	210a      	movs	r1, #10
 800041c:	4816      	ldr	r0, [pc, #88]	; (8000478 <configure_uart+0xb0>)
 800041e:	f000 fc44 	bl	8000caa <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 8000422:	2201      	movs	r2, #1
 8000424:	2109      	movs	r1, #9
 8000426:	4814      	ldr	r0, [pc, #80]	; (8000478 <configure_uart+0xb0>)
 8000428:	f000 fc1b 	bl	8000c62 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 800042c:	2201      	movs	r2, #1
 800042e:	210a      	movs	r1, #10
 8000430:	4811      	ldr	r0, [pc, #68]	; (8000478 <configure_uart+0xb0>)
 8000432:	f000 fc16 	bl	8000c62 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART1;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <configure_uart+0xb4>)
 8000438:	4a11      	ldr	r2, [pc, #68]	; (8000480 <configure_uart+0xb8>)
 800043a:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <configure_uart+0xb4>)
 800043e:	2202      	movs	r2, #2
 8000440:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <configure_uart+0xb4>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <configure_uart+0xb4>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <configure_uart+0xb4>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <configure_uart+0xb4>)
 8000456:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800045a:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <configure_uart+0xb4>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART1);
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <configure_uart+0xb8>)
 8000464:	f000 ffc0 	bl	80013e8 <EnablePeriClk>
	USART_Init(&Test_USART);
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <configure_uart+0xb4>)
 800046a:	f001 f9c5 	bl	80017f8 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 800046e:	4803      	ldr	r0, [pc, #12]	; (800047c <configure_uart+0xb4>)
 8000470:	f001 fac2 	bl	80019f8 <USART_PeripheralEnable>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40020000 	.word	0x40020000
 800047c:	200000ac 	.word	0x200000ac
 8000480:	40011000 	.word	0x40011000

08000484 <UART_SendChar>:

	return;
}

void UART_SendChar(uint8_t ch)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	2201      	movs	r2, #1
 8000492:	4619      	mov	r1, r3
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <UART_SendChar+0x20>)
 8000496:	f001 fad5 	bl	8001a44 <USART_SendData>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000ac 	.word	0x200000ac

080004a8 <configure_external_gpio_interrupt>:
	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(INTERRUPT_IRQ_NO);					// Enabling the interrupt
}

void configure_external_gpio_interrupt(uint32_t *gpio_port,uint8_t gpio_pin,uint8_t trigger_choice,uint8_t irq_no)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	; 0x28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	4608      	mov	r0, r1
 80004b2:	4611      	mov	r1, r2
 80004b4:	461a      	mov	r2, r3
 80004b6:	4603      	mov	r3, r0
 80004b8:	70fb      	strb	r3, [r7, #3]
 80004ba:	460b      	mov	r3, r1
 80004bc:	70bb      	strb	r3, [r7, #2]
 80004be:	4613      	mov	r3, r2
 80004c0:	707b      	strb	r3, [r7, #1]
	uint32_t *pAPB2ENR = (uint32_t *) APB2_ENR_ADDR;
 80004c2:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <configure_external_gpio_interrupt+0x10c>)
 80004c4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *pEXTI_IMR	= (uint32_t *) EXTI_IMR_ADDR;
 80004c6:	4b3c      	ldr	r3, [pc, #240]	; (80005b8 <configure_external_gpio_interrupt+0x110>)
 80004c8:	623b      	str	r3, [r7, #32]
	uint32_t *pEXTI_RTSR = (uint32_t *) EXTI_RTSR_ADDR;
 80004ca:	4b3c      	ldr	r3, [pc, #240]	; (80005bc <configure_external_gpio_interrupt+0x114>)
 80004cc:	61fb      	str	r3, [r7, #28]
	uint32_t *pEXTI_FTSR = (uint32_t *) EXTI_FTSR_ADDR;
 80004ce:	4b3c      	ldr	r3, [pc, #240]	; (80005c0 <configure_external_gpio_interrupt+0x118>)
 80004d0:	61bb      	str	r3, [r7, #24]
	uint32_t *pSYSCFG_EXTI_CR_ADDR = (uint32_t *) SYSCFG_EXTI_CR_BASE_ADDR;
 80004d2:	4b3c      	ldr	r3, [pc, #240]	; (80005c4 <configure_external_gpio_interrupt+0x11c>)
 80004d4:	617b      	str	r3, [r7, #20]
	uint32_t OFFSET;
	uint32_t OFFSET_ADDRESS;

	//GPIO Pin Configuration
	EnablePeriClk(gpio_port);
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f000 ff86 	bl	80013e8 <EnablePeriClk>
	GPIOSetMode(gpio_port,gpio_pin,GPIO_MODE_INPUT);
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	2200      	movs	r2, #0
 80004e0:	4619      	mov	r1, r3
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 fb1c 	bl	8000b20 <GPIOSetMode>
	GPIOSetOutputType(gpio_port,gpio_pin,GPIO_OPTYPE_OD);
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	2201      	movs	r2, #1
 80004ec:	4619      	mov	r1, r3
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 fb95 	bl	8000c1e <GPIOSetOutputType>
	GPIOSetOutputSpeed(gpio_port,gpio_pin,GPIO_OPSPEED_HIGH);
 80004f4:	78fb      	ldrb	r3, [r7, #3]
 80004f6:	2202      	movs	r2, #2
 80004f8:	4619      	mov	r1, r3
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f000 fbd5 	bl	8000caa <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(gpio_port,gpio_pin,GPIO_PULL_UP);
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 fbab 	bl	8000c62 <GPIOSetPullUpDownConfig>

	//Button Interrupt Configuration

	// 1. Configuring the EXTI Controller (External Interrupt Controller)

	*pEXTI_IMR |= (1 << gpio_pin);  	// Setting the Interrupt Mask Register
 800050c:	6a3b      	ldr	r3, [r7, #32]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	78fa      	ldrb	r2, [r7, #3]
 8000512:	2101      	movs	r1, #1
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	431a      	orrs	r2, r3
 800051a:	6a3b      	ldr	r3, [r7, #32]
 800051c:	601a      	str	r2, [r3, #0]

	if(trigger_choice == EXTI_RISING_TRIGGER)
 800051e:	78bb      	ldrb	r3, [r7, #2]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d108      	bne.n	8000536 <configure_external_gpio_interrupt+0x8e>
	{
		*pEXTI_RTSR |= (1 << gpio_pin); 	// Setting the Rising Trigger Set Register
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	78fa      	ldrb	r2, [r7, #3]
 800052a:	2101      	movs	r1, #1
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	431a      	orrs	r2, r3
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	601a      	str	r2, [r3, #0]
	}

	if(trigger_choice == EXTI_FALLING_TRIGGER)
 8000536:	78bb      	ldrb	r3, [r7, #2]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d108      	bne.n	800054e <configure_external_gpio_interrupt+0xa6>
	{
		*pEXTI_FTSR |= (1 << gpio_pin); 	// Setting the Falling Trigger Set Register
 800053c:	69bb      	ldr	r3, [r7, #24]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	78fa      	ldrb	r2, [r7, #3]
 8000542:	2101      	movs	r1, #1
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	431a      	orrs	r2, r3
 800054a:	69bb      	ldr	r3, [r7, #24]
 800054c:	601a      	str	r2, [r3, #0]
	}

	*pAPB2ENR |= (1 << 14);							// Enabling the clock for the System Configuration Block
 800054e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000558:	601a      	str	r2, [r3, #0]

	OFFSET = gpio_pin%4;
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	f003 0303 	and.w	r3, r3, #3
 8000560:	613b      	str	r3, [r7, #16]
	OFFSET_ADDRESS = gpio_pin/4;
 8000562:	78fb      	ldrb	r3, [r7, #3]
 8000564:	089b      	lsrs	r3, r3, #2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	60fb      	str	r3, [r7, #12]
	pSYSCFG_EXTI_CR_ADDR += OFFSET_ADDRESS;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	4413      	add	r3, r2
 8000572:	617b      	str	r3, [r7, #20]

	// Enabling GPIO Port x  input on EXTIx line
	*pSYSCFG_EXTI_CR_ADDR &= ~(0xF << OFFSET*4);
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	693a      	ldr	r2, [r7, #16]
 800057a:	0092      	lsls	r2, r2, #2
 800057c:	210f      	movs	r1, #15
 800057e:	fa01 f202 	lsl.w	r2, r1, r2
 8000582:	43d2      	mvns	r2, r2
 8000584:	401a      	ands	r2, r3
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	601a      	str	r2, [r3, #0]
	*pSYSCFG_EXTI_CR_ADDR |= (gpio_port_name_to_num(gpio_port) << OFFSET*4);
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f81c 	bl	80005c8 <gpio_port_name_to_num>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	409a      	lsls	r2, r3
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	431a      	orrs	r2, r3
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	601a      	str	r2, [r3, #0]

	// 2. // Enabling the interrupt for the button
	NVIC_EnableIRQ(irq_no);					// Enabling the interrupt
 80005a4:	787b      	ldrb	r3, [r7, #1]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f8e2 	bl	8001770 <NVIC_EnableIRQ>
}
 80005ac:	bf00      	nop
 80005ae:	3728      	adds	r7, #40	; 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023844 	.word	0x40023844
 80005b8:	40013c00 	.word	0x40013c00
 80005bc:	40013c08 	.word	0x40013c08
 80005c0:	40013c0c 	.word	0x40013c0c
 80005c4:	40013808 	.word	0x40013808

080005c8 <gpio_port_name_to_num>:

static uint8_t gpio_port_name_to_num(uint32_t *gpio_name)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint8_t gpio_num;

	if(gpio_name == GPIOA)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a21      	ldr	r2, [pc, #132]	; (8000658 <gpio_port_name_to_num+0x90>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d102      	bne.n	80005de <gpio_port_name_to_num+0x16>
		gpio_num = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]
 80005dc:	e036      	b.n	800064c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOB)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a1e      	ldr	r2, [pc, #120]	; (800065c <gpio_port_name_to_num+0x94>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d102      	bne.n	80005ec <gpio_port_name_to_num+0x24>
		gpio_num = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e02f      	b.n	800064c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOC)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <gpio_port_name_to_num+0x98>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d102      	bne.n	80005fa <gpio_port_name_to_num+0x32>
		gpio_num = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	e028      	b.n	800064c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOD)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a19      	ldr	r2, [pc, #100]	; (8000664 <gpio_port_name_to_num+0x9c>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d102      	bne.n	8000608 <gpio_port_name_to_num+0x40>
		gpio_num = 3;
 8000602:	2303      	movs	r3, #3
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	e021      	b.n	800064c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOE)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a17      	ldr	r2, [pc, #92]	; (8000668 <gpio_port_name_to_num+0xa0>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d102      	bne.n	8000616 <gpio_port_name_to_num+0x4e>
		gpio_num = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e01a      	b.n	800064c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOF)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a14      	ldr	r2, [pc, #80]	; (800066c <gpio_port_name_to_num+0xa4>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d102      	bne.n	8000624 <gpio_port_name_to_num+0x5c>
		gpio_num = 5;
 800061e:	2305      	movs	r3, #5
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e013      	b.n	800064c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOG)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <gpio_port_name_to_num+0xa8>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d102      	bne.n	8000632 <gpio_port_name_to_num+0x6a>
		gpio_num = 6;
 800062c:	2306      	movs	r3, #6
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e00c      	b.n	800064c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOH)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <gpio_port_name_to_num+0xac>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d102      	bne.n	8000640 <gpio_port_name_to_num+0x78>
		gpio_num = 7;
 800063a:	2307      	movs	r3, #7
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e005      	b.n	800064c <gpio_port_name_to_num+0x84>
	else if(gpio_name == GPIOI)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <gpio_port_name_to_num+0xb0>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d101      	bne.n	800064c <gpio_port_name_to_num+0x84>
		gpio_num = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	73fb      	strb	r3, [r7, #15]

	return gpio_num;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	40020000 	.word	0x40020000
 800065c:	40020400 	.word	0x40020400
 8000660:	40020800 	.word	0x40020800
 8000664:	40020c00 	.word	0x40020c00
 8000668:	40021000 	.word	0x40021000
 800066c:	40021400 	.word	0x40021400
 8000670:	40021800 	.word	0x40021800
 8000674:	40021c00 	.word	0x40021c00
 8000678:	40022000 	.word	0x40022000

0800067c <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	6852      	ldr	r2, [r2, #4]
 800068c:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	6892      	ldr	r2, [r2, #8]
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7b5b      	ldrb	r3, [r3, #13]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d16a      	bne.n	8000776 <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	6a1a      	ldr	r2, [r3, #32]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f042 0201 	orr.w	r2, r2, #1
 80006ae:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7b9b      	ldrb	r3, [r3, #14]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d11c      	bne.n	80006f2 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	699a      	ldr	r2, [r3, #24]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f022 0203 	bic.w	r2, r2, #3
 80006c6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	6912      	ldr	r2, [r2, #16]
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	699a      	ldr	r2, [r3, #24]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006e0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	699a      	ldr	r2, [r3, #24]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80006f0:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	7b9b      	ldrb	r3, [r3, #14]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d11c      	bne.n	8000734 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	699a      	ldr	r2, [r3, #24]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f022 0203 	bic.w	r2, r2, #3
 8000708:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	6912      	ldr	r2, [r2, #16]
 8000712:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	699a      	ldr	r2, [r3, #24]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000722:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	699a      	ldr	r2, [r3, #24]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000732:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7b9b      	ldrb	r3, [r3, #14]
 8000738:	2b04      	cmp	r3, #4
 800073a:	d11c      	bne.n	8000776 <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	699a      	ldr	r2, [r3, #24]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f022 0203 	bic.w	r2, r2, #3
 800074a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	6912      	ldr	r2, [r2, #16]
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000764:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000774:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7d1b      	ldrb	r3, [r3, #20]
 800077a:	2b00      	cmp	r3, #0
 800077c:	f040 80bf 	bne.w	80008fe <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7d5b      	ldrb	r3, [r3, #21]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d124      	bne.n	80007d2 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	699a      	ldr	r2, [r3, #24]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000796:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	6992      	ldr	r2, [r2, #24]
 80007a0:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	699a      	ldr	r2, [r3, #24]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80007b0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	699a      	ldr	r2, [r3, #24]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80007c0:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6a1a      	ldr	r2, [r3, #32]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f042 0210 	orr.w	r2, r2, #16
 80007d0:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7d5b      	ldrb	r3, [r3, #21]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d124      	bne.n	8000824 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	699a      	ldr	r2, [r3, #24]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007e8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	6992      	ldr	r2, [r2, #24]
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000802:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	699a      	ldr	r2, [r3, #24]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000812:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	6a1a      	ldr	r2, [r3, #32]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f042 0210 	orr.w	r2, r2, #16
 8000822:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7d5b      	ldrb	r3, [r3, #21]
 8000828:	2b04      	cmp	r3, #4
 800082a:	d124      	bne.n	8000876 <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	699a      	ldr	r2, [r3, #24]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800083a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	6992      	ldr	r2, [r2, #24]
 8000844:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	699a      	ldr	r2, [r3, #24]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000854:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	699a      	ldr	r2, [r3, #24]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000864:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	6a1a      	ldr	r2, [r3, #32]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f042 0210 	orr.w	r2, r2, #16
 8000874:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7d5b      	ldrb	r3, [r3, #21]
 800087a:	2b08      	cmp	r3, #8
 800087c:	d13f      	bne.n	80008fe <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	699a      	ldr	r2, [r3, #24]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800088c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	699a      	ldr	r2, [r3, #24]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800089c:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	699a      	ldr	r2, [r3, #24]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80008ac:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6a1a      	ldr	r2, [r3, #32]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f022 0220 	bic.w	r2, r2, #32
 80008bc:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6a1a      	ldr	r2, [r3, #32]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008cc:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	699a      	ldr	r2, [r3, #24]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80008dc:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68da      	ldr	r2, [r3, #12]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f042 0204 	orr.w	r2, r2, #4
 80008ec:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6a1a      	ldr	r2, [r3, #32]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f042 0210 	orr.w	r2, r2, #16
 80008fc:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7f1b      	ldrb	r3, [r3, #28]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d16a      	bne.n	80009dc <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	6a1a      	ldr	r2, [r3, #32]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000914:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7f5b      	ldrb	r3, [r3, #29]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d11c      	bne.n	8000958 <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	69da      	ldr	r2, [r3, #28]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f022 0203 	bic.w	r2, r2, #3
 800092c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	6a12      	ldr	r2, [r2, #32]
 8000936:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	69da      	ldr	r2, [r3, #28]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000946:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	69da      	ldr	r2, [r3, #28]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000956:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7f5b      	ldrb	r3, [r3, #29]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d11c      	bne.n	800099a <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	69da      	ldr	r2, [r3, #28]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 0203 	bic.w	r2, r2, #3
 800096e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	6a12      	ldr	r2, [r2, #32]
 8000978:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	69da      	ldr	r2, [r3, #28]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000988:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	69da      	ldr	r2, [r3, #28]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000998:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	7f5b      	ldrb	r3, [r3, #29]
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d11c      	bne.n	80009dc <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	69da      	ldr	r2, [r3, #28]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f022 0203 	bic.w	r2, r2, #3
 80009b0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	6a12      	ldr	r2, [r2, #32]
 80009ba:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	69da      	ldr	r2, [r3, #28]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80009ca:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	69da      	ldr	r2, [r3, #28]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80009da:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d16d      	bne.n	8000ac2 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6a1a      	ldr	r2, [r3, #32]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80009f4:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d11c      	bne.n	8000a3a <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	69da      	ldr	r2, [r3, #28]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a0e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a18:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	69da      	ldr	r2, [r3, #28]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a28:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	69da      	ldr	r2, [r3, #28]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000a38:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d11c      	bne.n	8000a7e <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	69da      	ldr	r2, [r3, #28]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a52:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a5c:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	69da      	ldr	r2, [r3, #28]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a6c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	69da      	ldr	r2, [r3, #28]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000a7c:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d11c      	bne.n	8000ac2 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	69da      	ldr	r2, [r3, #28]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a96:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000aa0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	69da      	ldr	r2, [r3, #28]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000ab0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	69da      	ldr	r2, [r3, #28]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000ac0:	61da      	str	r2, [r3, #28]
	}


	//4. Enable/Disable the Update Event Interrupt

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_ENABLE)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7b1b      	ldrb	r3, [r3, #12]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d108      	bne.n	8000adc <General_Purpose_Timer_Init+0x460>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (1 << TIMx_DIER_UIE);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f042 0201 	orr.w	r2, r2, #1
 8000ad8:	60da      	str	r2, [r3, #12]
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}

}
 8000ada:	e00b      	b.n	8000af4 <General_Purpose_Timer_Init+0x478>
	else if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_UpdateInterruptConfig == TIMER_UPDATE_INTERRUPT_DISABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7b1b      	ldrb	r3, [r3, #12]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d107      	bne.n	8000af4 <General_Purpose_Timer_Init+0x478>
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f022 0201 	bic.w	r2, r2, #1
 8000af2:	60da      	str	r2, [r3, #12]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f042 0201 	orr.w	r2, r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	70fb      	strb	r3, [r7, #3]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	78fa      	ldrb	r2, [r7, #3]
 8000b3a:	0052      	lsls	r2, r2, #1
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b42:	43d2      	mvns	r2, r2
 8000b44:	401a      	ands	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	78b9      	ldrb	r1, [r7, #2]
 8000b50:	78fa      	ldrb	r2, [r7, #3]
 8000b52:	0052      	lsls	r2, r2, #1
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	601a      	str	r2, [r3, #0]

}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <GPIOWritePin>:

	return value;
}

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
 8000b74:	4613      	mov	r3, r2
 8000b76:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	78fa      	ldrb	r2, [r7, #3]
 8000b82:	2101      	movs	r1, #1
 8000b84:	fa01 f202 	lsl.w	r2, r1, r2
 8000b88:	43d2      	mvns	r2, r2
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	78b9      	ldrb	r1, [r7, #2]
 8000b96:	78fa      	ldrb	r2, [r7, #3]
 8000b98:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	615a      	str	r2, [r3, #20]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	70fb      	strb	r3, [r7, #3]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	08db      	lsrs	r3, r3, #3
 8000bc4:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000bce:	7afa      	ldrb	r2, [r7, #11]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3208      	adds	r2, #8
 8000bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd8:	7aba      	ldrb	r2, [r7, #10]
 8000bda:	0092      	lsls	r2, r2, #2
 8000bdc:	210f      	movs	r1, #15
 8000bde:	fa01 f202 	lsl.w	r2, r1, r2
 8000be2:	43d2      	mvns	r2, r2
 8000be4:	4611      	mov	r1, r2
 8000be6:	7afa      	ldrb	r2, [r7, #11]
 8000be8:	4019      	ands	r1, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3208      	adds	r2, #8
 8000bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000bf2:	7afa      	ldrb	r2, [r7, #11]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfc:	78b9      	ldrb	r1, [r7, #2]
 8000bfe:	7aba      	ldrb	r2, [r7, #10]
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	4611      	mov	r1, r2
 8000c08:	7afa      	ldrb	r2, [r7, #11]
 8000c0a:	4319      	orrs	r1, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3208      	adds	r2, #8
 8000c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	70fb      	strb	r3, [r7, #3]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	78fa      	ldrb	r2, [r7, #3]
 8000c38:	2101      	movs	r1, #1
 8000c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3e:	43d2      	mvns	r2, r2
 8000c40:	401a      	ands	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	78b9      	ldrb	r1, [r7, #2]
 8000c4c:	78fa      	ldrb	r2, [r7, #3]
 8000c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c52:	431a      	orrs	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	605a      	str	r2, [r3, #4]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b085      	sub	sp, #20
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	70fb      	strb	r3, [r7, #3]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	78fa      	ldrb	r2, [r7, #3]
 8000c7c:	0052      	lsls	r2, r2, #1
 8000c7e:	2103      	movs	r1, #3
 8000c80:	fa01 f202 	lsl.w	r2, r1, r2
 8000c84:	43d2      	mvns	r2, r2
 8000c86:	401a      	ands	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	78b9      	ldrb	r1, [r7, #2]
 8000c92:	78fa      	ldrb	r2, [r7, #3]
 8000c94:	0052      	lsls	r2, r2, #1
 8000c96:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	60da      	str	r2, [r3, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	70fb      	strb	r3, [r7, #3]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	78fa      	ldrb	r2, [r7, #3]
 8000cc4:	0052      	lsls	r2, r2, #1
 8000cc6:	2103      	movs	r1, #3
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	43d2      	mvns	r2, r2
 8000cce:	401a      	ands	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	78b9      	ldrb	r1, [r7, #2]
 8000cda:	78fa      	ldrb	r2, [r7, #3]
 8000cdc:	0052      	lsls	r2, r2, #1
 8000cde:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	609a      	str	r2, [r3, #8]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
	...

08000cf4 <configure_nrf_radio>:
uint8_t rx_packet_length;
uint8_t cmd_packet_length;
uint8_t nrf_packet_tx_state;

void configure_nrf_radio(struct NRF_RADIO_CONFIG_t * radio_config)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	uint8_t i;

	//1. Configure the GPIO pins for CE and IRQ pins
	EnablePeriClk(RADIO_PORT);
 8000cfc:	4871      	ldr	r0, [pc, #452]	; (8000ec4 <configure_nrf_radio+0x1d0>)
 8000cfe:	f000 fb73 	bl	80013e8 <EnablePeriClk>
	GPIOSetMode(RADIO_PORT,CE_PIN,GPIO_MODE_OUTPUT);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2102      	movs	r1, #2
 8000d06:	486f      	ldr	r0, [pc, #444]	; (8000ec4 <configure_nrf_radio+0x1d0>)
 8000d08:	f7ff ff0a 	bl	8000b20 <GPIOSetMode>
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_LOW);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2102      	movs	r1, #2
 8000d10:	486c      	ldr	r0, [pc, #432]	; (8000ec4 <configure_nrf_radio+0x1d0>)
 8000d12:	f7ff ff29 	bl	8000b68 <GPIOWritePin>
	GPIOSetMode(RADIO_PORT,IRQ_PIN,GPIO_MODE_INPUT);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	486a      	ldr	r0, [pc, #424]	; (8000ec4 <configure_nrf_radio+0x1d0>)
 8000d1c:	f7ff ff00 	bl	8000b20 <GPIOSetMode>
	GPIOSetPullUpDownConfig(RADIO_PORT,IRQ_PIN,GPIO_PULL_UP);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2100      	movs	r1, #0
 8000d24:	4867      	ldr	r0, [pc, #412]	; (8000ec4 <configure_nrf_radio+0x1d0>)
 8000d26:	f7ff ff9c 	bl	8000c62 <GPIOSetPullUpDownConfig>
	GPIOSetMode(RADIO_PORT,SS_PIN,GPIO_MODE_OUTPUT);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4865      	ldr	r0, [pc, #404]	; (8000ec4 <configure_nrf_radio+0x1d0>)
 8000d30:	f7ff fef6 	bl	8000b20 <GPIOSetMode>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2104      	movs	r1, #4
 8000d38:	4862      	ldr	r0, [pc, #392]	; (8000ec4 <configure_nrf_radio+0x1d0>)
 8000d3a:	f7ff ff15 	bl	8000b68 <GPIOWritePin>

	//2. Configure the Radio Mode

	//3. Configure the RF Channel, Data Rate and PA Level
	//3.1 Configure the RF Channel
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RF_CH;
 8000d3e:	4b62      	ldr	r3, [pc, #392]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d40:	2225      	movs	r2, #37	; 0x25
 8000d42:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_channel;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	785a      	ldrb	r2, [r3, #1]
 8000d48:	4b5f      	ldr	r3, [pc, #380]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d4a:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000d4c:	4b5f      	ldr	r3, [pc, #380]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000d52:	4b5e      	ldr	r3, [pc, #376]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4619      	mov	r1, r3
 8000d58:	485b      	ldr	r0, [pc, #364]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d5a:	f000 f9d9 	bl	8001110 <nrf_radio_cmd_write>

	//3.2 Configure the Data Rate and PA Level
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RF_SETUP;
 8000d5e:	4b5a      	ldr	r3, [pc, #360]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d60:	2226      	movs	r2, #38	; 0x26
 8000d62:	701a      	strb	r2, [r3, #0]

	cmd_buffer[1] &= 0x00;
 8000d64:	4b58      	ldr	r3, [pc, #352]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_pa_level << NRF_RADIO_RF_PWR_POS);
 8000d6a:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d6c:	785b      	ldrb	r3, [r3, #1]
 8000d6e:	b25a      	sxtb	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	78db      	ldrb	r3, [r3, #3]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b52      	ldr	r3, [pc, #328]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d80:	705a      	strb	r2, [r3, #1]

	if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_250K)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10b      	bne.n	8000da2 <configure_nrf_radio+0xae>
	{
		cmd_buffer[1] |= (1 << NRF_RADIO_RF_DR_LOW_POS);
 8000d8a:	4b4f      	ldr	r3, [pc, #316]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	f043 0320 	orr.w	r3, r3, #32
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b4c      	ldr	r3, [pc, #304]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d96:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_HIGH_POS);
 8000d98:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d9a:	785a      	ldrb	r2, [r3, #1]
 8000d9c:	4b4a      	ldr	r3, [pc, #296]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000d9e:	705a      	strb	r2, [r3, #1]
 8000da0:	e01b      	b.n	8000dda <configure_nrf_radio+0xe6>
	}
	else if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_1M)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	789b      	ldrb	r3, [r3, #2]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d108      	bne.n	8000dbc <configure_nrf_radio+0xc8>
	{
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_LOW_POS);
 8000daa:	4b47      	ldr	r3, [pc, #284]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000dac:	785a      	ldrb	r2, [r3, #1]
 8000dae:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000db0:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_HIGH_POS);
 8000db2:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000db4:	785a      	ldrb	r2, [r3, #1]
 8000db6:	4b44      	ldr	r3, [pc, #272]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000db8:	705a      	strb	r2, [r3, #1]
 8000dba:	e00e      	b.n	8000dda <configure_nrf_radio+0xe6>
	}
	else if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_2M)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	789b      	ldrb	r3, [r3, #2]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d10a      	bne.n	8000dda <configure_nrf_radio+0xe6>
	{
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_LOW_POS);
 8000dc4:	4b40      	ldr	r3, [pc, #256]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000dc6:	785a      	ldrb	r2, [r3, #1]
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000dca:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (1 << NRF_RADIO_RF_DR_HIGH_POS);
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000dd8:	705a      	strb	r2, [r3, #1]
	}

	cmd_packet_length = 2;
 8000dda:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000de0:	4b3a      	ldr	r3, [pc, #232]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	4838      	ldr	r0, [pc, #224]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000de8:	f000 f992 	bl	8001110 <nrf_radio_cmd_write>

	//4. Configure Data Pipes
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_EN_RXADDR;
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000dee:	2222      	movs	r2, #34	; 0x22
 8000df0:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_enable_data_pipes;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	791a      	ldrb	r2, [r3, #4]
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000df8:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000dfa:	4b34      	ldr	r3, [pc, #208]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e08:	f000 f982 	bl	8001110 <nrf_radio_cmd_write>

	//5. Configure Auto-Acknowledgements
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_EN_AA;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e0e:	2221      	movs	r2, #33	; 0x21
 8000e10:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_enable_auto_acknowledgements;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	795a      	ldrb	r2, [r3, #5]
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e18:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4828      	ldr	r0, [pc, #160]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e28:	f000 f972 	bl	8001110 <nrf_radio_cmd_write>

	//6. Configure Address Width
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_SETUP_AW;
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e2e:	2223      	movs	r2, #35	; 0x23
 8000e30:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_address_width;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	799a      	ldrb	r2, [r3, #6]
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e38:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e48:	f000 f962 	bl	8001110 <nrf_radio_cmd_write>

	//7. Configure Retransmission Parameters
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_SETUP_RETR;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e4e:	2224      	movs	r2, #36	; 0x24
 8000e50:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = (radio_config->radio_auto_retransmit_count | radio_config->radio_auto_retransmit_delay);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	79da      	ldrb	r2, [r3, #7]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7a1b      	ldrb	r3, [r3, #8]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e60:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e70:	f000 f94e 	bl	8001110 <nrf_radio_cmd_write>

	//8. Configure Own Address (RX_ADDR_P0)
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RX_ADDR_P0;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e76:	222a      	movs	r2, #42	; 0x2a
 8000e78:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=radio_config->radio_address_width;i++)
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e009      	b.n	8000e94 <configure_nrf_radio+0x1a0>
	{
		cmd_buffer[i] = radio_config->radio_addr_p0[i];
 8000e80:	7bfa      	ldrb	r2, [r7, #15]
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	440a      	add	r2, r1
 8000e88:	7a51      	ldrb	r1, [r2, #9]
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000e8c:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=radio_config->radio_address_width;i++)
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	3301      	adds	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	799b      	ldrb	r3, [r3, #6]
 8000e98:	7bfa      	ldrb	r2, [r7, #15]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d9f0      	bls.n	8000e80 <configure_nrf_radio+0x18c>
	}
	cmd_packet_length = radio_config->radio_address_width + 1;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	799b      	ldrb	r3, [r3, #6]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000ea8:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <configure_nrf_radio+0x1d8>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000eb2:	f000 f92d 	bl	8001110 <nrf_radio_cmd_write>

	//9. Configure Peer Address (TX_ADDR)
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_TX_ADDR;
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <configure_nrf_radio+0x1d4>)
 8000eb8:	2230      	movs	r2, #48	; 0x30
 8000eba:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=radio_config->radio_address_width;i++)
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e011      	b.n	8000ee6 <configure_nrf_radio+0x1f2>
 8000ec2:	bf00      	nop
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	200000e8 	.word	0x200000e8
 8000ecc:	20000109 	.word	0x20000109
	{
		cmd_buffer[i] = radio_config->radio_addr_peer[i];
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	440a      	add	r2, r1
 8000ed8:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 8000edc:	4a43      	ldr	r2, [pc, #268]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000ede:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=radio_config->radio_address_width;i++)
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	799b      	ldrb	r3, [r3, #6]
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d9ef      	bls.n	8000ed0 <configure_nrf_radio+0x1dc>
	}
	cmd_packet_length = radio_config->radio_address_width + 1;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	799b      	ldrb	r3, [r3, #6]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <configure_nrf_radio+0x2fc>)
 8000efa:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000efc:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <configure_nrf_radio+0x2fc>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	483a      	ldr	r0, [pc, #232]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f04:	f000 f904 	bl	8001110 <nrf_radio_cmd_write>

	//10. Configure Dynamic Pay-load Length Feature for Individual Pipes
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_DYNPD;
 8000f08:	4b38      	ldr	r3, [pc, #224]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f0a:	223c      	movs	r2, #60	; 0x3c
 8000f0c:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_dynamic_payload_enable_pipes;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8000f14:	4b35      	ldr	r3, [pc, #212]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f16:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000f18:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <configure_nrf_radio+0x2fc>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <configure_nrf_radio+0x2fc>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4831      	ldr	r0, [pc, #196]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f26:	f000 f8f3 	bl	8001110 <nrf_radio_cmd_write>

	//11. Configure Feature Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_FEATURE;
 8000f2a:	4b30      	ldr	r3, [pc, #192]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f2c:	223d      	movs	r2, #61	; 0x3d
 8000f2e:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] &= 0x00;
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_dynamic_payload_length_feature << NRF_RADIO_DPL_FEATURE_BITPOS);
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	b25a      	sxtb	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b27      	ldr	r3, [pc, #156]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f4e:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_ack_payload_feature << NRF_RADIO_ACK_PAYLOAD_FEATURE_BITPOS);
 8000f50:	4b26      	ldr	r3, [pc, #152]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	b25a      	sxtb	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f68:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_dynamic_ack_feature << NRF_RADIO_DYNAMIC_ACK_FEATURE_BITPOS);
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f6c:	785a      	ldrb	r2, [r3, #1]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f7a:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <configure_nrf_radio+0x2fc>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <configure_nrf_radio+0x2fc>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4619      	mov	r1, r3
 8000f88:	4818      	ldr	r0, [pc, #96]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f8a:	f000 f8c1 	bl	8001110 <nrf_radio_cmd_write>

	//12. Configure CONFIG Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_CONFIG;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f90:	2220      	movs	r2, #32
 8000f92:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] &= 0x00;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	705a      	strb	r2, [r3, #1]
	if(radio_config->radio_mode == NRF_RADIO_MODE_TX)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <configure_nrf_radio+0x2b6>
	{
		cmd_buffer[1] = 0x0A;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000fa4:	220a      	movs	r2, #10
 8000fa6:	705a      	strb	r2, [r3, #1]
 8000fa8:	e006      	b.n	8000fb8 <configure_nrf_radio+0x2c4>
	}
	else if(radio_config->radio_mode == NRF_RADIO_MODE_RX)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d102      	bne.n	8000fb8 <configure_nrf_radio+0x2c4>
	{
		cmd_buffer[1] = 0x0B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000fb4:	220b      	movs	r2, #11
 8000fb6:	705a      	strb	r2, [r3, #1]
	}
	cmd_packet_length = 2;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <configure_nrf_radio+0x2fc>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <configure_nrf_radio+0x2fc>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <configure_nrf_radio+0x2f8>)
 8000fc6:	f000 f8a3 	bl	8001110 <nrf_radio_cmd_write>

	if(radio_config->radio_mode == NRF_RADIO_MODE_RX)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d108      	bne.n	8000fe4 <configure_nrf_radio+0x2f0>
	{
		delay_us(50);
 8000fd2:	2032      	movs	r0, #50	; 0x32
 8000fd4:	f7ff f96c 	bl	80002b0 <delay_us>
		GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_HIGH);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2102      	movs	r1, #2
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <configure_nrf_radio+0x300>)
 8000fde:	f7ff fdc3 	bl	8000b68 <GPIOWritePin>
	}

	return;
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
}
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000e8 	.word	0x200000e8
 8000ff0:	20000109 	.word	0x20000109
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <nrf_radio_get_status_register>:
		}
	}
}

uint8_t nrf_radio_get_status_register(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	uint8_t status;

	//1. Read the STATUS register (using NOP command)
	cmd_buffer[0] = NRF_RADIO_CMD_NOP;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <nrf_radio_get_status_register+0x44>)
 8001000:	22ff      	movs	r2, #255	; 0xff
 8001002:	701a      	strb	r2, [r3, #0]
	cmd_packet_length = 1;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <nrf_radio_get_status_register+0x48>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 800100a:	2200      	movs	r2, #0
 800100c:	2104      	movs	r1, #4
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <nrf_radio_get_status_register+0x4c>)
 8001010:	f7ff fdaa 	bl	8000b68 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <nrf_radio_get_status_register+0x48>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <nrf_radio_get_status_register+0x50>)
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <nrf_radio_get_status_register+0x44>)
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <nrf_radio_get_status_register+0x54>)
 800101e:	f000 f99a 	bl	8001356 <SPIMasterRecvData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 8001022:	2201      	movs	r2, #1
 8001024:	2104      	movs	r1, #4
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <nrf_radio_get_status_register+0x4c>)
 8001028:	f7ff fd9e 	bl	8000b68 <GPIOWritePin>

	status = (uint8_t) rx_buffer[0];
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <nrf_radio_get_status_register+0x50>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	71fb      	strb	r3, [r7, #7]

	return status;
 8001032:	79fb      	ldrb	r3, [r7, #7]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200000e8 	.word	0x200000e8
 8001040:	20000109 	.word	0x20000109
 8001044:	40020000 	.word	0x40020000
 8001048:	200000c8 	.word	0x200000c8
 800104c:	40003800 	.word	0x40003800

08001050 <nrf_radio_get_interrupt_source>:

uint8_t nrf_radio_get_interrupt_source(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	uint8_t status, interrupt_source;

	//1. Read the STATUS register
	status = nrf_radio_get_status_register();
 8001056:	f7ff ffcf 	bl	8000ff8 <nrf_radio_get_status_register>
 800105a:	4603      	mov	r3, r0
 800105c:	71bb      	strb	r3, [r7, #6]

	if(status & NRF_RADIO_INT_SRC_TX_DS_BITPOS)
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	f003 0320 	and.w	r3, r3, #32
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <nrf_radio_get_interrupt_source+0x1e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_TX_DS;
 8001068:	2300      	movs	r3, #0
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	e011      	b.n	8001092 <nrf_radio_get_interrupt_source+0x42>
	}
	else if(status & NRF_RADIO_INT_SRC_RX_DR_BITPOS)
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <nrf_radio_get_interrupt_source+0x2e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_RX_DR;
 8001078:	2301      	movs	r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	e009      	b.n	8001092 <nrf_radio_get_interrupt_source+0x42>
	}
	else if(status & NRF_RADIO_INT_SRC_MAX_RT_BITPOS)
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <nrf_radio_get_interrupt_source+0x3e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_MAX_RT;
 8001088:	2302      	movs	r3, #2
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	e001      	b.n	8001092 <nrf_radio_get_interrupt_source+0x42>
	}
	else
	{
		interrupt_source = NRF_RADIO_INT_SRC_NONE;
 800108e:	2303      	movs	r3, #3
 8001090:	71fb      	strb	r3, [r7, #7]
	}

	return interrupt_source;
 8001092:	79fb      	ldrb	r3, [r7, #7]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <nrf_radio_send_packet_to_fifo>:

	return length;
}

void nrf_radio_send_packet_to_fifo(uint8_t *buffer,uint8_t length,uint8_t ack_policy)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
 80010a8:	4613      	mov	r3, r2
 80010aa:	70bb      	strb	r3, [r7, #2]
	uint8_t i;

	if(ack_policy == NRF_RADIO_ACK)
 80010ac:	78bb      	ldrb	r3, [r7, #2]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <nrf_radio_send_packet_to_fifo+0x1e>
	{
		cmd_buffer[0] = NRF_RADIO_CMD_W_TX_PAYLOAD;
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <nrf_radio_send_packet_to_fifo+0x6c>)
 80010b4:	22a0      	movs	r2, #160	; 0xa0
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e005      	b.n	80010c6 <nrf_radio_send_packet_to_fifo+0x2a>
	}
	else if(ack_policy == NRF_RADIO_NO_ACK)
 80010ba:	78bb      	ldrb	r3, [r7, #2]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d102      	bne.n	80010c6 <nrf_radio_send_packet_to_fifo+0x2a>
	{
		cmd_buffer[0] = NRF_RADIO_CMD_W_TX_PAYLOAD_NOACK;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <nrf_radio_send_packet_to_fifo+0x6c>)
 80010c2:	22b0      	movs	r2, #176	; 0xb0
 80010c4:	701a      	strb	r2, [r3, #0]
	}

	for(i=1;i<=length;i++)
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e00a      	b.n	80010e2 <nrf_radio_send_packet_to_fifo+0x46>
	{
		cmd_buffer[i] = buffer[i-1];
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	441a      	add	r2, r3
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	7811      	ldrb	r1, [r2, #0]
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <nrf_radio_send_packet_to_fifo+0x6c>)
 80010da:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=length;i++)
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	3301      	adds	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d9f0      	bls.n	80010cc <nrf_radio_send_packet_to_fifo+0x30>
	}

	cmd_packet_length = length + 1;
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	3301      	adds	r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <nrf_radio_send_packet_to_fifo+0x70>)
 80010f2:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <nrf_radio_send_packet_to_fifo+0x70>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <nrf_radio_send_packet_to_fifo+0x6c>)
 80010fc:	f000 f808 	bl	8001110 <nrf_radio_cmd_write>

	return;
 8001100:	bf00      	nop
}
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200000e8 	.word	0x200000e8
 800110c:	20000109 	.word	0x20000109

08001110 <nrf_radio_cmd_write>:

void nrf_radio_cmd_write(uint8_t *buffer,uint8_t length)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 800111c:	2200      	movs	r2, #0
 800111e:	2104      	movs	r1, #4
 8001120:	4808      	ldr	r0, [pc, #32]	; (8001144 <nrf_radio_cmd_write+0x34>)
 8001122:	f7ff fd21 	bl	8000b68 <GPIOWritePin>
	SPISendData(SPI_DEV,buffer,length);
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	461a      	mov	r2, r3
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <nrf_radio_cmd_write+0x38>)
 800112e:	f000 f8e5 	bl	80012fc <SPISendData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 8001132:	2201      	movs	r2, #1
 8001134:	2104      	movs	r1, #4
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <nrf_radio_cmd_write+0x34>)
 8001138:	f7ff fd16 	bl	8000b68 <GPIOWritePin>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40020000 	.word	0x40020000
 8001148:	40003800 	.word	0x40003800

0800114c <nrf_radio_flush_tx>:

void nrf_radio_flush_tx(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	cmd_buffer[0] = NRF_RADIO_CMD_FLUSH_TX;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <nrf_radio_flush_tx+0x20>)
 8001152:	22e1      	movs	r2, #225	; 0xe1
 8001154:	701a      	strb	r2, [r3, #0]
	cmd_packet_length = 1;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <nrf_radio_flush_tx+0x24>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <nrf_radio_flush_tx+0x24>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	4802      	ldr	r0, [pc, #8]	; (800116c <nrf_radio_flush_tx+0x20>)
 8001164:	f7ff ffd4 	bl	8001110 <nrf_radio_cmd_write>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000e8 	.word	0x200000e8
 8001170:	20000109 	.word	0x20000109

08001174 <nrf_radio_transmit_packet_interrupt>:

void nrf_radio_transmit_packet_interrupt(uint8_t *buffer,uint8_t length,uint8_t ack_policy)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
 8001180:	4613      	mov	r3, r2
 8001182:	70bb      	strb	r3, [r7, #2]
	//1. Send packet to radio using SPI interface
	nrf_radio_send_packet_to_fifo(buffer,length,ack_policy);
 8001184:	78ba      	ldrb	r2, [r7, #2]
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff86 	bl	800109c <nrf_radio_send_packet_to_fifo>

	//2. Pulse the PTX CE line for more than 10us
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_HIGH);
 8001190:	2201      	movs	r2, #1
 8001192:	2102      	movs	r1, #2
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <nrf_radio_transmit_packet_interrupt+0x40>)
 8001196:	f7ff fce7 	bl	8000b68 <GPIOWritePin>
	delay_us(10);
 800119a:	200a      	movs	r0, #10
 800119c:	f7ff f888 	bl	80002b0 <delay_us>
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_LOW);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2102      	movs	r1, #2
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <nrf_radio_transmit_packet_interrupt+0x40>)
 80011a6:	f7ff fcdf 	bl	8000b68 <GPIOWritePin>

	return;
 80011aa:	bf00      	nop
}
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020000 	.word	0x40020000

080011b8 <SPIPeriConfig>:
 */

#include "spi_driver.h"

void SPIPeriConfig(uint32_t *SPIAddress, struct SPI_Config_t *pSPIConfig)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

	// 1. Configuring CPHA
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPHA);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0201 	bic.w	r2, r3, #1
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPhase << SPI_CR1_CPHA);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	7852      	ldrb	r2, [r2, #1]
 80011da:	431a      	orrs	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	601a      	str	r2, [r3, #0]

	//2. Configuring CPOL
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPOL);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 0202 	bic.w	r2, r3, #2
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPol << SPI_CR1_CPOL);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	0052      	lsls	r2, r2, #1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	601a      	str	r2, [r3, #0]

	//3. Configuring SPI Device Mode

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_MSTR);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 0204 	bic.w	r2, r3, #4
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDeviceMode << SPI_CR1_MSTR);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	7892      	ldrb	r2, [r2, #2]
 8001210:	0092      	lsls	r2, r2, #2
 8001212:	431a      	orrs	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	601a      	str	r2, [r3, #0]

	//4. Configuring SPI Clock Frequency
	pSPI->SPI_CR1 &= ~(0x7 << SPI_CR1_BR);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockFreq << SPI_CR1_BR);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	7912      	ldrb	r2, [r2, #4]
 800122c:	00d2      	lsls	r2, r2, #3
 800122e:	431a      	orrs	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	601a      	str	r2, [r3, #0]

	//5. Configuring SPI Data Frame Format
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_DFF);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDataFrameFormat << SPI_CR1_DFF);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	7952      	ldrb	r2, [r2, #5]
 8001248:	02d2      	lsls	r2, r2, #11
 800124a:	431a      	orrs	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	601a      	str	r2, [r3, #0]

	//6. Configuring the Software Slave Management
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSM);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISoftwareSlaveManagement << SPI_CR1_SSM);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	7992      	ldrb	r2, [r2, #6]
 8001264:	0252      	lsls	r2, r2, #9
 8001266:	431a      	orrs	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	601a      	str	r2, [r3, #0]

	//7. Configuring the SSI Bit
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISSIFlag << SPI_CR1_SSI);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	79d2      	ldrb	r2, [r2, #7]
 8001280:	0212      	lsls	r2, r2, #8
 8001282:	431a      	orrs	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	601a      	str	r2, [r3, #0]

	//8. Configuring the SSOE Bit
	pSPI->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f023 0204 	bic.w	r2, r3, #4
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	605a      	str	r2, [r3, #4]
	pSPI->SPI_CR2 |= (pSPIConfig->SPISSOEFlag << SPI_CR2_SSOE);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	7a12      	ldrb	r2, [r2, #8]
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	431a      	orrs	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	605a      	str	r2, [r3, #4]


}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <SPIEnable>:

void SPIEnable(uint32_t *SPIAddress)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

	pSPI->SPI_CR1 |= (1 << SPI_CR1_SPE);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	601a      	str	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <SPIGetFlags>:

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
}

uint8_t SPIGetFlags(uint32_t *SPIAddress, uint8_t Flag)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60fb      	str	r3, [r7, #12]

	return ((pSPI->SPI_SR >> Flag) & 0x1);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3

}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <SPISendData>:

void SPISendData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	4613      	mov	r3, r2
 8001308:	71fb      	strb	r3, [r7, #7]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	while(len > 0) {
 800130e:	e012      	b.n	8001336 <SPISendData+0x3a>

		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8001310:	bf00      	nop
 8001312:	2101      	movs	r1, #1
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7ff ffdb 	bl	80012d0 <SPIGetFlags>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f8      	beq.n	8001312 <SPISendData+0x16>

		pSPI->SPI_DR = *TxBuf;
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	60da      	str	r2, [r3, #12]
		TxBuf++;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3301      	adds	r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
		len--;
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	3b01      	subs	r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
	while(len > 0) {
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e9      	bne.n	8001310 <SPISendData+0x14>
	}

	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE)); //Waiting until the last byte is completely transmitted
 800133c:	bf00      	nop
 800133e:	2101      	movs	r1, #1
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f7ff ffc5 	bl	80012d0 <SPIGetFlags>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f8      	beq.n	800133e <SPISendData+0x42>
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <SPIMasterRecvData>:
		len--;
	}
}

void SPIMasterRecvData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t *RxBuf, uint8_t len)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	//Clearing the SPI receive buffer before transmitting the data
	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8001368:	bf00      	nop
 800136a:	2101      	movs	r1, #1
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff ffaf 	bl	80012d0 <SPIGetFlags>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f8      	beq.n	800136a <SPIMasterRecvData+0x14>

	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 8001378:	e004      	b.n	8001384 <SPIMasterRecvData+0x2e>
		*RxBuf = pSPI->SPI_DR;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	701a      	strb	r2, [r3, #0]
	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 8001384:	2100      	movs	r1, #0
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f7ff ffa2 	bl	80012d0 <SPIGetFlags>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f3      	bne.n	800137a <SPIMasterRecvData+0x24>

	while(len > 0) {
 8001392:	e022      	b.n	80013da <SPIMasterRecvData+0x84>
		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8001394:	bf00      	nop
 8001396:	2101      	movs	r1, #1
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff ff99 	bl	80012d0 <SPIGetFlags>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f8      	beq.n	8001396 <SPIMasterRecvData+0x40>

		pSPI->SPI_DR = *TxBuf;
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	60da      	str	r2, [r3, #12]
		TxBuf++;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]

		// Waiting for RX Buffer to be full
		while(!SPIGetFlags(SPIAddress,SPI_SR_RXNE));
 80013b4:	bf00      	nop
 80013b6:	2100      	movs	r1, #0
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f7ff ff89 	bl	80012d0 <SPIGetFlags>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f8      	beq.n	80013b6 <SPIMasterRecvData+0x60>

		*RxBuf = pSPI->SPI_DR;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3301      	adds	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
		len--;
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	70fb      	strb	r3, [r7, #3]
	while(len > 0) {
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1d9      	bne.n	8001394 <SPIMasterRecvData+0x3e>
	}

	return;
 80013e0:	bf00      	nop
}
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a88      	ldr	r2, [pc, #544]	; (8001614 <EnablePeriClk+0x22c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d108      	bne.n	800140a <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80013f8:	4b87      	ldr	r3, [pc, #540]	; (8001618 <EnablePeriClk+0x230>)
 80013fa:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8001408:	e19b      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a83      	ldr	r2, [pc, #524]	; (800161c <EnablePeriClk+0x234>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d108      	bne.n	8001424 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001412:	4b81      	ldr	r3, [pc, #516]	; (8001618 <EnablePeriClk+0x230>)
 8001414:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f043 0202 	orr.w	r2, r3, #2
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	601a      	str	r2, [r3, #0]
}
 8001422:	e18e      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a7e      	ldr	r2, [pc, #504]	; (8001620 <EnablePeriClk+0x238>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d108      	bne.n	800143e <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800142c:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <EnablePeriClk+0x230>)
 800142e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f043 0204 	orr.w	r2, r3, #4
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	e181      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a78      	ldr	r2, [pc, #480]	; (8001624 <EnablePeriClk+0x23c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d108      	bne.n	8001458 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001446:	4b74      	ldr	r3, [pc, #464]	; (8001618 <EnablePeriClk+0x230>)
 8001448:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f043 0208 	orr.w	r2, r3, #8
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	e174      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a73      	ldr	r2, [pc, #460]	; (8001628 <EnablePeriClk+0x240>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d108      	bne.n	8001472 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001460:	4b6d      	ldr	r3, [pc, #436]	; (8001618 <EnablePeriClk+0x230>)
 8001462:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f043 0210 	orr.w	r2, r3, #16
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	e167      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a6d      	ldr	r2, [pc, #436]	; (800162c <EnablePeriClk+0x244>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d108      	bne.n	800148c <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800147a:	4b67      	ldr	r3, [pc, #412]	; (8001618 <EnablePeriClk+0x230>)
 800147c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f043 0220 	orr.w	r2, r3, #32
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	e15a      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a68      	ldr	r2, [pc, #416]	; (8001630 <EnablePeriClk+0x248>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d108      	bne.n	80014a6 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001494:	4b60      	ldr	r3, [pc, #384]	; (8001618 <EnablePeriClk+0x230>)
 8001496:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	e14d      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a62      	ldr	r2, [pc, #392]	; (8001634 <EnablePeriClk+0x24c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d108      	bne.n	80014c0 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80014ae:	4b5a      	ldr	r3, [pc, #360]	; (8001618 <EnablePeriClk+0x230>)
 80014b0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]
}
 80014be:	e140      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a5d      	ldr	r2, [pc, #372]	; (8001638 <EnablePeriClk+0x250>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d108      	bne.n	80014da <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80014c8:	4b53      	ldr	r3, [pc, #332]	; (8001618 <EnablePeriClk+0x230>)
 80014ca:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	601a      	str	r2, [r3, #0]
}
 80014d8:	e133      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a57      	ldr	r2, [pc, #348]	; (800163c <EnablePeriClk+0x254>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d108      	bne.n	80014f4 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80014e2:	4b57      	ldr	r3, [pc, #348]	; (8001640 <EnablePeriClk+0x258>)
 80014e4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	e126      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a53      	ldr	r2, [pc, #332]	; (8001644 <EnablePeriClk+0x25c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d108      	bne.n	800150e <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80014fc:	4b52      	ldr	r3, [pc, #328]	; (8001648 <EnablePeriClk+0x260>)
 80014fe:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	e119      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4e      	ldr	r2, [pc, #312]	; (800164c <EnablePeriClk+0x264>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d108      	bne.n	8001528 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <EnablePeriClk+0x260>)
 8001518:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]
}
 8001526:	e10c      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a49      	ldr	r2, [pc, #292]	; (8001650 <EnablePeriClk+0x268>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d108      	bne.n	8001542 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001530:	4b45      	ldr	r3, [pc, #276]	; (8001648 <EnablePeriClk+0x260>)
 8001532:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	e0ff      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a43      	ldr	r2, [pc, #268]	; (8001654 <EnablePeriClk+0x26c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d108      	bne.n	800155c <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <EnablePeriClk+0x260>)
 800154c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	e0f2      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a3e      	ldr	r2, [pc, #248]	; (8001658 <EnablePeriClk+0x270>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d108      	bne.n	8001576 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <EnablePeriClk+0x260>)
 8001566:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	e0e5      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a38      	ldr	r2, [pc, #224]	; (800165c <EnablePeriClk+0x274>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d108      	bne.n	8001590 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <EnablePeriClk+0x258>)
 8001580:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f043 0210 	orr.w	r2, r3, #16
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	e0d8      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a33      	ldr	r2, [pc, #204]	; (8001660 <EnablePeriClk+0x278>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d108      	bne.n	80015aa <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <EnablePeriClk+0x260>)
 800159a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	e0cb      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <EnablePeriClk+0x27c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d108      	bne.n	80015c4 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <EnablePeriClk+0x260>)
 80015b4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	601a      	str	r2, [r3, #0]
}
 80015c2:	e0be      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a28      	ldr	r2, [pc, #160]	; (8001668 <EnablePeriClk+0x280>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d108      	bne.n	80015de <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <EnablePeriClk+0x260>)
 80015ce:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	601a      	str	r2, [r3, #0]
}
 80015dc:	e0b1      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a22      	ldr	r2, [pc, #136]	; (800166c <EnablePeriClk+0x284>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d108      	bne.n	80015f8 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <EnablePeriClk+0x260>)
 80015e8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	601a      	str	r2, [r3, #0]
}
 80015f6:	e0a4      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <EnablePeriClk+0x288>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d139      	bne.n	8001674 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <EnablePeriClk+0x258>)
 8001602:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f043 0220 	orr.w	r2, r3, #32
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	601a      	str	r2, [r3, #0]
}
 8001610:	e097      	b.n	8001742 <EnablePeriClk+0x35a>
 8001612:	bf00      	nop
 8001614:	40020000 	.word	0x40020000
 8001618:	40023830 	.word	0x40023830
 800161c:	40020400 	.word	0x40020400
 8001620:	40020800 	.word	0x40020800
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40021000 	.word	0x40021000
 800162c:	40021400 	.word	0x40021400
 8001630:	40021800 	.word	0x40021800
 8001634:	40021c00 	.word	0x40021c00
 8001638:	40022000 	.word	0x40022000
 800163c:	40013000 	.word	0x40013000
 8001640:	40023844 	.word	0x40023844
 8001644:	40003800 	.word	0x40003800
 8001648:	40023840 	.word	0x40023840
 800164c:	40003c00 	.word	0x40003c00
 8001650:	40005400 	.word	0x40005400
 8001654:	40005800 	.word	0x40005800
 8001658:	40005c00 	.word	0x40005c00
 800165c:	40011000 	.word	0x40011000
 8001660:	40004400 	.word	0x40004400
 8001664:	40004800 	.word	0x40004800
 8001668:	40004c00 	.word	0x40004c00
 800166c:	40005000 	.word	0x40005000
 8001670:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a35      	ldr	r2, [pc, #212]	; (800174c <EnablePeriClk+0x364>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d108      	bne.n	800168e <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <EnablePeriClk+0x368>)
 800167e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f043 0210 	orr.w	r2, r3, #16
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	e059      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a30      	ldr	r2, [pc, #192]	; (8001754 <EnablePeriClk+0x36c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d108      	bne.n	80016a8 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <EnablePeriClk+0x368>)
 8001698:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f043 0220 	orr.w	r2, r3, #32
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	601a      	str	r2, [r3, #0]
}
 80016a6:	e04c      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a2b      	ldr	r2, [pc, #172]	; (8001758 <EnablePeriClk+0x370>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d108      	bne.n	80016c2 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <EnablePeriClk+0x374>)
 80016b2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	e03f      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a26      	ldr	r2, [pc, #152]	; (8001760 <EnablePeriClk+0x378>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d108      	bne.n	80016dc <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <EnablePeriClk+0x374>)
 80016cc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	e032      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e2:	d108      	bne.n	80016f6 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <EnablePeriClk+0x368>)
 80016e6:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	e025      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <EnablePeriClk+0x37c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d108      	bne.n	8001710 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <EnablePeriClk+0x368>)
 8001700:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f043 0202 	orr.w	r2, r3, #2
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	601a      	str	r2, [r3, #0]
}
 800170e:	e018      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <EnablePeriClk+0x380>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d108      	bne.n	800172a <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <EnablePeriClk+0x368>)
 800171a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f043 0204 	orr.w	r2, r3, #4
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	e00b      	b.n	8001742 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a0f      	ldr	r2, [pc, #60]	; (800176c <EnablePeriClk+0x384>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d107      	bne.n	8001742 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <EnablePeriClk+0x368>)
 8001734:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f043 0208 	orr.w	r2, r3, #8
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	40001000 	.word	0x40001000
 8001750:	40023840 	.word	0x40023840
 8001754:	40001400 	.word	0x40001400
 8001758:	40026000 	.word	0x40026000
 800175c:	40023830 	.word	0x40023830
 8001760:	40026400 	.word	0x40026400
 8001764:	40000400 	.word	0x40000400
 8001768:	40000800 	.word	0x40000800
 800176c:	40000c00 	.word	0x40000c00

08001770 <NVIC_EnableIRQ>:
				*pRCCPeriClkReg &= ~(1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	b2db      	uxtb	r3, r3
 8001780:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001792:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001796:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	431a      	orrs	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	601a      	str	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <NVIC_IRQSetPending>:

		*pNVIC_ICER |= (1 << NVICBitPos);
}

void NVIC_IRQSetPending(uint8_t IRQNum)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISPR;
	uint32_t NVICRegisterNum = IRQNum/32;
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	613b      	str	r3, [r7, #16]

	pNVIC_ISPR = (uint32_t*) NVIC_ISPR_BASE_ADDR + NVICRegisterNum;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80017d6:	f503 4362 	add.w	r3, r3, #57856	; 0xe200
 80017da:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISPR |=  (1 << NVICBitPos);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	fa01 f202 	lsl.w	r2, r1, r2
 80017e8:	431a      	orrs	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	601a      	str	r2, [r3, #0]

	return;
 80017ee:	bf00      	nop
}
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <USART_Init>:
#include <stdio.h>

extern void USART_RXNEInterruptCallback(uint8_t data);

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d110      	bne.n	800182a <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0208 	orr.w	r2, r2, #8
 8001816:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0204 	bic.w	r2, r2, #4
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	e028      	b.n	800187c <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d110      	bne.n	8001854 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0208 	bic.w	r2, r2, #8
 8001840:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0204 	orr.w	r2, r2, #4
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	e013      	b.n	800187c <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d10f      	bne.n	800187c <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0208 	orr.w	r2, r2, #8
 800186a:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0204 	orr.w	r2, r2, #4
 800187a:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d108      	bne.n	8001896 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	e00b      	b.n	80018ae <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80018ac:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80018bc:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6919      	ldr	r1, [r3, #16]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	031a      	lsls	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d108      	bne.n	80018ec <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	e028      	b.n	800193e <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d110      	bne.n	8001916 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001902:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	e013      	b.n	800193e <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d10f      	bne.n	800193e <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800192c:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193c:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	4619      	mov	r1, r3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f8a7 	bl	8001a98 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d110      	bne.n	8001974 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001960:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695a      	ldr	r2, [r3, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001970:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8001972:	e03d      	b.n	80019f0 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d110      	bne.n	800199e <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198a:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800199a:	615a      	str	r2, [r3, #20]
}
 800199c:	e028      	b.n	80019f0 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d110      	bne.n	80019c8 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019b4:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c4:	615a      	str	r2, [r3, #20]
}
 80019c6:	e013      	b.n	80019f0 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d10f      	bne.n	80019f0 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019de:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ee:	615a      	str	r2, [r3, #20]
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a0e:	60da      	str	r2, [r3, #12]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8001a50:	e012      	b.n	8001a78 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8001a52:	bf00      	nop
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff ffdf 	bl	8001a1a <USART_GetFlagStatus>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f8      	beq.n	8001a54 <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
		Len--;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1e9      	bne.n	8001a52 <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 8001a7e:	bf00      	nop
 8001a80:	2140      	movs	r1, #64	; 0x40
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7ff ffc9 	bl	8001a1a <USART_GetFlagStatus>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f8      	beq.n	8001a80 <USART_SendData+0x3c>
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8001aa2:	f240 6383 	movw	r3, #1667	; 0x683
 8001aa6:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	609a      	str	r2, [r3, #8]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e00a      	b.n	8001ae2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001acc:	f3af 8000 	nop.w
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	60ba      	str	r2, [r7, #8]
 8001ad8:	b2ca      	uxtb	r2, r1
 8001ada:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbf0      	blt.n	8001acc <_read+0x12>
  }

  return len;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e009      	b.n	8001b1a <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	60ba      	str	r2, [r7, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fcb8 	bl	8000484 <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbf1      	blt.n	8001b06 <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_close>:

int _close(int file)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b52:	605a      	str	r2, [r3, #4]
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <_isatty>:

int _isatty(int file)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <_sbrk+0x5c>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_sbrk+0x60>)
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_sbrk+0x64>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <_sbrk+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bbc:	f000 f998 	bl	8001ef0 <__errno>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bca:	e009      	b.n	8001be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <_sbrk+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20020000 	.word	0x20020000
 8001bec:	00000400 	.word	0x00000400
 8001bf0:	2000010c 	.word	0x2000010c
 8001bf4:	20000190 	.word	0x20000190

08001bf8 <main>:
static void disable_interrupts(void);
static void enable_interrupts(void);
static void nrf_radio_enable_irq(void);

int main(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b090      	sub	sp, #64	; 0x40
 8001bfc:	af00      	add	r7, sp, #0
	uint8_t i;

	//NRF24L01 Radio Related Variables
	struct NRF_RADIO_CONFIG_t radio_config;
	uint8_t addr[] = {0xA1,0xA2,0xA3,0xA4,0xA5};      //nRF Radio Link Address
 8001bfe:	4a38      	ldr	r2, [pc, #224]	; (8001ce0 <main+0xe8>)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c06:	6018      	str	r0, [r3, #0]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	7019      	strb	r1, [r3, #0]

	disable_interrupts();
 8001c0c:	f000 f874 	bl	8001cf8 <disable_interrupts>

	//Configure the Timer
	configure_delay_timer();
 8001c10:	f7fe fb66 	bl	80002e0 <configure_delay_timer>

	//Configure the UART Peripheral
	configure_uart();
 8001c14:	f7fe fbd8 	bl	80003c8 <configure_uart>

	//Configure the SPI Port connecting to NRF24L01 Radio
	configure_spi();
 8001c18:	f7fe fb84 	bl	8000324 <configure_spi>

	//Configure the NRF24L01 Radio
	memset(&radio_config,0,sizeof(radio_config));
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2230      	movs	r2, #48	; 0x30
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f98d 	bl	8001f44 <memset>
	radio_config.radio_mode = NRF_RADIO_MODE_TX;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	733b      	strb	r3, [r7, #12]
	radio_config.radio_channel = 90;
 8001c2e:	235a      	movs	r3, #90	; 0x5a
 8001c30:	737b      	strb	r3, [r7, #13]
	radio_config.radio_data_rate = NRF_RADIO_DATA_RATE_250K;
 8001c32:	2300      	movs	r3, #0
 8001c34:	73bb      	strb	r3, [r7, #14]
	radio_config.radio_pa_level = NRF_RADIO_PA_LEVEL_3;
 8001c36:	2303      	movs	r3, #3
 8001c38:	73fb      	strb	r3, [r7, #15]
	radio_config.radio_enable_data_pipes = (NRF_RADIO_ERX_P0);
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	743b      	strb	r3, [r7, #16]
	radio_config.radio_enable_auto_acknowledgements = (NRF_RADIO_ENAA_P0);
 8001c3e:	2301      	movs	r3, #1
 8001c40:	747b      	strb	r3, [r7, #17]
	radio_config.radio_address_width = NRF_RADIO_ADDRESS_WIDTH_5B;
 8001c42:	2303      	movs	r3, #3
 8001c44:	74bb      	strb	r3, [r7, #18]
	radio_config.radio_auto_retransmit_count = NRF_RADIO_ARC_3;
 8001c46:	2303      	movs	r3, #3
 8001c48:	74fb      	strb	r3, [r7, #19]
	radio_config.radio_auto_retransmit_delay = NRF_RADIO_ARD_1000US;
 8001c4a:	2330      	movs	r3, #48	; 0x30
 8001c4c:	753b      	strb	r3, [r7, #20]
	memcpy(&radio_config.radio_addr_p0, addr, sizeof(addr));
 8001c4e:	f107 0315 	add.w	r3, r7, #21
 8001c52:	1d3a      	adds	r2, r7, #4
 8001c54:	6810      	ldr	r0, [r2, #0]
 8001c56:	6018      	str	r0, [r3, #0]
 8001c58:	7912      	ldrb	r2, [r2, #4]
 8001c5a:	711a      	strb	r2, [r3, #4]
	memcpy(&radio_config.radio_addr_peer, addr, sizeof(addr));
 8001c5c:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8001c60:	1d3a      	adds	r2, r7, #4
 8001c62:	6810      	ldr	r0, [r2, #0]
 8001c64:	6018      	str	r0, [r3, #0]
 8001c66:	7912      	ldrb	r2, [r2, #4]
 8001c68:	711a      	strb	r2, [r3, #4]
	radio_config.radio_dynamic_payload_length_feature = NRF_RADIO_DPL_FEATURE_ENABLE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	radio_config.radio_dynamic_payload_enable_pipes = NRF_RADIO_DPL_P0;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	radio_config.radio_ack_payload_feature = NRF_RADIO_ACK_PAYLOAD_FEATURE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	radio_config.radio_dynamic_ack_feature = NRF_RADIO_DYNAMIC_ACK_FEATURE_ENABLE;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	configure_nrf_radio(&radio_config);
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f834 	bl	8000cf4 <configure_nrf_radio>

	nrf_radio_enable_irq();
 8001c8c:	f000 f842 	bl	8001d14 <nrf_radio_enable_irq>

	//Prepare the Transmit Queue
	for(i=0;i<TX_QUEUE_SIZE;i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c96:	e00c      	b.n	8001cb2 <main+0xba>
	{
		transmit_queue[i] = i+1;
 8001c98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c9c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001ca0:	3201      	adds	r2, #1
 8001ca2:	b2d1      	uxtb	r1, r2
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <main+0xec>)
 8001ca6:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<TX_QUEUE_SIZE;i++)
 8001ca8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cac:	3301      	adds	r3, #1
 8001cae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001cb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cb6:	2b63      	cmp	r3, #99	; 0x63
 8001cb8:	d9ee      	bls.n	8001c98 <main+0xa0>
	}

	printf("Beginning Transmission\r\n");
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <main+0xf0>)
 8001cbc:	f000 faae 	bl	800221c <puts>

	delay_us(1000000);
 8001cc0:	480a      	ldr	r0, [pc, #40]	; (8001cec <main+0xf4>)
 8001cc2:	f7fe faf5 	bl	80002b0 <delay_us>

	//Start the Packet Transmission
	transmit_begin = TRUE;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <main+0xf8>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
	transmit_count = 1;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <main+0xfc>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
	NVIC_IRQSetPending(NRF_RADIO_IRQ_NUM);
 8001cd2:	2006      	movs	r0, #6
 8001cd4:	f7ff fd6e 	bl	80017b4 <NVIC_IRQSetPending>

	enable_interrupts();
 8001cd8:	f000 f815 	bl	8001d06 <enable_interrupts>

	while(1)
 8001cdc:	e7fe      	b.n	8001cdc <main+0xe4>
 8001cde:	bf00      	nop
 8001ce0:	08002f7c 	.word	0x08002f7c
 8001ce4:	20000110 	.word	0x20000110
 8001ce8:	08002f64 	.word	0x08002f64
 8001cec:	000f4240 	.word	0x000f4240
 8001cf0:	20000178 	.word	0x20000178
 8001cf4:	20000174 	.word	0x20000174

08001cf8 <disable_interrupts>:

	return 0;
}

static void disable_interrupts(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	__asm volatile ("CPSID I");
 8001cfc:	b672      	cpsid	i

	return;
 8001cfe:	bf00      	nop
}
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <enable_interrupts>:

static void enable_interrupts(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
	__asm volatile ("CPSIE I");
 8001d0a:	b662      	cpsie	i

	return;
 8001d0c:	bf00      	nop
}
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <nrf_radio_enable_irq>:

static void nrf_radio_enable_irq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	//Configure and Enable the IRQ in EXTI Controller and NVIC
	configure_external_gpio_interrupt(RADIO_PORT,IRQ_PIN,EXTI_FALLING_TRIGGER,NRF_RADIO_IRQ_NUM);
 8001d18:	2306      	movs	r3, #6
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4802      	ldr	r0, [pc, #8]	; (8001d28 <nrf_radio_enable_irq+0x14>)
 8001d20:	f7fe fbc2 	bl	80004a8 <configure_external_gpio_interrupt>

	return;
 8001d24:	bf00      	nop
}
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40020000 	.word	0x40020000

08001d2c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
	uint8_t status, interrupt_source;
	uint8_t tbuf[4];

	uint32_t *pEXTI_PR = (uint32_t *) EXTI_PR_ADDR;
 8001d32:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <EXTI0_IRQHandler+0x148>)
 8001d34:	60fb      	str	r3, [r7, #12]

	//Clearing the Interrupt in EXTI
	*pEXTI_PR |= (1 << IRQ_PIN);	//Clearing the EXTI_PR Register
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	601a      	str	r2, [r3, #0]

	disable_interrupts();
 8001d42:	f7ff ffd9 	bl	8001cf8 <disable_interrupts>

	if(transmit_begin == TRUE)					//Transmit the first packet unconditionally
 8001d46:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <EXTI0_IRQHandler+0x14c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d124      	bne.n	8001d98 <EXTI0_IRQHandler+0x6c>
	{
		printf("Transmitting the first packet\r\n");
 8001d4e:	484b      	ldr	r0, [pc, #300]	; (8001e7c <EXTI0_IRQHandler+0x150>)
 8001d50:	f000 fa64 	bl	800221c <puts>
		transmit_begin = FALSE;
 8001d54:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <EXTI0_IRQHandler+0x14c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]

		tbuf[0] = transmit_queue[transmit_count-1];
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <EXTI0_IRQHandler+0x158>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	713b      	strb	r3, [r7, #4]
		tbuf[1] = transmit_queue[transmit_count-1];
 8001d66:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	4a45      	ldr	r2, [pc, #276]	; (8001e84 <EXTI0_IRQHandler+0x158>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	717b      	strb	r3, [r7, #5]
		tbuf[2] = transmit_queue[transmit_count-1];
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	4a42      	ldr	r2, [pc, #264]	; (8001e84 <EXTI0_IRQHandler+0x158>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	71bb      	strb	r3, [r7, #6]
		tbuf[3] = transmit_queue[transmit_count-1];
 8001d7e:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	4a3f      	ldr	r2, [pc, #252]	; (8001e84 <EXTI0_IRQHandler+0x158>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	71fb      	strb	r3, [r7, #7]
		nrf_radio_transmit_packet_interrupt(tbuf,4,NRF_RADIO_ACK);
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2104      	movs	r1, #4
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f9ef 	bl	8001174 <nrf_radio_transmit_packet_interrupt>
 8001d96:	e067      	b.n	8001e68 <EXTI0_IRQHandler+0x13c>
	}
	else
	{
		//Check the status of previous transmission
		interrupt_source = nrf_radio_get_interrupt_source();
 8001d98:	f7ff f95a 	bl	8001050 <nrf_radio_get_interrupt_source>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	72fb      	strb	r3, [r7, #11]
		if(interrupt_source == NRF_RADIO_INT_SRC_TX_DS)
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d11f      	bne.n	8001de6 <EXTI0_IRQHandler+0xba>
		{
			status = NRF_RADIO_INT_SRC_TX_DS_BITPOS;
 8001da6:	2320      	movs	r3, #32
 8001da8:	72bb      	strb	r3, [r7, #10]
			printf("Packet %ld was transmitted successfully\r\n",transmit_count);
 8001daa:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	4835      	ldr	r0, [pc, #212]	; (8001e88 <EXTI0_IRQHandler+0x15c>)
 8001db2:	f000 f9ad 	bl	8002110 <iprintf>
			transmit_count++;
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001dbe:	6013      	str	r3, [r2, #0]

			//Clear the interrupt by writing to STATUS Register
			cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_STATUS;
 8001dc0:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <EXTI0_IRQHandler+0x160>)
 8001dc2:	2227      	movs	r2, #39	; 0x27
 8001dc4:	701a      	strb	r2, [r3, #0]
			cmd_buffer[1] = status;
 8001dc6:	4a31      	ldr	r2, [pc, #196]	; (8001e8c <EXTI0_IRQHandler+0x160>)
 8001dc8:	7abb      	ldrb	r3, [r7, #10]
 8001dca:	7053      	strb	r3, [r2, #1]
			cmd_packet_length = 2;
 8001dcc:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <EXTI0_IRQHandler+0x164>)
 8001dce:	2202      	movs	r2, #2
 8001dd0:	701a      	strb	r2, [r3, #0]
			nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <EXTI0_IRQHandler+0x164>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	482c      	ldr	r0, [pc, #176]	; (8001e8c <EXTI0_IRQHandler+0x160>)
 8001dda:	f7ff f999 	bl	8001110 <nrf_radio_cmd_write>

			delay_us(1000000);
 8001dde:	482d      	ldr	r0, [pc, #180]	; (8001e94 <EXTI0_IRQHandler+0x168>)
 8001de0:	f7fe fa66 	bl	80002b0 <delay_us>
 8001de4:	e01e      	b.n	8001e24 <EXTI0_IRQHandler+0xf8>
		}
		else if(interrupt_source == NRF_RADIO_INT_SRC_MAX_RT)
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d11b      	bne.n	8001e24 <EXTI0_IRQHandler+0xf8>
		{
			status = NRF_RADIO_INT_SRC_MAX_RT_BITPOS;
 8001dec:	2310      	movs	r3, #16
 8001dee:	72bb      	strb	r3, [r7, #10]
			printf("Packet %ld transmission failed. Retrying\r\n",transmit_count);
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4828      	ldr	r0, [pc, #160]	; (8001e98 <EXTI0_IRQHandler+0x16c>)
 8001df8:	f000 f98a 	bl	8002110 <iprintf>

			//Clear the interrupt by writing to STATUS Register
			cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_STATUS;
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <EXTI0_IRQHandler+0x160>)
 8001dfe:	2227      	movs	r2, #39	; 0x27
 8001e00:	701a      	strb	r2, [r3, #0]
			cmd_buffer[1] = status;
 8001e02:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <EXTI0_IRQHandler+0x160>)
 8001e04:	7abb      	ldrb	r3, [r7, #10]
 8001e06:	7053      	strb	r3, [r2, #1]
			cmd_packet_length = 2;
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <EXTI0_IRQHandler+0x164>)
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	701a      	strb	r2, [r3, #0]
			nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <EXTI0_IRQHandler+0x164>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	481d      	ldr	r0, [pc, #116]	; (8001e8c <EXTI0_IRQHandler+0x160>)
 8001e16:	f7ff f97b 	bl	8001110 <nrf_radio_cmd_write>

			nrf_radio_flush_tx();
 8001e1a:	f7ff f997 	bl	800114c <nrf_radio_flush_tx>

			delay_us(1000000);
 8001e1e:	481d      	ldr	r0, [pc, #116]	; (8001e94 <EXTI0_IRQHandler+0x168>)
 8001e20:	f7fe fa46 	bl	80002b0 <delay_us>
		}

		//Transmit the Next Packet
		if(transmit_count <= TX_QUEUE_SIZE)
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d81d      	bhi.n	8001e68 <EXTI0_IRQHandler+0x13c>
		{
			tbuf[0] = transmit_queue[transmit_count-1];
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <EXTI0_IRQHandler+0x158>)
 8001e34:	5cd3      	ldrb	r3, [r2, r3]
 8001e36:	713b      	strb	r3, [r7, #4]
			tbuf[1] = transmit_queue[transmit_count-1];
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	4a11      	ldr	r2, [pc, #68]	; (8001e84 <EXTI0_IRQHandler+0x158>)
 8001e40:	5cd3      	ldrb	r3, [r2, r3]
 8001e42:	717b      	strb	r3, [r7, #5]
			tbuf[2] = transmit_queue[transmit_count-1];
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <EXTI0_IRQHandler+0x158>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	71bb      	strb	r3, [r7, #6]
			tbuf[3] = transmit_queue[transmit_count-1];
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <EXTI0_IRQHandler+0x154>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <EXTI0_IRQHandler+0x158>)
 8001e58:	5cd3      	ldrb	r3, [r2, r3]
 8001e5a:	71fb      	strb	r3, [r7, #7]
			nrf_radio_transmit_packet_interrupt(tbuf,4,NRF_RADIO_ACK);
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2104      	movs	r1, #4
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f986 	bl	8001174 <nrf_radio_transmit_packet_interrupt>
		}
	}

	enable_interrupts();
 8001e68:	f7ff ff4d 	bl	8001d06 <enable_interrupts>

	return;
 8001e6c:	bf00      	nop
}
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40013c14 	.word	0x40013c14
 8001e78:	20000178 	.word	0x20000178
 8001e7c:	08002f84 	.word	0x08002f84
 8001e80:	20000174 	.word	0x20000174
 8001e84:	20000110 	.word	0x20000110
 8001e88:	08002fa4 	.word	0x08002fa4
 8001e8c:	200000e8 	.word	0x200000e8
 8001e90:	20000109 	.word	0x20000109
 8001e94:	000f4240 	.word	0x000f4240
 8001e98:	08002fd0 	.word	0x08002fd0

08001e9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ea0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea4:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ea6:	490d      	ldr	r1, [pc, #52]	; (8001edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <LoopForever+0xe>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ebc:	4c0a      	ldr	r4, [pc, #40]	; (8001ee8 <LoopForever+0x16>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eca:	f000 f817 	bl	8001efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ece:	f7ff fe93 	bl	8001bf8 <main>

08001ed2 <LoopForever>:

LoopForever:
  b LoopForever
 8001ed2:	e7fe      	b.n	8001ed2 <LoopForever>
  ldr   r0, =_estack
 8001ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001ee0:	0800309c 	.word	0x0800309c
  ldr r2, =_sbss
 8001ee4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001ee8:	2000018c 	.word	0x2000018c

08001eec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC_IRQHandler>
	...

08001ef0 <__errno>:
 8001ef0:	4b01      	ldr	r3, [pc, #4]	; (8001ef8 <__errno+0x8>)
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000

08001efc <__libc_init_array>:
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	4d0d      	ldr	r5, [pc, #52]	; (8001f34 <__libc_init_array+0x38>)
 8001f00:	4c0d      	ldr	r4, [pc, #52]	; (8001f38 <__libc_init_array+0x3c>)
 8001f02:	1b64      	subs	r4, r4, r5
 8001f04:	10a4      	asrs	r4, r4, #2
 8001f06:	2600      	movs	r6, #0
 8001f08:	42a6      	cmp	r6, r4
 8001f0a:	d109      	bne.n	8001f20 <__libc_init_array+0x24>
 8001f0c:	4d0b      	ldr	r5, [pc, #44]	; (8001f3c <__libc_init_array+0x40>)
 8001f0e:	4c0c      	ldr	r4, [pc, #48]	; (8001f40 <__libc_init_array+0x44>)
 8001f10:	f001 f81c 	bl	8002f4c <_init>
 8001f14:	1b64      	subs	r4, r4, r5
 8001f16:	10a4      	asrs	r4, r4, #2
 8001f18:	2600      	movs	r6, #0
 8001f1a:	42a6      	cmp	r6, r4
 8001f1c:	d105      	bne.n	8001f2a <__libc_init_array+0x2e>
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
 8001f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f24:	4798      	blx	r3
 8001f26:	3601      	adds	r6, #1
 8001f28:	e7ee      	b.n	8001f08 <__libc_init_array+0xc>
 8001f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f2e:	4798      	blx	r3
 8001f30:	3601      	adds	r6, #1
 8001f32:	e7f2      	b.n	8001f1a <__libc_init_array+0x1e>
 8001f34:	08003094 	.word	0x08003094
 8001f38:	08003094 	.word	0x08003094
 8001f3c:	08003094 	.word	0x08003094
 8001f40:	08003098 	.word	0x08003098

08001f44 <memset>:
 8001f44:	4402      	add	r2, r0
 8001f46:	4603      	mov	r3, r0
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <memset+0xa>
 8001f4c:	4770      	bx	lr
 8001f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f52:	e7f9      	b.n	8001f48 <memset+0x4>

08001f54 <_free_r>:
 8001f54:	b538      	push	{r3, r4, r5, lr}
 8001f56:	4605      	mov	r5, r0
 8001f58:	2900      	cmp	r1, #0
 8001f5a:	d041      	beq.n	8001fe0 <_free_r+0x8c>
 8001f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f60:	1f0c      	subs	r4, r1, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	bfb8      	it	lt
 8001f66:	18e4      	addlt	r4, r4, r3
 8001f68:	f000 fc4c 	bl	8002804 <__malloc_lock>
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <_free_r+0x90>)
 8001f6e:	6813      	ldr	r3, [r2, #0]
 8001f70:	b933      	cbnz	r3, 8001f80 <_free_r+0x2c>
 8001f72:	6063      	str	r3, [r4, #4]
 8001f74:	6014      	str	r4, [r2, #0]
 8001f76:	4628      	mov	r0, r5
 8001f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f7c:	f000 bc48 	b.w	8002810 <__malloc_unlock>
 8001f80:	42a3      	cmp	r3, r4
 8001f82:	d908      	bls.n	8001f96 <_free_r+0x42>
 8001f84:	6820      	ldr	r0, [r4, #0]
 8001f86:	1821      	adds	r1, r4, r0
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	bf01      	itttt	eq
 8001f8c:	6819      	ldreq	r1, [r3, #0]
 8001f8e:	685b      	ldreq	r3, [r3, #4]
 8001f90:	1809      	addeq	r1, r1, r0
 8001f92:	6021      	streq	r1, [r4, #0]
 8001f94:	e7ed      	b.n	8001f72 <_free_r+0x1e>
 8001f96:	461a      	mov	r2, r3
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	b10b      	cbz	r3, 8001fa0 <_free_r+0x4c>
 8001f9c:	42a3      	cmp	r3, r4
 8001f9e:	d9fa      	bls.n	8001f96 <_free_r+0x42>
 8001fa0:	6811      	ldr	r1, [r2, #0]
 8001fa2:	1850      	adds	r0, r2, r1
 8001fa4:	42a0      	cmp	r0, r4
 8001fa6:	d10b      	bne.n	8001fc0 <_free_r+0x6c>
 8001fa8:	6820      	ldr	r0, [r4, #0]
 8001faa:	4401      	add	r1, r0
 8001fac:	1850      	adds	r0, r2, r1
 8001fae:	4283      	cmp	r3, r0
 8001fb0:	6011      	str	r1, [r2, #0]
 8001fb2:	d1e0      	bne.n	8001f76 <_free_r+0x22>
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	6053      	str	r3, [r2, #4]
 8001fba:	4401      	add	r1, r0
 8001fbc:	6011      	str	r1, [r2, #0]
 8001fbe:	e7da      	b.n	8001f76 <_free_r+0x22>
 8001fc0:	d902      	bls.n	8001fc8 <_free_r+0x74>
 8001fc2:	230c      	movs	r3, #12
 8001fc4:	602b      	str	r3, [r5, #0]
 8001fc6:	e7d6      	b.n	8001f76 <_free_r+0x22>
 8001fc8:	6820      	ldr	r0, [r4, #0]
 8001fca:	1821      	adds	r1, r4, r0
 8001fcc:	428b      	cmp	r3, r1
 8001fce:	bf04      	itt	eq
 8001fd0:	6819      	ldreq	r1, [r3, #0]
 8001fd2:	685b      	ldreq	r3, [r3, #4]
 8001fd4:	6063      	str	r3, [r4, #4]
 8001fd6:	bf04      	itt	eq
 8001fd8:	1809      	addeq	r1, r1, r0
 8001fda:	6021      	streq	r1, [r4, #0]
 8001fdc:	6054      	str	r4, [r2, #4]
 8001fde:	e7ca      	b.n	8001f76 <_free_r+0x22>
 8001fe0:	bd38      	pop	{r3, r4, r5, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000017c 	.word	0x2000017c

08001fe8 <sbrk_aligned>:
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	4e0e      	ldr	r6, [pc, #56]	; (8002024 <sbrk_aligned+0x3c>)
 8001fec:	460c      	mov	r4, r1
 8001fee:	6831      	ldr	r1, [r6, #0]
 8001ff0:	4605      	mov	r5, r0
 8001ff2:	b911      	cbnz	r1, 8001ffa <sbrk_aligned+0x12>
 8001ff4:	f000 f91a 	bl	800222c <_sbrk_r>
 8001ff8:	6030      	str	r0, [r6, #0]
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	f000 f915 	bl	800222c <_sbrk_r>
 8002002:	1c43      	adds	r3, r0, #1
 8002004:	d00a      	beq.n	800201c <sbrk_aligned+0x34>
 8002006:	1cc4      	adds	r4, r0, #3
 8002008:	f024 0403 	bic.w	r4, r4, #3
 800200c:	42a0      	cmp	r0, r4
 800200e:	d007      	beq.n	8002020 <sbrk_aligned+0x38>
 8002010:	1a21      	subs	r1, r4, r0
 8002012:	4628      	mov	r0, r5
 8002014:	f000 f90a 	bl	800222c <_sbrk_r>
 8002018:	3001      	adds	r0, #1
 800201a:	d101      	bne.n	8002020 <sbrk_aligned+0x38>
 800201c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002020:	4620      	mov	r0, r4
 8002022:	bd70      	pop	{r4, r5, r6, pc}
 8002024:	20000180 	.word	0x20000180

08002028 <_malloc_r>:
 8002028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800202c:	1ccd      	adds	r5, r1, #3
 800202e:	f025 0503 	bic.w	r5, r5, #3
 8002032:	3508      	adds	r5, #8
 8002034:	2d0c      	cmp	r5, #12
 8002036:	bf38      	it	cc
 8002038:	250c      	movcc	r5, #12
 800203a:	2d00      	cmp	r5, #0
 800203c:	4607      	mov	r7, r0
 800203e:	db01      	blt.n	8002044 <_malloc_r+0x1c>
 8002040:	42a9      	cmp	r1, r5
 8002042:	d905      	bls.n	8002050 <_malloc_r+0x28>
 8002044:	230c      	movs	r3, #12
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	2600      	movs	r6, #0
 800204a:	4630      	mov	r0, r6
 800204c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002050:	4e2e      	ldr	r6, [pc, #184]	; (800210c <_malloc_r+0xe4>)
 8002052:	f000 fbd7 	bl	8002804 <__malloc_lock>
 8002056:	6833      	ldr	r3, [r6, #0]
 8002058:	461c      	mov	r4, r3
 800205a:	bb34      	cbnz	r4, 80020aa <_malloc_r+0x82>
 800205c:	4629      	mov	r1, r5
 800205e:	4638      	mov	r0, r7
 8002060:	f7ff ffc2 	bl	8001fe8 <sbrk_aligned>
 8002064:	1c43      	adds	r3, r0, #1
 8002066:	4604      	mov	r4, r0
 8002068:	d14d      	bne.n	8002106 <_malloc_r+0xde>
 800206a:	6834      	ldr	r4, [r6, #0]
 800206c:	4626      	mov	r6, r4
 800206e:	2e00      	cmp	r6, #0
 8002070:	d140      	bne.n	80020f4 <_malloc_r+0xcc>
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	4631      	mov	r1, r6
 8002076:	4638      	mov	r0, r7
 8002078:	eb04 0803 	add.w	r8, r4, r3
 800207c:	f000 f8d6 	bl	800222c <_sbrk_r>
 8002080:	4580      	cmp	r8, r0
 8002082:	d13a      	bne.n	80020fa <_malloc_r+0xd2>
 8002084:	6821      	ldr	r1, [r4, #0]
 8002086:	3503      	adds	r5, #3
 8002088:	1a6d      	subs	r5, r5, r1
 800208a:	f025 0503 	bic.w	r5, r5, #3
 800208e:	3508      	adds	r5, #8
 8002090:	2d0c      	cmp	r5, #12
 8002092:	bf38      	it	cc
 8002094:	250c      	movcc	r5, #12
 8002096:	4629      	mov	r1, r5
 8002098:	4638      	mov	r0, r7
 800209a:	f7ff ffa5 	bl	8001fe8 <sbrk_aligned>
 800209e:	3001      	adds	r0, #1
 80020a0:	d02b      	beq.n	80020fa <_malloc_r+0xd2>
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	442b      	add	r3, r5
 80020a6:	6023      	str	r3, [r4, #0]
 80020a8:	e00e      	b.n	80020c8 <_malloc_r+0xa0>
 80020aa:	6822      	ldr	r2, [r4, #0]
 80020ac:	1b52      	subs	r2, r2, r5
 80020ae:	d41e      	bmi.n	80020ee <_malloc_r+0xc6>
 80020b0:	2a0b      	cmp	r2, #11
 80020b2:	d916      	bls.n	80020e2 <_malloc_r+0xba>
 80020b4:	1961      	adds	r1, r4, r5
 80020b6:	42a3      	cmp	r3, r4
 80020b8:	6025      	str	r5, [r4, #0]
 80020ba:	bf18      	it	ne
 80020bc:	6059      	strne	r1, [r3, #4]
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	bf08      	it	eq
 80020c2:	6031      	streq	r1, [r6, #0]
 80020c4:	5162      	str	r2, [r4, r5]
 80020c6:	604b      	str	r3, [r1, #4]
 80020c8:	4638      	mov	r0, r7
 80020ca:	f104 060b 	add.w	r6, r4, #11
 80020ce:	f000 fb9f 	bl	8002810 <__malloc_unlock>
 80020d2:	f026 0607 	bic.w	r6, r6, #7
 80020d6:	1d23      	adds	r3, r4, #4
 80020d8:	1af2      	subs	r2, r6, r3
 80020da:	d0b6      	beq.n	800204a <_malloc_r+0x22>
 80020dc:	1b9b      	subs	r3, r3, r6
 80020de:	50a3      	str	r3, [r4, r2]
 80020e0:	e7b3      	b.n	800204a <_malloc_r+0x22>
 80020e2:	6862      	ldr	r2, [r4, #4]
 80020e4:	42a3      	cmp	r3, r4
 80020e6:	bf0c      	ite	eq
 80020e8:	6032      	streq	r2, [r6, #0]
 80020ea:	605a      	strne	r2, [r3, #4]
 80020ec:	e7ec      	b.n	80020c8 <_malloc_r+0xa0>
 80020ee:	4623      	mov	r3, r4
 80020f0:	6864      	ldr	r4, [r4, #4]
 80020f2:	e7b2      	b.n	800205a <_malloc_r+0x32>
 80020f4:	4634      	mov	r4, r6
 80020f6:	6876      	ldr	r6, [r6, #4]
 80020f8:	e7b9      	b.n	800206e <_malloc_r+0x46>
 80020fa:	230c      	movs	r3, #12
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4638      	mov	r0, r7
 8002100:	f000 fb86 	bl	8002810 <__malloc_unlock>
 8002104:	e7a1      	b.n	800204a <_malloc_r+0x22>
 8002106:	6025      	str	r5, [r4, #0]
 8002108:	e7de      	b.n	80020c8 <_malloc_r+0xa0>
 800210a:	bf00      	nop
 800210c:	2000017c 	.word	0x2000017c

08002110 <iprintf>:
 8002110:	b40f      	push	{r0, r1, r2, r3}
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <iprintf+0x2c>)
 8002114:	b513      	push	{r0, r1, r4, lr}
 8002116:	681c      	ldr	r4, [r3, #0]
 8002118:	b124      	cbz	r4, 8002124 <iprintf+0x14>
 800211a:	69a3      	ldr	r3, [r4, #24]
 800211c:	b913      	cbnz	r3, 8002124 <iprintf+0x14>
 800211e:	4620      	mov	r0, r4
 8002120:	f000 fa6a 	bl	80025f8 <__sinit>
 8002124:	ab05      	add	r3, sp, #20
 8002126:	9a04      	ldr	r2, [sp, #16]
 8002128:	68a1      	ldr	r1, [r4, #8]
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	4620      	mov	r0, r4
 800212e:	f000 fb9d 	bl	800286c <_vfiprintf_r>
 8002132:	b002      	add	sp, #8
 8002134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002138:	b004      	add	sp, #16
 800213a:	4770      	bx	lr
 800213c:	20000000 	.word	0x20000000

08002140 <_puts_r>:
 8002140:	b570      	push	{r4, r5, r6, lr}
 8002142:	460e      	mov	r6, r1
 8002144:	4605      	mov	r5, r0
 8002146:	b118      	cbz	r0, 8002150 <_puts_r+0x10>
 8002148:	6983      	ldr	r3, [r0, #24]
 800214a:	b90b      	cbnz	r3, 8002150 <_puts_r+0x10>
 800214c:	f000 fa54 	bl	80025f8 <__sinit>
 8002150:	69ab      	ldr	r3, [r5, #24]
 8002152:	68ac      	ldr	r4, [r5, #8]
 8002154:	b913      	cbnz	r3, 800215c <_puts_r+0x1c>
 8002156:	4628      	mov	r0, r5
 8002158:	f000 fa4e 	bl	80025f8 <__sinit>
 800215c:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <_puts_r+0xd0>)
 800215e:	429c      	cmp	r4, r3
 8002160:	d120      	bne.n	80021a4 <_puts_r+0x64>
 8002162:	686c      	ldr	r4, [r5, #4]
 8002164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002166:	07db      	lsls	r3, r3, #31
 8002168:	d405      	bmi.n	8002176 <_puts_r+0x36>
 800216a:	89a3      	ldrh	r3, [r4, #12]
 800216c:	0598      	lsls	r0, r3, #22
 800216e:	d402      	bmi.n	8002176 <_puts_r+0x36>
 8002170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002172:	f000 fadf 	bl	8002734 <__retarget_lock_acquire_recursive>
 8002176:	89a3      	ldrh	r3, [r4, #12]
 8002178:	0719      	lsls	r1, r3, #28
 800217a:	d51d      	bpl.n	80021b8 <_puts_r+0x78>
 800217c:	6923      	ldr	r3, [r4, #16]
 800217e:	b1db      	cbz	r3, 80021b8 <_puts_r+0x78>
 8002180:	3e01      	subs	r6, #1
 8002182:	68a3      	ldr	r3, [r4, #8]
 8002184:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002188:	3b01      	subs	r3, #1
 800218a:	60a3      	str	r3, [r4, #8]
 800218c:	bb39      	cbnz	r1, 80021de <_puts_r+0x9e>
 800218e:	2b00      	cmp	r3, #0
 8002190:	da38      	bge.n	8002204 <_puts_r+0xc4>
 8002192:	4622      	mov	r2, r4
 8002194:	210a      	movs	r1, #10
 8002196:	4628      	mov	r0, r5
 8002198:	f000 f858 	bl	800224c <__swbuf_r>
 800219c:	3001      	adds	r0, #1
 800219e:	d011      	beq.n	80021c4 <_puts_r+0x84>
 80021a0:	250a      	movs	r5, #10
 80021a2:	e011      	b.n	80021c8 <_puts_r+0x88>
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <_puts_r+0xd4>)
 80021a6:	429c      	cmp	r4, r3
 80021a8:	d101      	bne.n	80021ae <_puts_r+0x6e>
 80021aa:	68ac      	ldr	r4, [r5, #8]
 80021ac:	e7da      	b.n	8002164 <_puts_r+0x24>
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <_puts_r+0xd8>)
 80021b0:	429c      	cmp	r4, r3
 80021b2:	bf08      	it	eq
 80021b4:	68ec      	ldreq	r4, [r5, #12]
 80021b6:	e7d5      	b.n	8002164 <_puts_r+0x24>
 80021b8:	4621      	mov	r1, r4
 80021ba:	4628      	mov	r0, r5
 80021bc:	f000 f898 	bl	80022f0 <__swsetup_r>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d0dd      	beq.n	8002180 <_puts_r+0x40>
 80021c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80021c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021ca:	07da      	lsls	r2, r3, #31
 80021cc:	d405      	bmi.n	80021da <_puts_r+0x9a>
 80021ce:	89a3      	ldrh	r3, [r4, #12]
 80021d0:	059b      	lsls	r3, r3, #22
 80021d2:	d402      	bmi.n	80021da <_puts_r+0x9a>
 80021d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021d6:	f000 faae 	bl	8002736 <__retarget_lock_release_recursive>
 80021da:	4628      	mov	r0, r5
 80021dc:	bd70      	pop	{r4, r5, r6, pc}
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da04      	bge.n	80021ec <_puts_r+0xac>
 80021e2:	69a2      	ldr	r2, [r4, #24]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dc06      	bgt.n	80021f6 <_puts_r+0xb6>
 80021e8:	290a      	cmp	r1, #10
 80021ea:	d004      	beq.n	80021f6 <_puts_r+0xb6>
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	6022      	str	r2, [r4, #0]
 80021f2:	7019      	strb	r1, [r3, #0]
 80021f4:	e7c5      	b.n	8002182 <_puts_r+0x42>
 80021f6:	4622      	mov	r2, r4
 80021f8:	4628      	mov	r0, r5
 80021fa:	f000 f827 	bl	800224c <__swbuf_r>
 80021fe:	3001      	adds	r0, #1
 8002200:	d1bf      	bne.n	8002182 <_puts_r+0x42>
 8002202:	e7df      	b.n	80021c4 <_puts_r+0x84>
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	250a      	movs	r5, #10
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	6022      	str	r2, [r4, #0]
 800220c:	701d      	strb	r5, [r3, #0]
 800220e:	e7db      	b.n	80021c8 <_puts_r+0x88>
 8002210:	08003020 	.word	0x08003020
 8002214:	08003040 	.word	0x08003040
 8002218:	08003000 	.word	0x08003000

0800221c <puts>:
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <puts+0xc>)
 800221e:	4601      	mov	r1, r0
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	f7ff bf8d 	b.w	8002140 <_puts_r>
 8002226:	bf00      	nop
 8002228:	20000000 	.word	0x20000000

0800222c <_sbrk_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	4d06      	ldr	r5, [pc, #24]	; (8002248 <_sbrk_r+0x1c>)
 8002230:	2300      	movs	r3, #0
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	602b      	str	r3, [r5, #0]
 8002238:	f7ff fca8 	bl	8001b8c <_sbrk>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_sbrk_r+0x1a>
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	b103      	cbz	r3, 8002246 <_sbrk_r+0x1a>
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	20000188 	.word	0x20000188

0800224c <__swbuf_r>:
 800224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224e:	460e      	mov	r6, r1
 8002250:	4614      	mov	r4, r2
 8002252:	4605      	mov	r5, r0
 8002254:	b118      	cbz	r0, 800225e <__swbuf_r+0x12>
 8002256:	6983      	ldr	r3, [r0, #24]
 8002258:	b90b      	cbnz	r3, 800225e <__swbuf_r+0x12>
 800225a:	f000 f9cd 	bl	80025f8 <__sinit>
 800225e:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <__swbuf_r+0x98>)
 8002260:	429c      	cmp	r4, r3
 8002262:	d12b      	bne.n	80022bc <__swbuf_r+0x70>
 8002264:	686c      	ldr	r4, [r5, #4]
 8002266:	69a3      	ldr	r3, [r4, #24]
 8002268:	60a3      	str	r3, [r4, #8]
 800226a:	89a3      	ldrh	r3, [r4, #12]
 800226c:	071a      	lsls	r2, r3, #28
 800226e:	d52f      	bpl.n	80022d0 <__swbuf_r+0x84>
 8002270:	6923      	ldr	r3, [r4, #16]
 8002272:	b36b      	cbz	r3, 80022d0 <__swbuf_r+0x84>
 8002274:	6923      	ldr	r3, [r4, #16]
 8002276:	6820      	ldr	r0, [r4, #0]
 8002278:	1ac0      	subs	r0, r0, r3
 800227a:	6963      	ldr	r3, [r4, #20]
 800227c:	b2f6      	uxtb	r6, r6
 800227e:	4283      	cmp	r3, r0
 8002280:	4637      	mov	r7, r6
 8002282:	dc04      	bgt.n	800228e <__swbuf_r+0x42>
 8002284:	4621      	mov	r1, r4
 8002286:	4628      	mov	r0, r5
 8002288:	f000 f922 	bl	80024d0 <_fflush_r>
 800228c:	bb30      	cbnz	r0, 80022dc <__swbuf_r+0x90>
 800228e:	68a3      	ldr	r3, [r4, #8]
 8002290:	3b01      	subs	r3, #1
 8002292:	60a3      	str	r3, [r4, #8]
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	6022      	str	r2, [r4, #0]
 800229a:	701e      	strb	r6, [r3, #0]
 800229c:	6963      	ldr	r3, [r4, #20]
 800229e:	3001      	adds	r0, #1
 80022a0:	4283      	cmp	r3, r0
 80022a2:	d004      	beq.n	80022ae <__swbuf_r+0x62>
 80022a4:	89a3      	ldrh	r3, [r4, #12]
 80022a6:	07db      	lsls	r3, r3, #31
 80022a8:	d506      	bpl.n	80022b8 <__swbuf_r+0x6c>
 80022aa:	2e0a      	cmp	r6, #10
 80022ac:	d104      	bne.n	80022b8 <__swbuf_r+0x6c>
 80022ae:	4621      	mov	r1, r4
 80022b0:	4628      	mov	r0, r5
 80022b2:	f000 f90d 	bl	80024d0 <_fflush_r>
 80022b6:	b988      	cbnz	r0, 80022dc <__swbuf_r+0x90>
 80022b8:	4638      	mov	r0, r7
 80022ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <__swbuf_r+0x9c>)
 80022be:	429c      	cmp	r4, r3
 80022c0:	d101      	bne.n	80022c6 <__swbuf_r+0x7a>
 80022c2:	68ac      	ldr	r4, [r5, #8]
 80022c4:	e7cf      	b.n	8002266 <__swbuf_r+0x1a>
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <__swbuf_r+0xa0>)
 80022c8:	429c      	cmp	r4, r3
 80022ca:	bf08      	it	eq
 80022cc:	68ec      	ldreq	r4, [r5, #12]
 80022ce:	e7ca      	b.n	8002266 <__swbuf_r+0x1a>
 80022d0:	4621      	mov	r1, r4
 80022d2:	4628      	mov	r0, r5
 80022d4:	f000 f80c 	bl	80022f0 <__swsetup_r>
 80022d8:	2800      	cmp	r0, #0
 80022da:	d0cb      	beq.n	8002274 <__swbuf_r+0x28>
 80022dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80022e0:	e7ea      	b.n	80022b8 <__swbuf_r+0x6c>
 80022e2:	bf00      	nop
 80022e4:	08003020 	.word	0x08003020
 80022e8:	08003040 	.word	0x08003040
 80022ec:	08003000 	.word	0x08003000

080022f0 <__swsetup_r>:
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <__swsetup_r+0xcc>)
 80022f2:	b570      	push	{r4, r5, r6, lr}
 80022f4:	681d      	ldr	r5, [r3, #0]
 80022f6:	4606      	mov	r6, r0
 80022f8:	460c      	mov	r4, r1
 80022fa:	b125      	cbz	r5, 8002306 <__swsetup_r+0x16>
 80022fc:	69ab      	ldr	r3, [r5, #24]
 80022fe:	b913      	cbnz	r3, 8002306 <__swsetup_r+0x16>
 8002300:	4628      	mov	r0, r5
 8002302:	f000 f979 	bl	80025f8 <__sinit>
 8002306:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <__swsetup_r+0xd0>)
 8002308:	429c      	cmp	r4, r3
 800230a:	d10f      	bne.n	800232c <__swsetup_r+0x3c>
 800230c:	686c      	ldr	r4, [r5, #4]
 800230e:	89a3      	ldrh	r3, [r4, #12]
 8002310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002314:	0719      	lsls	r1, r3, #28
 8002316:	d42c      	bmi.n	8002372 <__swsetup_r+0x82>
 8002318:	06dd      	lsls	r5, r3, #27
 800231a:	d411      	bmi.n	8002340 <__swsetup_r+0x50>
 800231c:	2309      	movs	r3, #9
 800231e:	6033      	str	r3, [r6, #0]
 8002320:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002324:	81a3      	strh	r3, [r4, #12]
 8002326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800232a:	e03e      	b.n	80023aa <__swsetup_r+0xba>
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <__swsetup_r+0xd4>)
 800232e:	429c      	cmp	r4, r3
 8002330:	d101      	bne.n	8002336 <__swsetup_r+0x46>
 8002332:	68ac      	ldr	r4, [r5, #8]
 8002334:	e7eb      	b.n	800230e <__swsetup_r+0x1e>
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <__swsetup_r+0xd8>)
 8002338:	429c      	cmp	r4, r3
 800233a:	bf08      	it	eq
 800233c:	68ec      	ldreq	r4, [r5, #12]
 800233e:	e7e6      	b.n	800230e <__swsetup_r+0x1e>
 8002340:	0758      	lsls	r0, r3, #29
 8002342:	d512      	bpl.n	800236a <__swsetup_r+0x7a>
 8002344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002346:	b141      	cbz	r1, 800235a <__swsetup_r+0x6a>
 8002348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800234c:	4299      	cmp	r1, r3
 800234e:	d002      	beq.n	8002356 <__swsetup_r+0x66>
 8002350:	4630      	mov	r0, r6
 8002352:	f7ff fdff 	bl	8001f54 <_free_r>
 8002356:	2300      	movs	r3, #0
 8002358:	6363      	str	r3, [r4, #52]	; 0x34
 800235a:	89a3      	ldrh	r3, [r4, #12]
 800235c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002360:	81a3      	strh	r3, [r4, #12]
 8002362:	2300      	movs	r3, #0
 8002364:	6063      	str	r3, [r4, #4]
 8002366:	6923      	ldr	r3, [r4, #16]
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	81a3      	strh	r3, [r4, #12]
 8002372:	6923      	ldr	r3, [r4, #16]
 8002374:	b94b      	cbnz	r3, 800238a <__swsetup_r+0x9a>
 8002376:	89a3      	ldrh	r3, [r4, #12]
 8002378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800237c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002380:	d003      	beq.n	800238a <__swsetup_r+0x9a>
 8002382:	4621      	mov	r1, r4
 8002384:	4630      	mov	r0, r6
 8002386:	f000 f9fd 	bl	8002784 <__smakebuf_r>
 800238a:	89a0      	ldrh	r0, [r4, #12]
 800238c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002390:	f010 0301 	ands.w	r3, r0, #1
 8002394:	d00a      	beq.n	80023ac <__swsetup_r+0xbc>
 8002396:	2300      	movs	r3, #0
 8002398:	60a3      	str	r3, [r4, #8]
 800239a:	6963      	ldr	r3, [r4, #20]
 800239c:	425b      	negs	r3, r3
 800239e:	61a3      	str	r3, [r4, #24]
 80023a0:	6923      	ldr	r3, [r4, #16]
 80023a2:	b943      	cbnz	r3, 80023b6 <__swsetup_r+0xc6>
 80023a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023a8:	d1ba      	bne.n	8002320 <__swsetup_r+0x30>
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
 80023ac:	0781      	lsls	r1, r0, #30
 80023ae:	bf58      	it	pl
 80023b0:	6963      	ldrpl	r3, [r4, #20]
 80023b2:	60a3      	str	r3, [r4, #8]
 80023b4:	e7f4      	b.n	80023a0 <__swsetup_r+0xb0>
 80023b6:	2000      	movs	r0, #0
 80023b8:	e7f7      	b.n	80023aa <__swsetup_r+0xba>
 80023ba:	bf00      	nop
 80023bc:	20000000 	.word	0x20000000
 80023c0:	08003020 	.word	0x08003020
 80023c4:	08003040 	.word	0x08003040
 80023c8:	08003000 	.word	0x08003000

080023cc <__sflush_r>:
 80023cc:	898a      	ldrh	r2, [r1, #12]
 80023ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d0:	4605      	mov	r5, r0
 80023d2:	0710      	lsls	r0, r2, #28
 80023d4:	460c      	mov	r4, r1
 80023d6:	d457      	bmi.n	8002488 <__sflush_r+0xbc>
 80023d8:	684b      	ldr	r3, [r1, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	dc04      	bgt.n	80023e8 <__sflush_r+0x1c>
 80023de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	dc01      	bgt.n	80023e8 <__sflush_r+0x1c>
 80023e4:	2000      	movs	r0, #0
 80023e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023ea:	2e00      	cmp	r6, #0
 80023ec:	d0fa      	beq.n	80023e4 <__sflush_r+0x18>
 80023ee:	2300      	movs	r3, #0
 80023f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80023f4:	682f      	ldr	r7, [r5, #0]
 80023f6:	602b      	str	r3, [r5, #0]
 80023f8:	d032      	beq.n	8002460 <__sflush_r+0x94>
 80023fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023fc:	89a3      	ldrh	r3, [r4, #12]
 80023fe:	075a      	lsls	r2, r3, #29
 8002400:	d505      	bpl.n	800240e <__sflush_r+0x42>
 8002402:	6863      	ldr	r3, [r4, #4]
 8002404:	1ac0      	subs	r0, r0, r3
 8002406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002408:	b10b      	cbz	r3, 800240e <__sflush_r+0x42>
 800240a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800240c:	1ac0      	subs	r0, r0, r3
 800240e:	2300      	movs	r3, #0
 8002410:	4602      	mov	r2, r0
 8002412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002414:	6a21      	ldr	r1, [r4, #32]
 8002416:	4628      	mov	r0, r5
 8002418:	47b0      	blx	r6
 800241a:	1c43      	adds	r3, r0, #1
 800241c:	89a3      	ldrh	r3, [r4, #12]
 800241e:	d106      	bne.n	800242e <__sflush_r+0x62>
 8002420:	6829      	ldr	r1, [r5, #0]
 8002422:	291d      	cmp	r1, #29
 8002424:	d82c      	bhi.n	8002480 <__sflush_r+0xb4>
 8002426:	4a29      	ldr	r2, [pc, #164]	; (80024cc <__sflush_r+0x100>)
 8002428:	40ca      	lsrs	r2, r1
 800242a:	07d6      	lsls	r6, r2, #31
 800242c:	d528      	bpl.n	8002480 <__sflush_r+0xb4>
 800242e:	2200      	movs	r2, #0
 8002430:	6062      	str	r2, [r4, #4]
 8002432:	04d9      	lsls	r1, r3, #19
 8002434:	6922      	ldr	r2, [r4, #16]
 8002436:	6022      	str	r2, [r4, #0]
 8002438:	d504      	bpl.n	8002444 <__sflush_r+0x78>
 800243a:	1c42      	adds	r2, r0, #1
 800243c:	d101      	bne.n	8002442 <__sflush_r+0x76>
 800243e:	682b      	ldr	r3, [r5, #0]
 8002440:	b903      	cbnz	r3, 8002444 <__sflush_r+0x78>
 8002442:	6560      	str	r0, [r4, #84]	; 0x54
 8002444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002446:	602f      	str	r7, [r5, #0]
 8002448:	2900      	cmp	r1, #0
 800244a:	d0cb      	beq.n	80023e4 <__sflush_r+0x18>
 800244c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002450:	4299      	cmp	r1, r3
 8002452:	d002      	beq.n	800245a <__sflush_r+0x8e>
 8002454:	4628      	mov	r0, r5
 8002456:	f7ff fd7d 	bl	8001f54 <_free_r>
 800245a:	2000      	movs	r0, #0
 800245c:	6360      	str	r0, [r4, #52]	; 0x34
 800245e:	e7c2      	b.n	80023e6 <__sflush_r+0x1a>
 8002460:	6a21      	ldr	r1, [r4, #32]
 8002462:	2301      	movs	r3, #1
 8002464:	4628      	mov	r0, r5
 8002466:	47b0      	blx	r6
 8002468:	1c41      	adds	r1, r0, #1
 800246a:	d1c7      	bne.n	80023fc <__sflush_r+0x30>
 800246c:	682b      	ldr	r3, [r5, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0c4      	beq.n	80023fc <__sflush_r+0x30>
 8002472:	2b1d      	cmp	r3, #29
 8002474:	d001      	beq.n	800247a <__sflush_r+0xae>
 8002476:	2b16      	cmp	r3, #22
 8002478:	d101      	bne.n	800247e <__sflush_r+0xb2>
 800247a:	602f      	str	r7, [r5, #0]
 800247c:	e7b2      	b.n	80023e4 <__sflush_r+0x18>
 800247e:	89a3      	ldrh	r3, [r4, #12]
 8002480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002484:	81a3      	strh	r3, [r4, #12]
 8002486:	e7ae      	b.n	80023e6 <__sflush_r+0x1a>
 8002488:	690f      	ldr	r7, [r1, #16]
 800248a:	2f00      	cmp	r7, #0
 800248c:	d0aa      	beq.n	80023e4 <__sflush_r+0x18>
 800248e:	0793      	lsls	r3, r2, #30
 8002490:	680e      	ldr	r6, [r1, #0]
 8002492:	bf08      	it	eq
 8002494:	694b      	ldreq	r3, [r1, #20]
 8002496:	600f      	str	r7, [r1, #0]
 8002498:	bf18      	it	ne
 800249a:	2300      	movne	r3, #0
 800249c:	1bf6      	subs	r6, r6, r7
 800249e:	608b      	str	r3, [r1, #8]
 80024a0:	2e00      	cmp	r6, #0
 80024a2:	dd9f      	ble.n	80023e4 <__sflush_r+0x18>
 80024a4:	6a21      	ldr	r1, [r4, #32]
 80024a6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80024aa:	4633      	mov	r3, r6
 80024ac:	463a      	mov	r2, r7
 80024ae:	4628      	mov	r0, r5
 80024b0:	47e0      	blx	ip
 80024b2:	2800      	cmp	r0, #0
 80024b4:	dc06      	bgt.n	80024c4 <__sflush_r+0xf8>
 80024b6:	89a3      	ldrh	r3, [r4, #12]
 80024b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024bc:	81a3      	strh	r3, [r4, #12]
 80024be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024c2:	e790      	b.n	80023e6 <__sflush_r+0x1a>
 80024c4:	4407      	add	r7, r0
 80024c6:	1a36      	subs	r6, r6, r0
 80024c8:	e7ea      	b.n	80024a0 <__sflush_r+0xd4>
 80024ca:	bf00      	nop
 80024cc:	20400001 	.word	0x20400001

080024d0 <_fflush_r>:
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	690b      	ldr	r3, [r1, #16]
 80024d4:	4605      	mov	r5, r0
 80024d6:	460c      	mov	r4, r1
 80024d8:	b913      	cbnz	r3, 80024e0 <_fflush_r+0x10>
 80024da:	2500      	movs	r5, #0
 80024dc:	4628      	mov	r0, r5
 80024de:	bd38      	pop	{r3, r4, r5, pc}
 80024e0:	b118      	cbz	r0, 80024ea <_fflush_r+0x1a>
 80024e2:	6983      	ldr	r3, [r0, #24]
 80024e4:	b90b      	cbnz	r3, 80024ea <_fflush_r+0x1a>
 80024e6:	f000 f887 	bl	80025f8 <__sinit>
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <_fflush_r+0x6c>)
 80024ec:	429c      	cmp	r4, r3
 80024ee:	d11b      	bne.n	8002528 <_fflush_r+0x58>
 80024f0:	686c      	ldr	r4, [r5, #4]
 80024f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0ef      	beq.n	80024da <_fflush_r+0xa>
 80024fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024fc:	07d0      	lsls	r0, r2, #31
 80024fe:	d404      	bmi.n	800250a <_fflush_r+0x3a>
 8002500:	0599      	lsls	r1, r3, #22
 8002502:	d402      	bmi.n	800250a <_fflush_r+0x3a>
 8002504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002506:	f000 f915 	bl	8002734 <__retarget_lock_acquire_recursive>
 800250a:	4628      	mov	r0, r5
 800250c:	4621      	mov	r1, r4
 800250e:	f7ff ff5d 	bl	80023cc <__sflush_r>
 8002512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002514:	07da      	lsls	r2, r3, #31
 8002516:	4605      	mov	r5, r0
 8002518:	d4e0      	bmi.n	80024dc <_fflush_r+0xc>
 800251a:	89a3      	ldrh	r3, [r4, #12]
 800251c:	059b      	lsls	r3, r3, #22
 800251e:	d4dd      	bmi.n	80024dc <_fflush_r+0xc>
 8002520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002522:	f000 f908 	bl	8002736 <__retarget_lock_release_recursive>
 8002526:	e7d9      	b.n	80024dc <_fflush_r+0xc>
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <_fflush_r+0x70>)
 800252a:	429c      	cmp	r4, r3
 800252c:	d101      	bne.n	8002532 <_fflush_r+0x62>
 800252e:	68ac      	ldr	r4, [r5, #8]
 8002530:	e7df      	b.n	80024f2 <_fflush_r+0x22>
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <_fflush_r+0x74>)
 8002534:	429c      	cmp	r4, r3
 8002536:	bf08      	it	eq
 8002538:	68ec      	ldreq	r4, [r5, #12]
 800253a:	e7da      	b.n	80024f2 <_fflush_r+0x22>
 800253c:	08003020 	.word	0x08003020
 8002540:	08003040 	.word	0x08003040
 8002544:	08003000 	.word	0x08003000

08002548 <std>:
 8002548:	2300      	movs	r3, #0
 800254a:	b510      	push	{r4, lr}
 800254c:	4604      	mov	r4, r0
 800254e:	e9c0 3300 	strd	r3, r3, [r0]
 8002552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002556:	6083      	str	r3, [r0, #8]
 8002558:	8181      	strh	r1, [r0, #12]
 800255a:	6643      	str	r3, [r0, #100]	; 0x64
 800255c:	81c2      	strh	r2, [r0, #14]
 800255e:	6183      	str	r3, [r0, #24]
 8002560:	4619      	mov	r1, r3
 8002562:	2208      	movs	r2, #8
 8002564:	305c      	adds	r0, #92	; 0x5c
 8002566:	f7ff fced 	bl	8001f44 <memset>
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <std+0x38>)
 800256c:	6263      	str	r3, [r4, #36]	; 0x24
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <std+0x3c>)
 8002570:	62a3      	str	r3, [r4, #40]	; 0x28
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <std+0x40>)
 8002574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <std+0x44>)
 8002578:	6224      	str	r4, [r4, #32]
 800257a:	6323      	str	r3, [r4, #48]	; 0x30
 800257c:	bd10      	pop	{r4, pc}
 800257e:	bf00      	nop
 8002580:	08002df5 	.word	0x08002df5
 8002584:	08002e17 	.word	0x08002e17
 8002588:	08002e4f 	.word	0x08002e4f
 800258c:	08002e73 	.word	0x08002e73

08002590 <_cleanup_r>:
 8002590:	4901      	ldr	r1, [pc, #4]	; (8002598 <_cleanup_r+0x8>)
 8002592:	f000 b8af 	b.w	80026f4 <_fwalk_reent>
 8002596:	bf00      	nop
 8002598:	080024d1 	.word	0x080024d1

0800259c <__sfmoreglue>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	2268      	movs	r2, #104	; 0x68
 80025a0:	1e4d      	subs	r5, r1, #1
 80025a2:	4355      	muls	r5, r2
 80025a4:	460e      	mov	r6, r1
 80025a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025aa:	f7ff fd3d 	bl	8002028 <_malloc_r>
 80025ae:	4604      	mov	r4, r0
 80025b0:	b140      	cbz	r0, 80025c4 <__sfmoreglue+0x28>
 80025b2:	2100      	movs	r1, #0
 80025b4:	e9c0 1600 	strd	r1, r6, [r0]
 80025b8:	300c      	adds	r0, #12
 80025ba:	60a0      	str	r0, [r4, #8]
 80025bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80025c0:	f7ff fcc0 	bl	8001f44 <memset>
 80025c4:	4620      	mov	r0, r4
 80025c6:	bd70      	pop	{r4, r5, r6, pc}

080025c8 <__sfp_lock_acquire>:
 80025c8:	4801      	ldr	r0, [pc, #4]	; (80025d0 <__sfp_lock_acquire+0x8>)
 80025ca:	f000 b8b3 	b.w	8002734 <__retarget_lock_acquire_recursive>
 80025ce:	bf00      	nop
 80025d0:	20000185 	.word	0x20000185

080025d4 <__sfp_lock_release>:
 80025d4:	4801      	ldr	r0, [pc, #4]	; (80025dc <__sfp_lock_release+0x8>)
 80025d6:	f000 b8ae 	b.w	8002736 <__retarget_lock_release_recursive>
 80025da:	bf00      	nop
 80025dc:	20000185 	.word	0x20000185

080025e0 <__sinit_lock_acquire>:
 80025e0:	4801      	ldr	r0, [pc, #4]	; (80025e8 <__sinit_lock_acquire+0x8>)
 80025e2:	f000 b8a7 	b.w	8002734 <__retarget_lock_acquire_recursive>
 80025e6:	bf00      	nop
 80025e8:	20000186 	.word	0x20000186

080025ec <__sinit_lock_release>:
 80025ec:	4801      	ldr	r0, [pc, #4]	; (80025f4 <__sinit_lock_release+0x8>)
 80025ee:	f000 b8a2 	b.w	8002736 <__retarget_lock_release_recursive>
 80025f2:	bf00      	nop
 80025f4:	20000186 	.word	0x20000186

080025f8 <__sinit>:
 80025f8:	b510      	push	{r4, lr}
 80025fa:	4604      	mov	r4, r0
 80025fc:	f7ff fff0 	bl	80025e0 <__sinit_lock_acquire>
 8002600:	69a3      	ldr	r3, [r4, #24]
 8002602:	b11b      	cbz	r3, 800260c <__sinit+0x14>
 8002604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002608:	f7ff bff0 	b.w	80025ec <__sinit_lock_release>
 800260c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002610:	6523      	str	r3, [r4, #80]	; 0x50
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <__sinit+0x68>)
 8002614:	4a13      	ldr	r2, [pc, #76]	; (8002664 <__sinit+0x6c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	62a2      	str	r2, [r4, #40]	; 0x28
 800261a:	42a3      	cmp	r3, r4
 800261c:	bf04      	itt	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	61a3      	streq	r3, [r4, #24]
 8002622:	4620      	mov	r0, r4
 8002624:	f000 f820 	bl	8002668 <__sfp>
 8002628:	6060      	str	r0, [r4, #4]
 800262a:	4620      	mov	r0, r4
 800262c:	f000 f81c 	bl	8002668 <__sfp>
 8002630:	60a0      	str	r0, [r4, #8]
 8002632:	4620      	mov	r0, r4
 8002634:	f000 f818 	bl	8002668 <__sfp>
 8002638:	2200      	movs	r2, #0
 800263a:	60e0      	str	r0, [r4, #12]
 800263c:	2104      	movs	r1, #4
 800263e:	6860      	ldr	r0, [r4, #4]
 8002640:	f7ff ff82 	bl	8002548 <std>
 8002644:	68a0      	ldr	r0, [r4, #8]
 8002646:	2201      	movs	r2, #1
 8002648:	2109      	movs	r1, #9
 800264a:	f7ff ff7d 	bl	8002548 <std>
 800264e:	68e0      	ldr	r0, [r4, #12]
 8002650:	2202      	movs	r2, #2
 8002652:	2112      	movs	r1, #18
 8002654:	f7ff ff78 	bl	8002548 <std>
 8002658:	2301      	movs	r3, #1
 800265a:	61a3      	str	r3, [r4, #24]
 800265c:	e7d2      	b.n	8002604 <__sinit+0xc>
 800265e:	bf00      	nop
 8002660:	08002ffc 	.word	0x08002ffc
 8002664:	08002591 	.word	0x08002591

08002668 <__sfp>:
 8002668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266a:	4607      	mov	r7, r0
 800266c:	f7ff ffac 	bl	80025c8 <__sfp_lock_acquire>
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <__sfp+0x84>)
 8002672:	681e      	ldr	r6, [r3, #0]
 8002674:	69b3      	ldr	r3, [r6, #24]
 8002676:	b913      	cbnz	r3, 800267e <__sfp+0x16>
 8002678:	4630      	mov	r0, r6
 800267a:	f7ff ffbd 	bl	80025f8 <__sinit>
 800267e:	3648      	adds	r6, #72	; 0x48
 8002680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002684:	3b01      	subs	r3, #1
 8002686:	d503      	bpl.n	8002690 <__sfp+0x28>
 8002688:	6833      	ldr	r3, [r6, #0]
 800268a:	b30b      	cbz	r3, 80026d0 <__sfp+0x68>
 800268c:	6836      	ldr	r6, [r6, #0]
 800268e:	e7f7      	b.n	8002680 <__sfp+0x18>
 8002690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002694:	b9d5      	cbnz	r5, 80026cc <__sfp+0x64>
 8002696:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <__sfp+0x88>)
 8002698:	60e3      	str	r3, [r4, #12]
 800269a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800269e:	6665      	str	r5, [r4, #100]	; 0x64
 80026a0:	f000 f847 	bl	8002732 <__retarget_lock_init_recursive>
 80026a4:	f7ff ff96 	bl	80025d4 <__sfp_lock_release>
 80026a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80026ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80026b0:	6025      	str	r5, [r4, #0]
 80026b2:	61a5      	str	r5, [r4, #24]
 80026b4:	2208      	movs	r2, #8
 80026b6:	4629      	mov	r1, r5
 80026b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026bc:	f7ff fc42 	bl	8001f44 <memset>
 80026c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80026c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80026c8:	4620      	mov	r0, r4
 80026ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026cc:	3468      	adds	r4, #104	; 0x68
 80026ce:	e7d9      	b.n	8002684 <__sfp+0x1c>
 80026d0:	2104      	movs	r1, #4
 80026d2:	4638      	mov	r0, r7
 80026d4:	f7ff ff62 	bl	800259c <__sfmoreglue>
 80026d8:	4604      	mov	r4, r0
 80026da:	6030      	str	r0, [r6, #0]
 80026dc:	2800      	cmp	r0, #0
 80026de:	d1d5      	bne.n	800268c <__sfp+0x24>
 80026e0:	f7ff ff78 	bl	80025d4 <__sfp_lock_release>
 80026e4:	230c      	movs	r3, #12
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	e7ee      	b.n	80026c8 <__sfp+0x60>
 80026ea:	bf00      	nop
 80026ec:	08002ffc 	.word	0x08002ffc
 80026f0:	ffff0001 	.word	0xffff0001

080026f4 <_fwalk_reent>:
 80026f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026f8:	4606      	mov	r6, r0
 80026fa:	4688      	mov	r8, r1
 80026fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002700:	2700      	movs	r7, #0
 8002702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002706:	f1b9 0901 	subs.w	r9, r9, #1
 800270a:	d505      	bpl.n	8002718 <_fwalk_reent+0x24>
 800270c:	6824      	ldr	r4, [r4, #0]
 800270e:	2c00      	cmp	r4, #0
 8002710:	d1f7      	bne.n	8002702 <_fwalk_reent+0xe>
 8002712:	4638      	mov	r0, r7
 8002714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002718:	89ab      	ldrh	r3, [r5, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d907      	bls.n	800272e <_fwalk_reent+0x3a>
 800271e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002722:	3301      	adds	r3, #1
 8002724:	d003      	beq.n	800272e <_fwalk_reent+0x3a>
 8002726:	4629      	mov	r1, r5
 8002728:	4630      	mov	r0, r6
 800272a:	47c0      	blx	r8
 800272c:	4307      	orrs	r7, r0
 800272e:	3568      	adds	r5, #104	; 0x68
 8002730:	e7e9      	b.n	8002706 <_fwalk_reent+0x12>

08002732 <__retarget_lock_init_recursive>:
 8002732:	4770      	bx	lr

08002734 <__retarget_lock_acquire_recursive>:
 8002734:	4770      	bx	lr

08002736 <__retarget_lock_release_recursive>:
 8002736:	4770      	bx	lr

08002738 <__swhatbuf_r>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	460e      	mov	r6, r1
 800273c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002740:	2900      	cmp	r1, #0
 8002742:	b096      	sub	sp, #88	; 0x58
 8002744:	4614      	mov	r4, r2
 8002746:	461d      	mov	r5, r3
 8002748:	da08      	bge.n	800275c <__swhatbuf_r+0x24>
 800274a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	602a      	str	r2, [r5, #0]
 8002752:	061a      	lsls	r2, r3, #24
 8002754:	d410      	bmi.n	8002778 <__swhatbuf_r+0x40>
 8002756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275a:	e00e      	b.n	800277a <__swhatbuf_r+0x42>
 800275c:	466a      	mov	r2, sp
 800275e:	f000 fbaf 	bl	8002ec0 <_fstat_r>
 8002762:	2800      	cmp	r0, #0
 8002764:	dbf1      	blt.n	800274a <__swhatbuf_r+0x12>
 8002766:	9a01      	ldr	r2, [sp, #4]
 8002768:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800276c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002770:	425a      	negs	r2, r3
 8002772:	415a      	adcs	r2, r3
 8002774:	602a      	str	r2, [r5, #0]
 8002776:	e7ee      	b.n	8002756 <__swhatbuf_r+0x1e>
 8002778:	2340      	movs	r3, #64	; 0x40
 800277a:	2000      	movs	r0, #0
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	b016      	add	sp, #88	; 0x58
 8002780:	bd70      	pop	{r4, r5, r6, pc}
	...

08002784 <__smakebuf_r>:
 8002784:	898b      	ldrh	r3, [r1, #12]
 8002786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002788:	079d      	lsls	r5, r3, #30
 800278a:	4606      	mov	r6, r0
 800278c:	460c      	mov	r4, r1
 800278e:	d507      	bpl.n	80027a0 <__smakebuf_r+0x1c>
 8002790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	6123      	str	r3, [r4, #16]
 8002798:	2301      	movs	r3, #1
 800279a:	6163      	str	r3, [r4, #20]
 800279c:	b002      	add	sp, #8
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	ab01      	add	r3, sp, #4
 80027a2:	466a      	mov	r2, sp
 80027a4:	f7ff ffc8 	bl	8002738 <__swhatbuf_r>
 80027a8:	9900      	ldr	r1, [sp, #0]
 80027aa:	4605      	mov	r5, r0
 80027ac:	4630      	mov	r0, r6
 80027ae:	f7ff fc3b 	bl	8002028 <_malloc_r>
 80027b2:	b948      	cbnz	r0, 80027c8 <__smakebuf_r+0x44>
 80027b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027b8:	059a      	lsls	r2, r3, #22
 80027ba:	d4ef      	bmi.n	800279c <__smakebuf_r+0x18>
 80027bc:	f023 0303 	bic.w	r3, r3, #3
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	81a3      	strh	r3, [r4, #12]
 80027c6:	e7e3      	b.n	8002790 <__smakebuf_r+0xc>
 80027c8:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <__smakebuf_r+0x7c>)
 80027ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80027cc:	89a3      	ldrh	r3, [r4, #12]
 80027ce:	6020      	str	r0, [r4, #0]
 80027d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d4:	81a3      	strh	r3, [r4, #12]
 80027d6:	9b00      	ldr	r3, [sp, #0]
 80027d8:	6163      	str	r3, [r4, #20]
 80027da:	9b01      	ldr	r3, [sp, #4]
 80027dc:	6120      	str	r0, [r4, #16]
 80027de:	b15b      	cbz	r3, 80027f8 <__smakebuf_r+0x74>
 80027e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027e4:	4630      	mov	r0, r6
 80027e6:	f000 fb7d 	bl	8002ee4 <_isatty_r>
 80027ea:	b128      	cbz	r0, 80027f8 <__smakebuf_r+0x74>
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	81a3      	strh	r3, [r4, #12]
 80027f8:	89a0      	ldrh	r0, [r4, #12]
 80027fa:	4305      	orrs	r5, r0
 80027fc:	81a5      	strh	r5, [r4, #12]
 80027fe:	e7cd      	b.n	800279c <__smakebuf_r+0x18>
 8002800:	08002591 	.word	0x08002591

08002804 <__malloc_lock>:
 8002804:	4801      	ldr	r0, [pc, #4]	; (800280c <__malloc_lock+0x8>)
 8002806:	f7ff bf95 	b.w	8002734 <__retarget_lock_acquire_recursive>
 800280a:	bf00      	nop
 800280c:	20000184 	.word	0x20000184

08002810 <__malloc_unlock>:
 8002810:	4801      	ldr	r0, [pc, #4]	; (8002818 <__malloc_unlock+0x8>)
 8002812:	f7ff bf90 	b.w	8002736 <__retarget_lock_release_recursive>
 8002816:	bf00      	nop
 8002818:	20000184 	.word	0x20000184

0800281c <__sfputc_r>:
 800281c:	6893      	ldr	r3, [r2, #8]
 800281e:	3b01      	subs	r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	b410      	push	{r4}
 8002824:	6093      	str	r3, [r2, #8]
 8002826:	da07      	bge.n	8002838 <__sfputc_r+0x1c>
 8002828:	6994      	ldr	r4, [r2, #24]
 800282a:	42a3      	cmp	r3, r4
 800282c:	db01      	blt.n	8002832 <__sfputc_r+0x16>
 800282e:	290a      	cmp	r1, #10
 8002830:	d102      	bne.n	8002838 <__sfputc_r+0x1c>
 8002832:	bc10      	pop	{r4}
 8002834:	f7ff bd0a 	b.w	800224c <__swbuf_r>
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	1c58      	adds	r0, r3, #1
 800283c:	6010      	str	r0, [r2, #0]
 800283e:	7019      	strb	r1, [r3, #0]
 8002840:	4608      	mov	r0, r1
 8002842:	bc10      	pop	{r4}
 8002844:	4770      	bx	lr

08002846 <__sfputs_r>:
 8002846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002848:	4606      	mov	r6, r0
 800284a:	460f      	mov	r7, r1
 800284c:	4614      	mov	r4, r2
 800284e:	18d5      	adds	r5, r2, r3
 8002850:	42ac      	cmp	r4, r5
 8002852:	d101      	bne.n	8002858 <__sfputs_r+0x12>
 8002854:	2000      	movs	r0, #0
 8002856:	e007      	b.n	8002868 <__sfputs_r+0x22>
 8002858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800285c:	463a      	mov	r2, r7
 800285e:	4630      	mov	r0, r6
 8002860:	f7ff ffdc 	bl	800281c <__sfputc_r>
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	d1f3      	bne.n	8002850 <__sfputs_r+0xa>
 8002868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800286c <_vfiprintf_r>:
 800286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002870:	460d      	mov	r5, r1
 8002872:	b09d      	sub	sp, #116	; 0x74
 8002874:	4614      	mov	r4, r2
 8002876:	4698      	mov	r8, r3
 8002878:	4606      	mov	r6, r0
 800287a:	b118      	cbz	r0, 8002884 <_vfiprintf_r+0x18>
 800287c:	6983      	ldr	r3, [r0, #24]
 800287e:	b90b      	cbnz	r3, 8002884 <_vfiprintf_r+0x18>
 8002880:	f7ff feba 	bl	80025f8 <__sinit>
 8002884:	4b89      	ldr	r3, [pc, #548]	; (8002aac <_vfiprintf_r+0x240>)
 8002886:	429d      	cmp	r5, r3
 8002888:	d11b      	bne.n	80028c2 <_vfiprintf_r+0x56>
 800288a:	6875      	ldr	r5, [r6, #4]
 800288c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800288e:	07d9      	lsls	r1, r3, #31
 8002890:	d405      	bmi.n	800289e <_vfiprintf_r+0x32>
 8002892:	89ab      	ldrh	r3, [r5, #12]
 8002894:	059a      	lsls	r2, r3, #22
 8002896:	d402      	bmi.n	800289e <_vfiprintf_r+0x32>
 8002898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800289a:	f7ff ff4b 	bl	8002734 <__retarget_lock_acquire_recursive>
 800289e:	89ab      	ldrh	r3, [r5, #12]
 80028a0:	071b      	lsls	r3, r3, #28
 80028a2:	d501      	bpl.n	80028a8 <_vfiprintf_r+0x3c>
 80028a4:	692b      	ldr	r3, [r5, #16]
 80028a6:	b9eb      	cbnz	r3, 80028e4 <_vfiprintf_r+0x78>
 80028a8:	4629      	mov	r1, r5
 80028aa:	4630      	mov	r0, r6
 80028ac:	f7ff fd20 	bl	80022f0 <__swsetup_r>
 80028b0:	b1c0      	cbz	r0, 80028e4 <_vfiprintf_r+0x78>
 80028b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028b4:	07dc      	lsls	r4, r3, #31
 80028b6:	d50e      	bpl.n	80028d6 <_vfiprintf_r+0x6a>
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028bc:	b01d      	add	sp, #116	; 0x74
 80028be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028c2:	4b7b      	ldr	r3, [pc, #492]	; (8002ab0 <_vfiprintf_r+0x244>)
 80028c4:	429d      	cmp	r5, r3
 80028c6:	d101      	bne.n	80028cc <_vfiprintf_r+0x60>
 80028c8:	68b5      	ldr	r5, [r6, #8]
 80028ca:	e7df      	b.n	800288c <_vfiprintf_r+0x20>
 80028cc:	4b79      	ldr	r3, [pc, #484]	; (8002ab4 <_vfiprintf_r+0x248>)
 80028ce:	429d      	cmp	r5, r3
 80028d0:	bf08      	it	eq
 80028d2:	68f5      	ldreq	r5, [r6, #12]
 80028d4:	e7da      	b.n	800288c <_vfiprintf_r+0x20>
 80028d6:	89ab      	ldrh	r3, [r5, #12]
 80028d8:	0598      	lsls	r0, r3, #22
 80028da:	d4ed      	bmi.n	80028b8 <_vfiprintf_r+0x4c>
 80028dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028de:	f7ff ff2a 	bl	8002736 <__retarget_lock_release_recursive>
 80028e2:	e7e9      	b.n	80028b8 <_vfiprintf_r+0x4c>
 80028e4:	2300      	movs	r3, #0
 80028e6:	9309      	str	r3, [sp, #36]	; 0x24
 80028e8:	2320      	movs	r3, #32
 80028ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80028f2:	2330      	movs	r3, #48	; 0x30
 80028f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002ab8 <_vfiprintf_r+0x24c>
 80028f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028fc:	f04f 0901 	mov.w	r9, #1
 8002900:	4623      	mov	r3, r4
 8002902:	469a      	mov	sl, r3
 8002904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002908:	b10a      	cbz	r2, 800290e <_vfiprintf_r+0xa2>
 800290a:	2a25      	cmp	r2, #37	; 0x25
 800290c:	d1f9      	bne.n	8002902 <_vfiprintf_r+0x96>
 800290e:	ebba 0b04 	subs.w	fp, sl, r4
 8002912:	d00b      	beq.n	800292c <_vfiprintf_r+0xc0>
 8002914:	465b      	mov	r3, fp
 8002916:	4622      	mov	r2, r4
 8002918:	4629      	mov	r1, r5
 800291a:	4630      	mov	r0, r6
 800291c:	f7ff ff93 	bl	8002846 <__sfputs_r>
 8002920:	3001      	adds	r0, #1
 8002922:	f000 80aa 	beq.w	8002a7a <_vfiprintf_r+0x20e>
 8002926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002928:	445a      	add	r2, fp
 800292a:	9209      	str	r2, [sp, #36]	; 0x24
 800292c:	f89a 3000 	ldrb.w	r3, [sl]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80a2 	beq.w	8002a7a <_vfiprintf_r+0x20e>
 8002936:	2300      	movs	r3, #0
 8002938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800293c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002940:	f10a 0a01 	add.w	sl, sl, #1
 8002944:	9304      	str	r3, [sp, #16]
 8002946:	9307      	str	r3, [sp, #28]
 8002948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800294c:	931a      	str	r3, [sp, #104]	; 0x68
 800294e:	4654      	mov	r4, sl
 8002950:	2205      	movs	r2, #5
 8002952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002956:	4858      	ldr	r0, [pc, #352]	; (8002ab8 <_vfiprintf_r+0x24c>)
 8002958:	f7fd fc5a 	bl	8000210 <memchr>
 800295c:	9a04      	ldr	r2, [sp, #16]
 800295e:	b9d8      	cbnz	r0, 8002998 <_vfiprintf_r+0x12c>
 8002960:	06d1      	lsls	r1, r2, #27
 8002962:	bf44      	itt	mi
 8002964:	2320      	movmi	r3, #32
 8002966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800296a:	0713      	lsls	r3, r2, #28
 800296c:	bf44      	itt	mi
 800296e:	232b      	movmi	r3, #43	; 0x2b
 8002970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002974:	f89a 3000 	ldrb.w	r3, [sl]
 8002978:	2b2a      	cmp	r3, #42	; 0x2a
 800297a:	d015      	beq.n	80029a8 <_vfiprintf_r+0x13c>
 800297c:	9a07      	ldr	r2, [sp, #28]
 800297e:	4654      	mov	r4, sl
 8002980:	2000      	movs	r0, #0
 8002982:	f04f 0c0a 	mov.w	ip, #10
 8002986:	4621      	mov	r1, r4
 8002988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800298c:	3b30      	subs	r3, #48	; 0x30
 800298e:	2b09      	cmp	r3, #9
 8002990:	d94e      	bls.n	8002a30 <_vfiprintf_r+0x1c4>
 8002992:	b1b0      	cbz	r0, 80029c2 <_vfiprintf_r+0x156>
 8002994:	9207      	str	r2, [sp, #28]
 8002996:	e014      	b.n	80029c2 <_vfiprintf_r+0x156>
 8002998:	eba0 0308 	sub.w	r3, r0, r8
 800299c:	fa09 f303 	lsl.w	r3, r9, r3
 80029a0:	4313      	orrs	r3, r2
 80029a2:	9304      	str	r3, [sp, #16]
 80029a4:	46a2      	mov	sl, r4
 80029a6:	e7d2      	b.n	800294e <_vfiprintf_r+0xe2>
 80029a8:	9b03      	ldr	r3, [sp, #12]
 80029aa:	1d19      	adds	r1, r3, #4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	9103      	str	r1, [sp, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bfbb      	ittet	lt
 80029b4:	425b      	neglt	r3, r3
 80029b6:	f042 0202 	orrlt.w	r2, r2, #2
 80029ba:	9307      	strge	r3, [sp, #28]
 80029bc:	9307      	strlt	r3, [sp, #28]
 80029be:	bfb8      	it	lt
 80029c0:	9204      	strlt	r2, [sp, #16]
 80029c2:	7823      	ldrb	r3, [r4, #0]
 80029c4:	2b2e      	cmp	r3, #46	; 0x2e
 80029c6:	d10c      	bne.n	80029e2 <_vfiprintf_r+0x176>
 80029c8:	7863      	ldrb	r3, [r4, #1]
 80029ca:	2b2a      	cmp	r3, #42	; 0x2a
 80029cc:	d135      	bne.n	8002a3a <_vfiprintf_r+0x1ce>
 80029ce:	9b03      	ldr	r3, [sp, #12]
 80029d0:	1d1a      	adds	r2, r3, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	9203      	str	r2, [sp, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bfb8      	it	lt
 80029da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80029de:	3402      	adds	r4, #2
 80029e0:	9305      	str	r3, [sp, #20]
 80029e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002abc <_vfiprintf_r+0x250>
 80029e6:	7821      	ldrb	r1, [r4, #0]
 80029e8:	2203      	movs	r2, #3
 80029ea:	4650      	mov	r0, sl
 80029ec:	f7fd fc10 	bl	8000210 <memchr>
 80029f0:	b140      	cbz	r0, 8002a04 <_vfiprintf_r+0x198>
 80029f2:	2340      	movs	r3, #64	; 0x40
 80029f4:	eba0 000a 	sub.w	r0, r0, sl
 80029f8:	fa03 f000 	lsl.w	r0, r3, r0
 80029fc:	9b04      	ldr	r3, [sp, #16]
 80029fe:	4303      	orrs	r3, r0
 8002a00:	3401      	adds	r4, #1
 8002a02:	9304      	str	r3, [sp, #16]
 8002a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a08:	482d      	ldr	r0, [pc, #180]	; (8002ac0 <_vfiprintf_r+0x254>)
 8002a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a0e:	2206      	movs	r2, #6
 8002a10:	f7fd fbfe 	bl	8000210 <memchr>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d03f      	beq.n	8002a98 <_vfiprintf_r+0x22c>
 8002a18:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <_vfiprintf_r+0x258>)
 8002a1a:	bb1b      	cbnz	r3, 8002a64 <_vfiprintf_r+0x1f8>
 8002a1c:	9b03      	ldr	r3, [sp, #12]
 8002a1e:	3307      	adds	r3, #7
 8002a20:	f023 0307 	bic.w	r3, r3, #7
 8002a24:	3308      	adds	r3, #8
 8002a26:	9303      	str	r3, [sp, #12]
 8002a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a2a:	443b      	add	r3, r7
 8002a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a2e:	e767      	b.n	8002900 <_vfiprintf_r+0x94>
 8002a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a34:	460c      	mov	r4, r1
 8002a36:	2001      	movs	r0, #1
 8002a38:	e7a5      	b.n	8002986 <_vfiprintf_r+0x11a>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	3401      	adds	r4, #1
 8002a3e:	9305      	str	r3, [sp, #20]
 8002a40:	4619      	mov	r1, r3
 8002a42:	f04f 0c0a 	mov.w	ip, #10
 8002a46:	4620      	mov	r0, r4
 8002a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a4c:	3a30      	subs	r2, #48	; 0x30
 8002a4e:	2a09      	cmp	r2, #9
 8002a50:	d903      	bls.n	8002a5a <_vfiprintf_r+0x1ee>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0c5      	beq.n	80029e2 <_vfiprintf_r+0x176>
 8002a56:	9105      	str	r1, [sp, #20]
 8002a58:	e7c3      	b.n	80029e2 <_vfiprintf_r+0x176>
 8002a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a5e:	4604      	mov	r4, r0
 8002a60:	2301      	movs	r3, #1
 8002a62:	e7f0      	b.n	8002a46 <_vfiprintf_r+0x1da>
 8002a64:	ab03      	add	r3, sp, #12
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	462a      	mov	r2, r5
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <_vfiprintf_r+0x25c>)
 8002a6c:	a904      	add	r1, sp, #16
 8002a6e:	4630      	mov	r0, r6
 8002a70:	f3af 8000 	nop.w
 8002a74:	4607      	mov	r7, r0
 8002a76:	1c78      	adds	r0, r7, #1
 8002a78:	d1d6      	bne.n	8002a28 <_vfiprintf_r+0x1bc>
 8002a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a7c:	07d9      	lsls	r1, r3, #31
 8002a7e:	d405      	bmi.n	8002a8c <_vfiprintf_r+0x220>
 8002a80:	89ab      	ldrh	r3, [r5, #12]
 8002a82:	059a      	lsls	r2, r3, #22
 8002a84:	d402      	bmi.n	8002a8c <_vfiprintf_r+0x220>
 8002a86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a88:	f7ff fe55 	bl	8002736 <__retarget_lock_release_recursive>
 8002a8c:	89ab      	ldrh	r3, [r5, #12]
 8002a8e:	065b      	lsls	r3, r3, #25
 8002a90:	f53f af12 	bmi.w	80028b8 <_vfiprintf_r+0x4c>
 8002a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a96:	e711      	b.n	80028bc <_vfiprintf_r+0x50>
 8002a98:	ab03      	add	r3, sp, #12
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	462a      	mov	r2, r5
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <_vfiprintf_r+0x25c>)
 8002aa0:	a904      	add	r1, sp, #16
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f000 f880 	bl	8002ba8 <_printf_i>
 8002aa8:	e7e4      	b.n	8002a74 <_vfiprintf_r+0x208>
 8002aaa:	bf00      	nop
 8002aac:	08003020 	.word	0x08003020
 8002ab0:	08003040 	.word	0x08003040
 8002ab4:	08003000 	.word	0x08003000
 8002ab8:	08003060 	.word	0x08003060
 8002abc:	08003066 	.word	0x08003066
 8002ac0:	0800306a 	.word	0x0800306a
 8002ac4:	00000000 	.word	0x00000000
 8002ac8:	08002847 	.word	0x08002847

08002acc <_printf_common>:
 8002acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad0:	4616      	mov	r6, r2
 8002ad2:	4699      	mov	r9, r3
 8002ad4:	688a      	ldr	r2, [r1, #8]
 8002ad6:	690b      	ldr	r3, [r1, #16]
 8002ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002adc:	4293      	cmp	r3, r2
 8002ade:	bfb8      	it	lt
 8002ae0:	4613      	movlt	r3, r2
 8002ae2:	6033      	str	r3, [r6, #0]
 8002ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ae8:	4607      	mov	r7, r0
 8002aea:	460c      	mov	r4, r1
 8002aec:	b10a      	cbz	r2, 8002af2 <_printf_common+0x26>
 8002aee:	3301      	adds	r3, #1
 8002af0:	6033      	str	r3, [r6, #0]
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	0699      	lsls	r1, r3, #26
 8002af6:	bf42      	ittt	mi
 8002af8:	6833      	ldrmi	r3, [r6, #0]
 8002afa:	3302      	addmi	r3, #2
 8002afc:	6033      	strmi	r3, [r6, #0]
 8002afe:	6825      	ldr	r5, [r4, #0]
 8002b00:	f015 0506 	ands.w	r5, r5, #6
 8002b04:	d106      	bne.n	8002b14 <_printf_common+0x48>
 8002b06:	f104 0a19 	add.w	sl, r4, #25
 8002b0a:	68e3      	ldr	r3, [r4, #12]
 8002b0c:	6832      	ldr	r2, [r6, #0]
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	42ab      	cmp	r3, r5
 8002b12:	dc26      	bgt.n	8002b62 <_printf_common+0x96>
 8002b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b18:	1e13      	subs	r3, r2, #0
 8002b1a:	6822      	ldr	r2, [r4, #0]
 8002b1c:	bf18      	it	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	0692      	lsls	r2, r2, #26
 8002b22:	d42b      	bmi.n	8002b7c <_printf_common+0xb0>
 8002b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b28:	4649      	mov	r1, r9
 8002b2a:	4638      	mov	r0, r7
 8002b2c:	47c0      	blx	r8
 8002b2e:	3001      	adds	r0, #1
 8002b30:	d01e      	beq.n	8002b70 <_printf_common+0xa4>
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	68e5      	ldr	r5, [r4, #12]
 8002b36:	6832      	ldr	r2, [r6, #0]
 8002b38:	f003 0306 	and.w	r3, r3, #6
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	bf08      	it	eq
 8002b40:	1aad      	subeq	r5, r5, r2
 8002b42:	68a3      	ldr	r3, [r4, #8]
 8002b44:	6922      	ldr	r2, [r4, #16]
 8002b46:	bf0c      	ite	eq
 8002b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b4c:	2500      	movne	r5, #0
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	bfc4      	itt	gt
 8002b52:	1a9b      	subgt	r3, r3, r2
 8002b54:	18ed      	addgt	r5, r5, r3
 8002b56:	2600      	movs	r6, #0
 8002b58:	341a      	adds	r4, #26
 8002b5a:	42b5      	cmp	r5, r6
 8002b5c:	d11a      	bne.n	8002b94 <_printf_common+0xc8>
 8002b5e:	2000      	movs	r0, #0
 8002b60:	e008      	b.n	8002b74 <_printf_common+0xa8>
 8002b62:	2301      	movs	r3, #1
 8002b64:	4652      	mov	r2, sl
 8002b66:	4649      	mov	r1, r9
 8002b68:	4638      	mov	r0, r7
 8002b6a:	47c0      	blx	r8
 8002b6c:	3001      	adds	r0, #1
 8002b6e:	d103      	bne.n	8002b78 <_printf_common+0xac>
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b78:	3501      	adds	r5, #1
 8002b7a:	e7c6      	b.n	8002b0a <_printf_common+0x3e>
 8002b7c:	18e1      	adds	r1, r4, r3
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	2030      	movs	r0, #48	; 0x30
 8002b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b86:	4422      	add	r2, r4
 8002b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b90:	3302      	adds	r3, #2
 8002b92:	e7c7      	b.n	8002b24 <_printf_common+0x58>
 8002b94:	2301      	movs	r3, #1
 8002b96:	4622      	mov	r2, r4
 8002b98:	4649      	mov	r1, r9
 8002b9a:	4638      	mov	r0, r7
 8002b9c:	47c0      	blx	r8
 8002b9e:	3001      	adds	r0, #1
 8002ba0:	d0e6      	beq.n	8002b70 <_printf_common+0xa4>
 8002ba2:	3601      	adds	r6, #1
 8002ba4:	e7d9      	b.n	8002b5a <_printf_common+0x8e>
	...

08002ba8 <_printf_i>:
 8002ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bac:	7e0f      	ldrb	r7, [r1, #24]
 8002bae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002bb0:	2f78      	cmp	r7, #120	; 0x78
 8002bb2:	4691      	mov	r9, r2
 8002bb4:	4680      	mov	r8, r0
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	469a      	mov	sl, r3
 8002bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bbe:	d807      	bhi.n	8002bd0 <_printf_i+0x28>
 8002bc0:	2f62      	cmp	r7, #98	; 0x62
 8002bc2:	d80a      	bhi.n	8002bda <_printf_i+0x32>
 8002bc4:	2f00      	cmp	r7, #0
 8002bc6:	f000 80d8 	beq.w	8002d7a <_printf_i+0x1d2>
 8002bca:	2f58      	cmp	r7, #88	; 0x58
 8002bcc:	f000 80a3 	beq.w	8002d16 <_printf_i+0x16e>
 8002bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bd8:	e03a      	b.n	8002c50 <_printf_i+0xa8>
 8002bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bde:	2b15      	cmp	r3, #21
 8002be0:	d8f6      	bhi.n	8002bd0 <_printf_i+0x28>
 8002be2:	a101      	add	r1, pc, #4	; (adr r1, 8002be8 <_printf_i+0x40>)
 8002be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002be8:	08002c41 	.word	0x08002c41
 8002bec:	08002c55 	.word	0x08002c55
 8002bf0:	08002bd1 	.word	0x08002bd1
 8002bf4:	08002bd1 	.word	0x08002bd1
 8002bf8:	08002bd1 	.word	0x08002bd1
 8002bfc:	08002bd1 	.word	0x08002bd1
 8002c00:	08002c55 	.word	0x08002c55
 8002c04:	08002bd1 	.word	0x08002bd1
 8002c08:	08002bd1 	.word	0x08002bd1
 8002c0c:	08002bd1 	.word	0x08002bd1
 8002c10:	08002bd1 	.word	0x08002bd1
 8002c14:	08002d61 	.word	0x08002d61
 8002c18:	08002c85 	.word	0x08002c85
 8002c1c:	08002d43 	.word	0x08002d43
 8002c20:	08002bd1 	.word	0x08002bd1
 8002c24:	08002bd1 	.word	0x08002bd1
 8002c28:	08002d83 	.word	0x08002d83
 8002c2c:	08002bd1 	.word	0x08002bd1
 8002c30:	08002c85 	.word	0x08002c85
 8002c34:	08002bd1 	.word	0x08002bd1
 8002c38:	08002bd1 	.word	0x08002bd1
 8002c3c:	08002d4b 	.word	0x08002d4b
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	1d1a      	adds	r2, r3, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	602a      	str	r2, [r5, #0]
 8002c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0a3      	b.n	8002d9c <_printf_i+0x1f4>
 8002c54:	6820      	ldr	r0, [r4, #0]
 8002c56:	6829      	ldr	r1, [r5, #0]
 8002c58:	0606      	lsls	r6, r0, #24
 8002c5a:	f101 0304 	add.w	r3, r1, #4
 8002c5e:	d50a      	bpl.n	8002c76 <_printf_i+0xce>
 8002c60:	680e      	ldr	r6, [r1, #0]
 8002c62:	602b      	str	r3, [r5, #0]
 8002c64:	2e00      	cmp	r6, #0
 8002c66:	da03      	bge.n	8002c70 <_printf_i+0xc8>
 8002c68:	232d      	movs	r3, #45	; 0x2d
 8002c6a:	4276      	negs	r6, r6
 8002c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c70:	485e      	ldr	r0, [pc, #376]	; (8002dec <_printf_i+0x244>)
 8002c72:	230a      	movs	r3, #10
 8002c74:	e019      	b.n	8002caa <_printf_i+0x102>
 8002c76:	680e      	ldr	r6, [r1, #0]
 8002c78:	602b      	str	r3, [r5, #0]
 8002c7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c7e:	bf18      	it	ne
 8002c80:	b236      	sxthne	r6, r6
 8002c82:	e7ef      	b.n	8002c64 <_printf_i+0xbc>
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	6820      	ldr	r0, [r4, #0]
 8002c88:	1d19      	adds	r1, r3, #4
 8002c8a:	6029      	str	r1, [r5, #0]
 8002c8c:	0601      	lsls	r1, r0, #24
 8002c8e:	d501      	bpl.n	8002c94 <_printf_i+0xec>
 8002c90:	681e      	ldr	r6, [r3, #0]
 8002c92:	e002      	b.n	8002c9a <_printf_i+0xf2>
 8002c94:	0646      	lsls	r6, r0, #25
 8002c96:	d5fb      	bpl.n	8002c90 <_printf_i+0xe8>
 8002c98:	881e      	ldrh	r6, [r3, #0]
 8002c9a:	4854      	ldr	r0, [pc, #336]	; (8002dec <_printf_i+0x244>)
 8002c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2308      	moveq	r3, #8
 8002ca2:	230a      	movne	r3, #10
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002caa:	6865      	ldr	r5, [r4, #4]
 8002cac:	60a5      	str	r5, [r4, #8]
 8002cae:	2d00      	cmp	r5, #0
 8002cb0:	bfa2      	ittt	ge
 8002cb2:	6821      	ldrge	r1, [r4, #0]
 8002cb4:	f021 0104 	bicge.w	r1, r1, #4
 8002cb8:	6021      	strge	r1, [r4, #0]
 8002cba:	b90e      	cbnz	r6, 8002cc0 <_printf_i+0x118>
 8002cbc:	2d00      	cmp	r5, #0
 8002cbe:	d04d      	beq.n	8002d5c <_printf_i+0x1b4>
 8002cc0:	4615      	mov	r5, r2
 8002cc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cc6:	fb03 6711 	mls	r7, r3, r1, r6
 8002cca:	5dc7      	ldrb	r7, [r0, r7]
 8002ccc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002cd0:	4637      	mov	r7, r6
 8002cd2:	42bb      	cmp	r3, r7
 8002cd4:	460e      	mov	r6, r1
 8002cd6:	d9f4      	bls.n	8002cc2 <_printf_i+0x11a>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d10b      	bne.n	8002cf4 <_printf_i+0x14c>
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	07de      	lsls	r6, r3, #31
 8002ce0:	d508      	bpl.n	8002cf4 <_printf_i+0x14c>
 8002ce2:	6923      	ldr	r3, [r4, #16]
 8002ce4:	6861      	ldr	r1, [r4, #4]
 8002ce6:	4299      	cmp	r1, r3
 8002ce8:	bfde      	ittt	le
 8002cea:	2330      	movle	r3, #48	; 0x30
 8002cec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cf0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002cf4:	1b52      	subs	r2, r2, r5
 8002cf6:	6122      	str	r2, [r4, #16]
 8002cf8:	f8cd a000 	str.w	sl, [sp]
 8002cfc:	464b      	mov	r3, r9
 8002cfe:	aa03      	add	r2, sp, #12
 8002d00:	4621      	mov	r1, r4
 8002d02:	4640      	mov	r0, r8
 8002d04:	f7ff fee2 	bl	8002acc <_printf_common>
 8002d08:	3001      	adds	r0, #1
 8002d0a:	d14c      	bne.n	8002da6 <_printf_i+0x1fe>
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d10:	b004      	add	sp, #16
 8002d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d16:	4835      	ldr	r0, [pc, #212]	; (8002dec <_printf_i+0x244>)
 8002d18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d1c:	6829      	ldr	r1, [r5, #0]
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d24:	6029      	str	r1, [r5, #0]
 8002d26:	061d      	lsls	r5, r3, #24
 8002d28:	d514      	bpl.n	8002d54 <_printf_i+0x1ac>
 8002d2a:	07df      	lsls	r7, r3, #31
 8002d2c:	bf44      	itt	mi
 8002d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8002d32:	6023      	strmi	r3, [r4, #0]
 8002d34:	b91e      	cbnz	r6, 8002d3e <_printf_i+0x196>
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	f023 0320 	bic.w	r3, r3, #32
 8002d3c:	6023      	str	r3, [r4, #0]
 8002d3e:	2310      	movs	r3, #16
 8002d40:	e7b0      	b.n	8002ca4 <_printf_i+0xfc>
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f043 0320 	orr.w	r3, r3, #32
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	2378      	movs	r3, #120	; 0x78
 8002d4c:	4828      	ldr	r0, [pc, #160]	; (8002df0 <_printf_i+0x248>)
 8002d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d52:	e7e3      	b.n	8002d1c <_printf_i+0x174>
 8002d54:	0659      	lsls	r1, r3, #25
 8002d56:	bf48      	it	mi
 8002d58:	b2b6      	uxthmi	r6, r6
 8002d5a:	e7e6      	b.n	8002d2a <_printf_i+0x182>
 8002d5c:	4615      	mov	r5, r2
 8002d5e:	e7bb      	b.n	8002cd8 <_printf_i+0x130>
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	6826      	ldr	r6, [r4, #0]
 8002d64:	6961      	ldr	r1, [r4, #20]
 8002d66:	1d18      	adds	r0, r3, #4
 8002d68:	6028      	str	r0, [r5, #0]
 8002d6a:	0635      	lsls	r5, r6, #24
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	d501      	bpl.n	8002d74 <_printf_i+0x1cc>
 8002d70:	6019      	str	r1, [r3, #0]
 8002d72:	e002      	b.n	8002d7a <_printf_i+0x1d2>
 8002d74:	0670      	lsls	r0, r6, #25
 8002d76:	d5fb      	bpl.n	8002d70 <_printf_i+0x1c8>
 8002d78:	8019      	strh	r1, [r3, #0]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	6123      	str	r3, [r4, #16]
 8002d7e:	4615      	mov	r5, r2
 8002d80:	e7ba      	b.n	8002cf8 <_printf_i+0x150>
 8002d82:	682b      	ldr	r3, [r5, #0]
 8002d84:	1d1a      	adds	r2, r3, #4
 8002d86:	602a      	str	r2, [r5, #0]
 8002d88:	681d      	ldr	r5, [r3, #0]
 8002d8a:	6862      	ldr	r2, [r4, #4]
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f7fd fa3e 	bl	8000210 <memchr>
 8002d94:	b108      	cbz	r0, 8002d9a <_printf_i+0x1f2>
 8002d96:	1b40      	subs	r0, r0, r5
 8002d98:	6060      	str	r0, [r4, #4]
 8002d9a:	6863      	ldr	r3, [r4, #4]
 8002d9c:	6123      	str	r3, [r4, #16]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002da4:	e7a8      	b.n	8002cf8 <_printf_i+0x150>
 8002da6:	6923      	ldr	r3, [r4, #16]
 8002da8:	462a      	mov	r2, r5
 8002daa:	4649      	mov	r1, r9
 8002dac:	4640      	mov	r0, r8
 8002dae:	47d0      	blx	sl
 8002db0:	3001      	adds	r0, #1
 8002db2:	d0ab      	beq.n	8002d0c <_printf_i+0x164>
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	079b      	lsls	r3, r3, #30
 8002db8:	d413      	bmi.n	8002de2 <_printf_i+0x23a>
 8002dba:	68e0      	ldr	r0, [r4, #12]
 8002dbc:	9b03      	ldr	r3, [sp, #12]
 8002dbe:	4298      	cmp	r0, r3
 8002dc0:	bfb8      	it	lt
 8002dc2:	4618      	movlt	r0, r3
 8002dc4:	e7a4      	b.n	8002d10 <_printf_i+0x168>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	4632      	mov	r2, r6
 8002dca:	4649      	mov	r1, r9
 8002dcc:	4640      	mov	r0, r8
 8002dce:	47d0      	blx	sl
 8002dd0:	3001      	adds	r0, #1
 8002dd2:	d09b      	beq.n	8002d0c <_printf_i+0x164>
 8002dd4:	3501      	adds	r5, #1
 8002dd6:	68e3      	ldr	r3, [r4, #12]
 8002dd8:	9903      	ldr	r1, [sp, #12]
 8002dda:	1a5b      	subs	r3, r3, r1
 8002ddc:	42ab      	cmp	r3, r5
 8002dde:	dcf2      	bgt.n	8002dc6 <_printf_i+0x21e>
 8002de0:	e7eb      	b.n	8002dba <_printf_i+0x212>
 8002de2:	2500      	movs	r5, #0
 8002de4:	f104 0619 	add.w	r6, r4, #25
 8002de8:	e7f5      	b.n	8002dd6 <_printf_i+0x22e>
 8002dea:	bf00      	nop
 8002dec:	08003071 	.word	0x08003071
 8002df0:	08003082 	.word	0x08003082

08002df4 <__sread>:
 8002df4:	b510      	push	{r4, lr}
 8002df6:	460c      	mov	r4, r1
 8002df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dfc:	f000 f894 	bl	8002f28 <_read_r>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	bfab      	itete	ge
 8002e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e06:	89a3      	ldrhlt	r3, [r4, #12]
 8002e08:	181b      	addge	r3, r3, r0
 8002e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e0e:	bfac      	ite	ge
 8002e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e12:	81a3      	strhlt	r3, [r4, #12]
 8002e14:	bd10      	pop	{r4, pc}

08002e16 <__swrite>:
 8002e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e1a:	461f      	mov	r7, r3
 8002e1c:	898b      	ldrh	r3, [r1, #12]
 8002e1e:	05db      	lsls	r3, r3, #23
 8002e20:	4605      	mov	r5, r0
 8002e22:	460c      	mov	r4, r1
 8002e24:	4616      	mov	r6, r2
 8002e26:	d505      	bpl.n	8002e34 <__swrite+0x1e>
 8002e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f000 f868 	bl	8002f04 <_lseek_r>
 8002e34:	89a3      	ldrh	r3, [r4, #12]
 8002e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e3e:	81a3      	strh	r3, [r4, #12]
 8002e40:	4632      	mov	r2, r6
 8002e42:	463b      	mov	r3, r7
 8002e44:	4628      	mov	r0, r5
 8002e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4a:	f000 b817 	b.w	8002e7c <_write_r>

08002e4e <__sseek>:
 8002e4e:	b510      	push	{r4, lr}
 8002e50:	460c      	mov	r4, r1
 8002e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e56:	f000 f855 	bl	8002f04 <_lseek_r>
 8002e5a:	1c43      	adds	r3, r0, #1
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	bf15      	itete	ne
 8002e60:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e6a:	81a3      	strheq	r3, [r4, #12]
 8002e6c:	bf18      	it	ne
 8002e6e:	81a3      	strhne	r3, [r4, #12]
 8002e70:	bd10      	pop	{r4, pc}

08002e72 <__sclose>:
 8002e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e76:	f000 b813 	b.w	8002ea0 <_close_r>
	...

08002e7c <_write_r>:
 8002e7c:	b538      	push	{r3, r4, r5, lr}
 8002e7e:	4d07      	ldr	r5, [pc, #28]	; (8002e9c <_write_r+0x20>)
 8002e80:	4604      	mov	r4, r0
 8002e82:	4608      	mov	r0, r1
 8002e84:	4611      	mov	r1, r2
 8002e86:	2200      	movs	r2, #0
 8002e88:	602a      	str	r2, [r5, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f7fe fe32 	bl	8001af4 <_write>
 8002e90:	1c43      	adds	r3, r0, #1
 8002e92:	d102      	bne.n	8002e9a <_write_r+0x1e>
 8002e94:	682b      	ldr	r3, [r5, #0]
 8002e96:	b103      	cbz	r3, 8002e9a <_write_r+0x1e>
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	bd38      	pop	{r3, r4, r5, pc}
 8002e9c:	20000188 	.word	0x20000188

08002ea0 <_close_r>:
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4d06      	ldr	r5, [pc, #24]	; (8002ebc <_close_r+0x1c>)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	602b      	str	r3, [r5, #0]
 8002eac:	f7fe fe3e 	bl	8001b2c <_close>
 8002eb0:	1c43      	adds	r3, r0, #1
 8002eb2:	d102      	bne.n	8002eba <_close_r+0x1a>
 8002eb4:	682b      	ldr	r3, [r5, #0]
 8002eb6:	b103      	cbz	r3, 8002eba <_close_r+0x1a>
 8002eb8:	6023      	str	r3, [r4, #0]
 8002eba:	bd38      	pop	{r3, r4, r5, pc}
 8002ebc:	20000188 	.word	0x20000188

08002ec0 <_fstat_r>:
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	4d07      	ldr	r5, [pc, #28]	; (8002ee0 <_fstat_r+0x20>)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	602b      	str	r3, [r5, #0]
 8002ece:	f7fe fe38 	bl	8001b42 <_fstat>
 8002ed2:	1c43      	adds	r3, r0, #1
 8002ed4:	d102      	bne.n	8002edc <_fstat_r+0x1c>
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	b103      	cbz	r3, 8002edc <_fstat_r+0x1c>
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	bd38      	pop	{r3, r4, r5, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000188 	.word	0x20000188

08002ee4 <_isatty_r>:
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	4d06      	ldr	r5, [pc, #24]	; (8002f00 <_isatty_r+0x1c>)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	4604      	mov	r4, r0
 8002eec:	4608      	mov	r0, r1
 8002eee:	602b      	str	r3, [r5, #0]
 8002ef0:	f7fe fe36 	bl	8001b60 <_isatty>
 8002ef4:	1c43      	adds	r3, r0, #1
 8002ef6:	d102      	bne.n	8002efe <_isatty_r+0x1a>
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	b103      	cbz	r3, 8002efe <_isatty_r+0x1a>
 8002efc:	6023      	str	r3, [r4, #0]
 8002efe:	bd38      	pop	{r3, r4, r5, pc}
 8002f00:	20000188 	.word	0x20000188

08002f04 <_lseek_r>:
 8002f04:	b538      	push	{r3, r4, r5, lr}
 8002f06:	4d07      	ldr	r5, [pc, #28]	; (8002f24 <_lseek_r+0x20>)
 8002f08:	4604      	mov	r4, r0
 8002f0a:	4608      	mov	r0, r1
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	2200      	movs	r2, #0
 8002f10:	602a      	str	r2, [r5, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f7fe fe2e 	bl	8001b74 <_lseek>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d102      	bne.n	8002f22 <_lseek_r+0x1e>
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	b103      	cbz	r3, 8002f22 <_lseek_r+0x1e>
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	20000188 	.word	0x20000188

08002f28 <_read_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	4d07      	ldr	r5, [pc, #28]	; (8002f48 <_read_r+0x20>)
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	4608      	mov	r0, r1
 8002f30:	4611      	mov	r1, r2
 8002f32:	2200      	movs	r2, #0
 8002f34:	602a      	str	r2, [r5, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f7fe fdbf 	bl	8001aba <_read>
 8002f3c:	1c43      	adds	r3, r0, #1
 8002f3e:	d102      	bne.n	8002f46 <_read_r+0x1e>
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	b103      	cbz	r3, 8002f46 <_read_r+0x1e>
 8002f44:	6023      	str	r3, [r4, #0]
 8002f46:	bd38      	pop	{r3, r4, r5, pc}
 8002f48:	20000188 	.word	0x20000188

08002f4c <_init>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	bf00      	nop
 8002f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f52:	bc08      	pop	{r3}
 8002f54:	469e      	mov	lr, r3
 8002f56:	4770      	bx	lr

08002f58 <_fini>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	bf00      	nop
 8002f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5e:	bc08      	pop	{r3}
 8002f60:	469e      	mov	lr, r3
 8002f62:	4770      	bx	lr
