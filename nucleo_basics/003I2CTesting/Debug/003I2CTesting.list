
003I2CTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f38  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080010fc  080010fc  000110fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001114  08001114  0001111c  2**0
                  CONTENTS
  4 .ARM          00000000  08001114  08001114  0001111c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001114  0800111c  0001111c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001114  08001114  00011114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001118  08001118  00011118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001111c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000000  0800111c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  0800111c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001111c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001650  00000000  00000000  00011146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000573  00000000  00000000  00012796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00012d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00012f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001ed2  00000000  00000000  00013098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024d8  00000000  00000000  00014f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009b18  00000000  00000000  00017442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00020f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006d8  00000000  00000000  00020fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080010e4 	.word	0x080010e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080010e4 	.word	0x080010e4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
 8000220:	4613      	mov	r3, r2
 8000222:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	78fa      	ldrb	r2, [r7, #3]
 800022e:	0052      	lsls	r2, r2, #1
 8000230:	2103      	movs	r1, #3
 8000232:	fa01 f202 	lsl.w	r2, r1, r2
 8000236:	43d2      	mvns	r2, r2
 8000238:	401a      	ands	r2, r3
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	78b9      	ldrb	r1, [r7, #2]
 8000244:	78fa      	ldrb	r2, [r7, #3]
 8000246:	0052      	lsls	r2, r2, #1
 8000248:	fa01 f202 	lsl.w	r2, r1, r2
 800024c:	431a      	orrs	r2, r3
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	601a      	str	r2, [r3, #0]

}
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr

0800025c <GPIOReadPin>:

uint8_t GPIOReadPin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 800025c:	b480      	push	{r7}
 800025e:	b087      	sub	sp, #28
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	460b      	mov	r3, r1
 8000266:	70fb      	strb	r3, [r7, #3]
	uint32_t value, temp;

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	617b      	str	r3, [r7, #20]

	temp = pGPIO->IDR;
 800026c:	697b      	ldr	r3, [r7, #20]
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	613b      	str	r3, [r7, #16]
	temp &= (1 << GPIOPinNum);
 8000272:	78fb      	ldrb	r3, [r7, #3]
 8000274:	2201      	movs	r2, #1
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	461a      	mov	r2, r3
 800027c:	693b      	ldr	r3, [r7, #16]
 800027e:	4013      	ands	r3, r2
 8000280:	613b      	str	r3, [r7, #16]
	value = (temp >> GPIOPinNum);
 8000282:	78fb      	ldrb	r3, [r7, #3]
 8000284:	693a      	ldr	r2, [r7, #16]
 8000286:	fa22 f303 	lsr.w	r3, r2, r3
 800028a:	60fb      	str	r3, [r7, #12]

	return value;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	b2db      	uxtb	r3, r3
}
 8000290:	4618      	mov	r0, r3
 8000292:	371c      	adds	r7, #28
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr

0800029a <GPIOTogglePin>:
	pGPIO->ODR &= ~(1 << GPIOPinNum);
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
}

void GPIOTogglePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 800029a:	b480      	push	{r7}
 800029c:	b085      	sub	sp, #20
 800029e:	af00      	add	r7, sp, #0
 80002a0:	6078      	str	r0, [r7, #4]
 80002a2:	460b      	mov	r3, r1
 80002a4:	70fb      	strb	r3, [r7, #3]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR ^= (1 << GPIOPinNum);
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	78fa      	ldrb	r2, [r7, #3]
 80002b0:	2101      	movs	r1, #1
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	405a      	eors	r2, r3
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	615a      	str	r2, [r3, #20]
}
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 80002c6:	b480      	push	{r7}
 80002c8:	b085      	sub	sp, #20
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
 80002ce:	460b      	mov	r3, r1
 80002d0:	70fb      	strb	r3, [r7, #3]
 80002d2:	4613      	mov	r3, r2
 80002d4:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 80002da:	78fb      	ldrb	r3, [r7, #3]
 80002dc:	08db      	lsrs	r3, r3, #3
 80002de:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 80002e8:	7afa      	ldrb	r2, [r7, #11]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	3208      	adds	r2, #8
 80002ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002f2:	7aba      	ldrb	r2, [r7, #10]
 80002f4:	0092      	lsls	r2, r2, #2
 80002f6:	210f      	movs	r1, #15
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	43d2      	mvns	r2, r2
 80002fe:	4611      	mov	r1, r2
 8000300:	7afa      	ldrb	r2, [r7, #11]
 8000302:	4019      	ands	r1, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	3208      	adds	r2, #8
 8000308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 800030c:	7afa      	ldrb	r2, [r7, #11]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	3208      	adds	r2, #8
 8000312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000316:	78b9      	ldrb	r1, [r7, #2]
 8000318:	7aba      	ldrb	r2, [r7, #10]
 800031a:	0092      	lsls	r2, r2, #2
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	4611      	mov	r1, r2
 8000322:	7afa      	ldrb	r2, [r7, #11]
 8000324:	4319      	orrs	r1, r3
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3208      	adds	r2, #8
 800032a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	70fb      	strb	r3, [r7, #3]
 8000344:	4613      	mov	r3, r2
 8000346:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	78fa      	ldrb	r2, [r7, #3]
 8000352:	2101      	movs	r1, #1
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	43d2      	mvns	r2, r2
 800035a:	401a      	ands	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	78b9      	ldrb	r1, [r7, #2]
 8000366:	78fa      	ldrb	r2, [r7, #3]
 8000368:	fa01 f202 	lsl.w	r2, r1, r2
 800036c:	431a      	orrs	r2, r3
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	605a      	str	r2, [r3, #4]
}
 8000372:	bf00      	nop
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
 8000388:	4613      	mov	r3, r2
 800038a:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	78fa      	ldrb	r2, [r7, #3]
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	2103      	movs	r1, #3
 800039a:	fa01 f202 	lsl.w	r2, r1, r2
 800039e:	43d2      	mvns	r2, r2
 80003a0:	401a      	ands	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	78b9      	ldrb	r1, [r7, #2]
 80003ac:	78fa      	ldrb	r2, [r7, #3]
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	fa01 f202 	lsl.w	r2, r1, r2
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	60da      	str	r2, [r3, #12]
}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
 80003d0:	4613      	mov	r3, r2
 80003d2:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	78fa      	ldrb	r2, [r7, #3]
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	2103      	movs	r1, #3
 80003e2:	fa01 f202 	lsl.w	r2, r1, r2
 80003e6:	43d2      	mvns	r2, r2
 80003e8:	401a      	ands	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	78b9      	ldrb	r1, [r7, #2]
 80003f4:	78fa      	ldrb	r2, [r7, #3]
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	fa01 f202 	lsl.w	r2, r1, r2
 80003fc:	431a      	orrs	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	609a      	str	r2, [r3, #8]
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr

0800040c <SPIPeriConfig>:
 */

#include "spi_driver.h"

void SPIPeriConfig(uint32_t *SPIAddress, struct SPI_Config_t *pSPIConfig)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	60fb      	str	r3, [r7, #12]

	// 1. Configuring CPHA
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPHA);
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f023 0201 	bic.w	r2, r3, #1
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPhase << SPI_CR1_CPHA);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	683a      	ldr	r2, [r7, #0]
 800042c:	7852      	ldrb	r2, [r2, #1]
 800042e:	431a      	orrs	r2, r3
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	601a      	str	r2, [r3, #0]

	//2. Configuring CPOL
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPOL);
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f023 0202 	bic.w	r2, r3, #2
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPol << SPI_CR1_CPOL);
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	683a      	ldr	r2, [r7, #0]
 8000446:	7812      	ldrb	r2, [r2, #0]
 8000448:	0052      	lsls	r2, r2, #1
 800044a:	431a      	orrs	r2, r3
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	601a      	str	r2, [r3, #0]

	//3. Configuring SPI Device Mode

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_MSTR);
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f023 0204 	bic.w	r2, r3, #4
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDeviceMode << SPI_CR1_MSTR);
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	683a      	ldr	r2, [r7, #0]
 8000462:	7892      	ldrb	r2, [r2, #2]
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	431a      	orrs	r2, r3
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	601a      	str	r2, [r3, #0]

	//4. Configuring SPI Clock Frequency
	pSPI->SPI_CR1 &= ~(0x7 << SPI_CR1_BR);
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockFreq << SPI_CR1_BR);
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	683a      	ldr	r2, [r7, #0]
 800047e:	7912      	ldrb	r2, [r2, #4]
 8000480:	00d2      	lsls	r2, r2, #3
 8000482:	431a      	orrs	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	601a      	str	r2, [r3, #0]

	//5. Configuring SPI Data Frame Format
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_DFF);
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDataFrameFormat << SPI_CR1_DFF);
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	683a      	ldr	r2, [r7, #0]
 800049a:	7952      	ldrb	r2, [r2, #5]
 800049c:	02d2      	lsls	r2, r2, #11
 800049e:	431a      	orrs	r2, r3
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	601a      	str	r2, [r3, #0]

	//6. Configuring the Software Slave Management
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSM);
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISoftwareSlaveManagement << SPI_CR1_SSM);
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	7992      	ldrb	r2, [r2, #6]
 80004b8:	0252      	lsls	r2, r2, #9
 80004ba:	431a      	orrs	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	601a      	str	r2, [r3, #0]

	//7. Configuring the SSI Bit
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISSIFlag << SPI_CR1_SSI);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	683a      	ldr	r2, [r7, #0]
 80004d2:	79d2      	ldrb	r2, [r2, #7]
 80004d4:	0212      	lsls	r2, r2, #8
 80004d6:	431a      	orrs	r2, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	601a      	str	r2, [r3, #0]

	//8. Configuring the SSOE Bit
	pSPI->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	f023 0204 	bic.w	r2, r3, #4
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	605a      	str	r2, [r3, #4]
	pSPI->SPI_CR2 |= (pSPIConfig->SPISSOEFlag << SPI_CR2_SSOE);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	7a12      	ldrb	r2, [r2, #8]
 80004f0:	0092      	lsls	r2, r2, #2
 80004f2:	431a      	orrs	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	605a      	str	r2, [r3, #4]


}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <SPIEnable>:

void SPIEnable(uint32_t *SPIAddress)
{
 8000502:	b480      	push	{r7}
 8000504:	b085      	sub	sp, #20
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	60fb      	str	r3, [r7, #12]

	pSPI->SPI_CR1 |= (1 << SPI_CR1_SPE);
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <SPIGetFlags>:

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
}

uint8_t SPIGetFlags(uint32_t *SPIAddress, uint8_t Flag)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	60fb      	str	r3, [r7, #12]

	return ((pSPI->SPI_SR >> Flag) & 0x1);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	689a      	ldr	r2, [r3, #8]
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	fa22 f303 	lsr.w	r3, r2, r3
 800053e:	b2db      	uxtb	r3, r3
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	b2db      	uxtb	r3, r3

}
 8000546:	4618      	mov	r0, r3
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <SPIMasterRecvDataIT>:
	//3. Enable the TXE Interrupt
	pSPI_Handle->pSPI->SPI_CR2 |= (1 << SPI_CR2_TXEIE);
}

void SPIMasterRecvDataIT(struct SPI_Handle_t *pSPI_Handle, uint8_t *TxBuf, uint8_t *RxBuf, uint8_t len)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	70fb      	strb	r3, [r7, #3]
	//1. Wait until SPI Peripheral is ready
	while(pSPI_Handle->SPI_Peripheral_Status!=SPI_PERIPHERAL_READY);
 800055e:	bf00      	nop
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	7b5b      	ldrb	r3, [r3, #13]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1fb      	bne.n	8000560 <SPIMasterRecvDataIT+0x10>

	//2. Configure the members of the handle structure
	pSPI_Handle->SPI_Peripheral_Status=SPI_PERIPHERAL_BUSY;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2201      	movs	r2, #1
 800056c:	735a      	strb	r2, [r3, #13]
	pSPI_Handle->TxBuf = TxBuf;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	611a      	str	r2, [r3, #16]
	pSPI_Handle->Txlen = len;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	78fa      	ldrb	r2, [r7, #3]
 8000578:	751a      	strb	r2, [r3, #20]
	pSPI_Handle->RxBuf = RxBuf;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	619a      	str	r2, [r3, #24]
	pSPI_Handle->Rxlen = len;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	78fa      	ldrb	r2, [r7, #3]
 8000584:	771a      	strb	r2, [r3, #28]

	//3. Enable the TXE and RXNE Interrupts
	pSPI_Handle->pSPI->SPI_CR2 |= (1 << SPI_CR2_TXEIE);
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000594:	605a      	str	r2, [r3, #4]
	pSPI_Handle->pSPI->SPI_CR2 |= (1 << SPI_CR2_RXNEIE);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005a4:	605a      	str	r2, [r3, #4]
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <SPI_IRQ_Handler>:
	//4. Enable the RXNE Interrupt
	pSPI_Handle->pSPI->SPI_CR2 |= (1 << SPI_CR2_RXNEIE);
}

void SPI_IRQ_Handler(struct SPI_Handle_t *pSPI_Handle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint16_t txeie_status;
	uint16_t rxne_status;
	uint16_t rxneie_status;

	//1. Handling TXE Event
	txe_status=SPIGetFlags((uint32_t *)pSPI_Handle->pSPI,SPI_SR_TXE);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2101      	movs	r1, #1
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffb0 	bl	8000524 <SPIGetFlags>
 80005c4:	4603      	mov	r3, r0
 80005c6:	81fb      	strh	r3, [r7, #14]
	txeie_status=pSPI_Handle->pSPI->SPI_CR2 & (1 << SPI_CR2_TXEIE);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d4:	81bb      	strh	r3, [r7, #12]

	if(txe_status && txeie_status)
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d042      	beq.n	8000662 <SPI_IRQ_Handler+0xb2>
 80005dc:	89bb      	ldrh	r3, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d03f      	beq.n	8000662 <SPI_IRQ_Handler+0xb2>
	{
		if(pSPI_Handle->Txlen > 0)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7d1b      	ldrb	r3, [r3, #20]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d03b      	beq.n	8000662 <SPI_IRQ_Handler+0xb2>
		{
			if(pSPI_Handle->Txlen==1)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7d1b      	ldrb	r3, [r3, #20]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d126      	bne.n	8000640 <SPI_IRQ_Handler+0x90>
			{
				pSPI_Handle->pSPI->SPI_CR2 &= ~(1 << SPI_CR2_TXEIE);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000600:	605a      	str	r2, [r3, #4]
				pSPI_Handle->pSPI->SPI_DR = *(pSPI_Handle->TxBuf);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	691b      	ldr	r3, [r3, #16]
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60da      	str	r2, [r3, #12]
				pSPI_Handle->TxBuf++;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	691b      	ldr	r3, [r3, #16]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	611a      	str	r2, [r3, #16]
				pSPI_Handle->Txlen--;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	7d1b      	ldrb	r3, [r3, #20]
 800061c:	3b01      	subs	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	751a      	strb	r2, [r3, #20]

				while(!SPIGetFlags((uint32_t *)pSPI_Handle->pSPI,SPI_SR_TXE));
 8000624:	bf00      	nop
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2101      	movs	r1, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff79 	bl	8000524 <SPIGetFlags>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0f6      	beq.n	8000626 <SPI_IRQ_Handler+0x76>

				pSPI_Handle->SPI_Peripheral_Status=SPI_PERIPHERAL_READY;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	735a      	strb	r2, [r3, #13]
 800063e:	e010      	b.n	8000662 <SPI_IRQ_Handler+0xb2>

			}
			else
			{
				pSPI_Handle->pSPI->SPI_DR = *(pSPI_Handle->TxBuf);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	60da      	str	r2, [r3, #12]
				pSPI_Handle->TxBuf++;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	691b      	ldr	r3, [r3, #16]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	611a      	str	r2, [r3, #16]
				pSPI_Handle->Txlen--;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7d1b      	ldrb	r3, [r3, #20]
 800065a:	3b01      	subs	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	751a      	strb	r2, [r3, #20]
		}
	}

	//2. Handling RXNE Event

	rxne_status=SPIGetFlags((uint32_t *)pSPI_Handle->pSPI,SPI_SR_RXNE);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff5b 	bl	8000524 <SPIGetFlags>
 800066e:	4603      	mov	r3, r0
 8000670:	817b      	strh	r3, [r7, #10]
	rxneie_status=pSPI_Handle->pSPI->SPI_CR2 & (1 << SPI_CR2_RXNEIE);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	b29b      	uxth	r3, r3
 800067a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067e:	813b      	strh	r3, [r7, #8]

	if(rxne_status && rxneie_status)
 8000680:	897b      	ldrh	r3, [r7, #10]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d03d      	beq.n	8000702 <SPI_IRQ_Handler+0x152>
 8000686:	893b      	ldrh	r3, [r7, #8]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d03a      	beq.n	8000702 <SPI_IRQ_Handler+0x152>
	{
		if(pSPI_Handle->Rxlen > 0)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	7f1b      	ldrb	r3, [r3, #28]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d036      	beq.n	8000702 <SPI_IRQ_Handler+0x152>
		{
			if(pSPI_Handle->Rxlen==1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	7f1b      	ldrb	r3, [r3, #28]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d120      	bne.n	80006de <SPI_IRQ_Handler+0x12e>
			{
				pSPI_Handle->pSPI->SPI_CR2 &= ~(1 << SPI_CR2_RXNEIE);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006aa:	605a      	str	r2, [r3, #4]
				*(pSPI_Handle->RxBuf)=pSPI_Handle->pSPI->SPI_DR;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	701a      	strb	r2, [r3, #0]
				pSPI_Handle->RxBuf++;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	619a      	str	r2, [r3, #24]
				pSPI_Handle->Rxlen--;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7f1b      	ldrb	r3, [r3, #28]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	771a      	strb	r2, [r3, #28]
				pSPI_Handle->SPI_Peripheral_Status=SPI_PERIPHERAL_READY;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	735a      	strb	r2, [r3, #13]
				SPI_ApplicationCallback(APP_EVENT_RX_CMPLT);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f000 fb06 	bl	8000ce8 <SPI_ApplicationCallback>
		}
	}

	//3. Handling Error Events

}
 80006dc:	e011      	b.n	8000702 <SPI_IRQ_Handler+0x152>
				*(pSPI_Handle->RxBuf)=pSPI_Handle->pSPI->SPI_DR;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68da      	ldr	r2, [r3, #12]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	701a      	strb	r2, [r3, #0]
				pSPI_Handle->RxBuf++;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	619a      	str	r2, [r3, #24]
				pSPI_Handle->Rxlen--;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7f1b      	ldrb	r3, [r3, #28]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	771a      	strb	r2, [r3, #28]
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a8a      	ldr	r2, [pc, #552]	; (8000940 <EnablePeriClk+0x234>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d108      	bne.n	800072e <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800071c:	4b89      	ldr	r3, [pc, #548]	; (8000944 <EnablePeriClk+0x238>)
 800071e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f043 0201 	orr.w	r2, r3, #1
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == USART6) {
				pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
				*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
	}
}
 800072c:	e102      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOB) {
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a85      	ldr	r2, [pc, #532]	; (8000948 <EnablePeriClk+0x23c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d108      	bne.n	8000748 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000736:	4b83      	ldr	r3, [pc, #524]	; (8000944 <EnablePeriClk+0x238>)
 8000738:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f043 0202 	orr.w	r2, r3, #2
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	601a      	str	r2, [r3, #0]
}
 8000746:	e0f5      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOC) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a80      	ldr	r2, [pc, #512]	; (800094c <EnablePeriClk+0x240>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d108      	bne.n	8000762 <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000750:	4b7c      	ldr	r3, [pc, #496]	; (8000944 <EnablePeriClk+0x238>)
 8000752:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f043 0204 	orr.w	r2, r3, #4
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	e0e8      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOD) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a7a      	ldr	r2, [pc, #488]	; (8000950 <EnablePeriClk+0x244>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d108      	bne.n	800077c <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800076a:	4b76      	ldr	r3, [pc, #472]	; (8000944 <EnablePeriClk+0x238>)
 800076c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f043 0208 	orr.w	r2, r3, #8
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	601a      	str	r2, [r3, #0]
}
 800077a:	e0db      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOE) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a75      	ldr	r2, [pc, #468]	; (8000954 <EnablePeriClk+0x248>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d108      	bne.n	8000796 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8000784:	4b6f      	ldr	r3, [pc, #444]	; (8000944 <EnablePeriClk+0x238>)
 8000786:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f043 0210 	orr.w	r2, r3, #16
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	e0ce      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOF) {
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a6f      	ldr	r2, [pc, #444]	; (8000958 <EnablePeriClk+0x24c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d108      	bne.n	80007b0 <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800079e:	4b69      	ldr	r3, [pc, #420]	; (8000944 <EnablePeriClk+0x238>)
 80007a0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f043 0220 	orr.w	r2, r3, #32
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	601a      	str	r2, [r3, #0]
}
 80007ae:	e0c1      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOG) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a6a      	ldr	r2, [pc, #424]	; (800095c <EnablePeriClk+0x250>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d108      	bne.n	80007ca <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80007b8:	4b62      	ldr	r3, [pc, #392]	; (8000944 <EnablePeriClk+0x238>)
 80007ba:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	e0b4      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOH) {
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a64      	ldr	r2, [pc, #400]	; (8000960 <EnablePeriClk+0x254>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d108      	bne.n	80007e4 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80007d2:	4b5c      	ldr	r3, [pc, #368]	; (8000944 <EnablePeriClk+0x238>)
 80007d4:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	601a      	str	r2, [r3, #0]
}
 80007e2:	e0a7      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == GPIOI) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a5f      	ldr	r2, [pc, #380]	; (8000964 <EnablePeriClk+0x258>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d108      	bne.n	80007fe <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80007ec:	4b55      	ldr	r3, [pc, #340]	; (8000944 <EnablePeriClk+0x238>)
 80007ee:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	601a      	str	r2, [r3, #0]
}
 80007fc:	e09a      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == SPI1) {
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a59      	ldr	r2, [pc, #356]	; (8000968 <EnablePeriClk+0x25c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d108      	bne.n	8000818 <EnablePeriClk+0x10c>
			pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000806:	4b59      	ldr	r3, [pc, #356]	; (800096c <EnablePeriClk+0x260>)
 8000808:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	601a      	str	r2, [r3, #0]
}
 8000816:	e08d      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == SPI2) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a55      	ldr	r2, [pc, #340]	; (8000970 <EnablePeriClk+0x264>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d108      	bne.n	8000832 <EnablePeriClk+0x126>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000820:	4b54      	ldr	r3, [pc, #336]	; (8000974 <EnablePeriClk+0x268>)
 8000822:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	e080      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == SPI3) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a50      	ldr	r2, [pc, #320]	; (8000978 <EnablePeriClk+0x26c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d108      	bne.n	800084c <EnablePeriClk+0x140>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800083a:	4b4e      	ldr	r3, [pc, #312]	; (8000974 <EnablePeriClk+0x268>)
 800083c:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	601a      	str	r2, [r3, #0]
}
 800084a:	e073      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == I2C1) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a4b      	ldr	r2, [pc, #300]	; (800097c <EnablePeriClk+0x270>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d108      	bne.n	8000866 <EnablePeriClk+0x15a>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000854:	4b47      	ldr	r3, [pc, #284]	; (8000974 <EnablePeriClk+0x268>)
 8000856:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	e066      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == I2C2) {
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a45      	ldr	r2, [pc, #276]	; (8000980 <EnablePeriClk+0x274>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d108      	bne.n	8000880 <EnablePeriClk+0x174>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <EnablePeriClk+0x268>)
 8000870:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
}
 800087e:	e059      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == I2C3) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a40      	ldr	r2, [pc, #256]	; (8000984 <EnablePeriClk+0x278>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d108      	bne.n	800089a <EnablePeriClk+0x18e>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8000888:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <EnablePeriClk+0x268>)
 800088a:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	e04c      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == USART1) {
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a3a      	ldr	r2, [pc, #232]	; (8000988 <EnablePeriClk+0x27c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d108      	bne.n	80008b4 <EnablePeriClk+0x1a8>
				pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <EnablePeriClk+0x260>)
 80008a4:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f043 0210 	orr.w	r2, r3, #16
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	601a      	str	r2, [r3, #0]
}
 80008b2:	e03f      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == USART2) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a35      	ldr	r2, [pc, #212]	; (800098c <EnablePeriClk+0x280>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d108      	bne.n	80008ce <EnablePeriClk+0x1c2>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80008bc:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <EnablePeriClk+0x268>)
 80008be:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	601a      	str	r2, [r3, #0]
}
 80008cc:	e032      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == USART3) {
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a2f      	ldr	r2, [pc, #188]	; (8000990 <EnablePeriClk+0x284>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d108      	bne.n	80008e8 <EnablePeriClk+0x1dc>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <EnablePeriClk+0x268>)
 80008d8:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	601a      	str	r2, [r3, #0]
}
 80008e6:	e025      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == UART4) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a2a      	ldr	r2, [pc, #168]	; (8000994 <EnablePeriClk+0x288>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d108      	bne.n	8000902 <EnablePeriClk+0x1f6>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <EnablePeriClk+0x268>)
 80008f2:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	e018      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == UART5) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a24      	ldr	r2, [pc, #144]	; (8000998 <EnablePeriClk+0x28c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d108      	bne.n	800091c <EnablePeriClk+0x210>
				pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <EnablePeriClk+0x268>)
 800090c:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	e00b      	b.n	8000934 <EnablePeriClk+0x228>
	else if (PeripheralAddress == USART6) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a1f      	ldr	r2, [pc, #124]	; (800099c <EnablePeriClk+0x290>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d107      	bne.n	8000934 <EnablePeriClk+0x228>
				pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <EnablePeriClk+0x260>)
 8000926:	60fb      	str	r3, [r7, #12]
				*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f043 0220 	orr.w	r2, r3, #32
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	601a      	str	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40020000 	.word	0x40020000
 8000944:	40023830 	.word	0x40023830
 8000948:	40020400 	.word	0x40020400
 800094c:	40020800 	.word	0x40020800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40021000 	.word	0x40021000
 8000958:	40021400 	.word	0x40021400
 800095c:	40021800 	.word	0x40021800
 8000960:	40021c00 	.word	0x40021c00
 8000964:	40022000 	.word	0x40022000
 8000968:	40013000 	.word	0x40013000
 800096c:	40023844 	.word	0x40023844
 8000970:	40003800 	.word	0x40003800
 8000974:	40023840 	.word	0x40023840
 8000978:	40003c00 	.word	0x40003c00
 800097c:	40005400 	.word	0x40005400
 8000980:	40005800 	.word	0x40005800
 8000984:	40005c00 	.word	0x40005c00
 8000988:	40011000 	.word	0x40011000
 800098c:	40004400 	.word	0x40004400
 8000990:	40004800 	.word	0x40004800
 8000994:	40004c00 	.word	0x40004c00
 8000998:	40005000 	.word	0x40005000
 800099c:	40011400 	.word	0x40011400

080009a0 <NVIC_EnableIRQ>:
	}

}

void NVIC_EnableIRQ(uint8_t IRQNum)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	uint32_t *pNVIC_ISER;
	uint32_t NVICRegisterNum = IRQNum/32;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	095b      	lsrs	r3, r3, #5
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	617b      	str	r3, [r7, #20]
	uint32_t NVICBitPos = IRQNum%32;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 031f 	and.w	r3, r3, #31
 80009b8:	613b      	str	r3, [r7, #16]

	pNVIC_ISER = (uint32_t*) NVIC_ISER_BASE_ADDR + NVICRegisterNum;
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009c2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80009c6:	60fb      	str	r3, [r7, #12]

	*pNVIC_ISER |= (1 << NVICBitPos);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2101      	movs	r1, #1
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	fa01 f202 	lsl.w	r2, r1, r2
 80009d4:	431a      	orrs	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	371c      	adds	r7, #28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <USART_Init>:
#include <stdio.h>

extern void USART_RXNEInterruptCallback(uint8_t data);

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d110      	bne.n	8000a16 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	68da      	ldr	r2, [r3, #12]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f042 0208 	orr.w	r2, r2, #8
 8000a02:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f022 0204 	bic.w	r2, r2, #4
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	e028      	b.n	8000a68 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d110      	bne.n	8000a40 <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f022 0208 	bic.w	r2, r2, #8
 8000a2c:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f042 0204 	orr.w	r2, r2, #4
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	e013      	b.n	8000a68 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d10f      	bne.n	8000a68 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	68da      	ldr	r2, [r3, #12]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f042 0208 	orr.w	r2, r2, #8
 8000a56:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f042 0204 	orr.w	r2, r2, #4
 8000a66:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d108      	bne.n	8000a82 <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	68da      	ldr	r2, [r3, #12]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	e00b      	b.n	8000a9a <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d107      	bne.n	8000a9a <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a98:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	691a      	ldr	r2, [r3, #16]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000aa8:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6919      	ldr	r1, [r3, #16]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	031a      	lsls	r2, r3, #12
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	430a      	orrs	r2, r1
 8000abc:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d108      	bne.n	8000ad8 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	e028      	b.n	8000b2a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	691b      	ldr	r3, [r3, #16]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d110      	bne.n	8000b02 <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000aee:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68da      	ldr	r2, [r3, #12]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	e013      	b.n	8000b2a <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	691b      	ldr	r3, [r3, #16]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d10f      	bne.n	8000b2a <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b18:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b28:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f8a7 	bl	8000c84 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d110      	bne.n	8000b60 <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	695a      	ldr	r2, [r3, #20]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b4c:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	695a      	ldr	r2, [r3, #20]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b5c:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8000b5e:	e03d      	b.n	8000bdc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d110      	bne.n	8000b8a <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b76:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b86:	615a      	str	r2, [r3, #20]
}
 8000b88:	e028      	b.n	8000bdc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d110      	bne.n	8000bb4 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	695a      	ldr	r2, [r3, #20]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ba0:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	695a      	ldr	r2, [r3, #20]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bb0:	615a      	str	r2, [r3, #20]
}
 8000bb2:	e013      	b.n	8000bdc <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d10f      	bne.n	8000bdc <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bca:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	695a      	ldr	r2, [r3, #20]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bda:	615a      	str	r2, [r3, #20]
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bfa:	60da      	str	r2, [r3, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e000      	b.n	8000c26 <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000c3c:	e012      	b.n	8000c64 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8000c3e:	bf00      	nop
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff ffdf 	bl	8000c06 <USART_GetFlagStatus>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0f8      	beq.n	8000c40 <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
		Len--;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1e9      	bne.n	8000c3e <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 8000c6a:	bf00      	nop
 8000c6c:	2140      	movs	r1, #64	; 0x40
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff ffc9 	bl	8000c06 <USART_GetFlagStatus>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f8      	beq.n	8000c6c <USART_SendData+0x3c>
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8000c8e:	f240 6383 	movw	r3, #1667	; 0x683
 8000c92:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	609a      	str	r2, [r3, #8]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
	...

08000ca8 <delay>:
uint8_t MessageLen[2];

static void NumToString(uint8_t Num, char *NumString);

void delay(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
	uint32_t j;
	for(j=0;j<SLEEP_COUNT;j++);
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	e002      	b.n	8000cba <delay+0x12>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <delay+0x28>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d9f8      	bls.n	8000cb4 <delay+0xc>
}
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	0007a11f 	.word	0x0007a11f

08000cd4 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	SPI_IRQ_Handler(&SPI2_Handle);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <SPI2_IRQHandler+0x10>)
 8000cda:	f7ff fc69 	bl	80005b0 <SPI_IRQ_Handler>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000001c 	.word	0x2000001c

08000ce8 <SPI_ApplicationCallback>:

void SPI_ApplicationCallback(uint8_t Event)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	flag=1;
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <SPI_ApplicationCallback+0x1c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
	(void) Event;
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000058 	.word	0x20000058

08000d08 <main>:

int main(void)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
	char MessageLenString[6] = {48,49,50,'\r','\n'};
 8000d0e:	4a91      	ldr	r2, [pc, #580]	; (8000f54 <main+0x24c>)
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d18:	6018      	str	r0, [r3, #0]
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	8019      	strh	r1, [r3, #0]
	char MessageLenStringPrefix[] = "Message Len: ";
 8000d1e:	4b8e      	ldr	r3, [pc, #568]	; (8000f58 <main+0x250>)
 8000d20:	463c      	mov	r4, r7
 8000d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d24:	c407      	stmia	r4!, {r0, r1, r2}
 8000d26:	8023      	strh	r3, [r4, #0]

	//GPIO Pin Configuration for Button and LED
	EnablePeriClk(GPIOA);
 8000d28:	488c      	ldr	r0, [pc, #560]	; (8000f5c <main+0x254>)
 8000d2a:	f7ff fcef 	bl	800070c <EnablePeriClk>
	EnablePeriClk(GPIOC);
 8000d2e:	488c      	ldr	r0, [pc, #560]	; (8000f60 <main+0x258>)
 8000d30:	f7ff fcec 	bl	800070c <EnablePeriClk>
	GPIOSetMode(GPIOA,GPIO_PIN_NUM_OUTPUT,GPIO_MODE_OUTPUT);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2105      	movs	r1, #5
 8000d38:	4888      	ldr	r0, [pc, #544]	; (8000f5c <main+0x254>)
 8000d3a:	f7ff fa6b 	bl	8000214 <GPIOSetMode>
	GPIOSetMode(GPIOC,GPIO_PIN_NUM_INPUT,GPIO_MODE_INPUT);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	210d      	movs	r1, #13
 8000d42:	4887      	ldr	r0, [pc, #540]	; (8000f60 <main+0x258>)
 8000d44:	f7ff fa66 	bl	8000214 <GPIOSetMode>

	//GPIO Pin Configuration for SPI Port
	EnablePeriClk(GPIOB);
 8000d48:	4886      	ldr	r0, [pc, #536]	; (8000f64 <main+0x25c>)
 8000d4a:	f7ff fcdf 	bl	800070c <EnablePeriClk>
	GPIOSetMode(GPIOB,SPI_PIN_MOSI,GPIO_MODE_ALTFN);
 8000d4e:	2202      	movs	r2, #2
 8000d50:	210f      	movs	r1, #15
 8000d52:	4884      	ldr	r0, [pc, #528]	; (8000f64 <main+0x25c>)
 8000d54:	f7ff fa5e 	bl	8000214 <GPIOSetMode>
	GPIOSetMode(GPIOB,SPI_PIN_MISO,GPIO_MODE_ALTFN);
 8000d58:	2202      	movs	r2, #2
 8000d5a:	210e      	movs	r1, #14
 8000d5c:	4881      	ldr	r0, [pc, #516]	; (8000f64 <main+0x25c>)
 8000d5e:	f7ff fa59 	bl	8000214 <GPIOSetMode>
	GPIOSetMode(GPIOB,SPI_PIN_SCLK,GPIO_MODE_ALTFN);
 8000d62:	2202      	movs	r2, #2
 8000d64:	210d      	movs	r1, #13
 8000d66:	487f      	ldr	r0, [pc, #508]	; (8000f64 <main+0x25c>)
 8000d68:	f7ff fa54 	bl	8000214 <GPIOSetMode>
	GPIOSetMode(GPIOB,SPI_PIN_SS,GPIO_MODE_ALTFN);
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	210c      	movs	r1, #12
 8000d70:	487c      	ldr	r0, [pc, #496]	; (8000f64 <main+0x25c>)
 8000d72:	f7ff fa4f 	bl	8000214 <GPIOSetMode>
	GPIOSetAltFn(GPIOB,SPI_PIN_MOSI,GPIO_ALTFN_5);
 8000d76:	2205      	movs	r2, #5
 8000d78:	210f      	movs	r1, #15
 8000d7a:	487a      	ldr	r0, [pc, #488]	; (8000f64 <main+0x25c>)
 8000d7c:	f7ff faa3 	bl	80002c6 <GPIOSetAltFn>
	GPIOSetAltFn(GPIOB,SPI_PIN_MISO,GPIO_ALTFN_5);
 8000d80:	2205      	movs	r2, #5
 8000d82:	210e      	movs	r1, #14
 8000d84:	4877      	ldr	r0, [pc, #476]	; (8000f64 <main+0x25c>)
 8000d86:	f7ff fa9e 	bl	80002c6 <GPIOSetAltFn>
	GPIOSetAltFn(GPIOB,SPI_PIN_SCLK,GPIO_ALTFN_5);
 8000d8a:	2205      	movs	r2, #5
 8000d8c:	210d      	movs	r1, #13
 8000d8e:	4875      	ldr	r0, [pc, #468]	; (8000f64 <main+0x25c>)
 8000d90:	f7ff fa99 	bl	80002c6 <GPIOSetAltFn>
	GPIOSetAltFn(GPIOB,SPI_PIN_SS,GPIO_ALTFN_5);
 8000d94:	2205      	movs	r2, #5
 8000d96:	210c      	movs	r1, #12
 8000d98:	4872      	ldr	r0, [pc, #456]	; (8000f64 <main+0x25c>)
 8000d9a:	f7ff fa94 	bl	80002c6 <GPIOSetAltFn>

	//GPIO Pin Configuration for USART Port
	GPIOSetMode(GPIOA,UART_TX_PIN,GPIO_MODE_ALTFN);
 8000d9e:	2202      	movs	r2, #2
 8000da0:	2109      	movs	r1, #9
 8000da2:	486e      	ldr	r0, [pc, #440]	; (8000f5c <main+0x254>)
 8000da4:	f7ff fa36 	bl	8000214 <GPIOSetMode>
	GPIOSetMode(GPIOA,UART_RX_PIN,GPIO_MODE_ALTFN);
 8000da8:	2202      	movs	r2, #2
 8000daa:	210a      	movs	r1, #10
 8000dac:	486b      	ldr	r0, [pc, #428]	; (8000f5c <main+0x254>)
 8000dae:	f7ff fa31 	bl	8000214 <GPIOSetMode>
	GPIOSetAltFn(GPIOA,UART_TX_PIN,GPIO_ALTFN_7);
 8000db2:	2207      	movs	r2, #7
 8000db4:	2109      	movs	r1, #9
 8000db6:	4869      	ldr	r0, [pc, #420]	; (8000f5c <main+0x254>)
 8000db8:	f7ff fa85 	bl	80002c6 <GPIOSetAltFn>
	GPIOSetAltFn(GPIOA,UART_RX_PIN,GPIO_ALTFN_7);
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	210a      	movs	r1, #10
 8000dc0:	4866      	ldr	r0, [pc, #408]	; (8000f5c <main+0x254>)
 8000dc2:	f7ff fa80 	bl	80002c6 <GPIOSetAltFn>
	GPIOSetOutputType(GPIOA,UART_TX_PIN,GPIO_OPTYPE_PP);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2109      	movs	r1, #9
 8000dca:	4864      	ldr	r0, [pc, #400]	; (8000f5c <main+0x254>)
 8000dcc:	f7ff fab4 	bl	8000338 <GPIOSetOutputType>
	GPIOSetOutputType(GPIOA,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	210a      	movs	r1, #10
 8000dd4:	4861      	ldr	r0, [pc, #388]	; (8000f5c <main+0x254>)
 8000dd6:	f7ff faaf 	bl	8000338 <GPIOSetOutputType>
	GPIOSetOutputSpeed(GPIOA,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 8000dda:	2202      	movs	r2, #2
 8000ddc:	2109      	movs	r1, #9
 8000dde:	485f      	ldr	r0, [pc, #380]	; (8000f5c <main+0x254>)
 8000de0:	f7ff faf0 	bl	80003c4 <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(GPIOA,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 8000de4:	2202      	movs	r2, #2
 8000de6:	210a      	movs	r1, #10
 8000de8:	485c      	ldr	r0, [pc, #368]	; (8000f5c <main+0x254>)
 8000dea:	f7ff faeb 	bl	80003c4 <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(GPIOA,UART_TX_PIN,GPIO_PULL_UP);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2109      	movs	r1, #9
 8000df2:	485a      	ldr	r0, [pc, #360]	; (8000f5c <main+0x254>)
 8000df4:	f7ff fac2 	bl	800037c <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(GPIOA,UART_RX_PIN,GPIO_PULL_UP);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	210a      	movs	r1, #10
 8000dfc:	4857      	ldr	r0, [pc, #348]	; (8000f5c <main+0x254>)
 8000dfe:	f7ff fabd 	bl	800037c <GPIOSetPullUpDownConfig>

	//SPI Port Configuration
	SPI2_Handle.pSPI = (struct SPI_RegDef_t *) SPI2;
 8000e02:	4b59      	ldr	r3, [pc, #356]	; (8000f68 <main+0x260>)
 8000e04:	4a59      	ldr	r2, [pc, #356]	; (8000f6c <main+0x264>)
 8000e06:	601a      	str	r2, [r3, #0]
	SPI2_Handle.SPI_Config.SPIDeviceMode = SPI_DEVICE_MODE_MASTER;
 8000e08:	4b57      	ldr	r3, [pc, #348]	; (8000f68 <main+0x260>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	719a      	strb	r2, [r3, #6]
	SPI2_Handle.SPI_Config.SPIClockPol = SPI_CLK_POL_0;
 8000e0e:	4b56      	ldr	r3, [pc, #344]	; (8000f68 <main+0x260>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	711a      	strb	r2, [r3, #4]
	SPI2_Handle.SPI_Config.SPIClockPhase = SPI_CLK_PHA_LE;
 8000e14:	4b54      	ldr	r3, [pc, #336]	; (8000f68 <main+0x260>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	715a      	strb	r2, [r3, #5]
	SPI2_Handle.SPI_Config.SPIClockFreq = SPI_CLK_FREQ_DIV256;
 8000e1a:	4b53      	ldr	r3, [pc, #332]	; (8000f68 <main+0x260>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	721a      	strb	r2, [r3, #8]
	SPI2_Handle.SPI_Config.SPIDataFrameFormat = SPI_DFF_8_BITS;
 8000e20:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <main+0x260>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	725a      	strb	r2, [r3, #9]
	SPI2_Handle.SPI_Config.SPISoftwareSlaveManagement = SPI_SW_SLAVE_MGNT_DI;
 8000e26:	4b50      	ldr	r3, [pc, #320]	; (8000f68 <main+0x260>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	729a      	strb	r2, [r3, #10]
	SPI2_Handle.SPI_Config.SPISSIFlag = SPI_SSI_1;
 8000e2c:	4b4e      	ldr	r3, [pc, #312]	; (8000f68 <main+0x260>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	72da      	strb	r2, [r3, #11]
	SPI2_Handle.SPI_Config.SPISSOEFlag = SPI_SSOE_EN;
 8000e32:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <main+0x260>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	731a      	strb	r2, [r3, #12]
	SPI2_Handle.SPI_Peripheral_Status=SPI_PERIPHERAL_READY;
 8000e38:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <main+0x260>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	735a      	strb	r2, [r3, #13]
	SPI2_Handle.TxBuf=NULL;
 8000e3e:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <main+0x260>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
	SPI2_Handle.Txlen=0;
 8000e44:	4b48      	ldr	r3, [pc, #288]	; (8000f68 <main+0x260>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	751a      	strb	r2, [r3, #20]
	SPI2_Handle.RxBuf=NULL;
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <main+0x260>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
	SPI2_Handle.Rxlen=0;
 8000e50:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <main+0x260>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	771a      	strb	r2, [r3, #28]

	EnablePeriClk((uint32_t*)SPI2_Handle.pSPI);
 8000e56:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <main+0x260>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fc56 	bl	800070c <EnablePeriClk>
	SPIPeriConfig((uint32_t*)SPI2_Handle.pSPI, &SPI2_Handle.SPI_Config);
 8000e60:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <main+0x260>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4942      	ldr	r1, [pc, #264]	; (8000f70 <main+0x268>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fad0 	bl	800040c <SPIPeriConfig>
	SPIEnable((uint32_t*)SPI2_Handle.pSPI);
 8000e6c:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <main+0x260>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb46 	bl	8000502 <SPIEnable>

	//Enabling the IRQ for SPI2 Peripheral
	NVIC_EnableIRQ(SPI2_IRQ_NUM);
 8000e76:	2024      	movs	r0, #36	; 0x24
 8000e78:	f7ff fd92 	bl	80009a0 <NVIC_EnableIRQ>

	//USART Port Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART1;
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <main+0x26c>)
 8000e7e:	4a3e      	ldr	r2, [pc, #248]	; (8000f78 <main+0x270>)
 8000e80:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 8000e82:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <main+0x26c>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 8000e88:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <main+0x26c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8000e8e:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <main+0x26c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000e94:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <main+0x26c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 8000e9a:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <main+0x26c>)
 8000e9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ea0:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <main+0x26c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART1);
 8000ea8:	4833      	ldr	r0, [pc, #204]	; (8000f78 <main+0x270>)
 8000eaa:	f7ff fc2f 	bl	800070c <EnablePeriClk>
	USART_Init(&Test_USART);
 8000eae:	4831      	ldr	r0, [pc, #196]	; (8000f74 <main+0x26c>)
 8000eb0:	f7ff fd98 	bl	80009e4 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 8000eb4:	482f      	ldr	r0, [pc, #188]	; (8000f74 <main+0x26c>)
 8000eb6:	f7ff fe95 	bl	8000be4 <USART_PeripheralEnable>


	while(1)
	{
		while(GPIOReadPin(GPIOC,GPIO_PIN_NUM_INPUT) == GPIO_HIGH);
 8000eba:	bf00      	nop
 8000ebc:	210d      	movs	r1, #13
 8000ebe:	4828      	ldr	r0, [pc, #160]	; (8000f60 <main+0x258>)
 8000ec0:	f7ff f9cc 	bl	800025c <GPIOReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d0f8      	beq.n	8000ebc <main+0x1b4>

		flag=0;
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <main+0x274>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
		SPIMasterRecvDataIT(&SPI2_Handle,(uint8_t *)dummy_tx,MessageLen,2);    //Dummy Data Transmit for 2 bytes
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <main+0x278>)
 8000ed4:	492b      	ldr	r1, [pc, #172]	; (8000f84 <main+0x27c>)
 8000ed6:	4824      	ldr	r0, [pc, #144]	; (8000f68 <main+0x260>)
 8000ed8:	f7ff fb3a 	bl	8000550 <SPIMasterRecvDataIT>
		while(flag==0);
 8000edc:	bf00      	nop
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <main+0x274>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0fb      	beq.n	8000ede <main+0x1d6>

		flag=0;
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <main+0x274>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
		SPIMasterRecvDataIT(&SPI2_Handle,(uint8_t *)dummy_tx,(uint8_t *)message,MessageLen[0]);
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <main+0x278>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <main+0x280>)
 8000ef2:	4924      	ldr	r1, [pc, #144]	; (8000f84 <main+0x27c>)
 8000ef4:	481c      	ldr	r0, [pc, #112]	; (8000f68 <main+0x260>)
 8000ef6:	f7ff fb2b 	bl	8000550 <SPIMasterRecvDataIT>
		while(flag==0);
 8000efa:	bf00      	nop
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <main+0x274>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0fb      	beq.n	8000efc <main+0x1f4>

		NumToString(MessageLen[0], MessageLenString);
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <main+0x278>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	f107 0210 	add.w	r2, r7, #16
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f83c 	bl	8000f8c <NumToString>
		USART_SendData(&Test_USART, (uint8_t *)MessageLenStringPrefix, (uint32_t) strlen(MessageLenStringPrefix));
 8000f14:	463b      	mov	r3, r7
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff f974 	bl	8000204 <strlen>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4814      	ldr	r0, [pc, #80]	; (8000f74 <main+0x26c>)
 8000f24:	f7ff fe84 	bl	8000c30 <USART_SendData>
		USART_SendData(&Test_USART, (uint8_t *)MessageLenString, 5);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	2205      	movs	r2, #5
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <main+0x26c>)
 8000f32:	f7ff fe7d 	bl	8000c30 <USART_SendData>
		USART_SendData(&Test_USART, (uint8_t *)message, (uint32_t) MessageLen[0]);
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <main+0x278>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4912      	ldr	r1, [pc, #72]	; (8000f88 <main+0x280>)
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <main+0x26c>)
 8000f40:	f7ff fe76 	bl	8000c30 <USART_SendData>

		GPIOTogglePin(GPIOA,GPIO_PIN_NUM_OUTPUT);
 8000f44:	2105      	movs	r1, #5
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <main+0x254>)
 8000f48:	f7ff f9a7 	bl	800029a <GPIOTogglePin>
		delay();
 8000f4c:	f7ff feac 	bl	8000ca8 <delay>
		while(GPIOReadPin(GPIOC,GPIO_PIN_NUM_INPUT) == GPIO_HIGH);
 8000f50:	e7b3      	b.n	8000eba <main+0x1b2>
 8000f52:	bf00      	nop
 8000f54:	080010fc 	.word	0x080010fc
 8000f58:	08001104 	.word	0x08001104
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020400 	.word	0x40020400
 8000f68:	2000001c 	.word	0x2000001c
 8000f6c:	40003800 	.word	0x40003800
 8000f70:	20000020 	.word	0x20000020
 8000f74:	2000003c 	.word	0x2000003c
 8000f78:	40011000 	.word	0x40011000
 8000f7c:	20000058 	.word	0x20000058
 8000f80:	2000015c 	.word	0x2000015c
 8000f84:	2000005c 	.word	0x2000005c
 8000f88:	200000dc 	.word	0x200000dc

08000f8c <NumToString>:

	return 0;
}

static void NumToString(uint8_t Num, char *NumString)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
	char temp;

	if(Num > 99)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b63      	cmp	r3, #99	; 0x63
 8000f9c:	d911      	bls.n	8000fc2 <NumToString+0x36>
	{
		temp = Num/100;
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4a27      	ldr	r2, [pc, #156]	; (8001040 <NumToString+0xb4>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	73fb      	strb	r3, [r7, #15]
		Num = Num - temp * 100;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	461a      	mov	r2, r3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	441a      	add	r2, r3
 8000fb2:	00d2      	lsls	r2, r2, #3
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	e001      	b.n	8000fc6 <NumToString+0x3a>
	}
	else
	{
		temp = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
	}

	*NumString = temp + 48;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	3330      	adds	r3, #48	; 0x30
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	701a      	strb	r2, [r3, #0]
	NumString++;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	603b      	str	r3, [r7, #0]

	if(Num > 9)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b09      	cmp	r3, #9
 8000fda:	d911      	bls.n	8001000 <NumToString+0x74>
	{
			temp = Num/10;
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4a19      	ldr	r2, [pc, #100]	; (8001044 <NumToString+0xb8>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	73fb      	strb	r3, [r7, #15]
			Num = Num - temp * 10;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	461a      	mov	r2, r3
 8000fec:	0152      	lsls	r2, r2, #5
 8000fee:	1ad2      	subs	r2, r2, r3
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <NumToString+0x78>

	}
	else
	{
		temp = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
	}

	*NumString = temp + 48;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3330      	adds	r3, #48	; 0x30
 8001008:	b2da      	uxtb	r2, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	701a      	strb	r2, [r3, #0]
	NumString++;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	603b      	str	r3, [r7, #0]

	*NumString = Num + 48;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	3330      	adds	r3, #48	; 0x30
 8001018:	b2da      	uxtb	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	701a      	strb	r2, [r3, #0]
	NumString++;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	603b      	str	r3, [r7, #0]

	*NumString = '\r';
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	220d      	movs	r2, #13
 8001028:	701a      	strb	r2, [r3, #0]
	NumString++;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	603b      	str	r3, [r7, #0]

	*NumString = '\n';
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	220a      	movs	r2, #10
 8001034:	701a      	strb	r2, [r3, #0]

}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	51eb851f 	.word	0x51eb851f
 8001044:	cccccccd 	.word	0xcccccccd

08001048 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800104c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopForever+0x6>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <LoopForever+0xe>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <LoopForever+0x16>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001076:	f000 f811 	bl	800109c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107a:	f7ff fe45 	bl	8000d08 <main>

0800107e <LoopForever>:

LoopForever:
  b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   r0, =_estack
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800108c:	0800111c 	.word	0x0800111c
  ldr r2, =_sbss
 8001090:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001094:	20000160 	.word	0x20000160

08001098 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <__libc_init_array>:
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	4d0d      	ldr	r5, [pc, #52]	; (80010d4 <__libc_init_array+0x38>)
 80010a0:	4c0d      	ldr	r4, [pc, #52]	; (80010d8 <__libc_init_array+0x3c>)
 80010a2:	1b64      	subs	r4, r4, r5
 80010a4:	10a4      	asrs	r4, r4, #2
 80010a6:	2600      	movs	r6, #0
 80010a8:	42a6      	cmp	r6, r4
 80010aa:	d109      	bne.n	80010c0 <__libc_init_array+0x24>
 80010ac:	4d0b      	ldr	r5, [pc, #44]	; (80010dc <__libc_init_array+0x40>)
 80010ae:	4c0c      	ldr	r4, [pc, #48]	; (80010e0 <__libc_init_array+0x44>)
 80010b0:	f000 f818 	bl	80010e4 <_init>
 80010b4:	1b64      	subs	r4, r4, r5
 80010b6:	10a4      	asrs	r4, r4, #2
 80010b8:	2600      	movs	r6, #0
 80010ba:	42a6      	cmp	r6, r4
 80010bc:	d105      	bne.n	80010ca <__libc_init_array+0x2e>
 80010be:	bd70      	pop	{r4, r5, r6, pc}
 80010c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c4:	4798      	blx	r3
 80010c6:	3601      	adds	r6, #1
 80010c8:	e7ee      	b.n	80010a8 <__libc_init_array+0xc>
 80010ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80010ce:	4798      	blx	r3
 80010d0:	3601      	adds	r6, #1
 80010d2:	e7f2      	b.n	80010ba <__libc_init_array+0x1e>
 80010d4:	08001114 	.word	0x08001114
 80010d8:	08001114 	.word	0x08001114
 80010dc:	08001114 	.word	0x08001114
 80010e0:	08001118 	.word	0x08001118

080010e4 <_init>:
 80010e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e6:	bf00      	nop
 80010e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ea:	bc08      	pop	{r3}
 80010ec:	469e      	mov	lr, r3
 80010ee:	4770      	bx	lr

080010f0 <_fini>:
 80010f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f2:	bf00      	nop
 80010f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010f6:	bc08      	pop	{r3}
 80010f8:	469e      	mov	lr, r3
 80010fa:	4770      	bx	lr
