
003I2CTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030d8  080030d8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080030d8  080030d8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030d8  080030d8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030dc  080030dc  000130dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080030e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000064  08003144  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003144  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f88  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c52  00000000  00000000  00023016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  00023c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000340  00000000  00000000  00024060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002903  00000000  00000000  000243a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000559c  00000000  00000000  00026ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000e267  00000000  00000000  0002c23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003a4a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000162c  00000000  00000000  0003a4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002ed8 	.word	0x08002ed8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08002ed8 	.word	0x08002ed8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <delay_us>:
struct USART_Handle_t Test_USART;
uint32_t * I2C_DEVICE = I2C1;
uint8_t SlaveAddress = 0x27;

void delay_us(uint32_t delay)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT = 0;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <delay_us+0x2c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2_Handle.pGeneral_Purpose_Timer->TIMx_CNT < 16*delay);
 80002c0:	bf00      	nop
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <delay_us+0x2c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	011b      	lsls	r3, r3, #4
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d3f8      	bcc.n	80002c2 <delay_us+0x12>
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	20000080 	.word	0x20000080

080002e0 <configure_delay_timer>:

void configure_delay_timer(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//TIM2 Configuration
	TIM2_Handle.pGeneral_Purpose_Timer = (struct General_Purpose_Timer_RegDef_t *) TIM2;
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <configure_delay_timer+0x3c>)
 80002e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ea:	601a      	str	r2, [r3, #0]
	memset(&TIM2_Handle.General_Purpose_Timer_Config,0,sizeof(TIM2_Handle.General_Purpose_Timer_Config));
 80002ec:	2228      	movs	r2, #40	; 0x28
 80002ee:	2100      	movs	r1, #0
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <configure_delay_timer+0x40>)
 80002f2:	f001 fded 	bl	8001ed0 <memset>
	TIM2_Handle.General_Purpose_Timer_Config.Timer_PreScalerValue = 0x0;
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <configure_delay_timer+0x3c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
	TIM2_Handle.General_Purpose_Timer_Config.Timer_AutoReloadValue = 0xFFFFFFFF;
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <configure_delay_timer+0x3c>)
 80002fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000302:	609a      	str	r2, [r3, #8]

	EnablePeriClk(TIM2);
 8000304:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000308:	f001 f926 	bl	8001558 <EnablePeriClk>
	General_Purpose_Timer_Init(&TIM2_Handle);
 800030c:	4803      	ldr	r0, [pc, #12]	; (800031c <configure_delay_timer+0x3c>)
 800030e:	f000 f97f 	bl	8000610 <General_Purpose_Timer_Init>
	General_Purpose_Timer_PeripheralEnable(&TIM2_Handle);
 8000312:	4802      	ldr	r0, [pc, #8]	; (800031c <configure_delay_timer+0x3c>)
 8000314:	f000 fba4 	bl	8000a60 <General_Purpose_Timer_PeripheralEnable>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000080 	.word	0x20000080
 8000320:	20000084 	.word	0x20000084

08000324 <configure_spi>:

void configure_spi(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
	struct SPI_Config_t SPI_Dev_Config;

	//Configuring the GPIO Pins for the SPI Port
	EnablePeriClk(SPI_PORT);
 800032a:	4825      	ldr	r0, [pc, #148]	; (80003c0 <configure_spi+0x9c>)
 800032c:	f001 f914 	bl	8001558 <EnablePeriClk>
	GPIOSetMode(SPI_PORT,SPI_PIN_MOSI,GPIO_MODE_ALTFN);
 8000330:	2202      	movs	r2, #2
 8000332:	210f      	movs	r1, #15
 8000334:	4822      	ldr	r0, [pc, #136]	; (80003c0 <configure_spi+0x9c>)
 8000336:	f000 fba4 	bl	8000a82 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_MISO,GPIO_MODE_ALTFN);
 800033a:	2202      	movs	r2, #2
 800033c:	210e      	movs	r1, #14
 800033e:	4820      	ldr	r0, [pc, #128]	; (80003c0 <configure_spi+0x9c>)
 8000340:	f000 fb9f 	bl	8000a82 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_CLK,GPIO_MODE_ALTFN);
 8000344:	2202      	movs	r2, #2
 8000346:	210d      	movs	r1, #13
 8000348:	481d      	ldr	r0, [pc, #116]	; (80003c0 <configure_spi+0x9c>)
 800034a:	f000 fb9a 	bl	8000a82 <GPIOSetMode>
	GPIOSetMode(SPI_PORT,SPI_PIN_SS,GPIO_MODE_ALTFN);
 800034e:	2202      	movs	r2, #2
 8000350:	210c      	movs	r1, #12
 8000352:	481b      	ldr	r0, [pc, #108]	; (80003c0 <configure_spi+0x9c>)
 8000354:	f000 fb95 	bl	8000a82 <GPIOSetMode>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MOSI,GPIO_ALTFN_5);
 8000358:	2205      	movs	r2, #5
 800035a:	210f      	movs	r1, #15
 800035c:	4818      	ldr	r0, [pc, #96]	; (80003c0 <configure_spi+0x9c>)
 800035e:	f000 fbf5 	bl	8000b4c <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_MISO,GPIO_ALTFN_5);
 8000362:	2205      	movs	r2, #5
 8000364:	210e      	movs	r1, #14
 8000366:	4816      	ldr	r0, [pc, #88]	; (80003c0 <configure_spi+0x9c>)
 8000368:	f000 fbf0 	bl	8000b4c <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_CLK,GPIO_ALTFN_5);
 800036c:	2205      	movs	r2, #5
 800036e:	210d      	movs	r1, #13
 8000370:	4813      	ldr	r0, [pc, #76]	; (80003c0 <configure_spi+0x9c>)
 8000372:	f000 fbeb 	bl	8000b4c <GPIOSetAltFn>
	GPIOSetAltFn(SPI_PORT,SPI_PIN_SS,GPIO_ALTFN_5);
 8000376:	2205      	movs	r2, #5
 8000378:	210c      	movs	r1, #12
 800037a:	4811      	ldr	r0, [pc, #68]	; (80003c0 <configure_spi+0x9c>)
 800037c:	f000 fbe6 	bl	8000b4c <GPIOSetAltFn>

	//Configuring the SPI Peripheral
	SPI_Dev_Config.SPIDeviceMode = SPI_DEVICE_MODE_MASTER;
 8000380:	2301      	movs	r3, #1
 8000382:	71bb      	strb	r3, [r7, #6]
	SPI_Dev_Config.SPIClockPol = SPI_CLK_POL_0;
 8000384:	2300      	movs	r3, #0
 8000386:	713b      	strb	r3, [r7, #4]
	SPI_Dev_Config.SPIClockPhase = SPI_CLK_PHA_LE;
 8000388:	2300      	movs	r3, #0
 800038a:	717b      	strb	r3, [r7, #5]
	SPI_Dev_Config.SPIClockFreq = SPI_CLK_FREQ_DIV8;
 800038c:	2302      	movs	r3, #2
 800038e:	723b      	strb	r3, [r7, #8]
	SPI_Dev_Config.SPIDataFrameFormat = SPI_DFF_8_BITS;
 8000390:	2300      	movs	r3, #0
 8000392:	727b      	strb	r3, [r7, #9]
	SPI_Dev_Config.SPISoftwareSlaveManagement = SPI_SW_SLAVE_MGNT_DI;
 8000394:	2300      	movs	r3, #0
 8000396:	72bb      	strb	r3, [r7, #10]
	SPI_Dev_Config.SPISSIFlag = SPI_SSI_1;
 8000398:	2301      	movs	r3, #1
 800039a:	72fb      	strb	r3, [r7, #11]
	SPI_Dev_Config.SPISSOEFlag = SPI_SSOE_EN;
 800039c:	2301      	movs	r3, #1
 800039e:	733b      	strb	r3, [r7, #12]

	EnablePeriClk(SPI_DEV);
 80003a0:	4808      	ldr	r0, [pc, #32]	; (80003c4 <configure_spi+0xa0>)
 80003a2:	f001 f8d9 	bl	8001558 <EnablePeriClk>
	SPIPeriConfig(SPI_DEV, &SPI_Dev_Config);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4619      	mov	r1, r3
 80003aa:	4806      	ldr	r0, [pc, #24]	; (80003c4 <configure_spi+0xa0>)
 80003ac:	f000 ffbc 	bl	8001328 <SPIPeriConfig>
	SPIEnable(SPI_DEV);
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <configure_spi+0xa0>)
 80003b2:	f001 f834 	bl	800141e <SPIEnable>
}
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40020400 	.word	0x40020400
 80003c4:	40003800 	.word	0x40003800

080003c8 <configure_uart>:

void configure_uart(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	//GPIO Pin Configuration
	EnablePeriClk(UART_GPIO_PORT);
 80003cc:	482a      	ldr	r0, [pc, #168]	; (8000478 <configure_uart+0xb0>)
 80003ce:	f001 f8c3 	bl	8001558 <EnablePeriClk>
	GPIOSetMode(UART_GPIO_PORT,UART_TX_PIN,GPIO_MODE_ALTFN);
 80003d2:	2202      	movs	r2, #2
 80003d4:	2109      	movs	r1, #9
 80003d6:	4828      	ldr	r0, [pc, #160]	; (8000478 <configure_uart+0xb0>)
 80003d8:	f000 fb53 	bl	8000a82 <GPIOSetMode>
	GPIOSetMode(UART_GPIO_PORT,UART_RX_PIN,GPIO_MODE_ALTFN);
 80003dc:	2202      	movs	r2, #2
 80003de:	210a      	movs	r1, #10
 80003e0:	4825      	ldr	r0, [pc, #148]	; (8000478 <configure_uart+0xb0>)
 80003e2:	f000 fb4e 	bl	8000a82 <GPIOSetMode>
	GPIOSetAltFn(UART_GPIO_PORT,UART_TX_PIN,GPIO_ALTFN_7);
 80003e6:	2207      	movs	r2, #7
 80003e8:	2109      	movs	r1, #9
 80003ea:	4823      	ldr	r0, [pc, #140]	; (8000478 <configure_uart+0xb0>)
 80003ec:	f000 fbae 	bl	8000b4c <GPIOSetAltFn>
	GPIOSetAltFn(UART_GPIO_PORT,UART_RX_PIN,GPIO_ALTFN_7);
 80003f0:	2207      	movs	r2, #7
 80003f2:	210a      	movs	r1, #10
 80003f4:	4820      	ldr	r0, [pc, #128]	; (8000478 <configure_uart+0xb0>)
 80003f6:	f000 fba9 	bl	8000b4c <GPIOSetAltFn>
	GPIOSetOutputType(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPTYPE_PP);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2109      	movs	r1, #9
 80003fe:	481e      	ldr	r0, [pc, #120]	; (8000478 <configure_uart+0xb0>)
 8000400:	f000 fbdd 	bl	8000bbe <GPIOSetOutputType>
	GPIOSetOutputType(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPTYPE_PP);
 8000404:	2200      	movs	r2, #0
 8000406:	210a      	movs	r1, #10
 8000408:	481b      	ldr	r0, [pc, #108]	; (8000478 <configure_uart+0xb0>)
 800040a:	f000 fbd8 	bl	8000bbe <GPIOSetOutputType>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_TX_PIN,GPIO_OPSPEED_HIGH);
 800040e:	2202      	movs	r2, #2
 8000410:	2109      	movs	r1, #9
 8000412:	4819      	ldr	r0, [pc, #100]	; (8000478 <configure_uart+0xb0>)
 8000414:	f000 fc19 	bl	8000c4a <GPIOSetOutputSpeed>
	GPIOSetOutputSpeed(UART_GPIO_PORT,UART_RX_PIN,GPIO_OPSPEED_HIGH);
 8000418:	2202      	movs	r2, #2
 800041a:	210a      	movs	r1, #10
 800041c:	4816      	ldr	r0, [pc, #88]	; (8000478 <configure_uart+0xb0>)
 800041e:	f000 fc14 	bl	8000c4a <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_TX_PIN,GPIO_PULL_UP);
 8000422:	2201      	movs	r2, #1
 8000424:	2109      	movs	r1, #9
 8000426:	4814      	ldr	r0, [pc, #80]	; (8000478 <configure_uart+0xb0>)
 8000428:	f000 fbeb 	bl	8000c02 <GPIOSetPullUpDownConfig>
	GPIOSetPullUpDownConfig(UART_GPIO_PORT,UART_RX_PIN,GPIO_PULL_UP);
 800042c:	2201      	movs	r2, #1
 800042e:	210a      	movs	r1, #10
 8000430:	4811      	ldr	r0, [pc, #68]	; (8000478 <configure_uart+0xb0>)
 8000432:	f000 fbe6 	bl	8000c02 <GPIOSetPullUpDownConfig>

	//USART Configuration
	Test_USART.pUSART = (struct USART_RegDef_t *) USART1;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <configure_uart+0xb4>)
 8000438:	4a11      	ldr	r2, [pc, #68]	; (8000480 <configure_uart+0xb8>)
 800043a:	601a      	str	r2, [r3, #0]
	Test_USART.USART_Config.USART_Mode = USART_MODE_TX_RX;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <configure_uart+0xb4>)
 800043e:	2202      	movs	r2, #2
 8000440:	605a      	str	r2, [r3, #4]
	Test_USART.USART_Config.USART_DataLength = USART_DATA_LEN_8_BITS;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <configure_uart+0xb4>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
	Test_USART.USART_Config.USART_StopBits = USART_STOP_BITS_1;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <configure_uart+0xb4>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
	Test_USART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <configure_uart+0xb4>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
	Test_USART.USART_Config.USART_BaudRate = USART_SB_RATE_9600;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <configure_uart+0xb4>)
 8000456:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800045a:	615a      	str	r2, [r3, #20]
	Test_USART.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CNTRL_NONE;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <configure_uart+0xb4>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]

	EnablePeriClk(USART1);
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <configure_uart+0xb8>)
 8000464:	f001 f878 	bl	8001558 <EnablePeriClk>
	USART_Init(&Test_USART);
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <configure_uart+0xb4>)
 800046a:	f001 fa39 	bl	80018e0 <USART_Init>
	USART_PeripheralEnable(&Test_USART);
 800046e:	4803      	ldr	r0, [pc, #12]	; (800047c <configure_uart+0xb4>)
 8000470:	f001 fb36 	bl	8001ae0 <USART_PeripheralEnable>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40020000 	.word	0x40020000
 800047c:	200000ac 	.word	0x200000ac
 8000480:	40011000 	.word	0x40011000

08000484 <UART_SendChar>:

	return;
}

void UART_SendChar(uint8_t ch)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	USART_SendData(&Test_USART, &ch, 1);
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	2201      	movs	r2, #1
 8000492:	4619      	mov	r1, r3
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <UART_SendChar+0x20>)
 8000496:	f001 fb49 	bl	8001b2c <USART_SendData>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000ac 	.word	0x200000ac

080004a8 <check_sensor_response>:
#include "gpio_driver.h"
#include "common_utils.h"
#include "dht11_driver.h"

uint8_t check_sensor_response(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	uint8_t sample[2];

	//Read First Sample
	delay_us(40);
 80004ae:	2028      	movs	r0, #40	; 0x28
 80004b0:	f7ff fefe 	bl	80002b0 <delay_us>
	sample[0] = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 80004b4:	2100      	movs	r1, #0
 80004b6:	4811      	ldr	r0, [pc, #68]	; (80004fc <check_sensor_response+0x54>)
 80004b8:	f000 fb07 	bl	8000aca <GPIOReadPin>
 80004bc:	4603      	mov	r3, r0
 80004be:	713b      	strb	r3, [r7, #4]

	//Read Second Sample
	delay_us(80);
 80004c0:	2050      	movs	r0, #80	; 0x50
 80004c2:	f7ff fef5 	bl	80002b0 <delay_us>
	sample[1] = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 80004c6:	2100      	movs	r1, #0
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <check_sensor_response+0x54>)
 80004ca:	f000 fafe 	bl	8000aca <GPIOReadPin>
 80004ce:	4603      	mov	r3, r0
 80004d0:	717b      	strb	r3, [r7, #5]

	//Wait till the end of the response
	while((GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 80004d2:	bf00      	nop
 80004d4:	2100      	movs	r1, #0
 80004d6:	4809      	ldr	r0, [pc, #36]	; (80004fc <check_sensor_response+0x54>)
 80004d8:	f000 faf7 	bl	8000aca <GPIOReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d1f8      	bne.n	80004d4 <check_sensor_response+0x2c>

	if(sample[0]==GPIO_LOW && sample[1]==GPIO_HIGH)
 80004e2:	793b      	ldrb	r3, [r7, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d104      	bne.n	80004f2 <check_sensor_response+0x4a>
 80004e8:	797b      	ldrb	r3, [r7, #5]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d101      	bne.n	80004f2 <check_sensor_response+0x4a>
	{
		return 1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e000      	b.n	80004f4 <check_sensor_response+0x4c>
	}
	else
	{
		return 0;
 80004f2:	2300      	movs	r3, #0
	}
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020800 	.word	0x40020800

08000500 <read_dht11_sensor>:

uint8_t read_dht11_sensor(uint8_t *data)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	uint8_t sensor_response;
	uint8_t current_bit;
	uint8_t i;

	//GPIO Configuration for Sensor Data Pin
	EnablePeriClk(DHT11_SENSOR_PORT);
 8000508:	4840      	ldr	r0, [pc, #256]	; (800060c <read_dht11_sensor+0x10c>)
 800050a:	f001 f825 	bl	8001558 <EnablePeriClk>
	GPIOSetMode(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN, GPIO_MODE_OUTPUT);
 800050e:	2201      	movs	r2, #1
 8000510:	2100      	movs	r1, #0
 8000512:	483e      	ldr	r0, [pc, #248]	; (800060c <read_dht11_sensor+0x10c>)
 8000514:	f000 fab5 	bl	8000a82 <GPIOSetMode>
	GPIOSetOutputType(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_OPTYPE_OD);
 8000518:	2201      	movs	r2, #1
 800051a:	2100      	movs	r1, #0
 800051c:	483b      	ldr	r0, [pc, #236]	; (800060c <read_dht11_sensor+0x10c>)
 800051e:	f000 fb4e 	bl	8000bbe <GPIOSetOutputType>
	GPIOSetOutputSpeed(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_OPSPEED_HIGH);
 8000522:	2202      	movs	r2, #2
 8000524:	2100      	movs	r1, #0
 8000526:	4839      	ldr	r0, [pc, #228]	; (800060c <read_dht11_sensor+0x10c>)
 8000528:	f000 fb8f 	bl	8000c4a <GPIOSetOutputSpeed>
	GPIOSetPullUpDownConfig(DHT11_SENSOR_PORT,DHT11_SENSOR_DATA_PIN,GPIO_PULL_UP);
 800052c:	2201      	movs	r2, #1
 800052e:	2100      	movs	r1, #0
 8000530:	4836      	ldr	r0, [pc, #216]	; (800060c <read_dht11_sensor+0x10c>)
 8000532:	f000 fb66 	bl	8000c02 <GPIOSetPullUpDownConfig>

	//Triggering the Sensor
	delay_us(18000);
 8000536:	f244 6050 	movw	r0, #18000	; 0x4650
 800053a:	f7ff feb9 	bl	80002b0 <delay_us>
	GPIOSetMode(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN, GPIO_MODE_INPUT);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	4832      	ldr	r0, [pc, #200]	; (800060c <read_dht11_sensor+0x10c>)
 8000544:	f000 fa9d 	bl	8000a82 <GPIOSetMode>

	//Checking for Sensor Response
	sensor_response = check_sensor_response();
 8000548:	f7ff ffae 	bl	80004a8 <check_sensor_response>
 800054c:	4603      	mov	r3, r0
 800054e:	73bb      	strb	r3, [r7, #14]

	//Reading the Sensor Data
	if(sensor_response == 1)
 8000550:	7bbb      	ldrb	r3, [r7, #14]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d155      	bne.n	8000602 <read_dht11_sensor+0x102>
	{
		for(i=0;i<40;i++)
 8000556:	2300      	movs	r3, #0
 8000558:	73fb      	strb	r3, [r7, #15]
 800055a:	e04f      	b.n	80005fc <read_dht11_sensor+0xfc>
		{
			while(!(GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 800055c:	bf00      	nop
 800055e:	2100      	movs	r1, #0
 8000560:	482a      	ldr	r0, [pc, #168]	; (800060c <read_dht11_sensor+0x10c>)
 8000562:	f000 fab2 	bl	8000aca <GPIOReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f8      	beq.n	800055e <read_dht11_sensor+0x5e>
			delay_us(40);
 800056c:	2028      	movs	r0, #40	; 0x28
 800056e:	f7ff fe9f 	bl	80002b0 <delay_us>
			current_bit = GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN);
 8000572:	2100      	movs	r1, #0
 8000574:	4825      	ldr	r0, [pc, #148]	; (800060c <read_dht11_sensor+0x10c>)
 8000576:	f000 faa8 	bl	8000aca <GPIOReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	737b      	strb	r3, [r7, #13]
			if(current_bit == GPIO_HIGH)
 800057e:	7b7b      	ldrb	r3, [r7, #13]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d117      	bne.n	80005b4 <read_dht11_sensor+0xb4>
			{
				data[(i/8)] |= (1 << (7-(i%8)));
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	08db      	lsrs	r3, r3, #3
 8000588:	b2d8      	uxtb	r0, r3
 800058a:	4602      	mov	r2, r0
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4413      	add	r3, r2
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b25a      	sxtb	r2, r3
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	43db      	mvns	r3, r3
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	2101      	movs	r1, #1
 800059e:	fa01 f303 	lsl.w	r3, r1, r3
 80005a2:	b25b      	sxtb	r3, r3
 80005a4:	4313      	orrs	r3, r2
 80005a6:	b25a      	sxtb	r2, r3
 80005a8:	4601      	mov	r1, r0
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	440b      	add	r3, r1
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e018      	b.n	80005e6 <read_dht11_sensor+0xe6>
			}
			else
			{
				data[(i/8)] &= ~(1 << (7-(i%8)));
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	08db      	lsrs	r3, r3, #3
 80005b8:	b2d8      	uxtb	r0, r3
 80005ba:	4602      	mov	r2, r0
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	43db      	mvns	r3, r3
 80005c8:	f003 0307 	and.w	r3, r3, #7
 80005cc:	2101      	movs	r1, #1
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	43db      	mvns	r3, r3
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	4013      	ands	r3, r2
 80005da:	b25a      	sxtb	r2, r3
 80005dc:	4601      	mov	r1, r0
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	440b      	add	r3, r1
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	701a      	strb	r2, [r3, #0]
			}
			while((GPIOReadPin(DHT11_SENSOR_PORT, DHT11_SENSOR_DATA_PIN)));
 80005e6:	bf00      	nop
 80005e8:	2100      	movs	r1, #0
 80005ea:	4808      	ldr	r0, [pc, #32]	; (800060c <read_dht11_sensor+0x10c>)
 80005ec:	f000 fa6d 	bl	8000aca <GPIOReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f8      	bne.n	80005e8 <read_dht11_sensor+0xe8>
		for(i=0;i<40;i++)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	3301      	adds	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2b27      	cmp	r3, #39	; 0x27
 8000600:	d9ac      	bls.n	800055c <read_dht11_sensor+0x5c>
		}
	}

	return sensor_response;
 8000602:	7bbb      	ldrb	r3, [r7, #14]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40020800 	.word	0x40020800

08000610 <General_Purpose_Timer_Init>:
 */

#include "general_purpose_timer.h"

void General_Purpose_Timer_Init(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	//1. Configure the PreScaler Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_PSC = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_PreScalerValue;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	6852      	ldr	r2, [r2, #4]
 8000620:	629a      	str	r2, [r3, #40]	; 0x28

	//2. Configure the Auto Reload Value

	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_ARR = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_AutoReloadValue;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	6892      	ldr	r2, [r2, #8]
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c


	//3. Channel 1 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Status == TIMER_CHANNEL_ENABLED)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	7b1b      	ldrb	r3, [r3, #12]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d16a      	bne.n	800070a <General_Purpose_Timer_Init+0xfa>
	{

		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC1E);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	6a1a      	ldr	r2, [r3, #32]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f042 0201 	orr.w	r2, r2, #1
 8000642:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7b5b      	ldrb	r3, [r3, #13]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d11c      	bne.n	8000686 <General_Purpose_Timer_Init+0x76>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	699a      	ldr	r2, [r3, #24]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f022 0203 	bic.w	r2, r2, #3
 800065a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	6912      	ldr	r2, [r2, #16]
 8000664:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	699a      	ldr	r2, [r3, #24]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000674:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC1M);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	699a      	ldr	r2, [r3, #24]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000684:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7b5b      	ldrb	r3, [r3, #13]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d11c      	bne.n	80006c8 <General_Purpose_Timer_Init+0xb8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	699a      	ldr	r2, [r3, #24]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f022 0203 	bic.w	r2, r2, #3
 800069c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	6912      	ldr	r2, [r2, #16]
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	699a      	ldr	r2, [r3, #24]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006b6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC1M);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	699a      	ldr	r2, [r3, #24]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80006c6:	619a      	str	r2, [r3, #24]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7b5b      	ldrb	r3, [r3, #13]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d11c      	bne.n	800070a <General_Purpose_Timer_Init+0xfa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC1S);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f022 0203 	bic.w	r2, r2, #3
 80006de:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR1 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_1_OutputCompareRegisterValue;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	6912      	ldr	r2, [r2, #16]
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC1M);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	699a      	ldr	r2, [r3, #24]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80006f8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC1M);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	699a      	ldr	r2, [r3, #24]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000708:	619a      	str	r2, [r3, #24]
		}
	}

	//4. Channel 2 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Status == TIMER_CHANNEL_ENABLED)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7d1b      	ldrb	r3, [r3, #20]
 800070e:	2b00      	cmp	r3, #0
 8000710:	f040 80bf 	bne.w	8000892 <General_Purpose_Timer_Init+0x282>
	{

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7d5b      	ldrb	r3, [r3, #21]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d124      	bne.n	8000766 <General_Purpose_Timer_Init+0x156>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	699a      	ldr	r2, [r3, #24]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800072a:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	6992      	ldr	r2, [r2, #24]
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000744:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x3 << TIMx_CCMR1_OC2M);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	699a      	ldr	r2, [r3, #24]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000754:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6a1a      	ldr	r2, [r3, #32]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f042 0210 	orr.w	r2, r2, #16
 8000764:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7d5b      	ldrb	r3, [r3, #21]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d124      	bne.n	80007b8 <General_Purpose_Timer_Init+0x1a8>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	699a      	ldr	r2, [r3, #24]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800077c:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	6992      	ldr	r2, [r2, #24]
 8000786:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	699a      	ldr	r2, [r3, #24]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000796:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x6 << TIMx_CCMR1_OC2M);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	699a      	ldr	r2, [r3, #24]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80007a6:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6a1a      	ldr	r2, [r3, #32]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0210 	orr.w	r2, r2, #16
 80007b6:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7d5b      	ldrb	r3, [r3, #21]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d124      	bne.n	800080a <General_Purpose_Timer_Init+0x1fa>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	699a      	ldr	r2, [r3, #24]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007ce:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR2 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_OutputCompareRegisterValue;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	6992      	ldr	r2, [r2, #24]
 80007d8:	639a      	str	r2, [r3, #56]	; 0x38
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x7 << TIMx_CCMR1_OC2M);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	699a      	ldr	r2, [r3, #24]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80007e8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x7 << TIMx_CCMR1_OC2M);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	699a      	ldr	r2, [r3, #24]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80007f8:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6a1a      	ldr	r2, [r3, #32]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f042 0210 	orr.w	r2, r2, #16
 8000808:	621a      	str	r2, [r3, #32]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_2_Mode == TIMER_CHANNEL_MODE_INPUT_CAPTURE)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7d5b      	ldrb	r3, [r3, #21]
 800080e:	2b08      	cmp	r3, #8
 8000810:	d13f      	bne.n	8000892 <General_Purpose_Timer_Init+0x282>
		{
			//1. Setting the CC1S field to 01
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_CC2S);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	699a      	ldr	r2, [r3, #24]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000820:	619a      	str	r2, [r3, #24]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x1 << TIMx_CCMR1_CC2S);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	699a      	ldr	r2, [r3, #24]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000830:	619a      	str	r2, [r3, #24]

			//2. Configuring the input filter settings
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0xF << TIMx_CCMR1_IC2F);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	699a      	ldr	r2, [r3, #24]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000840:	619a      	str	r2, [r3, #24]
			//pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 |= (0x5 << TIMx_CCMR1_IC2F);

			//3. Program the CC1P and CC1NP bits to 00
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2P);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a1a      	ldr	r2, [r3, #32]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f022 0220 	bic.w	r2, r2, #32
 8000850:	621a      	str	r2, [r3, #32]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER &= ~(0x1 << TIMx_CCER_CC2NP);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6a1a      	ldr	r2, [r3, #32]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000860:	621a      	str	r2, [r3, #32]

			//4. Programming the input pre-scaler value to 00 (no pre-scaler)
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR1 &= ~(0x3 << TIMx_CCMR1_IC2PSC);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	699a      	ldr	r2, [r3, #24]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000870:	619a      	str	r2, [r3, #24]

			//5. Enable the input capture interrupt
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER |= (0x1 << TIMx_DIER_CC2IE);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f042 0204 	orr.w	r2, r2, #4
 8000880:	60da      	str	r2, [r3, #12]

			//6. Turning on the channel
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC2E);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6a1a      	ldr	r2, [r3, #32]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f042 0210 	orr.w	r2, r2, #16
 8000890:	621a      	str	r2, [r3, #32]

	}

	//5. Channel 3 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Status == TIMER_CHANNEL_ENABLED)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7f1b      	ldrb	r3, [r3, #28]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d16a      	bne.n	8000970 <General_Purpose_Timer_Init+0x360>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC3E);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6a1a      	ldr	r2, [r3, #32]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008a8:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7f5b      	ldrb	r3, [r3, #29]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d11c      	bne.n	80008ec <General_Purpose_Timer_Init+0x2dc>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f022 0203 	bic.w	r2, r2, #3
 80008c0:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	6a12      	ldr	r2, [r2, #32]
 80008ca:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	69da      	ldr	r2, [r3, #28]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80008da:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC3M);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	69da      	ldr	r2, [r3, #28]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80008ea:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7f5b      	ldrb	r3, [r3, #29]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d11c      	bne.n	800092e <General_Purpose_Timer_Init+0x31e>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	69da      	ldr	r2, [r3, #28]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f022 0203 	bic.w	r2, r2, #3
 8000902:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	6a12      	ldr	r2, [r2, #32]
 800090c:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	69da      	ldr	r2, [r3, #28]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800091c:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC3M);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	69da      	ldr	r2, [r3, #28]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800092c:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	7f5b      	ldrb	r3, [r3, #29]
 8000932:	2b04      	cmp	r3, #4
 8000934:	d11c      	bne.n	8000970 <General_Purpose_Timer_Init+0x360>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC3S);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	69da      	ldr	r2, [r3, #28]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f022 0203 	bic.w	r2, r2, #3
 8000944:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR3 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_3_OutputCompareRegisterValue;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	6a12      	ldr	r2, [r2, #32]
 800094e:	63da      	str	r2, [r3, #60]	; 0x3c
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC3M);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	69da      	ldr	r2, [r3, #28]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800095e:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC3M);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	69da      	ldr	r2, [r3, #28]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800096e:	61da      	str	r2, [r3, #28]
		}
	}

	//6. Channel 4 Configuration

	if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Status == TIMER_CHANNEL_ENABLED)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000976:	2b00      	cmp	r3, #0
 8000978:	d16d      	bne.n	8000a56 <General_Purpose_Timer_Init+0x446>
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCER |= (0x1 << TIMx_CCER_CC4E);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6a1a      	ldr	r2, [r3, #32]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000988:	621a      	str	r2, [r3, #32]

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_TOGGLE)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000990:	2b02      	cmp	r3, #2
 8000992:	d11c      	bne.n	80009ce <General_Purpose_Timer_Init+0x3be>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	69da      	ldr	r2, [r3, #28]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009a2:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	69da      	ldr	r2, [r3, #28]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80009bc:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x3 << TIMx_CCMR2_OC4M);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	69da      	ldr	r2, [r3, #28]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80009cc:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d11c      	bne.n	8000a12 <General_Purpose_Timer_Init+0x402>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	69da      	ldr	r2, [r3, #28]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009e6:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80009f0:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	69da      	ldr	r2, [r3, #28]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a00:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x6 << TIMx_CCMR2_OC4M);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	69da      	ldr	r2, [r3, #28]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000a10:	61da      	str	r2, [r3, #28]
		}

		if(pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_Mode == TIMER_CHANNEL_MODE_OUTPUT_PWM2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d11c      	bne.n	8000a56 <General_Purpose_Timer_Init+0x446>
		{
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x3 << TIMx_CCMR2_CC4S);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	69da      	ldr	r2, [r3, #28]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a2a:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCR4 = pGeneral_Purpose_Timer_Handle->General_Purpose_Timer_Config.Timer_Channel_4_OutputCompareRegisterValue;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a34:	641a      	str	r2, [r3, #64]	; 0x40
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 &= ~(0x7 << TIMx_CCMR2_OC4M);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69da      	ldr	r2, [r3, #28]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a44:	61da      	str	r2, [r3, #28]
			pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CCMR2 |= (0x7 << TIMx_CCMR2_OC4M);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	69da      	ldr	r2, [r3, #28]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000a54:	61da      	str	r2, [r3, #28]
	{
		pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_DIER &= ~(1 << TIMx_DIER_UIE);
	}
	*/

}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <General_Purpose_Timer_PeripheralEnable>:

void General_Purpose_Timer_PeripheralEnable(struct General_Purpose_Timer_Handle_t *pGeneral_Purpose_Timer_Handle)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	pGeneral_Purpose_Timer_Handle->pGeneral_Purpose_Timer->TIMx_CR1 |= (1 << TIMx_CR1_CEN);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f042 0201 	orr.w	r2, r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <GPIOSetMode>:

#include <stdint.h>
#include "gpio_driver.h"

void GPIOSetMode(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOMode)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	70fb      	strb	r3, [r7, #3]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	70bb      	strb	r3, [r7, #2]

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	60fb      	str	r3, [r7, #12]

	pGPIO->MODER &= ~(0x03 << 2*GPIOPinNum);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	78fa      	ldrb	r2, [r7, #3]
 8000a9c:	0052      	lsls	r2, r2, #1
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa4:	43d2      	mvns	r2, r2
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (GPIOMode << 2*GPIOPinNum);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	78b9      	ldrb	r1, [r7, #2]
 8000ab2:	78fa      	ldrb	r2, [r7, #3]
 8000ab4:	0052      	lsls	r2, r2, #1
 8000ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aba:	431a      	orrs	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	601a      	str	r2, [r3, #0]

}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <GPIOReadPin>:

uint8_t GPIOReadPin(uint32_t *GPIOAddress, uint8_t GPIOPinNum)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b087      	sub	sp, #28
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	70fb      	strb	r3, [r7, #3]
	uint32_t value, temp;

	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	617b      	str	r3, [r7, #20]

	temp = pGPIO->IDR;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	613b      	str	r3, [r7, #16]
	temp &= (1 << GPIOPinNum);
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
	value = (temp >> GPIOPinNum);
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	fa22 f303 	lsr.w	r3, r2, r3
 8000af8:	60fb      	str	r3, [r7, #12]

	return value;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	b2db      	uxtb	r3, r3
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	371c      	adds	r7, #28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <GPIOWritePin>:

void GPIOWritePin(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOValue)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	70fb      	strb	r3, [r7, #3]
 8000b14:	4613      	mov	r3, r2
 8000b16:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]

	pGPIO->ODR &= ~(1 << GPIOPinNum);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	78fa      	ldrb	r2, [r7, #3]
 8000b22:	2101      	movs	r1, #1
 8000b24:	fa01 f202 	lsl.w	r2, r1, r2
 8000b28:	43d2      	mvns	r2, r2
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	615a      	str	r2, [r3, #20]
	pGPIO->ODR |= (GPIOValue << GPIOPinNum);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	78b9      	ldrb	r1, [r7, #2]
 8000b36:	78fa      	ldrb	r2, [r7, #3]
 8000b38:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	615a      	str	r2, [r3, #20]
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <GPIOSetAltFn>:

	return pGPIO->ODR;
}

void GPIOSetAltFn(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOAltFn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]

	uint8_t afr_reg_no = GPIOPinNum/8;
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	72fb      	strb	r3, [r7, #11]
	uint8_t afr_bit_pos = GPIOPinNum%8;
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	72bb      	strb	r3, [r7, #10]

	pGPIO->AFR[afr_reg_no] &= ~(0xF << 4*afr_bit_pos);
 8000b6e:	7afa      	ldrb	r2, [r7, #11]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3208      	adds	r2, #8
 8000b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b78:	7aba      	ldrb	r2, [r7, #10]
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	43d2      	mvns	r2, r2
 8000b84:	4611      	mov	r1, r2
 8000b86:	7afa      	ldrb	r2, [r7, #11]
 8000b88:	4019      	ands	r1, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3208      	adds	r2, #8
 8000b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO->AFR[afr_reg_no] |= (GPIOAltFn << 4*afr_bit_pos);
 8000b92:	7afa      	ldrb	r2, [r7, #11]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3208      	adds	r2, #8
 8000b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9c:	78b9      	ldrb	r1, [r7, #2]
 8000b9e:	7aba      	ldrb	r2, [r7, #10]
 8000ba0:	0092      	lsls	r2, r2, #2
 8000ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	7afa      	ldrb	r2, [r7, #11]
 8000baa:	4319      	orrs	r1, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3208      	adds	r2, #8
 8000bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <GPIOSetOutputType>:

void GPIOSetOutputType(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPType)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	70fb      	strb	r3, [r7, #3]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

	pGPIO->OTYPER &= ~(0x1 << GPIOPinNum);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	78fa      	ldrb	r2, [r7, #3]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	fa01 f202 	lsl.w	r2, r1, r2
 8000bde:	43d2      	mvns	r2, r2
 8000be0:	401a      	ands	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	605a      	str	r2, [r3, #4]
	pGPIO->OTYPER |= (GPIOOPType << GPIOPinNum);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	78b9      	ldrb	r1, [r7, #2]
 8000bec:	78fa      	ldrb	r2, [r7, #3]
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	605a      	str	r2, [r3, #4]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <GPIOSetPullUpDownConfig>:

void GPIOSetPullUpDownConfig(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOPullUpDown)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	70fb      	strb	r3, [r7, #3]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]

	pGPIO->PUPDR &= ~(0x3 << 2*GPIOPinNum);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	78fa      	ldrb	r2, [r7, #3]
 8000c1c:	0052      	lsls	r2, r2, #1
 8000c1e:	2103      	movs	r1, #3
 8000c20:	fa01 f202 	lsl.w	r2, r1, r2
 8000c24:	43d2      	mvns	r2, r2
 8000c26:	401a      	ands	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	60da      	str	r2, [r3, #12]
	pGPIO->PUPDR |= (GPIOPullUpDown << 2*GPIOPinNum);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	78b9      	ldrb	r1, [r7, #2]
 8000c32:	78fa      	ldrb	r2, [r7, #3]
 8000c34:	0052      	lsls	r2, r2, #1
 8000c36:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	60da      	str	r2, [r3, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <GPIOSetOutputSpeed>:

void GPIOSetOutputSpeed(uint32_t *GPIOAddress, uint8_t GPIOPinNum, uint8_t GPIOOPSpeed)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	70fb      	strb	r3, [r7, #3]
 8000c56:	4613      	mov	r3, r2
 8000c58:	70bb      	strb	r3, [r7, #2]
	struct GPIO_RegDef_t *pGPIO = (struct GPIO_RegDef_t *) GPIOAddress;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

	pGPIO->OSPEEDR &= ~(0x3 << 2*GPIOPinNum);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	78fa      	ldrb	r2, [r7, #3]
 8000c64:	0052      	lsls	r2, r2, #1
 8000c66:	2103      	movs	r1, #3
 8000c68:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6c:	43d2      	mvns	r2, r2
 8000c6e:	401a      	ands	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	609a      	str	r2, [r3, #8]
	pGPIO->OSPEEDR |= (GPIOOPSpeed << 2*GPIOPinNum);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	78b9      	ldrb	r1, [r7, #2]
 8000c7a:	78fa      	ldrb	r2, [r7, #3]
 8000c7c:	0052      	lsls	r2, r2, #1
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	431a      	orrs	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	609a      	str	r2, [r3, #8]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
	...

08000c94 <configure_nrf_radio>:
uint8_t rx_packet_length;
uint8_t cmd_packet_length;
uint8_t nrf_packet_tx_state;

void configure_nrf_radio(struct NRF_RADIO_CONFIG_t * radio_config)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	//1. Configure the GPIO pins for CE and IRQ pins
	EnablePeriClk(RADIO_PORT);
 8000c9c:	4871      	ldr	r0, [pc, #452]	; (8000e64 <configure_nrf_radio+0x1d0>)
 8000c9e:	f000 fc5b 	bl	8001558 <EnablePeriClk>
	GPIOSetMode(RADIO_PORT,CE_PIN,GPIO_MODE_OUTPUT);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	486f      	ldr	r0, [pc, #444]	; (8000e64 <configure_nrf_radio+0x1d0>)
 8000ca8:	f7ff feeb 	bl	8000a82 <GPIOSetMode>
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_LOW);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2102      	movs	r1, #2
 8000cb0:	486c      	ldr	r0, [pc, #432]	; (8000e64 <configure_nrf_radio+0x1d0>)
 8000cb2:	f7ff ff29 	bl	8000b08 <GPIOWritePin>
	GPIOSetMode(RADIO_PORT,IRQ_PIN,GPIO_MODE_INPUT);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	486a      	ldr	r0, [pc, #424]	; (8000e64 <configure_nrf_radio+0x1d0>)
 8000cbc:	f7ff fee1 	bl	8000a82 <GPIOSetMode>
	GPIOSetPullUpDownConfig(RADIO_PORT,IRQ_PIN,GPIO_PULL_UP);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4867      	ldr	r0, [pc, #412]	; (8000e64 <configure_nrf_radio+0x1d0>)
 8000cc6:	f7ff ff9c 	bl	8000c02 <GPIOSetPullUpDownConfig>
	GPIOSetMode(RADIO_PORT,SS_PIN,GPIO_MODE_OUTPUT);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4865      	ldr	r0, [pc, #404]	; (8000e64 <configure_nrf_radio+0x1d0>)
 8000cd0:	f7ff fed7 	bl	8000a82 <GPIOSetMode>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	4862      	ldr	r0, [pc, #392]	; (8000e64 <configure_nrf_radio+0x1d0>)
 8000cda:	f7ff ff15 	bl	8000b08 <GPIOWritePin>

	//2. Configure the Radio Mode

	//3. Configure the RF Channel, Data Rate and PA Level
	//3.1 Configure the RF Channel
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RF_CH;
 8000cde:	4b62      	ldr	r3, [pc, #392]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000ce0:	2225      	movs	r2, #37	; 0x25
 8000ce2:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_channel;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	785a      	ldrb	r2, [r3, #1]
 8000ce8:	4b5f      	ldr	r3, [pc, #380]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000cea:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000cec:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000cee:	2202      	movs	r2, #2
 8000cf0:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000cf2:	4b5e      	ldr	r3, [pc, #376]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	485b      	ldr	r0, [pc, #364]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000cfa:	f000 faf7 	bl	80012ec <nrf_radio_cmd_write>

	//3.2 Configure the Data Rate and PA Level
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RF_SETUP;
 8000cfe:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d00:	2226      	movs	r2, #38	; 0x26
 8000d02:	701a      	strb	r2, [r3, #0]

	cmd_buffer[1] &= 0x00;
 8000d04:	4b58      	ldr	r3, [pc, #352]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_pa_level << NRF_RADIO_RF_PWR_POS);
 8000d0a:	4b57      	ldr	r3, [pc, #348]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d0c:	785b      	ldrb	r3, [r3, #1]
 8000d0e:	b25a      	sxtb	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	78db      	ldrb	r3, [r3, #3]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d20:	705a      	strb	r2, [r3, #1]

	if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_250K)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	789b      	ldrb	r3, [r3, #2]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10b      	bne.n	8000d42 <configure_nrf_radio+0xae>
	{
		cmd_buffer[1] |= (1 << NRF_RADIO_RF_DR_LOW_POS);
 8000d2a:	4b4f      	ldr	r3, [pc, #316]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	f043 0320 	orr.w	r3, r3, #32
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d36:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_HIGH_POS);
 8000d38:	4b4b      	ldr	r3, [pc, #300]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d3a:	785a      	ldrb	r2, [r3, #1]
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d3e:	705a      	strb	r2, [r3, #1]
 8000d40:	e01b      	b.n	8000d7a <configure_nrf_radio+0xe6>
	}
	else if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_1M)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	789b      	ldrb	r3, [r3, #2]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d108      	bne.n	8000d5c <configure_nrf_radio+0xc8>
	{
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_LOW_POS);
 8000d4a:	4b47      	ldr	r3, [pc, #284]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d4c:	785a      	ldrb	r2, [r3, #1]
 8000d4e:	4b46      	ldr	r3, [pc, #280]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d50:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_HIGH_POS);
 8000d52:	4b45      	ldr	r3, [pc, #276]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d54:	785a      	ldrb	r2, [r3, #1]
 8000d56:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d58:	705a      	strb	r2, [r3, #1]
 8000d5a:	e00e      	b.n	8000d7a <configure_nrf_radio+0xe6>
	}
	else if(radio_config->radio_data_rate == NRF_RADIO_DATA_RATE_2M)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	789b      	ldrb	r3, [r3, #2]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d10a      	bne.n	8000d7a <configure_nrf_radio+0xe6>
	{
		cmd_buffer[1] |= (0 << NRF_RADIO_RF_DR_LOW_POS);
 8000d64:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d66:	785a      	ldrb	r2, [r3, #1]
 8000d68:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d6a:	705a      	strb	r2, [r3, #1]
		cmd_buffer[1] |= (1 << NRF_RADIO_RF_DR_HIGH_POS);
 8000d6c:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d6e:	785b      	ldrb	r3, [r3, #1]
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b3c      	ldr	r3, [pc, #240]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d78:	705a      	strb	r2, [r3, #1]
	}

	cmd_packet_length = 2;
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000d80:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	4838      	ldr	r0, [pc, #224]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d88:	f000 fab0 	bl	80012ec <nrf_radio_cmd_write>

	//4. Configure Data Pipes
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_EN_RXADDR;
 8000d8c:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d8e:	2222      	movs	r2, #34	; 0x22
 8000d90:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_enable_data_pipes;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	791a      	ldrb	r2, [r3, #4]
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000d98:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	4830      	ldr	r0, [pc, #192]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000da8:	f000 faa0 	bl	80012ec <nrf_radio_cmd_write>

	//5. Configure Auto-Acknowledgements
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_EN_AA;
 8000dac:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000dae:	2221      	movs	r2, #33	; 0x21
 8000db0:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_enable_auto_acknowledgements;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	795a      	ldrb	r2, [r3, #5]
 8000db6:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000db8:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4828      	ldr	r0, [pc, #160]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000dc8:	f000 fa90 	bl	80012ec <nrf_radio_cmd_write>

	//6. Configure Address Width
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_SETUP_AW;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000dce:	2223      	movs	r2, #35	; 0x23
 8000dd0:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_address_width;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	799a      	ldrb	r2, [r3, #6]
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000dd8:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	4820      	ldr	r0, [pc, #128]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000de8:	f000 fa80 	bl	80012ec <nrf_radio_cmd_write>

	//7. Configure Retransmission Parameters
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_SETUP_RETR;
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000dee:	2224      	movs	r2, #36	; 0x24
 8000df0:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = (radio_config->radio_auto_retransmit_count | radio_config->radio_auto_retransmit_delay);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	79da      	ldrb	r2, [r3, #7]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7a1b      	ldrb	r3, [r3, #8]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000e00:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4816      	ldr	r0, [pc, #88]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000e10:	f000 fa6c 	bl	80012ec <nrf_radio_cmd_write>

	//8. Configure Own Address (RX_ADDR_P0)
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_RX_ADDR_P0;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000e16:	222a      	movs	r2, #42	; 0x2a
 8000e18:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=radio_config->radio_address_width;i++)
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	e009      	b.n	8000e34 <configure_nrf_radio+0x1a0>
	{
		cmd_buffer[i] = radio_config->radio_addr_p0[i];
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	440a      	add	r2, r1
 8000e28:	7a51      	ldrb	r1, [r2, #9]
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000e2c:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=radio_config->radio_address_width;i++)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	3301      	adds	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	799b      	ldrb	r3, [r3, #6]
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d9f0      	bls.n	8000e20 <configure_nrf_radio+0x18c>
	}
	cmd_packet_length = radio_config->radio_address_width + 1;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	799b      	ldrb	r3, [r3, #6]
 8000e42:	3301      	adds	r3, #1
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000e48:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <configure_nrf_radio+0x1d8>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000e52:	f000 fa4b 	bl	80012ec <nrf_radio_cmd_write>

	//9. Configure Peer Address (TX_ADDR)
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_TX_ADDR;
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <configure_nrf_radio+0x1d4>)
 8000e58:	2230      	movs	r2, #48	; 0x30
 8000e5a:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=radio_config->radio_address_width;i++)
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e011      	b.n	8000e86 <configure_nrf_radio+0x1f2>
 8000e62:	bf00      	nop
 8000e64:	40020000 	.word	0x40020000
 8000e68:	200000e8 	.word	0x200000e8
 8000e6c:	2000010a 	.word	0x2000010a
	{
		cmd_buffer[i] = radio_config->radio_addr_peer[i];
 8000e70:	7bfa      	ldrb	r2, [r7, #15]
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	440a      	add	r2, r1
 8000e78:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 8000e7c:	4a43      	ldr	r2, [pc, #268]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000e7e:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=radio_config->radio_address_width;i++)
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	3301      	adds	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	799b      	ldrb	r3, [r3, #6]
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d9ef      	bls.n	8000e70 <configure_nrf_radio+0x1dc>
	}
	cmd_packet_length = radio_config->radio_address_width + 1;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	799b      	ldrb	r3, [r3, #6]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <configure_nrf_radio+0x2fc>)
 8000e9a:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <configure_nrf_radio+0x2fc>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	483a      	ldr	r0, [pc, #232]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000ea4:	f000 fa22 	bl	80012ec <nrf_radio_cmd_write>

	//10. Configure Dynamic Pay-load Length Feature for Individual Pipes
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_DYNPD;
 8000ea8:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000eaa:	223c      	movs	r2, #60	; 0x3c
 8000eac:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = radio_config->radio_dynamic_payload_enable_pipes;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8000eb4:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000eb6:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000eb8:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <configure_nrf_radio+0x2fc>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000ebe:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <configure_nrf_radio+0x2fc>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4831      	ldr	r0, [pc, #196]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000ec6:	f000 fa11 	bl	80012ec <nrf_radio_cmd_write>

	//11. Configure Feature Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_FEATURE;
 8000eca:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000ecc:	223d      	movs	r2, #61	; 0x3d
 8000ece:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] &= 0x00;
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_dynamic_payload_length_feature << NRF_RADIO_DPL_FEATURE_BITPOS);
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	b25a      	sxtb	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000eee:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_ack_payload_feature << NRF_RADIO_ACK_PAYLOAD_FEATURE_BITPOS);
 8000ef0:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000ef2:	785b      	ldrb	r3, [r3, #1]
 8000ef4:	b25a      	sxtb	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000f08:	705a      	strb	r2, [r3, #1]
	cmd_buffer[1] |= (radio_config->radio_dynamic_ack_feature << NRF_RADIO_DYNAMIC_ACK_FEATURE_BITPOS);
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000f0c:	785a      	ldrb	r2, [r3, #1]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000f1a:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <configure_nrf_radio+0x2fc>)
 8000f1e:	2202      	movs	r2, #2
 8000f20:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <configure_nrf_radio+0x2fc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4818      	ldr	r0, [pc, #96]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000f2a:	f000 f9df 	bl	80012ec <nrf_radio_cmd_write>

	//12. Configure CONFIG Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_CONFIG;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000f30:	2220      	movs	r2, #32
 8000f32:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] &= 0x00;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	705a      	strb	r2, [r3, #1]
	if(radio_config->radio_mode == NRF_RADIO_MODE_TX)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d103      	bne.n	8000f4a <configure_nrf_radio+0x2b6>
	{
		cmd_buffer[1] = 0x0A;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000f44:	220a      	movs	r2, #10
 8000f46:	705a      	strb	r2, [r3, #1]
 8000f48:	e006      	b.n	8000f58 <configure_nrf_radio+0x2c4>
	}
	else if(radio_config->radio_mode == NRF_RADIO_MODE_RX)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d102      	bne.n	8000f58 <configure_nrf_radio+0x2c4>
	{
		cmd_buffer[1] = 0x0B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000f54:	220b      	movs	r2, #11
 8000f56:	705a      	strb	r2, [r3, #1]
	}
	cmd_packet_length = 2;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <configure_nrf_radio+0x2fc>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <configure_nrf_radio+0x2fc>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <configure_nrf_radio+0x2f8>)
 8000f66:	f000 f9c1 	bl	80012ec <nrf_radio_cmd_write>

	if(radio_config->radio_mode == NRF_RADIO_MODE_RX)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <configure_nrf_radio+0x2f0>
	{
		delay_us(50);
 8000f72:	2032      	movs	r0, #50	; 0x32
 8000f74:	f7ff f99c 	bl	80002b0 <delay_us>
		GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_HIGH);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <configure_nrf_radio+0x300>)
 8000f7e:	f7ff fdc3 	bl	8000b08 <GPIOWritePin>
	}

	return;
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
}
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000e8 	.word	0x200000e8
 8000f90:	2000010a 	.word	0x2000010a
 8000f94:	40020000 	.word	0x40020000

08000f98 <nrf_radio_transmit_packet_polling>:

	return nrf_packet_tx_state;
}

uint8_t nrf_radio_transmit_packet_polling(uint8_t *buffer,uint8_t length,uint8_t ack_policy)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	70bb      	strb	r3, [r7, #2]

	nrf_packet_tx_state = NRF_RADIO_PKT_TX_START;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <nrf_radio_transmit_packet_polling+0x5c>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	701a      	strb	r2, [r3, #0]

	//1. Send packet to radio using SPI interface
	nrf_radio_send_packet_to_fifo(buffer,length,ack_policy);
 8000fae:	78ba      	ldrb	r2, [r7, #2]
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f95f 	bl	8001278 <nrf_radio_send_packet_to_fifo>

	//2. Pulse the PTX CE line for more than 10us
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_HIGH);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <nrf_radio_transmit_packet_polling+0x60>)
 8000fc0:	f7ff fda2 	bl	8000b08 <GPIOWritePin>
	delay_us(10);
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f7ff f973 	bl	80002b0 <delay_us>
	GPIOWritePin(RADIO_PORT,CE_PIN,GPIO_LOW);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2102      	movs	r1, #2
 8000fce:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <nrf_radio_transmit_packet_polling+0x60>)
 8000fd0:	f7ff fd9a 	bl	8000b08 <GPIOWritePin>

	//3. Wait for packet to be transmitted by NRF24L01 radio
	delay_us(100000);
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <nrf_radio_transmit_packet_polling+0x64>)
 8000fd6:	f7ff f96b 	bl	80002b0 <delay_us>
	nrf_radio_interrupt_callback();
 8000fda:	f000 f831 	bl	8001040 <nrf_radio_interrupt_callback>

	while(nrf_packet_tx_state == NRF_RADIO_PKT_TX_START);              //Packet TX state is updated in the ISR
 8000fde:	bf00      	nop
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <nrf_radio_transmit_packet_polling+0x5c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d0fb      	beq.n	8000fe0 <nrf_radio_transmit_packet_polling+0x48>

	return nrf_packet_tx_state;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	; (8000ff4 <nrf_radio_transmit_packet_polling+0x5c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000010b 	.word	0x2000010b
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	000186a0 	.word	0x000186a0

08001000 <nrf_radio_receive_packet_callback>:

void nrf_radio_receive_packet_callback(uint8_t *buffer, uint8_t length)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
	//Print message
	printf("Packet Received from Peer Radio\r\n");
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <nrf_radio_receive_packet_callback+0x34>)
 800100e:	f001 f8cb 	bl	80021a8 <puts>

	//Print packet length
	//The actual length of the message is one less than the value of length
	printf("Packet Length: %d\r\n",length-1);
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	3b01      	subs	r3, #1
 8001016:	4619      	mov	r1, r3
 8001018:	4807      	ldr	r0, [pc, #28]	; (8001038 <nrf_radio_receive_packet_callback+0x38>)
 800101a:	f001 f83f 	bl	800209c <iprintf>

	//Print packet contents
	//The actual Rx packet contents are stored from buffer[1] onwards as buffer[0] contains the value of STATUS Register
	printf("Packet Contents: %s\r\n",(char *)(buffer+1));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3301      	adds	r3, #1
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <nrf_radio_receive_packet_callback+0x3c>)
 8001026:	f001 f839 	bl	800209c <iprintf>

	return;
 800102a:	bf00      	nop
}
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	08002ef0 	.word	0x08002ef0
 8001038:	08002f14 	.word	0x08002f14
 800103c:	08002f28 	.word	0x08002f28

08001040 <nrf_radio_interrupt_callback>:
{
	return;
}

void nrf_radio_interrupt_callback(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	uint8_t interrupt_source, status;

	//1. Get the STATUS Register
	status = nrf_radio_get_status_register();
 8001046:	f000 f853 	bl	80010f0 <nrf_radio_get_status_register>
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]

	printf("Callback Status: %d\r\n", status);			//Debug Prints
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4619      	mov	r1, r3
 8001052:	4820      	ldr	r0, [pc, #128]	; (80010d4 <nrf_radio_interrupt_callback+0x94>)
 8001054:	f001 f822 	bl	800209c <iprintf>

	//2. Identify interrupt source
	interrupt_source = nrf_radio_get_interrupt_source();
 8001058:	f000 f876 	bl	8001148 <nrf_radio_get_interrupt_source>
 800105c:	4603      	mov	r3, r0
 800105e:	71bb      	strb	r3, [r7, #6]

	printf("Callback Interrupt Source: %d\r\n", interrupt_source); //Debug Prints
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	4619      	mov	r1, r3
 8001064:	481c      	ldr	r0, [pc, #112]	; (80010d8 <nrf_radio_interrupt_callback+0x98>)
 8001066:	f001 f819 	bl	800209c <iprintf>

	//3. Handle the interrupt source
	if(interrupt_source == NRF_RADIO_INT_SRC_RX_DR)
 800106a:	79bb      	ldrb	r3, [r7, #6]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d10a      	bne.n	8001086 <nrf_radio_interrupt_callback+0x46>
	{
		nrf_radio_retreive_packet_from_fifo();
 8001070:	f000 f890 	bl	8001194 <nrf_radio_retreive_packet_from_fifo>
		nrf_radio_receive_packet_callback((uint8_t *)rx_buffer,rx_packet_length);
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <nrf_radio_interrupt_callback+0x9c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	4819      	ldr	r0, [pc, #100]	; (80010e0 <nrf_radio_interrupt_callback+0xa0>)
 800107c:	f7ff ffc0 	bl	8001000 <nrf_radio_receive_packet_callback>
		//status |= NRF_RADIO_INT_SRC_RX_DR_BITPOS;
		status = NRF_RADIO_INT_SRC_RX_DR_BITPOS;
 8001080:	2340      	movs	r3, #64	; 0x40
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	e012      	b.n	80010ac <nrf_radio_interrupt_callback+0x6c>
	}
	else if(interrupt_source == NRF_RADIO_INT_SRC_TX_DS)
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d105      	bne.n	8001098 <nrf_radio_interrupt_callback+0x58>
	{
		nrf_packet_tx_state = NRF_RADIO_PKT_TX_COMPLETE;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <nrf_radio_interrupt_callback+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
		//status |= NRF_RADIO_INT_SRC_TX_DS_BITPOS;
		status = NRF_RADIO_INT_SRC_TX_DS_BITPOS;
 8001092:	2320      	movs	r3, #32
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	e009      	b.n	80010ac <nrf_radio_interrupt_callback+0x6c>
	}
	else if(interrupt_source == NRF_RADIO_INT_SRC_MAX_RT)
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d105      	bne.n	80010aa <nrf_radio_interrupt_callback+0x6a>
	{
		nrf_packet_tx_state = NRF_RADIO_PKT_TX_FAIL;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <nrf_radio_interrupt_callback+0xa4>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
		//status |= NRF_RADIO_INT_SRC_MAX_RT_BITPOS;
		status = NRF_RADIO_INT_SRC_MAX_RT_BITPOS;
 80010a4:	2310      	movs	r3, #16
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	e000      	b.n	80010ac <nrf_radio_interrupt_callback+0x6c>
	}
	else
	{
		while(1);
 80010aa:	e7fe      	b.n	80010aa <nrf_radio_interrupt_callback+0x6a>
	}

	//4. Clear the interrupt by writing to STATUS Register
	cmd_buffer[0] = NRF_RADIO_CMD_W_REGISTER_STATUS;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <nrf_radio_interrupt_callback+0xa8>)
 80010ae:	2227      	movs	r2, #39	; 0x27
 80010b0:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = status;
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <nrf_radio_interrupt_callback+0xa8>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	7053      	strb	r3, [r2, #1]
	cmd_packet_length = 2;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <nrf_radio_interrupt_callback+0xac>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <nrf_radio_interrupt_callback+0xac>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <nrf_radio_interrupt_callback+0xa8>)
 80010c6:	f000 f911 	bl	80012ec <nrf_radio_cmd_write>

	return;
 80010ca:	bf00      	nop
}
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	08002f40 	.word	0x08002f40
 80010d8:	08002f58 	.word	0x08002f58
 80010dc:	20000109 	.word	0x20000109
 80010e0:	200000c8 	.word	0x200000c8
 80010e4:	2000010b 	.word	0x2000010b
 80010e8:	200000e8 	.word	0x200000e8
 80010ec:	2000010a 	.word	0x2000010a

080010f0 <nrf_radio_get_status_register>:
		}
	}
}

uint8_t nrf_radio_get_status_register(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint8_t status;

	//1. Read the STATUS register (using NOP command)
	cmd_buffer[0] = NRF_RADIO_CMD_NOP;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <nrf_radio_get_status_register+0x44>)
 80010f8:	22ff      	movs	r2, #255	; 0xff
 80010fa:	701a      	strb	r2, [r3, #0]
	cmd_packet_length = 1;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <nrf_radio_get_status_register+0x48>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 8001102:	2200      	movs	r2, #0
 8001104:	2104      	movs	r1, #4
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <nrf_radio_get_status_register+0x4c>)
 8001108:	f7ff fcfe 	bl	8000b08 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <nrf_radio_get_status_register+0x48>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <nrf_radio_get_status_register+0x50>)
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <nrf_radio_get_status_register+0x44>)
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <nrf_radio_get_status_register+0x54>)
 8001116:	f000 f9d6 	bl	80014c6 <SPIMasterRecvData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 800111a:	2201      	movs	r2, #1
 800111c:	2104      	movs	r1, #4
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <nrf_radio_get_status_register+0x4c>)
 8001120:	f7ff fcf2 	bl	8000b08 <GPIOWritePin>

	status = (uint8_t) rx_buffer[0];
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <nrf_radio_get_status_register+0x50>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	71fb      	strb	r3, [r7, #7]

	return status;
 800112a:	79fb      	ldrb	r3, [r7, #7]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000e8 	.word	0x200000e8
 8001138:	2000010a 	.word	0x2000010a
 800113c:	40020000 	.word	0x40020000
 8001140:	200000c8 	.word	0x200000c8
 8001144:	40003800 	.word	0x40003800

08001148 <nrf_radio_get_interrupt_source>:

uint8_t nrf_radio_get_interrupt_source(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t status, interrupt_source;

	//1. Read the STATUS register
	status = nrf_radio_get_status_register();
 800114e:	f7ff ffcf 	bl	80010f0 <nrf_radio_get_status_register>
 8001152:	4603      	mov	r3, r0
 8001154:	71bb      	strb	r3, [r7, #6]

	if(status & NRF_RADIO_INT_SRC_TX_DS_BITPOS)
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	f003 0320 	and.w	r3, r3, #32
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <nrf_radio_get_interrupt_source+0x1e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_TX_DS;
 8001160:	2300      	movs	r3, #0
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	e011      	b.n	800118a <nrf_radio_get_interrupt_source+0x42>
	}
	else if(status & NRF_RADIO_INT_SRC_RX_DR_BITPOS)
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <nrf_radio_get_interrupt_source+0x2e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_RX_DR;
 8001170:	2301      	movs	r3, #1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	e009      	b.n	800118a <nrf_radio_get_interrupt_source+0x42>
	}
	else if(status & NRF_RADIO_INT_SRC_MAX_RT_BITPOS)
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <nrf_radio_get_interrupt_source+0x3e>
	{
		interrupt_source = NRF_RADIO_INT_SRC_MAX_RT;
 8001180:	2302      	movs	r3, #2
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	e001      	b.n	800118a <nrf_radio_get_interrupt_source+0x42>
	}
	else
	{
		interrupt_source = NRF_RADIO_INT_SRC_NONE;
 8001186:	2303      	movs	r3, #3
 8001188:	71fb      	strb	r3, [r7, #7]
	}

	return interrupt_source;
 800118a:	79fb      	ldrb	r3, [r7, #7]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <nrf_radio_retreive_packet_from_fifo>:

void nrf_radio_retreive_packet_from_fifo(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	uint8_t packet_length, i;

	//1. Get the length of the RX Pay-load (from Data Pipe P0)
	packet_length = nrf_radio_get_rx_packet_length();
 800119a:	f000 f83d 	bl	8001218 <nrf_radio_get_rx_packet_length>
 800119e:	4603      	mov	r3, r0
 80011a0:	71bb      	strb	r3, [r7, #6]

	//2. Read the RX Pay-load
	cmd_buffer[0] = NRF_RADIO_CMD_R_RX_PAYLOAD;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <nrf_radio_retreive_packet_from_fifo+0x6c>)
 80011a4:	2261      	movs	r2, #97	; 0x61
 80011a6:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=packet_length;i++)
 80011a8:	2301      	movs	r3, #1
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	e006      	b.n	80011bc <nrf_radio_retreive_packet_from_fifo+0x28>
		cmd_buffer[i] = 0x00;
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <nrf_radio_retreive_packet_from_fifo+0x6c>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=packet_length;i++)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	3301      	adds	r3, #1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d9f4      	bls.n	80011ae <nrf_radio_retreive_packet_from_fifo+0x1a>
	cmd_packet_length = packet_length + 1;
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	3301      	adds	r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <nrf_radio_retreive_packet_from_fifo+0x70>)
 80011cc:	701a      	strb	r2, [r3, #0]

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2104      	movs	r1, #4
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <nrf_radio_retreive_packet_from_fifo+0x74>)
 80011d4:	f7ff fc98 	bl	8000b08 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <nrf_radio_retreive_packet_from_fifo+0x70>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4a0b      	ldr	r2, [pc, #44]	; (800120c <nrf_radio_retreive_packet_from_fifo+0x78>)
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <nrf_radio_retreive_packet_from_fifo+0x6c>)
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <nrf_radio_retreive_packet_from_fifo+0x7c>)
 80011e2:	f000 f970 	bl	80014c6 <SPIMasterRecvData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2104      	movs	r1, #4
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <nrf_radio_retreive_packet_from_fifo+0x74>)
 80011ec:	f7ff fc8c 	bl	8000b08 <GPIOWritePin>

	//3. Update the global variable rx_packet_length
	rx_packet_length = packet_length;
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <nrf_radio_retreive_packet_from_fifo+0x80>)
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	7013      	strb	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000e8 	.word	0x200000e8
 8001204:	2000010a 	.word	0x2000010a
 8001208:	40020000 	.word	0x40020000
 800120c:	200000c8 	.word	0x200000c8
 8001210:	40003800 	.word	0x40003800
 8001214:	20000109 	.word	0x20000109

08001218 <nrf_radio_get_rx_packet_length>:

uint8_t nrf_radio_get_rx_packet_length(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

	uint8_t length;
	//1. Read the RX_PW_P0 Register
	cmd_buffer[0] = NRF_RADIO_CMD_R_REGISTER_RX_PW_P0;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <nrf_radio_get_rx_packet_length+0x4c>)
 8001220:	2211      	movs	r2, #17
 8001222:	701a      	strb	r2, [r3, #0]
	cmd_buffer[1] = 0x00;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <nrf_radio_get_rx_packet_length+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	705a      	strb	r2, [r3, #1]
	cmd_packet_length = 2;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <nrf_radio_get_rx_packet_length+0x50>)
 800122c:	2202      	movs	r2, #2
 800122e:	701a      	strb	r2, [r3, #0]

	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 8001230:	2200      	movs	r2, #0
 8001232:	2104      	movs	r1, #4
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <nrf_radio_get_rx_packet_length+0x54>)
 8001236:	f7ff fc67 	bl	8000b08 <GPIOWritePin>
	SPIMasterRecvData(SPI_DEV,(uint8_t *)cmd_buffer,(uint8_t *)rx_buffer,cmd_packet_length);
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <nrf_radio_get_rx_packet_length+0x50>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4a0c      	ldr	r2, [pc, #48]	; (8001270 <nrf_radio_get_rx_packet_length+0x58>)
 8001240:	4908      	ldr	r1, [pc, #32]	; (8001264 <nrf_radio_get_rx_packet_length+0x4c>)
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <nrf_radio_get_rx_packet_length+0x5c>)
 8001244:	f000 f93f 	bl	80014c6 <SPIMasterRecvData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 8001248:	2201      	movs	r2, #1
 800124a:	2104      	movs	r1, #4
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <nrf_radio_get_rx_packet_length+0x54>)
 800124e:	f7ff fc5b 	bl	8000b08 <GPIOWritePin>

	length = (uint8_t) rx_buffer[1];
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <nrf_radio_get_rx_packet_length+0x58>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	71fb      	strb	r3, [r7, #7]

	return length;
 8001258:	79fb      	ldrb	r3, [r7, #7]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200000e8 	.word	0x200000e8
 8001268:	2000010a 	.word	0x2000010a
 800126c:	40020000 	.word	0x40020000
 8001270:	200000c8 	.word	0x200000c8
 8001274:	40003800 	.word	0x40003800

08001278 <nrf_radio_send_packet_to_fifo>:

void nrf_radio_send_packet_to_fifo(uint8_t *buffer,uint8_t length,uint8_t ack_policy)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
 8001284:	4613      	mov	r3, r2
 8001286:	70bb      	strb	r3, [r7, #2]
	uint8_t i;

	if(ack_policy == NRF_RADIO_ACK)
 8001288:	78bb      	ldrb	r3, [r7, #2]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d103      	bne.n	8001296 <nrf_radio_send_packet_to_fifo+0x1e>
	{
		cmd_buffer[0] = NRF_RADIO_CMD_W_TX_PAYLOAD;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <nrf_radio_send_packet_to_fifo+0x6c>)
 8001290:	22a0      	movs	r2, #160	; 0xa0
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e005      	b.n	80012a2 <nrf_radio_send_packet_to_fifo+0x2a>
	}
	else if(ack_policy == NRF_RADIO_NO_ACK)
 8001296:	78bb      	ldrb	r3, [r7, #2]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d102      	bne.n	80012a2 <nrf_radio_send_packet_to_fifo+0x2a>
	{
		cmd_buffer[0] = NRF_RADIO_CMD_W_TX_PAYLOAD_NOACK;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <nrf_radio_send_packet_to_fifo+0x6c>)
 800129e:	22b0      	movs	r2, #176	; 0xb0
 80012a0:	701a      	strb	r2, [r3, #0]
	}

	for(i=1;i<=length;i++)
 80012a2:	2301      	movs	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e00a      	b.n	80012be <nrf_radio_send_packet_to_fifo+0x46>
	{
		cmd_buffer[i] = buffer[i-1];
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	441a      	add	r2, r3
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	7811      	ldrb	r1, [r2, #0]
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <nrf_radio_send_packet_to_fifo+0x6c>)
 80012b6:	54d1      	strb	r1, [r2, r3]
	for(i=1;i<=length;i++)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	3301      	adds	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d9f0      	bls.n	80012a8 <nrf_radio_send_packet_to_fifo+0x30>
	}

	cmd_packet_length = length + 1;
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	3301      	adds	r3, #1
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <nrf_radio_send_packet_to_fifo+0x70>)
 80012ce:	701a      	strb	r2, [r3, #0]
	nrf_radio_cmd_write((uint8_t *)cmd_buffer,cmd_packet_length);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <nrf_radio_send_packet_to_fifo+0x70>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4803      	ldr	r0, [pc, #12]	; (80012e4 <nrf_radio_send_packet_to_fifo+0x6c>)
 80012d8:	f000 f808 	bl	80012ec <nrf_radio_cmd_write>

	return;
 80012dc:	bf00      	nop
}
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000e8 	.word	0x200000e8
 80012e8:	2000010a 	.word	0x2000010a

080012ec <nrf_radio_cmd_write>:

void nrf_radio_cmd_write(uint8_t *buffer,uint8_t length)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_LOW);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2104      	movs	r1, #4
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <nrf_radio_cmd_write+0x34>)
 80012fe:	f7ff fc03 	bl	8000b08 <GPIOWritePin>
	SPISendData(SPI_DEV,buffer,length);
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	461a      	mov	r2, r3
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <nrf_radio_cmd_write+0x38>)
 800130a:	f000 f8af 	bl	800146c <SPISendData>
	GPIOWritePin(RADIO_PORT,SS_PIN,GPIO_HIGH);
 800130e:	2201      	movs	r2, #1
 8001310:	2104      	movs	r1, #4
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <nrf_radio_cmd_write+0x34>)
 8001314:	f7ff fbf8 	bl	8000b08 <GPIOWritePin>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40020000 	.word	0x40020000
 8001324:	40003800 	.word	0x40003800

08001328 <SPIPeriConfig>:
 */

#include "spi_driver.h"

void SPIPeriConfig(uint32_t *SPIAddress, struct SPI_Config_t *pSPIConfig)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60fb      	str	r3, [r7, #12]

	// 1. Configuring CPHA
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPHA);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 0201 	bic.w	r2, r3, #1
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPhase << SPI_CR1_CPHA);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	7852      	ldrb	r2, [r2, #1]
 800134a:	431a      	orrs	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	601a      	str	r2, [r3, #0]

	//2. Configuring CPOL
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_CPOL);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 0202 	bic.w	r2, r3, #2
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockPol << SPI_CR1_CPOL);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	0052      	lsls	r2, r2, #1
 8001366:	431a      	orrs	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	601a      	str	r2, [r3, #0]

	//3. Configuring SPI Device Mode

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_MSTR);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 0204 	bic.w	r2, r3, #4
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDeviceMode << SPI_CR1_MSTR);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	7892      	ldrb	r2, [r2, #2]
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	431a      	orrs	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	601a      	str	r2, [r3, #0]

	//4. Configuring SPI Clock Frequency
	pSPI->SPI_CR1 &= ~(0x7 << SPI_CR1_BR);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIClockFreq << SPI_CR1_BR);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	7912      	ldrb	r2, [r2, #4]
 800139c:	00d2      	lsls	r2, r2, #3
 800139e:	431a      	orrs	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	601a      	str	r2, [r3, #0]

	//5. Configuring SPI Data Frame Format
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_DFF);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPIDataFrameFormat << SPI_CR1_DFF);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	7952      	ldrb	r2, [r2, #5]
 80013b8:	02d2      	lsls	r2, r2, #11
 80013ba:	431a      	orrs	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	601a      	str	r2, [r3, #0]

	//6. Configuring the Software Slave Management
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSM);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISoftwareSlaveManagement << SPI_CR1_SSM);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	7992      	ldrb	r2, [r2, #6]
 80013d4:	0252      	lsls	r2, r2, #9
 80013d6:	431a      	orrs	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	601a      	str	r2, [r3, #0]

	//7. Configuring the SSI Bit
	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	601a      	str	r2, [r3, #0]
	pSPI->SPI_CR1 |= (pSPIConfig->SPISSIFlag << SPI_CR1_SSI);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	79d2      	ldrb	r2, [r2, #7]
 80013f0:	0212      	lsls	r2, r2, #8
 80013f2:	431a      	orrs	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	601a      	str	r2, [r3, #0]

	//8. Configuring the SSOE Bit
	pSPI->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 0204 	bic.w	r2, r3, #4
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	605a      	str	r2, [r3, #4]
	pSPI->SPI_CR2 |= (pSPIConfig->SPISSOEFlag << SPI_CR2_SSOE);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	7a12      	ldrb	r2, [r2, #8]
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	431a      	orrs	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]


}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <SPIEnable>:

void SPIEnable(uint32_t *SPIAddress)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]

	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

	pSPI->SPI_CR1 |= (1 << SPI_CR1_SPE);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	601a      	str	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <SPIGetFlags>:

	pSPI->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
}

uint8_t SPIGetFlags(uint32_t *SPIAddress, uint8_t Flag)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	60fb      	str	r3, [r7, #12]

	return ((pSPI->SPI_SR >> Flag) & 0x1);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3

}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <SPISendData>:

void SPISendData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	4613      	mov	r3, r2
 8001478:	71fb      	strb	r3, [r7, #7]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	while(len > 0) {
 800147e:	e012      	b.n	80014a6 <SPISendData+0x3a>

		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8001480:	bf00      	nop
 8001482:	2101      	movs	r1, #1
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff ffdb 	bl	8001440 <SPIGetFlags>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f8      	beq.n	8001482 <SPISendData+0x16>

		pSPI->SPI_DR = *TxBuf;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	60da      	str	r2, [r3, #12]
		TxBuf++;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3301      	adds	r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
		len--;
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	71fb      	strb	r3, [r7, #7]
	while(len > 0) {
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e9      	bne.n	8001480 <SPISendData+0x14>
	}

	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE)); //Waiting until the last byte is completely transmitted
 80014ac:	bf00      	nop
 80014ae:	2101      	movs	r1, #1
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff ffc5 	bl	8001440 <SPIGetFlags>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f8      	beq.n	80014ae <SPISendData+0x42>
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <SPIMasterRecvData>:
		len--;
	}
}

void SPIMasterRecvData(uint32_t *SPIAddress, uint8_t *TxBuf, uint8_t *RxBuf, uint8_t len)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	70fb      	strb	r3, [r7, #3]
	struct SPI_RegDef_t *pSPI = (struct SPI_RegDef_t *) SPIAddress;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	617b      	str	r3, [r7, #20]

	//uint8_t ConfiguredDataFrameFormat =  ((1 << SPI_CR1_DFF) & pSPI->SPI_CR1) >> SPI_CR1_DFF;

	//Clearing the SPI receive buffer before transmitting the data
	while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 80014d8:	bf00      	nop
 80014da:	2101      	movs	r1, #1
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff ffaf 	bl	8001440 <SPIGetFlags>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f8      	beq.n	80014da <SPIMasterRecvData+0x14>

	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 80014e8:	e004      	b.n	80014f4 <SPIMasterRecvData+0x2e>
		*RxBuf = pSPI->SPI_DR;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	701a      	strb	r2, [r3, #0]
	while(SPIGetFlags(SPIAddress,SPI_SR_RXNE))
 80014f4:	2100      	movs	r1, #0
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff ffa2 	bl	8001440 <SPIGetFlags>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f3      	bne.n	80014ea <SPIMasterRecvData+0x24>

	while(len > 0) {
 8001502:	e022      	b.n	800154a <SPIMasterRecvData+0x84>
		// Waiting for TX Buffer to be empty
		while(!SPIGetFlags(SPIAddress,SPI_SR_TXE));
 8001504:	bf00      	nop
 8001506:	2101      	movs	r1, #1
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff ff99 	bl	8001440 <SPIGetFlags>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f8      	beq.n	8001506 <SPIMasterRecvData+0x40>

		pSPI->SPI_DR = *TxBuf;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	60da      	str	r2, [r3, #12]
		TxBuf++;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3301      	adds	r3, #1
 8001522:	60bb      	str	r3, [r7, #8]

		// Waiting for RX Buffer to be full
		while(!SPIGetFlags(SPIAddress,SPI_SR_RXNE));
 8001524:	bf00      	nop
 8001526:	2100      	movs	r1, #0
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7ff ff89 	bl	8001440 <SPIGetFlags>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f8      	beq.n	8001526 <SPIMasterRecvData+0x60>

		*RxBuf = pSPI->SPI_DR;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	701a      	strb	r2, [r3, #0]
		RxBuf++;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3301      	adds	r3, #1
 8001542:	607b      	str	r3, [r7, #4]
		len--;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	3b01      	subs	r3, #1
 8001548:	70fb      	strb	r3, [r7, #3]
	while(len > 0) {
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1d9      	bne.n	8001504 <SPIMasterRecvData+0x3e>
	}

	return;
 8001550:	bf00      	nop
}
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <EnablePeriClk>:
/* Peripheral Clock Enable and Disable Functions */



void EnablePeriClk(uint32_t *PeripheralAddress)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	uint32_t *pRCCPeriClkReg;

	if(PeripheralAddress == GPIOA) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a88      	ldr	r2, [pc, #544]	; (8001784 <EnablePeriClk+0x22c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d108      	bne.n	800157a <EnablePeriClk+0x22>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001568:	4b87      	ldr	r3, [pc, #540]	; (8001788 <EnablePeriClk+0x230>)
 800156a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOA_RCC_PERI_CLK_BIT_POS);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	601a      	str	r2, [r3, #0]
	}
	else if (PeripheralAddress == TIM5) {
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
	}
}
 8001578:	e19b      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOB) {
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a83      	ldr	r2, [pc, #524]	; (800178c <EnablePeriClk+0x234>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d108      	bne.n	8001594 <EnablePeriClk+0x3c>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001582:	4b81      	ldr	r3, [pc, #516]	; (8001788 <EnablePeriClk+0x230>)
 8001584:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOB_RCC_PERI_CLK_BIT_POS);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f043 0202 	orr.w	r2, r3, #2
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	e18e      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOC) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a7e      	ldr	r2, [pc, #504]	; (8001790 <EnablePeriClk+0x238>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d108      	bne.n	80015ae <EnablePeriClk+0x56>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800159c:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <EnablePeriClk+0x230>)
 800159e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOC_RCC_PERI_CLK_BIT_POS);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f043 0204 	orr.w	r2, r3, #4
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	601a      	str	r2, [r3, #0]
}
 80015ac:	e181      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOD) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a78      	ldr	r2, [pc, #480]	; (8001794 <EnablePeriClk+0x23c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d108      	bne.n	80015c8 <EnablePeriClk+0x70>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80015b6:	4b74      	ldr	r3, [pc, #464]	; (8001788 <EnablePeriClk+0x230>)
 80015b8:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOD_RCC_PERI_CLK_BIT_POS);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f043 0208 	orr.w	r2, r3, #8
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	601a      	str	r2, [r3, #0]
}
 80015c6:	e174      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOE) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a73      	ldr	r2, [pc, #460]	; (8001798 <EnablePeriClk+0x240>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d108      	bne.n	80015e2 <EnablePeriClk+0x8a>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80015d0:	4b6d      	ldr	r3, [pc, #436]	; (8001788 <EnablePeriClk+0x230>)
 80015d2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOE_RCC_PERI_CLK_BIT_POS);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f043 0210 	orr.w	r2, r3, #16
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	e167      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOF) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a6d      	ldr	r2, [pc, #436]	; (800179c <EnablePeriClk+0x244>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d108      	bne.n	80015fc <EnablePeriClk+0xa4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <EnablePeriClk+0x230>)
 80015ec:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOF_RCC_PERI_CLK_BIT_POS);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f043 0220 	orr.w	r2, r3, #32
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	601a      	str	r2, [r3, #0]
}
 80015fa:	e15a      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOG) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a68      	ldr	r2, [pc, #416]	; (80017a0 <EnablePeriClk+0x248>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d108      	bne.n	8001616 <EnablePeriClk+0xbe>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001604:	4b60      	ldr	r3, [pc, #384]	; (8001788 <EnablePeriClk+0x230>)
 8001606:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOG_RCC_PERI_CLK_BIT_POS);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	601a      	str	r2, [r3, #0]
}
 8001614:	e14d      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOH) {
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a62      	ldr	r2, [pc, #392]	; (80017a4 <EnablePeriClk+0x24c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d108      	bne.n	8001630 <EnablePeriClk+0xd8>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800161e:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <EnablePeriClk+0x230>)
 8001620:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOH_RCC_PERI_CLK_BIT_POS);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	601a      	str	r2, [r3, #0]
}
 800162e:	e140      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == GPIOI) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a5d      	ldr	r2, [pc, #372]	; (80017a8 <EnablePeriClk+0x250>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d108      	bne.n	800164a <EnablePeriClk+0xf2>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001638:	4b53      	ldr	r3, [pc, #332]	; (8001788 <EnablePeriClk+0x230>)
 800163a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << GPIOI_RCC_PERI_CLK_BIT_POS);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	601a      	str	r2, [r3, #0]
}
 8001648:	e133      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI1) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a57      	ldr	r2, [pc, #348]	; (80017ac <EnablePeriClk+0x254>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d108      	bne.n	8001664 <EnablePeriClk+0x10c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001652:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <EnablePeriClk+0x258>)
 8001654:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI1_RCC_PERI_CLK_BIT_POS);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	601a      	str	r2, [r3, #0]
}
 8001662:	e126      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI2) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a53      	ldr	r2, [pc, #332]	; (80017b4 <EnablePeriClk+0x25c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d108      	bne.n	800167e <EnablePeriClk+0x126>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800166c:	4b52      	ldr	r3, [pc, #328]	; (80017b8 <EnablePeriClk+0x260>)
 800166e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI2_RCC_PERI_CLK_BIT_POS);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	601a      	str	r2, [r3, #0]
}
 800167c:	e119      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == SPI3) {
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <EnablePeriClk+0x264>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d108      	bne.n	8001698 <EnablePeriClk+0x140>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001686:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <EnablePeriClk+0x260>)
 8001688:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << SPI3_RCC_PERI_CLK_BIT_POS);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	601a      	str	r2, [r3, #0]
}
 8001696:	e10c      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C1) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a49      	ldr	r2, [pc, #292]	; (80017c0 <EnablePeriClk+0x268>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d108      	bne.n	80016b2 <EnablePeriClk+0x15a>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80016a0:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <EnablePeriClk+0x260>)
 80016a2:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C1_RCC_PERI_CLK_BIT_POS);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	e0ff      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C2) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a43      	ldr	r2, [pc, #268]	; (80017c4 <EnablePeriClk+0x26c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d108      	bne.n	80016cc <EnablePeriClk+0x174>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <EnablePeriClk+0x260>)
 80016bc:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C2_RCC_PERI_CLK_BIT_POS);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	e0f2      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == I2C3) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a3e      	ldr	r2, [pc, #248]	; (80017c8 <EnablePeriClk+0x270>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d108      	bne.n	80016e6 <EnablePeriClk+0x18e>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <EnablePeriClk+0x260>)
 80016d6:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << I2C3_RCC_PERI_CLK_BIT_POS);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	e0e5      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART1) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a38      	ldr	r2, [pc, #224]	; (80017cc <EnablePeriClk+0x274>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d108      	bne.n	8001700 <EnablePeriClk+0x1a8>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <EnablePeriClk+0x258>)
 80016f0:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART1_RCC_PERI_CLK_BIT_POS);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f043 0210 	orr.w	r2, r3, #16
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	601a      	str	r2, [r3, #0]
}
 80016fe:	e0d8      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART2) {
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <EnablePeriClk+0x278>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d108      	bne.n	800171a <EnablePeriClk+0x1c2>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <EnablePeriClk+0x260>)
 800170a:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART2_RCC_PERI_CLK_BIT_POS);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	601a      	str	r2, [r3, #0]
}
 8001718:	e0cb      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART3) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <EnablePeriClk+0x27c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d108      	bne.n	8001734 <EnablePeriClk+0x1dc>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <EnablePeriClk+0x260>)
 8001724:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART3_RCC_PERI_CLK_BIT_POS);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	e0be      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART4) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <EnablePeriClk+0x280>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d108      	bne.n	800174e <EnablePeriClk+0x1f6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <EnablePeriClk+0x260>)
 800173e:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART4_RCC_PERI_CLK_BIT_POS);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	e0b1      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == UART5) {
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <EnablePeriClk+0x284>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d108      	bne.n	8001768 <EnablePeriClk+0x210>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <EnablePeriClk+0x260>)
 8001758:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << UART5_RCC_PERI_CLK_BIT_POS);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	601a      	str	r2, [r3, #0]
}
 8001766:	e0a4      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == USART6) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <EnablePeriClk+0x288>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d139      	bne.n	80017e4 <EnablePeriClk+0x28c>
		pRCCPeriClkReg = (uint32_t *) APB2_ENR_ADDR;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <EnablePeriClk+0x258>)
 8001772:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << USART6_RCC_PERI_CLK_BIT_POS);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f043 0220 	orr.w	r2, r3, #32
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	e097      	b.n	80018b2 <EnablePeriClk+0x35a>
 8001782:	bf00      	nop
 8001784:	40020000 	.word	0x40020000
 8001788:	40023830 	.word	0x40023830
 800178c:	40020400 	.word	0x40020400
 8001790:	40020800 	.word	0x40020800
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40021400 	.word	0x40021400
 80017a0:	40021800 	.word	0x40021800
 80017a4:	40021c00 	.word	0x40021c00
 80017a8:	40022000 	.word	0x40022000
 80017ac:	40013000 	.word	0x40013000
 80017b0:	40023844 	.word	0x40023844
 80017b4:	40003800 	.word	0x40003800
 80017b8:	40023840 	.word	0x40023840
 80017bc:	40003c00 	.word	0x40003c00
 80017c0:	40005400 	.word	0x40005400
 80017c4:	40005800 	.word	0x40005800
 80017c8:	40005c00 	.word	0x40005c00
 80017cc:	40011000 	.word	0x40011000
 80017d0:	40004400 	.word	0x40004400
 80017d4:	40004800 	.word	0x40004800
 80017d8:	40004c00 	.word	0x40004c00
 80017dc:	40005000 	.word	0x40005000
 80017e0:	40011400 	.word	0x40011400
	else if (PeripheralAddress == TIM6) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a35      	ldr	r2, [pc, #212]	; (80018bc <EnablePeriClk+0x364>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d108      	bne.n	80017fe <EnablePeriClk+0x2a6>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80017ec:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <EnablePeriClk+0x368>)
 80017ee:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM6_RCC_PERI_CLK_BIT_POS);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f043 0210 	orr.w	r2, r3, #16
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	601a      	str	r2, [r3, #0]
}
 80017fc:	e059      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM7) {
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a30      	ldr	r2, [pc, #192]	; (80018c4 <EnablePeriClk+0x36c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d108      	bne.n	8001818 <EnablePeriClk+0x2c0>
		pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <EnablePeriClk+0x368>)
 8001808:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << TIM7_RCC_PERI_CLK_BIT_POS);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f043 0220 	orr.w	r2, r3, #32
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	601a      	str	r2, [r3, #0]
}
 8001816:	e04c      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA1) {
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <EnablePeriClk+0x370>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d108      	bne.n	8001832 <EnablePeriClk+0x2da>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <EnablePeriClk+0x374>)
 8001822:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA1_RCC_PERI_CLK_BIT_POS);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	e03f      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == DMA2) {
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <EnablePeriClk+0x378>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d108      	bne.n	800184c <EnablePeriClk+0x2f4>
		pRCCPeriClkReg = (uint32_t *) AHB1_ENR_ADDR;
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <EnablePeriClk+0x374>)
 800183c:	60fb      	str	r3, [r7, #12]
		*pRCCPeriClkReg |= (1 << DMA2_RCC_PERI_CLK_BIT_POS);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	601a      	str	r2, [r3, #0]
}
 800184a:	e032      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM2) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001852:	d108      	bne.n	8001866 <EnablePeriClk+0x30e>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <EnablePeriClk+0x368>)
 8001856:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM2_RCC_PERI_CLK_BIT_POS);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	601a      	str	r2, [r3, #0]
}
 8001864:	e025      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM3) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <EnablePeriClk+0x37c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d108      	bne.n	8001880 <EnablePeriClk+0x328>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <EnablePeriClk+0x368>)
 8001870:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM3_RCC_PERI_CLK_BIT_POS);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f043 0202 	orr.w	r2, r3, #2
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	601a      	str	r2, [r3, #0]
}
 800187e:	e018      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM4) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <EnablePeriClk+0x380>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d108      	bne.n	800189a <EnablePeriClk+0x342>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <EnablePeriClk+0x368>)
 800188a:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM4_RCC_PERI_CLK_BIT_POS);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f043 0204 	orr.w	r2, r3, #4
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	601a      	str	r2, [r3, #0]
}
 8001898:	e00b      	b.n	80018b2 <EnablePeriClk+0x35a>
	else if (PeripheralAddress == TIM5) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <EnablePeriClk+0x384>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d107      	bne.n	80018b2 <EnablePeriClk+0x35a>
			pRCCPeriClkReg = (uint32_t *) APB1_ENR_ADDR;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <EnablePeriClk+0x368>)
 80018a4:	60fb      	str	r3, [r7, #12]
			*pRCCPeriClkReg |= (1 << TIM5_RCC_PERI_CLK_BIT_POS);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f043 0208 	orr.w	r2, r3, #8
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40001000 	.word	0x40001000
 80018c0:	40023840 	.word	0x40023840
 80018c4:	40001400 	.word	0x40001400
 80018c8:	40026000 	.word	0x40026000
 80018cc:	40023830 	.word	0x40023830
 80018d0:	40026400 	.word	0x40026400
 80018d4:	40000400 	.word	0x40000400
 80018d8:	40000800 	.word	0x40000800
 80018dc:	40000c00 	.word	0x40000c00

080018e0 <USART_Init>:
#include <stdio.h>

extern void USART_RXNEInterruptCallback(uint8_t data);

void USART_Init(struct USART_Handle_t *pUSART_Handle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	//1. Configure Tx/Rx Mode

	if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_ONLY)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d110      	bne.n	8001912 <USART_Init+0x32>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0208 	orr.w	r2, r2, #8
 80018fe:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_RE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0204 	bic.w	r2, r2, #4
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	e028      	b.n	8001964 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_RX_ONLY)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d110      	bne.n	800193c <USART_Init+0x5c>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_TE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0208 	bic.w	r2, r2, #8
 8001928:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0204 	orr.w	r2, r2, #4
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	e013      	b.n	8001964 <USART_Init+0x84>
	}else if(pUSART_Handle->USART_Config.USART_Mode == USART_MODE_TX_RX)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d10f      	bne.n	8001964 <USART_Init+0x84>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_TE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0208 	orr.w	r2, r2, #8
 8001952:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_RE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0204 	orr.w	r2, r2, #4
 8001962:	60da      	str	r2, [r3, #12]
	}


	//2. Configure Data Word Length

	if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_8_BITS)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d108      	bne.n	800197e <USART_Init+0x9e>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_M);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	e00b      	b.n	8001996 <USART_Init+0xb6>
	}else if(pUSART_Handle->USART_Config.USART_DataLength == USART_DATA_LEN_9_BITS)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <USART_Init+0xb6>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_M);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001994:	60da      	str	r2, [r3, #12]
	}


	//3. Configure the No. of Stop Bits

	pUSART_Handle->pUSART->USART_CR2 &= ~(0x3 << USART_CR2_STOP);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80019a4:	611a      	str	r2, [r3, #16]
	pUSART_Handle->pUSART->USART_CR2 |= (pUSART_Handle->USART_Config.USART_StopBits << USART_CR2_STOP);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6919      	ldr	r1, [r3, #16]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	031a      	lsls	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	611a      	str	r2, [r3, #16]

	//4. Configure the Parity

	if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d108      	bne.n	80019d4 <USART_Init+0xf4>
	{
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PCE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	e028      	b.n	8001a26 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_EVEN)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d110      	bne.n	80019fe <USART_Init+0x11e>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019ea:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_PS);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	e013      	b.n	8001a26 <USART_Init+0x146>
	}else if(pUSART_Handle->USART_Config.USART_ParityControl == USART_PARITY_ODD)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d10f      	bne.n	8001a26 <USART_Init+0x146>
	{
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PCE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a14:	60da      	str	r2, [r3, #12]
		pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_PS);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a24:	60da      	str	r2, [r3, #12]
	}

	//5. Configure the Baud Rate
	USART_SetBaudRate(pUSART_Handle, pUSART_Handle->USART_Config.USART_BaudRate);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f8a7 	bl	8001b80 <USART_SetBaudRate>

	//6. Configure HW Flow Control
	if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_NONE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d110      	bne.n	8001a5c <USART_Init+0x17c>
	{
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a48:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a58:	615a      	str	r2, [r3, #20]
	{
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
	}

}
 8001a5a:	e03d      	b.n	8001ad8 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d110      	bne.n	8001a86 <USART_Init+0x1a6>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a72:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_CTSE);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a82:	615a      	str	r2, [r3, #20]
}
 8001a84:	e028      	b.n	8001ad8 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_CTS)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d110      	bne.n	8001ab0 <USART_Init+0x1d0>
		pUSART_Handle->pUSART->USART_CR3 &= ~(1 << USART_CR3_RTSE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a9c:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aac:	615a      	str	r2, [r3, #20]
}
 8001aae:	e013      	b.n	8001ad8 <USART_Init+0x1f8>
	}else if(pUSART_Handle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CNTRL_RTS_CTS)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d10f      	bne.n	8001ad8 <USART_Init+0x1f8>
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_RTSE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ac6:	615a      	str	r2, [r3, #20]
		pUSART_Handle->pUSART->USART_CR3 |= (1 << USART_CR3_CTSE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad6:	615a      	str	r2, [r3, #20]
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <USART_PeripheralEnable>:

void USART_PeripheralEnable(struct USART_Handle_t *pUSART_Handle)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	pUSART_Handle->pUSART->USART_CR1 |= (1 << USART_CR1_UE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af6:	60da      	str	r2, [r3, #12]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <USART_GetFlagStatus>:
{
	pUSART_Handle->pUSART->USART_CR1 &= ~(1 << USART_CR1_UE);
}

uint8_t USART_GetFlagStatus(struct USART_Handle_t *pUSART_Handle, uint8_t FlagName)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	70fb      	strb	r3, [r7, #3]
	if(pUSART_Handle->pUSART->USART_SR & FlagName)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <USART_GetFlagStatus+0x1e>
	{
		return FLAG_SET;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <USART_GetFlagStatus+0x20>
	}

		return FLAG_RESET;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <USART_SendData>:

}


void USART_SendData(struct USART_Handle_t *pUSART_Handle, uint8_t *pTxBuf, uint32_t Len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8001b38:	e012      	b.n	8001b60 <USART_SendData+0x34>
	{
		while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TXE));
 8001b3a:	bf00      	nop
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff ffdf 	bl	8001b02 <USART_GetFlagStatus>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f8      	beq.n	8001b3c <USART_SendData+0x10>

		pUSART_Handle->pUSART->USART_DR = *pTxBuf;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
		pTxBuf++;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
		Len--;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1e9      	bne.n	8001b3a <USART_SendData+0xe>
	}

	while(!USART_GetFlagStatus(pUSART_Handle,USART_FLAG_TC));
 8001b66:	bf00      	nop
 8001b68:	2140      	movs	r1, #64	; 0x40
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f7ff ffc9 	bl	8001b02 <USART_GetFlagStatus>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f8      	beq.n	8001b68 <USART_SendData+0x3c>
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <USART_SetBaudRate>:
		Len--;
	}
}

void USART_SetBaudRate(struct USART_Handle_t *pUSART_Handle, uint32_t BaudRate)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]

	// Dummy Function. Need to implement code to calculate the USART_BRR_Value
	//0x683 corresponds to FPCLK=16MHz and Oversampling=0
	uint32_t USART_BRR_Value = 0x683;
 8001b8a:	f240 6383 	movw	r3, #1667	; 0x683
 8001b8e:	60fb      	str	r3, [r7, #12]

	pUSART_Handle->pUSART->USART_BRR = USART_BRR_Value;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	609a      	str	r2, [r3, #8]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e00a      	b.n	8001bca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	4601      	mov	r1, r0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	60ba      	str	r2, [r7, #8]
 8001bc0:	b2ca      	uxtb	r2, r1
 8001bc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	dbf0      	blt.n	8001bb4 <_read+0x12>
  }

  return len;
 8001bd2:	687b      	ldr	r3, [r7, #4]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e009      	b.n	8001c02 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    //ITM_SendChar(*ptr++);
	UART_SendChar(*ptr++);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	60ba      	str	r2, [r7, #8]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fc44 	bl	8000484 <UART_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	dbf1      	blt.n	8001bee <_write+0x12>
    //LCD_SendChar(*ptr++);
  }
  return len;
 8001c0a:	687b      	ldr	r3, [r7, #4]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_close>:

int _close(int file)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <_isatty>:

int _isatty(int file)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f000 f8ea 	bl	8001e7c <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20020000 	.word	0x20020000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	2000010c 	.word	0x2000010c
 8001cdc:	20000120 	.word	0x20000120

08001ce0 <main>:
#include "dht11_driver.h"
#include "nRFL01_driver.h"
#include "common_utils.h"

int main(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b092      	sub	sp, #72	; 0x48
 8001ce4:	af00      	add	r7, sp, #0
	uint32_t count = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t dht11_sensor_data[5];

	//NRF24L01 Radio Related Variables
	struct NRF_RADIO_CONFIG_t radio_config;
	uint8_t status;
	uint8_t addr[] = {0xA1,0xA2,0xA3,0xA4,0xA5};      //nRF Radio Link Address
 8001cea:	4a47      	ldr	r2, [pc, #284]	; (8001e08 <main+0x128>)
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cf2:	6018      	str	r0, [r3, #0]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	7019      	strb	r1, [r3, #0]

	//Configure the Timer
	configure_delay_timer();
 8001cf8:	f7fe faf2 	bl	80002e0 <configure_delay_timer>

	//Configure the UART Peripheral
	configure_uart();
 8001cfc:	f7fe fb64 	bl	80003c8 <configure_uart>

	//Configure the SPI Port connecting to NRF24L01 Radio
	configure_spi();
 8001d00:	f7fe fb10 	bl	8000324 <configure_spi>

	//Configure the NRF24L01 Radio
	memset(&radio_config,0,sizeof(radio_config));
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	2230      	movs	r2, #48	; 0x30
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f8df 	bl	8001ed0 <memset>
	radio_config.radio_mode = NRF_RADIO_MODE_TX;
 8001d12:	2300      	movs	r3, #0
 8001d14:	733b      	strb	r3, [r7, #12]
	radio_config.radio_channel = 90;
 8001d16:	235a      	movs	r3, #90	; 0x5a
 8001d18:	737b      	strb	r3, [r7, #13]
	radio_config.radio_data_rate = NRF_RADIO_DATA_RATE_250K;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73bb      	strb	r3, [r7, #14]
	radio_config.radio_pa_level = NRF_RADIO_PA_LEVEL_3;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	73fb      	strb	r3, [r7, #15]
	radio_config.radio_enable_data_pipes = (NRF_RADIO_ERX_P0);
 8001d22:	2301      	movs	r3, #1
 8001d24:	743b      	strb	r3, [r7, #16]
	radio_config.radio_enable_auto_acknowledgements = (NRF_RADIO_ENAA_P0);
 8001d26:	2301      	movs	r3, #1
 8001d28:	747b      	strb	r3, [r7, #17]
	radio_config.radio_address_width = NRF_RADIO_ADDRESS_WIDTH_5B;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	74bb      	strb	r3, [r7, #18]
	radio_config.radio_auto_retransmit_count = NRF_RADIO_ARC_3;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	74fb      	strb	r3, [r7, #19]
	radio_config.radio_auto_retransmit_delay = NRF_RADIO_ARD_1000US;
 8001d32:	2330      	movs	r3, #48	; 0x30
 8001d34:	753b      	strb	r3, [r7, #20]
	memcpy(&radio_config.radio_addr_p0, addr, sizeof(addr));
 8001d36:	f107 0315 	add.w	r3, r7, #21
 8001d3a:	1d3a      	adds	r2, r7, #4
 8001d3c:	6810      	ldr	r0, [r2, #0]
 8001d3e:	6018      	str	r0, [r3, #0]
 8001d40:	7912      	ldrb	r2, [r2, #4]
 8001d42:	711a      	strb	r2, [r3, #4]
	memcpy(&radio_config.radio_addr_peer, addr, sizeof(addr));
 8001d44:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8001d48:	1d3a      	adds	r2, r7, #4
 8001d4a:	6810      	ldr	r0, [r2, #0]
 8001d4c:	6018      	str	r0, [r3, #0]
 8001d4e:	7912      	ldrb	r2, [r2, #4]
 8001d50:	711a      	strb	r2, [r3, #4]
	radio_config.radio_dynamic_payload_length_feature = NRF_RADIO_DPL_FEATURE_ENABLE;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	radio_config.radio_dynamic_payload_enable_pipes = NRF_RADIO_DPL_P0;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	radio_config.radio_ack_payload_feature = NRF_RADIO_ACK_PAYLOAD_FEATURE_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	radio_config.radio_dynamic_ack_feature = NRF_RADIO_DYNAMIC_ACK_FEATURE_ENABLE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	configure_nrf_radio(&radio_config);
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe ff90 	bl	8000c94 <configure_nrf_radio>

	while(1)
	{
		//Read the DHT11 Sensor
		dht11_sensor_response = read_dht11_sensor(dht11_sensor_data);
 8001d74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbc1 	bl	8000500 <read_dht11_sensor>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		if(dht11_sensor_response)
 8001d84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d036      	beq.n	8001dfa <main+0x11a>
		{
			//Ensure that printf() is redirected to UART in "syscalls.c" file
			printf("DHT11 Sensor Read Successfully\r\n");
 8001d8c:	481f      	ldr	r0, [pc, #124]	; (8001e0c <main+0x12c>)
 8001d8e:	f000 fa0b 	bl	80021a8 <puts>
			printf("Relative Humidity: %d.%d\r\n",dht11_sensor_data[0],dht11_sensor_data[1]);
 8001d92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001d96:	4619      	mov	r1, r3
 8001d98:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	481c      	ldr	r0, [pc, #112]	; (8001e10 <main+0x130>)
 8001da0:	f000 f97c 	bl	800209c <iprintf>
			printf("Temperature: %d.%d C\r\n",dht11_sensor_data[2],dht11_sensor_data[3]);
 8001da4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001da8:	4619      	mov	r1, r3
 8001daa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dae:	461a      	mov	r2, r3
 8001db0:	4818      	ldr	r0, [pc, #96]	; (8001e14 <main+0x134>)
 8001db2:	f000 f973 	bl	800209c <iprintf>

			//Transmit the sensor readings over wireless link
			status = nrf_radio_transmit_packet_polling(dht11_sensor_data,4,NRF_RADIO_ACK);
 8001db6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f8ea 	bl	8000f98 <nrf_radio_transmit_packet_polling>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			if(status == NRF_RADIO_PKT_TX_COMPLETE)
 8001dca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <main+0x102>
			{
				//Print Message
				printf("Packet %ld Transmitted Successfully\r\n",++count);
 8001dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001dda:	480f      	ldr	r0, [pc, #60]	; (8001e18 <main+0x138>)
 8001ddc:	f000 f95e 	bl	800209c <iprintf>
 8001de0:	e00e      	b.n	8001e00 <main+0x120>
			}
			else if(status == NRF_RADIO_PKT_TX_FAIL)
 8001de2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10a      	bne.n	8001e00 <main+0x120>
			{
				//Print Message
				printf("Packet %ld Transmission Failed\r\n",++count);
 8001dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dec:	3301      	adds	r3, #1
 8001dee:	647b      	str	r3, [r7, #68]	; 0x44
 8001df0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001df2:	480a      	ldr	r0, [pc, #40]	; (8001e1c <main+0x13c>)
 8001df4:	f000 f952 	bl	800209c <iprintf>
 8001df8:	e002      	b.n	8001e00 <main+0x120>
			}
		}
		else
		{
			printf("DHT11 Sensor Reading Failed\r\n");
 8001dfa:	4809      	ldr	r0, [pc, #36]	; (8001e20 <main+0x140>)
 8001dfc:	f000 f9d4 	bl	80021a8 <puts>
		}

		delay_us(5000000);
 8001e00:	4808      	ldr	r0, [pc, #32]	; (8001e24 <main+0x144>)
 8001e02:	f7fe fa55 	bl	80002b0 <delay_us>
		dht11_sensor_response = read_dht11_sensor(dht11_sensor_data);
 8001e06:	e7b5      	b.n	8001d74 <main+0x94>
 8001e08:	08003038 	.word	0x08003038
 8001e0c:	08002f78 	.word	0x08002f78
 8001e10:	08002f98 	.word	0x08002f98
 8001e14:	08002fb4 	.word	0x08002fb4
 8001e18:	08002fcc 	.word	0x08002fcc
 8001e1c:	08002ff4 	.word	0x08002ff4
 8001e20:	08003018 	.word	0x08003018
 8001e24:	004c4b40 	.word	0x004c4b40

08001e28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480c      	ldr	r0, [pc, #48]	; (8001e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e32:	490d      	ldr	r1, [pc, #52]	; (8001e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <LoopForever+0xe>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e48:	4c0a      	ldr	r4, [pc, #40]	; (8001e74 <LoopForever+0x16>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e56:	f000 f817 	bl	8001e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5a:	f7ff ff41 	bl	8001ce0 <main>

08001e5e <LoopForever>:

LoopForever:
  b LoopForever
 8001e5e:	e7fe      	b.n	8001e5e <LoopForever>
  ldr   r0, =_estack
 8001e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e68:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001e6c:	080030e0 	.word	0x080030e0
  ldr r2, =_sbss
 8001e70:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001e74:	20000120 	.word	0x20000120

08001e78 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC_IRQHandler>
	...

08001e7c <__errno>:
 8001e7c:	4b01      	ldr	r3, [pc, #4]	; (8001e84 <__errno+0x8>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000

08001e88 <__libc_init_array>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	4d0d      	ldr	r5, [pc, #52]	; (8001ec0 <__libc_init_array+0x38>)
 8001e8c:	4c0d      	ldr	r4, [pc, #52]	; (8001ec4 <__libc_init_array+0x3c>)
 8001e8e:	1b64      	subs	r4, r4, r5
 8001e90:	10a4      	asrs	r4, r4, #2
 8001e92:	2600      	movs	r6, #0
 8001e94:	42a6      	cmp	r6, r4
 8001e96:	d109      	bne.n	8001eac <__libc_init_array+0x24>
 8001e98:	4d0b      	ldr	r5, [pc, #44]	; (8001ec8 <__libc_init_array+0x40>)
 8001e9a:	4c0c      	ldr	r4, [pc, #48]	; (8001ecc <__libc_init_array+0x44>)
 8001e9c:	f001 f81c 	bl	8002ed8 <_init>
 8001ea0:	1b64      	subs	r4, r4, r5
 8001ea2:	10a4      	asrs	r4, r4, #2
 8001ea4:	2600      	movs	r6, #0
 8001ea6:	42a6      	cmp	r6, r4
 8001ea8:	d105      	bne.n	8001eb6 <__libc_init_array+0x2e>
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb0:	4798      	blx	r3
 8001eb2:	3601      	adds	r6, #1
 8001eb4:	e7ee      	b.n	8001e94 <__libc_init_array+0xc>
 8001eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eba:	4798      	blx	r3
 8001ebc:	3601      	adds	r6, #1
 8001ebe:	e7f2      	b.n	8001ea6 <__libc_init_array+0x1e>
 8001ec0:	080030d8 	.word	0x080030d8
 8001ec4:	080030d8 	.word	0x080030d8
 8001ec8:	080030d8 	.word	0x080030d8
 8001ecc:	080030dc 	.word	0x080030dc

08001ed0 <memset>:
 8001ed0:	4402      	add	r2, r0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d100      	bne.n	8001eda <memset+0xa>
 8001ed8:	4770      	bx	lr
 8001eda:	f803 1b01 	strb.w	r1, [r3], #1
 8001ede:	e7f9      	b.n	8001ed4 <memset+0x4>

08001ee0 <_free_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4605      	mov	r5, r0
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	d041      	beq.n	8001f6c <_free_r+0x8c>
 8001ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001eec:	1f0c      	subs	r4, r1, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bfb8      	it	lt
 8001ef2:	18e4      	addlt	r4, r4, r3
 8001ef4:	f000 fc4c 	bl	8002790 <__malloc_lock>
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <_free_r+0x90>)
 8001efa:	6813      	ldr	r3, [r2, #0]
 8001efc:	b933      	cbnz	r3, 8001f0c <_free_r+0x2c>
 8001efe:	6063      	str	r3, [r4, #4]
 8001f00:	6014      	str	r4, [r2, #0]
 8001f02:	4628      	mov	r0, r5
 8001f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f08:	f000 bc48 	b.w	800279c <__malloc_unlock>
 8001f0c:	42a3      	cmp	r3, r4
 8001f0e:	d908      	bls.n	8001f22 <_free_r+0x42>
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	1821      	adds	r1, r4, r0
 8001f14:	428b      	cmp	r3, r1
 8001f16:	bf01      	itttt	eq
 8001f18:	6819      	ldreq	r1, [r3, #0]
 8001f1a:	685b      	ldreq	r3, [r3, #4]
 8001f1c:	1809      	addeq	r1, r1, r0
 8001f1e:	6021      	streq	r1, [r4, #0]
 8001f20:	e7ed      	b.n	8001efe <_free_r+0x1e>
 8001f22:	461a      	mov	r2, r3
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	b10b      	cbz	r3, 8001f2c <_free_r+0x4c>
 8001f28:	42a3      	cmp	r3, r4
 8001f2a:	d9fa      	bls.n	8001f22 <_free_r+0x42>
 8001f2c:	6811      	ldr	r1, [r2, #0]
 8001f2e:	1850      	adds	r0, r2, r1
 8001f30:	42a0      	cmp	r0, r4
 8001f32:	d10b      	bne.n	8001f4c <_free_r+0x6c>
 8001f34:	6820      	ldr	r0, [r4, #0]
 8001f36:	4401      	add	r1, r0
 8001f38:	1850      	adds	r0, r2, r1
 8001f3a:	4283      	cmp	r3, r0
 8001f3c:	6011      	str	r1, [r2, #0]
 8001f3e:	d1e0      	bne.n	8001f02 <_free_r+0x22>
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	6053      	str	r3, [r2, #4]
 8001f46:	4401      	add	r1, r0
 8001f48:	6011      	str	r1, [r2, #0]
 8001f4a:	e7da      	b.n	8001f02 <_free_r+0x22>
 8001f4c:	d902      	bls.n	8001f54 <_free_r+0x74>
 8001f4e:	230c      	movs	r3, #12
 8001f50:	602b      	str	r3, [r5, #0]
 8001f52:	e7d6      	b.n	8001f02 <_free_r+0x22>
 8001f54:	6820      	ldr	r0, [r4, #0]
 8001f56:	1821      	adds	r1, r4, r0
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	bf04      	itt	eq
 8001f5c:	6819      	ldreq	r1, [r3, #0]
 8001f5e:	685b      	ldreq	r3, [r3, #4]
 8001f60:	6063      	str	r3, [r4, #4]
 8001f62:	bf04      	itt	eq
 8001f64:	1809      	addeq	r1, r1, r0
 8001f66:	6021      	streq	r1, [r4, #0]
 8001f68:	6054      	str	r4, [r2, #4]
 8001f6a:	e7ca      	b.n	8001f02 <_free_r+0x22>
 8001f6c:	bd38      	pop	{r3, r4, r5, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000110 	.word	0x20000110

08001f74 <sbrk_aligned>:
 8001f74:	b570      	push	{r4, r5, r6, lr}
 8001f76:	4e0e      	ldr	r6, [pc, #56]	; (8001fb0 <sbrk_aligned+0x3c>)
 8001f78:	460c      	mov	r4, r1
 8001f7a:	6831      	ldr	r1, [r6, #0]
 8001f7c:	4605      	mov	r5, r0
 8001f7e:	b911      	cbnz	r1, 8001f86 <sbrk_aligned+0x12>
 8001f80:	f000 f91a 	bl	80021b8 <_sbrk_r>
 8001f84:	6030      	str	r0, [r6, #0]
 8001f86:	4621      	mov	r1, r4
 8001f88:	4628      	mov	r0, r5
 8001f8a:	f000 f915 	bl	80021b8 <_sbrk_r>
 8001f8e:	1c43      	adds	r3, r0, #1
 8001f90:	d00a      	beq.n	8001fa8 <sbrk_aligned+0x34>
 8001f92:	1cc4      	adds	r4, r0, #3
 8001f94:	f024 0403 	bic.w	r4, r4, #3
 8001f98:	42a0      	cmp	r0, r4
 8001f9a:	d007      	beq.n	8001fac <sbrk_aligned+0x38>
 8001f9c:	1a21      	subs	r1, r4, r0
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	f000 f90a 	bl	80021b8 <_sbrk_r>
 8001fa4:	3001      	adds	r0, #1
 8001fa6:	d101      	bne.n	8001fac <sbrk_aligned+0x38>
 8001fa8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001fac:	4620      	mov	r0, r4
 8001fae:	bd70      	pop	{r4, r5, r6, pc}
 8001fb0:	20000114 	.word	0x20000114

08001fb4 <_malloc_r>:
 8001fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb8:	1ccd      	adds	r5, r1, #3
 8001fba:	f025 0503 	bic.w	r5, r5, #3
 8001fbe:	3508      	adds	r5, #8
 8001fc0:	2d0c      	cmp	r5, #12
 8001fc2:	bf38      	it	cc
 8001fc4:	250c      	movcc	r5, #12
 8001fc6:	2d00      	cmp	r5, #0
 8001fc8:	4607      	mov	r7, r0
 8001fca:	db01      	blt.n	8001fd0 <_malloc_r+0x1c>
 8001fcc:	42a9      	cmp	r1, r5
 8001fce:	d905      	bls.n	8001fdc <_malloc_r+0x28>
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fdc:	4e2e      	ldr	r6, [pc, #184]	; (8002098 <_malloc_r+0xe4>)
 8001fde:	f000 fbd7 	bl	8002790 <__malloc_lock>
 8001fe2:	6833      	ldr	r3, [r6, #0]
 8001fe4:	461c      	mov	r4, r3
 8001fe6:	bb34      	cbnz	r4, 8002036 <_malloc_r+0x82>
 8001fe8:	4629      	mov	r1, r5
 8001fea:	4638      	mov	r0, r7
 8001fec:	f7ff ffc2 	bl	8001f74 <sbrk_aligned>
 8001ff0:	1c43      	adds	r3, r0, #1
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	d14d      	bne.n	8002092 <_malloc_r+0xde>
 8001ff6:	6834      	ldr	r4, [r6, #0]
 8001ff8:	4626      	mov	r6, r4
 8001ffa:	2e00      	cmp	r6, #0
 8001ffc:	d140      	bne.n	8002080 <_malloc_r+0xcc>
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	4631      	mov	r1, r6
 8002002:	4638      	mov	r0, r7
 8002004:	eb04 0803 	add.w	r8, r4, r3
 8002008:	f000 f8d6 	bl	80021b8 <_sbrk_r>
 800200c:	4580      	cmp	r8, r0
 800200e:	d13a      	bne.n	8002086 <_malloc_r+0xd2>
 8002010:	6821      	ldr	r1, [r4, #0]
 8002012:	3503      	adds	r5, #3
 8002014:	1a6d      	subs	r5, r5, r1
 8002016:	f025 0503 	bic.w	r5, r5, #3
 800201a:	3508      	adds	r5, #8
 800201c:	2d0c      	cmp	r5, #12
 800201e:	bf38      	it	cc
 8002020:	250c      	movcc	r5, #12
 8002022:	4629      	mov	r1, r5
 8002024:	4638      	mov	r0, r7
 8002026:	f7ff ffa5 	bl	8001f74 <sbrk_aligned>
 800202a:	3001      	adds	r0, #1
 800202c:	d02b      	beq.n	8002086 <_malloc_r+0xd2>
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	442b      	add	r3, r5
 8002032:	6023      	str	r3, [r4, #0]
 8002034:	e00e      	b.n	8002054 <_malloc_r+0xa0>
 8002036:	6822      	ldr	r2, [r4, #0]
 8002038:	1b52      	subs	r2, r2, r5
 800203a:	d41e      	bmi.n	800207a <_malloc_r+0xc6>
 800203c:	2a0b      	cmp	r2, #11
 800203e:	d916      	bls.n	800206e <_malloc_r+0xba>
 8002040:	1961      	adds	r1, r4, r5
 8002042:	42a3      	cmp	r3, r4
 8002044:	6025      	str	r5, [r4, #0]
 8002046:	bf18      	it	ne
 8002048:	6059      	strne	r1, [r3, #4]
 800204a:	6863      	ldr	r3, [r4, #4]
 800204c:	bf08      	it	eq
 800204e:	6031      	streq	r1, [r6, #0]
 8002050:	5162      	str	r2, [r4, r5]
 8002052:	604b      	str	r3, [r1, #4]
 8002054:	4638      	mov	r0, r7
 8002056:	f104 060b 	add.w	r6, r4, #11
 800205a:	f000 fb9f 	bl	800279c <__malloc_unlock>
 800205e:	f026 0607 	bic.w	r6, r6, #7
 8002062:	1d23      	adds	r3, r4, #4
 8002064:	1af2      	subs	r2, r6, r3
 8002066:	d0b6      	beq.n	8001fd6 <_malloc_r+0x22>
 8002068:	1b9b      	subs	r3, r3, r6
 800206a:	50a3      	str	r3, [r4, r2]
 800206c:	e7b3      	b.n	8001fd6 <_malloc_r+0x22>
 800206e:	6862      	ldr	r2, [r4, #4]
 8002070:	42a3      	cmp	r3, r4
 8002072:	bf0c      	ite	eq
 8002074:	6032      	streq	r2, [r6, #0]
 8002076:	605a      	strne	r2, [r3, #4]
 8002078:	e7ec      	b.n	8002054 <_malloc_r+0xa0>
 800207a:	4623      	mov	r3, r4
 800207c:	6864      	ldr	r4, [r4, #4]
 800207e:	e7b2      	b.n	8001fe6 <_malloc_r+0x32>
 8002080:	4634      	mov	r4, r6
 8002082:	6876      	ldr	r6, [r6, #4]
 8002084:	e7b9      	b.n	8001ffa <_malloc_r+0x46>
 8002086:	230c      	movs	r3, #12
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	4638      	mov	r0, r7
 800208c:	f000 fb86 	bl	800279c <__malloc_unlock>
 8002090:	e7a1      	b.n	8001fd6 <_malloc_r+0x22>
 8002092:	6025      	str	r5, [r4, #0]
 8002094:	e7de      	b.n	8002054 <_malloc_r+0xa0>
 8002096:	bf00      	nop
 8002098:	20000110 	.word	0x20000110

0800209c <iprintf>:
 800209c:	b40f      	push	{r0, r1, r2, r3}
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <iprintf+0x2c>)
 80020a0:	b513      	push	{r0, r1, r4, lr}
 80020a2:	681c      	ldr	r4, [r3, #0]
 80020a4:	b124      	cbz	r4, 80020b0 <iprintf+0x14>
 80020a6:	69a3      	ldr	r3, [r4, #24]
 80020a8:	b913      	cbnz	r3, 80020b0 <iprintf+0x14>
 80020aa:	4620      	mov	r0, r4
 80020ac:	f000 fa6a 	bl	8002584 <__sinit>
 80020b0:	ab05      	add	r3, sp, #20
 80020b2:	9a04      	ldr	r2, [sp, #16]
 80020b4:	68a1      	ldr	r1, [r4, #8]
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	4620      	mov	r0, r4
 80020ba:	f000 fb9d 	bl	80027f8 <_vfiprintf_r>
 80020be:	b002      	add	sp, #8
 80020c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020c4:	b004      	add	sp, #16
 80020c6:	4770      	bx	lr
 80020c8:	20000000 	.word	0x20000000

080020cc <_puts_r>:
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	460e      	mov	r6, r1
 80020d0:	4605      	mov	r5, r0
 80020d2:	b118      	cbz	r0, 80020dc <_puts_r+0x10>
 80020d4:	6983      	ldr	r3, [r0, #24]
 80020d6:	b90b      	cbnz	r3, 80020dc <_puts_r+0x10>
 80020d8:	f000 fa54 	bl	8002584 <__sinit>
 80020dc:	69ab      	ldr	r3, [r5, #24]
 80020de:	68ac      	ldr	r4, [r5, #8]
 80020e0:	b913      	cbnz	r3, 80020e8 <_puts_r+0x1c>
 80020e2:	4628      	mov	r0, r5
 80020e4:	f000 fa4e 	bl	8002584 <__sinit>
 80020e8:	4b2c      	ldr	r3, [pc, #176]	; (800219c <_puts_r+0xd0>)
 80020ea:	429c      	cmp	r4, r3
 80020ec:	d120      	bne.n	8002130 <_puts_r+0x64>
 80020ee:	686c      	ldr	r4, [r5, #4]
 80020f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020f2:	07db      	lsls	r3, r3, #31
 80020f4:	d405      	bmi.n	8002102 <_puts_r+0x36>
 80020f6:	89a3      	ldrh	r3, [r4, #12]
 80020f8:	0598      	lsls	r0, r3, #22
 80020fa:	d402      	bmi.n	8002102 <_puts_r+0x36>
 80020fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020fe:	f000 fadf 	bl	80026c0 <__retarget_lock_acquire_recursive>
 8002102:	89a3      	ldrh	r3, [r4, #12]
 8002104:	0719      	lsls	r1, r3, #28
 8002106:	d51d      	bpl.n	8002144 <_puts_r+0x78>
 8002108:	6923      	ldr	r3, [r4, #16]
 800210a:	b1db      	cbz	r3, 8002144 <_puts_r+0x78>
 800210c:	3e01      	subs	r6, #1
 800210e:	68a3      	ldr	r3, [r4, #8]
 8002110:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002114:	3b01      	subs	r3, #1
 8002116:	60a3      	str	r3, [r4, #8]
 8002118:	bb39      	cbnz	r1, 800216a <_puts_r+0x9e>
 800211a:	2b00      	cmp	r3, #0
 800211c:	da38      	bge.n	8002190 <_puts_r+0xc4>
 800211e:	4622      	mov	r2, r4
 8002120:	210a      	movs	r1, #10
 8002122:	4628      	mov	r0, r5
 8002124:	f000 f858 	bl	80021d8 <__swbuf_r>
 8002128:	3001      	adds	r0, #1
 800212a:	d011      	beq.n	8002150 <_puts_r+0x84>
 800212c:	250a      	movs	r5, #10
 800212e:	e011      	b.n	8002154 <_puts_r+0x88>
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <_puts_r+0xd4>)
 8002132:	429c      	cmp	r4, r3
 8002134:	d101      	bne.n	800213a <_puts_r+0x6e>
 8002136:	68ac      	ldr	r4, [r5, #8]
 8002138:	e7da      	b.n	80020f0 <_puts_r+0x24>
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <_puts_r+0xd8>)
 800213c:	429c      	cmp	r4, r3
 800213e:	bf08      	it	eq
 8002140:	68ec      	ldreq	r4, [r5, #12]
 8002142:	e7d5      	b.n	80020f0 <_puts_r+0x24>
 8002144:	4621      	mov	r1, r4
 8002146:	4628      	mov	r0, r5
 8002148:	f000 f898 	bl	800227c <__swsetup_r>
 800214c:	2800      	cmp	r0, #0
 800214e:	d0dd      	beq.n	800210c <_puts_r+0x40>
 8002150:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002156:	07da      	lsls	r2, r3, #31
 8002158:	d405      	bmi.n	8002166 <_puts_r+0x9a>
 800215a:	89a3      	ldrh	r3, [r4, #12]
 800215c:	059b      	lsls	r3, r3, #22
 800215e:	d402      	bmi.n	8002166 <_puts_r+0x9a>
 8002160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002162:	f000 faae 	bl	80026c2 <__retarget_lock_release_recursive>
 8002166:	4628      	mov	r0, r5
 8002168:	bd70      	pop	{r4, r5, r6, pc}
 800216a:	2b00      	cmp	r3, #0
 800216c:	da04      	bge.n	8002178 <_puts_r+0xac>
 800216e:	69a2      	ldr	r2, [r4, #24]
 8002170:	429a      	cmp	r2, r3
 8002172:	dc06      	bgt.n	8002182 <_puts_r+0xb6>
 8002174:	290a      	cmp	r1, #10
 8002176:	d004      	beq.n	8002182 <_puts_r+0xb6>
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	6022      	str	r2, [r4, #0]
 800217e:	7019      	strb	r1, [r3, #0]
 8002180:	e7c5      	b.n	800210e <_puts_r+0x42>
 8002182:	4622      	mov	r2, r4
 8002184:	4628      	mov	r0, r5
 8002186:	f000 f827 	bl	80021d8 <__swbuf_r>
 800218a:	3001      	adds	r0, #1
 800218c:	d1bf      	bne.n	800210e <_puts_r+0x42>
 800218e:	e7df      	b.n	8002150 <_puts_r+0x84>
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	250a      	movs	r5, #10
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	6022      	str	r2, [r4, #0]
 8002198:	701d      	strb	r5, [r3, #0]
 800219a:	e7db      	b.n	8002154 <_puts_r+0x88>
 800219c:	08003064 	.word	0x08003064
 80021a0:	08003084 	.word	0x08003084
 80021a4:	08003044 	.word	0x08003044

080021a8 <puts>:
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <puts+0xc>)
 80021aa:	4601      	mov	r1, r0
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	f7ff bf8d 	b.w	80020cc <_puts_r>
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000

080021b8 <_sbrk_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4d06      	ldr	r5, [pc, #24]	; (80021d4 <_sbrk_r+0x1c>)
 80021bc:	2300      	movs	r3, #0
 80021be:	4604      	mov	r4, r0
 80021c0:	4608      	mov	r0, r1
 80021c2:	602b      	str	r3, [r5, #0]
 80021c4:	f7ff fd56 	bl	8001c74 <_sbrk>
 80021c8:	1c43      	adds	r3, r0, #1
 80021ca:	d102      	bne.n	80021d2 <_sbrk_r+0x1a>
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	b103      	cbz	r3, 80021d2 <_sbrk_r+0x1a>
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
 80021d4:	2000011c 	.word	0x2000011c

080021d8 <__swbuf_r>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	460e      	mov	r6, r1
 80021dc:	4614      	mov	r4, r2
 80021de:	4605      	mov	r5, r0
 80021e0:	b118      	cbz	r0, 80021ea <__swbuf_r+0x12>
 80021e2:	6983      	ldr	r3, [r0, #24]
 80021e4:	b90b      	cbnz	r3, 80021ea <__swbuf_r+0x12>
 80021e6:	f000 f9cd 	bl	8002584 <__sinit>
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <__swbuf_r+0x98>)
 80021ec:	429c      	cmp	r4, r3
 80021ee:	d12b      	bne.n	8002248 <__swbuf_r+0x70>
 80021f0:	686c      	ldr	r4, [r5, #4]
 80021f2:	69a3      	ldr	r3, [r4, #24]
 80021f4:	60a3      	str	r3, [r4, #8]
 80021f6:	89a3      	ldrh	r3, [r4, #12]
 80021f8:	071a      	lsls	r2, r3, #28
 80021fa:	d52f      	bpl.n	800225c <__swbuf_r+0x84>
 80021fc:	6923      	ldr	r3, [r4, #16]
 80021fe:	b36b      	cbz	r3, 800225c <__swbuf_r+0x84>
 8002200:	6923      	ldr	r3, [r4, #16]
 8002202:	6820      	ldr	r0, [r4, #0]
 8002204:	1ac0      	subs	r0, r0, r3
 8002206:	6963      	ldr	r3, [r4, #20]
 8002208:	b2f6      	uxtb	r6, r6
 800220a:	4283      	cmp	r3, r0
 800220c:	4637      	mov	r7, r6
 800220e:	dc04      	bgt.n	800221a <__swbuf_r+0x42>
 8002210:	4621      	mov	r1, r4
 8002212:	4628      	mov	r0, r5
 8002214:	f000 f922 	bl	800245c <_fflush_r>
 8002218:	bb30      	cbnz	r0, 8002268 <__swbuf_r+0x90>
 800221a:	68a3      	ldr	r3, [r4, #8]
 800221c:	3b01      	subs	r3, #1
 800221e:	60a3      	str	r3, [r4, #8]
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	6022      	str	r2, [r4, #0]
 8002226:	701e      	strb	r6, [r3, #0]
 8002228:	6963      	ldr	r3, [r4, #20]
 800222a:	3001      	adds	r0, #1
 800222c:	4283      	cmp	r3, r0
 800222e:	d004      	beq.n	800223a <__swbuf_r+0x62>
 8002230:	89a3      	ldrh	r3, [r4, #12]
 8002232:	07db      	lsls	r3, r3, #31
 8002234:	d506      	bpl.n	8002244 <__swbuf_r+0x6c>
 8002236:	2e0a      	cmp	r6, #10
 8002238:	d104      	bne.n	8002244 <__swbuf_r+0x6c>
 800223a:	4621      	mov	r1, r4
 800223c:	4628      	mov	r0, r5
 800223e:	f000 f90d 	bl	800245c <_fflush_r>
 8002242:	b988      	cbnz	r0, 8002268 <__swbuf_r+0x90>
 8002244:	4638      	mov	r0, r7
 8002246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <__swbuf_r+0x9c>)
 800224a:	429c      	cmp	r4, r3
 800224c:	d101      	bne.n	8002252 <__swbuf_r+0x7a>
 800224e:	68ac      	ldr	r4, [r5, #8]
 8002250:	e7cf      	b.n	80021f2 <__swbuf_r+0x1a>
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <__swbuf_r+0xa0>)
 8002254:	429c      	cmp	r4, r3
 8002256:	bf08      	it	eq
 8002258:	68ec      	ldreq	r4, [r5, #12]
 800225a:	e7ca      	b.n	80021f2 <__swbuf_r+0x1a>
 800225c:	4621      	mov	r1, r4
 800225e:	4628      	mov	r0, r5
 8002260:	f000 f80c 	bl	800227c <__swsetup_r>
 8002264:	2800      	cmp	r0, #0
 8002266:	d0cb      	beq.n	8002200 <__swbuf_r+0x28>
 8002268:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800226c:	e7ea      	b.n	8002244 <__swbuf_r+0x6c>
 800226e:	bf00      	nop
 8002270:	08003064 	.word	0x08003064
 8002274:	08003084 	.word	0x08003084
 8002278:	08003044 	.word	0x08003044

0800227c <__swsetup_r>:
 800227c:	4b32      	ldr	r3, [pc, #200]	; (8002348 <__swsetup_r+0xcc>)
 800227e:	b570      	push	{r4, r5, r6, lr}
 8002280:	681d      	ldr	r5, [r3, #0]
 8002282:	4606      	mov	r6, r0
 8002284:	460c      	mov	r4, r1
 8002286:	b125      	cbz	r5, 8002292 <__swsetup_r+0x16>
 8002288:	69ab      	ldr	r3, [r5, #24]
 800228a:	b913      	cbnz	r3, 8002292 <__swsetup_r+0x16>
 800228c:	4628      	mov	r0, r5
 800228e:	f000 f979 	bl	8002584 <__sinit>
 8002292:	4b2e      	ldr	r3, [pc, #184]	; (800234c <__swsetup_r+0xd0>)
 8002294:	429c      	cmp	r4, r3
 8002296:	d10f      	bne.n	80022b8 <__swsetup_r+0x3c>
 8002298:	686c      	ldr	r4, [r5, #4]
 800229a:	89a3      	ldrh	r3, [r4, #12]
 800229c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022a0:	0719      	lsls	r1, r3, #28
 80022a2:	d42c      	bmi.n	80022fe <__swsetup_r+0x82>
 80022a4:	06dd      	lsls	r5, r3, #27
 80022a6:	d411      	bmi.n	80022cc <__swsetup_r+0x50>
 80022a8:	2309      	movs	r3, #9
 80022aa:	6033      	str	r3, [r6, #0]
 80022ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022b0:	81a3      	strh	r3, [r4, #12]
 80022b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b6:	e03e      	b.n	8002336 <__swsetup_r+0xba>
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <__swsetup_r+0xd4>)
 80022ba:	429c      	cmp	r4, r3
 80022bc:	d101      	bne.n	80022c2 <__swsetup_r+0x46>
 80022be:	68ac      	ldr	r4, [r5, #8]
 80022c0:	e7eb      	b.n	800229a <__swsetup_r+0x1e>
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <__swsetup_r+0xd8>)
 80022c4:	429c      	cmp	r4, r3
 80022c6:	bf08      	it	eq
 80022c8:	68ec      	ldreq	r4, [r5, #12]
 80022ca:	e7e6      	b.n	800229a <__swsetup_r+0x1e>
 80022cc:	0758      	lsls	r0, r3, #29
 80022ce:	d512      	bpl.n	80022f6 <__swsetup_r+0x7a>
 80022d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022d2:	b141      	cbz	r1, 80022e6 <__swsetup_r+0x6a>
 80022d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022d8:	4299      	cmp	r1, r3
 80022da:	d002      	beq.n	80022e2 <__swsetup_r+0x66>
 80022dc:	4630      	mov	r0, r6
 80022de:	f7ff fdff 	bl	8001ee0 <_free_r>
 80022e2:	2300      	movs	r3, #0
 80022e4:	6363      	str	r3, [r4, #52]	; 0x34
 80022e6:	89a3      	ldrh	r3, [r4, #12]
 80022e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80022ec:	81a3      	strh	r3, [r4, #12]
 80022ee:	2300      	movs	r3, #0
 80022f0:	6063      	str	r3, [r4, #4]
 80022f2:	6923      	ldr	r3, [r4, #16]
 80022f4:	6023      	str	r3, [r4, #0]
 80022f6:	89a3      	ldrh	r3, [r4, #12]
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	81a3      	strh	r3, [r4, #12]
 80022fe:	6923      	ldr	r3, [r4, #16]
 8002300:	b94b      	cbnz	r3, 8002316 <__swsetup_r+0x9a>
 8002302:	89a3      	ldrh	r3, [r4, #12]
 8002304:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230c:	d003      	beq.n	8002316 <__swsetup_r+0x9a>
 800230e:	4621      	mov	r1, r4
 8002310:	4630      	mov	r0, r6
 8002312:	f000 f9fd 	bl	8002710 <__smakebuf_r>
 8002316:	89a0      	ldrh	r0, [r4, #12]
 8002318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800231c:	f010 0301 	ands.w	r3, r0, #1
 8002320:	d00a      	beq.n	8002338 <__swsetup_r+0xbc>
 8002322:	2300      	movs	r3, #0
 8002324:	60a3      	str	r3, [r4, #8]
 8002326:	6963      	ldr	r3, [r4, #20]
 8002328:	425b      	negs	r3, r3
 800232a:	61a3      	str	r3, [r4, #24]
 800232c:	6923      	ldr	r3, [r4, #16]
 800232e:	b943      	cbnz	r3, 8002342 <__swsetup_r+0xc6>
 8002330:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002334:	d1ba      	bne.n	80022ac <__swsetup_r+0x30>
 8002336:	bd70      	pop	{r4, r5, r6, pc}
 8002338:	0781      	lsls	r1, r0, #30
 800233a:	bf58      	it	pl
 800233c:	6963      	ldrpl	r3, [r4, #20]
 800233e:	60a3      	str	r3, [r4, #8]
 8002340:	e7f4      	b.n	800232c <__swsetup_r+0xb0>
 8002342:	2000      	movs	r0, #0
 8002344:	e7f7      	b.n	8002336 <__swsetup_r+0xba>
 8002346:	bf00      	nop
 8002348:	20000000 	.word	0x20000000
 800234c:	08003064 	.word	0x08003064
 8002350:	08003084 	.word	0x08003084
 8002354:	08003044 	.word	0x08003044

08002358 <__sflush_r>:
 8002358:	898a      	ldrh	r2, [r1, #12]
 800235a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235c:	4605      	mov	r5, r0
 800235e:	0710      	lsls	r0, r2, #28
 8002360:	460c      	mov	r4, r1
 8002362:	d457      	bmi.n	8002414 <__sflush_r+0xbc>
 8002364:	684b      	ldr	r3, [r1, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	dc04      	bgt.n	8002374 <__sflush_r+0x1c>
 800236a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800236c:	2b00      	cmp	r3, #0
 800236e:	dc01      	bgt.n	8002374 <__sflush_r+0x1c>
 8002370:	2000      	movs	r0, #0
 8002372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002376:	2e00      	cmp	r6, #0
 8002378:	d0fa      	beq.n	8002370 <__sflush_r+0x18>
 800237a:	2300      	movs	r3, #0
 800237c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002380:	682f      	ldr	r7, [r5, #0]
 8002382:	602b      	str	r3, [r5, #0]
 8002384:	d032      	beq.n	80023ec <__sflush_r+0x94>
 8002386:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002388:	89a3      	ldrh	r3, [r4, #12]
 800238a:	075a      	lsls	r2, r3, #29
 800238c:	d505      	bpl.n	800239a <__sflush_r+0x42>
 800238e:	6863      	ldr	r3, [r4, #4]
 8002390:	1ac0      	subs	r0, r0, r3
 8002392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002394:	b10b      	cbz	r3, 800239a <__sflush_r+0x42>
 8002396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002398:	1ac0      	subs	r0, r0, r3
 800239a:	2300      	movs	r3, #0
 800239c:	4602      	mov	r2, r0
 800239e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023a0:	6a21      	ldr	r1, [r4, #32]
 80023a2:	4628      	mov	r0, r5
 80023a4:	47b0      	blx	r6
 80023a6:	1c43      	adds	r3, r0, #1
 80023a8:	89a3      	ldrh	r3, [r4, #12]
 80023aa:	d106      	bne.n	80023ba <__sflush_r+0x62>
 80023ac:	6829      	ldr	r1, [r5, #0]
 80023ae:	291d      	cmp	r1, #29
 80023b0:	d82c      	bhi.n	800240c <__sflush_r+0xb4>
 80023b2:	4a29      	ldr	r2, [pc, #164]	; (8002458 <__sflush_r+0x100>)
 80023b4:	40ca      	lsrs	r2, r1
 80023b6:	07d6      	lsls	r6, r2, #31
 80023b8:	d528      	bpl.n	800240c <__sflush_r+0xb4>
 80023ba:	2200      	movs	r2, #0
 80023bc:	6062      	str	r2, [r4, #4]
 80023be:	04d9      	lsls	r1, r3, #19
 80023c0:	6922      	ldr	r2, [r4, #16]
 80023c2:	6022      	str	r2, [r4, #0]
 80023c4:	d504      	bpl.n	80023d0 <__sflush_r+0x78>
 80023c6:	1c42      	adds	r2, r0, #1
 80023c8:	d101      	bne.n	80023ce <__sflush_r+0x76>
 80023ca:	682b      	ldr	r3, [r5, #0]
 80023cc:	b903      	cbnz	r3, 80023d0 <__sflush_r+0x78>
 80023ce:	6560      	str	r0, [r4, #84]	; 0x54
 80023d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023d2:	602f      	str	r7, [r5, #0]
 80023d4:	2900      	cmp	r1, #0
 80023d6:	d0cb      	beq.n	8002370 <__sflush_r+0x18>
 80023d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023dc:	4299      	cmp	r1, r3
 80023de:	d002      	beq.n	80023e6 <__sflush_r+0x8e>
 80023e0:	4628      	mov	r0, r5
 80023e2:	f7ff fd7d 	bl	8001ee0 <_free_r>
 80023e6:	2000      	movs	r0, #0
 80023e8:	6360      	str	r0, [r4, #52]	; 0x34
 80023ea:	e7c2      	b.n	8002372 <__sflush_r+0x1a>
 80023ec:	6a21      	ldr	r1, [r4, #32]
 80023ee:	2301      	movs	r3, #1
 80023f0:	4628      	mov	r0, r5
 80023f2:	47b0      	blx	r6
 80023f4:	1c41      	adds	r1, r0, #1
 80023f6:	d1c7      	bne.n	8002388 <__sflush_r+0x30>
 80023f8:	682b      	ldr	r3, [r5, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0c4      	beq.n	8002388 <__sflush_r+0x30>
 80023fe:	2b1d      	cmp	r3, #29
 8002400:	d001      	beq.n	8002406 <__sflush_r+0xae>
 8002402:	2b16      	cmp	r3, #22
 8002404:	d101      	bne.n	800240a <__sflush_r+0xb2>
 8002406:	602f      	str	r7, [r5, #0]
 8002408:	e7b2      	b.n	8002370 <__sflush_r+0x18>
 800240a:	89a3      	ldrh	r3, [r4, #12]
 800240c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002410:	81a3      	strh	r3, [r4, #12]
 8002412:	e7ae      	b.n	8002372 <__sflush_r+0x1a>
 8002414:	690f      	ldr	r7, [r1, #16]
 8002416:	2f00      	cmp	r7, #0
 8002418:	d0aa      	beq.n	8002370 <__sflush_r+0x18>
 800241a:	0793      	lsls	r3, r2, #30
 800241c:	680e      	ldr	r6, [r1, #0]
 800241e:	bf08      	it	eq
 8002420:	694b      	ldreq	r3, [r1, #20]
 8002422:	600f      	str	r7, [r1, #0]
 8002424:	bf18      	it	ne
 8002426:	2300      	movne	r3, #0
 8002428:	1bf6      	subs	r6, r6, r7
 800242a:	608b      	str	r3, [r1, #8]
 800242c:	2e00      	cmp	r6, #0
 800242e:	dd9f      	ble.n	8002370 <__sflush_r+0x18>
 8002430:	6a21      	ldr	r1, [r4, #32]
 8002432:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002436:	4633      	mov	r3, r6
 8002438:	463a      	mov	r2, r7
 800243a:	4628      	mov	r0, r5
 800243c:	47e0      	blx	ip
 800243e:	2800      	cmp	r0, #0
 8002440:	dc06      	bgt.n	8002450 <__sflush_r+0xf8>
 8002442:	89a3      	ldrh	r3, [r4, #12]
 8002444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002448:	81a3      	strh	r3, [r4, #12]
 800244a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800244e:	e790      	b.n	8002372 <__sflush_r+0x1a>
 8002450:	4407      	add	r7, r0
 8002452:	1a36      	subs	r6, r6, r0
 8002454:	e7ea      	b.n	800242c <__sflush_r+0xd4>
 8002456:	bf00      	nop
 8002458:	20400001 	.word	0x20400001

0800245c <_fflush_r>:
 800245c:	b538      	push	{r3, r4, r5, lr}
 800245e:	690b      	ldr	r3, [r1, #16]
 8002460:	4605      	mov	r5, r0
 8002462:	460c      	mov	r4, r1
 8002464:	b913      	cbnz	r3, 800246c <_fflush_r+0x10>
 8002466:	2500      	movs	r5, #0
 8002468:	4628      	mov	r0, r5
 800246a:	bd38      	pop	{r3, r4, r5, pc}
 800246c:	b118      	cbz	r0, 8002476 <_fflush_r+0x1a>
 800246e:	6983      	ldr	r3, [r0, #24]
 8002470:	b90b      	cbnz	r3, 8002476 <_fflush_r+0x1a>
 8002472:	f000 f887 	bl	8002584 <__sinit>
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <_fflush_r+0x6c>)
 8002478:	429c      	cmp	r4, r3
 800247a:	d11b      	bne.n	80024b4 <_fflush_r+0x58>
 800247c:	686c      	ldr	r4, [r5, #4]
 800247e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ef      	beq.n	8002466 <_fflush_r+0xa>
 8002486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002488:	07d0      	lsls	r0, r2, #31
 800248a:	d404      	bmi.n	8002496 <_fflush_r+0x3a>
 800248c:	0599      	lsls	r1, r3, #22
 800248e:	d402      	bmi.n	8002496 <_fflush_r+0x3a>
 8002490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002492:	f000 f915 	bl	80026c0 <__retarget_lock_acquire_recursive>
 8002496:	4628      	mov	r0, r5
 8002498:	4621      	mov	r1, r4
 800249a:	f7ff ff5d 	bl	8002358 <__sflush_r>
 800249e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024a0:	07da      	lsls	r2, r3, #31
 80024a2:	4605      	mov	r5, r0
 80024a4:	d4e0      	bmi.n	8002468 <_fflush_r+0xc>
 80024a6:	89a3      	ldrh	r3, [r4, #12]
 80024a8:	059b      	lsls	r3, r3, #22
 80024aa:	d4dd      	bmi.n	8002468 <_fflush_r+0xc>
 80024ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024ae:	f000 f908 	bl	80026c2 <__retarget_lock_release_recursive>
 80024b2:	e7d9      	b.n	8002468 <_fflush_r+0xc>
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <_fflush_r+0x70>)
 80024b6:	429c      	cmp	r4, r3
 80024b8:	d101      	bne.n	80024be <_fflush_r+0x62>
 80024ba:	68ac      	ldr	r4, [r5, #8]
 80024bc:	e7df      	b.n	800247e <_fflush_r+0x22>
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <_fflush_r+0x74>)
 80024c0:	429c      	cmp	r4, r3
 80024c2:	bf08      	it	eq
 80024c4:	68ec      	ldreq	r4, [r5, #12]
 80024c6:	e7da      	b.n	800247e <_fflush_r+0x22>
 80024c8:	08003064 	.word	0x08003064
 80024cc:	08003084 	.word	0x08003084
 80024d0:	08003044 	.word	0x08003044

080024d4 <std>:
 80024d4:	2300      	movs	r3, #0
 80024d6:	b510      	push	{r4, lr}
 80024d8:	4604      	mov	r4, r0
 80024da:	e9c0 3300 	strd	r3, r3, [r0]
 80024de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024e2:	6083      	str	r3, [r0, #8]
 80024e4:	8181      	strh	r1, [r0, #12]
 80024e6:	6643      	str	r3, [r0, #100]	; 0x64
 80024e8:	81c2      	strh	r2, [r0, #14]
 80024ea:	6183      	str	r3, [r0, #24]
 80024ec:	4619      	mov	r1, r3
 80024ee:	2208      	movs	r2, #8
 80024f0:	305c      	adds	r0, #92	; 0x5c
 80024f2:	f7ff fced 	bl	8001ed0 <memset>
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <std+0x38>)
 80024f8:	6263      	str	r3, [r4, #36]	; 0x24
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <std+0x3c>)
 80024fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <std+0x40>)
 8002500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <std+0x44>)
 8002504:	6224      	str	r4, [r4, #32]
 8002506:	6323      	str	r3, [r4, #48]	; 0x30
 8002508:	bd10      	pop	{r4, pc}
 800250a:	bf00      	nop
 800250c:	08002d81 	.word	0x08002d81
 8002510:	08002da3 	.word	0x08002da3
 8002514:	08002ddb 	.word	0x08002ddb
 8002518:	08002dff 	.word	0x08002dff

0800251c <_cleanup_r>:
 800251c:	4901      	ldr	r1, [pc, #4]	; (8002524 <_cleanup_r+0x8>)
 800251e:	f000 b8af 	b.w	8002680 <_fwalk_reent>
 8002522:	bf00      	nop
 8002524:	0800245d 	.word	0x0800245d

08002528 <__sfmoreglue>:
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	2268      	movs	r2, #104	; 0x68
 800252c:	1e4d      	subs	r5, r1, #1
 800252e:	4355      	muls	r5, r2
 8002530:	460e      	mov	r6, r1
 8002532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002536:	f7ff fd3d 	bl	8001fb4 <_malloc_r>
 800253a:	4604      	mov	r4, r0
 800253c:	b140      	cbz	r0, 8002550 <__sfmoreglue+0x28>
 800253e:	2100      	movs	r1, #0
 8002540:	e9c0 1600 	strd	r1, r6, [r0]
 8002544:	300c      	adds	r0, #12
 8002546:	60a0      	str	r0, [r4, #8]
 8002548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800254c:	f7ff fcc0 	bl	8001ed0 <memset>
 8002550:	4620      	mov	r0, r4
 8002552:	bd70      	pop	{r4, r5, r6, pc}

08002554 <__sfp_lock_acquire>:
 8002554:	4801      	ldr	r0, [pc, #4]	; (800255c <__sfp_lock_acquire+0x8>)
 8002556:	f000 b8b3 	b.w	80026c0 <__retarget_lock_acquire_recursive>
 800255a:	bf00      	nop
 800255c:	20000119 	.word	0x20000119

08002560 <__sfp_lock_release>:
 8002560:	4801      	ldr	r0, [pc, #4]	; (8002568 <__sfp_lock_release+0x8>)
 8002562:	f000 b8ae 	b.w	80026c2 <__retarget_lock_release_recursive>
 8002566:	bf00      	nop
 8002568:	20000119 	.word	0x20000119

0800256c <__sinit_lock_acquire>:
 800256c:	4801      	ldr	r0, [pc, #4]	; (8002574 <__sinit_lock_acquire+0x8>)
 800256e:	f000 b8a7 	b.w	80026c0 <__retarget_lock_acquire_recursive>
 8002572:	bf00      	nop
 8002574:	2000011a 	.word	0x2000011a

08002578 <__sinit_lock_release>:
 8002578:	4801      	ldr	r0, [pc, #4]	; (8002580 <__sinit_lock_release+0x8>)
 800257a:	f000 b8a2 	b.w	80026c2 <__retarget_lock_release_recursive>
 800257e:	bf00      	nop
 8002580:	2000011a 	.word	0x2000011a

08002584 <__sinit>:
 8002584:	b510      	push	{r4, lr}
 8002586:	4604      	mov	r4, r0
 8002588:	f7ff fff0 	bl	800256c <__sinit_lock_acquire>
 800258c:	69a3      	ldr	r3, [r4, #24]
 800258e:	b11b      	cbz	r3, 8002598 <__sinit+0x14>
 8002590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002594:	f7ff bff0 	b.w	8002578 <__sinit_lock_release>
 8002598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800259c:	6523      	str	r3, [r4, #80]	; 0x50
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <__sinit+0x68>)
 80025a0:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <__sinit+0x6c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80025a6:	42a3      	cmp	r3, r4
 80025a8:	bf04      	itt	eq
 80025aa:	2301      	moveq	r3, #1
 80025ac:	61a3      	streq	r3, [r4, #24]
 80025ae:	4620      	mov	r0, r4
 80025b0:	f000 f820 	bl	80025f4 <__sfp>
 80025b4:	6060      	str	r0, [r4, #4]
 80025b6:	4620      	mov	r0, r4
 80025b8:	f000 f81c 	bl	80025f4 <__sfp>
 80025bc:	60a0      	str	r0, [r4, #8]
 80025be:	4620      	mov	r0, r4
 80025c0:	f000 f818 	bl	80025f4 <__sfp>
 80025c4:	2200      	movs	r2, #0
 80025c6:	60e0      	str	r0, [r4, #12]
 80025c8:	2104      	movs	r1, #4
 80025ca:	6860      	ldr	r0, [r4, #4]
 80025cc:	f7ff ff82 	bl	80024d4 <std>
 80025d0:	68a0      	ldr	r0, [r4, #8]
 80025d2:	2201      	movs	r2, #1
 80025d4:	2109      	movs	r1, #9
 80025d6:	f7ff ff7d 	bl	80024d4 <std>
 80025da:	68e0      	ldr	r0, [r4, #12]
 80025dc:	2202      	movs	r2, #2
 80025de:	2112      	movs	r1, #18
 80025e0:	f7ff ff78 	bl	80024d4 <std>
 80025e4:	2301      	movs	r3, #1
 80025e6:	61a3      	str	r3, [r4, #24]
 80025e8:	e7d2      	b.n	8002590 <__sinit+0xc>
 80025ea:	bf00      	nop
 80025ec:	08003040 	.word	0x08003040
 80025f0:	0800251d 	.word	0x0800251d

080025f4 <__sfp>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	4607      	mov	r7, r0
 80025f8:	f7ff ffac 	bl	8002554 <__sfp_lock_acquire>
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <__sfp+0x84>)
 80025fe:	681e      	ldr	r6, [r3, #0]
 8002600:	69b3      	ldr	r3, [r6, #24]
 8002602:	b913      	cbnz	r3, 800260a <__sfp+0x16>
 8002604:	4630      	mov	r0, r6
 8002606:	f7ff ffbd 	bl	8002584 <__sinit>
 800260a:	3648      	adds	r6, #72	; 0x48
 800260c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002610:	3b01      	subs	r3, #1
 8002612:	d503      	bpl.n	800261c <__sfp+0x28>
 8002614:	6833      	ldr	r3, [r6, #0]
 8002616:	b30b      	cbz	r3, 800265c <__sfp+0x68>
 8002618:	6836      	ldr	r6, [r6, #0]
 800261a:	e7f7      	b.n	800260c <__sfp+0x18>
 800261c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002620:	b9d5      	cbnz	r5, 8002658 <__sfp+0x64>
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <__sfp+0x88>)
 8002624:	60e3      	str	r3, [r4, #12]
 8002626:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800262a:	6665      	str	r5, [r4, #100]	; 0x64
 800262c:	f000 f847 	bl	80026be <__retarget_lock_init_recursive>
 8002630:	f7ff ff96 	bl	8002560 <__sfp_lock_release>
 8002634:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002638:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800263c:	6025      	str	r5, [r4, #0]
 800263e:	61a5      	str	r5, [r4, #24]
 8002640:	2208      	movs	r2, #8
 8002642:	4629      	mov	r1, r5
 8002644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002648:	f7ff fc42 	bl	8001ed0 <memset>
 800264c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002654:	4620      	mov	r0, r4
 8002656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002658:	3468      	adds	r4, #104	; 0x68
 800265a:	e7d9      	b.n	8002610 <__sfp+0x1c>
 800265c:	2104      	movs	r1, #4
 800265e:	4638      	mov	r0, r7
 8002660:	f7ff ff62 	bl	8002528 <__sfmoreglue>
 8002664:	4604      	mov	r4, r0
 8002666:	6030      	str	r0, [r6, #0]
 8002668:	2800      	cmp	r0, #0
 800266a:	d1d5      	bne.n	8002618 <__sfp+0x24>
 800266c:	f7ff ff78 	bl	8002560 <__sfp_lock_release>
 8002670:	230c      	movs	r3, #12
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	e7ee      	b.n	8002654 <__sfp+0x60>
 8002676:	bf00      	nop
 8002678:	08003040 	.word	0x08003040
 800267c:	ffff0001 	.word	0xffff0001

08002680 <_fwalk_reent>:
 8002680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002684:	4606      	mov	r6, r0
 8002686:	4688      	mov	r8, r1
 8002688:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800268c:	2700      	movs	r7, #0
 800268e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002692:	f1b9 0901 	subs.w	r9, r9, #1
 8002696:	d505      	bpl.n	80026a4 <_fwalk_reent+0x24>
 8002698:	6824      	ldr	r4, [r4, #0]
 800269a:	2c00      	cmp	r4, #0
 800269c:	d1f7      	bne.n	800268e <_fwalk_reent+0xe>
 800269e:	4638      	mov	r0, r7
 80026a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026a4:	89ab      	ldrh	r3, [r5, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d907      	bls.n	80026ba <_fwalk_reent+0x3a>
 80026aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026ae:	3301      	adds	r3, #1
 80026b0:	d003      	beq.n	80026ba <_fwalk_reent+0x3a>
 80026b2:	4629      	mov	r1, r5
 80026b4:	4630      	mov	r0, r6
 80026b6:	47c0      	blx	r8
 80026b8:	4307      	orrs	r7, r0
 80026ba:	3568      	adds	r5, #104	; 0x68
 80026bc:	e7e9      	b.n	8002692 <_fwalk_reent+0x12>

080026be <__retarget_lock_init_recursive>:
 80026be:	4770      	bx	lr

080026c0 <__retarget_lock_acquire_recursive>:
 80026c0:	4770      	bx	lr

080026c2 <__retarget_lock_release_recursive>:
 80026c2:	4770      	bx	lr

080026c4 <__swhatbuf_r>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	460e      	mov	r6, r1
 80026c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026cc:	2900      	cmp	r1, #0
 80026ce:	b096      	sub	sp, #88	; 0x58
 80026d0:	4614      	mov	r4, r2
 80026d2:	461d      	mov	r5, r3
 80026d4:	da08      	bge.n	80026e8 <__swhatbuf_r+0x24>
 80026d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	602a      	str	r2, [r5, #0]
 80026de:	061a      	lsls	r2, r3, #24
 80026e0:	d410      	bmi.n	8002704 <__swhatbuf_r+0x40>
 80026e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e6:	e00e      	b.n	8002706 <__swhatbuf_r+0x42>
 80026e8:	466a      	mov	r2, sp
 80026ea:	f000 fbaf 	bl	8002e4c <_fstat_r>
 80026ee:	2800      	cmp	r0, #0
 80026f0:	dbf1      	blt.n	80026d6 <__swhatbuf_r+0x12>
 80026f2:	9a01      	ldr	r2, [sp, #4]
 80026f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80026f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80026fc:	425a      	negs	r2, r3
 80026fe:	415a      	adcs	r2, r3
 8002700:	602a      	str	r2, [r5, #0]
 8002702:	e7ee      	b.n	80026e2 <__swhatbuf_r+0x1e>
 8002704:	2340      	movs	r3, #64	; 0x40
 8002706:	2000      	movs	r0, #0
 8002708:	6023      	str	r3, [r4, #0]
 800270a:	b016      	add	sp, #88	; 0x58
 800270c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002710 <__smakebuf_r>:
 8002710:	898b      	ldrh	r3, [r1, #12]
 8002712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002714:	079d      	lsls	r5, r3, #30
 8002716:	4606      	mov	r6, r0
 8002718:	460c      	mov	r4, r1
 800271a:	d507      	bpl.n	800272c <__smakebuf_r+0x1c>
 800271c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	6123      	str	r3, [r4, #16]
 8002724:	2301      	movs	r3, #1
 8002726:	6163      	str	r3, [r4, #20]
 8002728:	b002      	add	sp, #8
 800272a:	bd70      	pop	{r4, r5, r6, pc}
 800272c:	ab01      	add	r3, sp, #4
 800272e:	466a      	mov	r2, sp
 8002730:	f7ff ffc8 	bl	80026c4 <__swhatbuf_r>
 8002734:	9900      	ldr	r1, [sp, #0]
 8002736:	4605      	mov	r5, r0
 8002738:	4630      	mov	r0, r6
 800273a:	f7ff fc3b 	bl	8001fb4 <_malloc_r>
 800273e:	b948      	cbnz	r0, 8002754 <__smakebuf_r+0x44>
 8002740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002744:	059a      	lsls	r2, r3, #22
 8002746:	d4ef      	bmi.n	8002728 <__smakebuf_r+0x18>
 8002748:	f023 0303 	bic.w	r3, r3, #3
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	81a3      	strh	r3, [r4, #12]
 8002752:	e7e3      	b.n	800271c <__smakebuf_r+0xc>
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <__smakebuf_r+0x7c>)
 8002756:	62b3      	str	r3, [r6, #40]	; 0x28
 8002758:	89a3      	ldrh	r3, [r4, #12]
 800275a:	6020      	str	r0, [r4, #0]
 800275c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002760:	81a3      	strh	r3, [r4, #12]
 8002762:	9b00      	ldr	r3, [sp, #0]
 8002764:	6163      	str	r3, [r4, #20]
 8002766:	9b01      	ldr	r3, [sp, #4]
 8002768:	6120      	str	r0, [r4, #16]
 800276a:	b15b      	cbz	r3, 8002784 <__smakebuf_r+0x74>
 800276c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002770:	4630      	mov	r0, r6
 8002772:	f000 fb7d 	bl	8002e70 <_isatty_r>
 8002776:	b128      	cbz	r0, 8002784 <__smakebuf_r+0x74>
 8002778:	89a3      	ldrh	r3, [r4, #12]
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	81a3      	strh	r3, [r4, #12]
 8002784:	89a0      	ldrh	r0, [r4, #12]
 8002786:	4305      	orrs	r5, r0
 8002788:	81a5      	strh	r5, [r4, #12]
 800278a:	e7cd      	b.n	8002728 <__smakebuf_r+0x18>
 800278c:	0800251d 	.word	0x0800251d

08002790 <__malloc_lock>:
 8002790:	4801      	ldr	r0, [pc, #4]	; (8002798 <__malloc_lock+0x8>)
 8002792:	f7ff bf95 	b.w	80026c0 <__retarget_lock_acquire_recursive>
 8002796:	bf00      	nop
 8002798:	20000118 	.word	0x20000118

0800279c <__malloc_unlock>:
 800279c:	4801      	ldr	r0, [pc, #4]	; (80027a4 <__malloc_unlock+0x8>)
 800279e:	f7ff bf90 	b.w	80026c2 <__retarget_lock_release_recursive>
 80027a2:	bf00      	nop
 80027a4:	20000118 	.word	0x20000118

080027a8 <__sfputc_r>:
 80027a8:	6893      	ldr	r3, [r2, #8]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	b410      	push	{r4}
 80027b0:	6093      	str	r3, [r2, #8]
 80027b2:	da07      	bge.n	80027c4 <__sfputc_r+0x1c>
 80027b4:	6994      	ldr	r4, [r2, #24]
 80027b6:	42a3      	cmp	r3, r4
 80027b8:	db01      	blt.n	80027be <__sfputc_r+0x16>
 80027ba:	290a      	cmp	r1, #10
 80027bc:	d102      	bne.n	80027c4 <__sfputc_r+0x1c>
 80027be:	bc10      	pop	{r4}
 80027c0:	f7ff bd0a 	b.w	80021d8 <__swbuf_r>
 80027c4:	6813      	ldr	r3, [r2, #0]
 80027c6:	1c58      	adds	r0, r3, #1
 80027c8:	6010      	str	r0, [r2, #0]
 80027ca:	7019      	strb	r1, [r3, #0]
 80027cc:	4608      	mov	r0, r1
 80027ce:	bc10      	pop	{r4}
 80027d0:	4770      	bx	lr

080027d2 <__sfputs_r>:
 80027d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d4:	4606      	mov	r6, r0
 80027d6:	460f      	mov	r7, r1
 80027d8:	4614      	mov	r4, r2
 80027da:	18d5      	adds	r5, r2, r3
 80027dc:	42ac      	cmp	r4, r5
 80027de:	d101      	bne.n	80027e4 <__sfputs_r+0x12>
 80027e0:	2000      	movs	r0, #0
 80027e2:	e007      	b.n	80027f4 <__sfputs_r+0x22>
 80027e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027e8:	463a      	mov	r2, r7
 80027ea:	4630      	mov	r0, r6
 80027ec:	f7ff ffdc 	bl	80027a8 <__sfputc_r>
 80027f0:	1c43      	adds	r3, r0, #1
 80027f2:	d1f3      	bne.n	80027dc <__sfputs_r+0xa>
 80027f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027f8 <_vfiprintf_r>:
 80027f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027fc:	460d      	mov	r5, r1
 80027fe:	b09d      	sub	sp, #116	; 0x74
 8002800:	4614      	mov	r4, r2
 8002802:	4698      	mov	r8, r3
 8002804:	4606      	mov	r6, r0
 8002806:	b118      	cbz	r0, 8002810 <_vfiprintf_r+0x18>
 8002808:	6983      	ldr	r3, [r0, #24]
 800280a:	b90b      	cbnz	r3, 8002810 <_vfiprintf_r+0x18>
 800280c:	f7ff feba 	bl	8002584 <__sinit>
 8002810:	4b89      	ldr	r3, [pc, #548]	; (8002a38 <_vfiprintf_r+0x240>)
 8002812:	429d      	cmp	r5, r3
 8002814:	d11b      	bne.n	800284e <_vfiprintf_r+0x56>
 8002816:	6875      	ldr	r5, [r6, #4]
 8002818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800281a:	07d9      	lsls	r1, r3, #31
 800281c:	d405      	bmi.n	800282a <_vfiprintf_r+0x32>
 800281e:	89ab      	ldrh	r3, [r5, #12]
 8002820:	059a      	lsls	r2, r3, #22
 8002822:	d402      	bmi.n	800282a <_vfiprintf_r+0x32>
 8002824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002826:	f7ff ff4b 	bl	80026c0 <__retarget_lock_acquire_recursive>
 800282a:	89ab      	ldrh	r3, [r5, #12]
 800282c:	071b      	lsls	r3, r3, #28
 800282e:	d501      	bpl.n	8002834 <_vfiprintf_r+0x3c>
 8002830:	692b      	ldr	r3, [r5, #16]
 8002832:	b9eb      	cbnz	r3, 8002870 <_vfiprintf_r+0x78>
 8002834:	4629      	mov	r1, r5
 8002836:	4630      	mov	r0, r6
 8002838:	f7ff fd20 	bl	800227c <__swsetup_r>
 800283c:	b1c0      	cbz	r0, 8002870 <_vfiprintf_r+0x78>
 800283e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002840:	07dc      	lsls	r4, r3, #31
 8002842:	d50e      	bpl.n	8002862 <_vfiprintf_r+0x6a>
 8002844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002848:	b01d      	add	sp, #116	; 0x74
 800284a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800284e:	4b7b      	ldr	r3, [pc, #492]	; (8002a3c <_vfiprintf_r+0x244>)
 8002850:	429d      	cmp	r5, r3
 8002852:	d101      	bne.n	8002858 <_vfiprintf_r+0x60>
 8002854:	68b5      	ldr	r5, [r6, #8]
 8002856:	e7df      	b.n	8002818 <_vfiprintf_r+0x20>
 8002858:	4b79      	ldr	r3, [pc, #484]	; (8002a40 <_vfiprintf_r+0x248>)
 800285a:	429d      	cmp	r5, r3
 800285c:	bf08      	it	eq
 800285e:	68f5      	ldreq	r5, [r6, #12]
 8002860:	e7da      	b.n	8002818 <_vfiprintf_r+0x20>
 8002862:	89ab      	ldrh	r3, [r5, #12]
 8002864:	0598      	lsls	r0, r3, #22
 8002866:	d4ed      	bmi.n	8002844 <_vfiprintf_r+0x4c>
 8002868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800286a:	f7ff ff2a 	bl	80026c2 <__retarget_lock_release_recursive>
 800286e:	e7e9      	b.n	8002844 <_vfiprintf_r+0x4c>
 8002870:	2300      	movs	r3, #0
 8002872:	9309      	str	r3, [sp, #36]	; 0x24
 8002874:	2320      	movs	r3, #32
 8002876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800287a:	f8cd 800c 	str.w	r8, [sp, #12]
 800287e:	2330      	movs	r3, #48	; 0x30
 8002880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002a44 <_vfiprintf_r+0x24c>
 8002884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002888:	f04f 0901 	mov.w	r9, #1
 800288c:	4623      	mov	r3, r4
 800288e:	469a      	mov	sl, r3
 8002890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002894:	b10a      	cbz	r2, 800289a <_vfiprintf_r+0xa2>
 8002896:	2a25      	cmp	r2, #37	; 0x25
 8002898:	d1f9      	bne.n	800288e <_vfiprintf_r+0x96>
 800289a:	ebba 0b04 	subs.w	fp, sl, r4
 800289e:	d00b      	beq.n	80028b8 <_vfiprintf_r+0xc0>
 80028a0:	465b      	mov	r3, fp
 80028a2:	4622      	mov	r2, r4
 80028a4:	4629      	mov	r1, r5
 80028a6:	4630      	mov	r0, r6
 80028a8:	f7ff ff93 	bl	80027d2 <__sfputs_r>
 80028ac:	3001      	adds	r0, #1
 80028ae:	f000 80aa 	beq.w	8002a06 <_vfiprintf_r+0x20e>
 80028b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028b4:	445a      	add	r2, fp
 80028b6:	9209      	str	r2, [sp, #36]	; 0x24
 80028b8:	f89a 3000 	ldrb.w	r3, [sl]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80a2 	beq.w	8002a06 <_vfiprintf_r+0x20e>
 80028c2:	2300      	movs	r3, #0
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028cc:	f10a 0a01 	add.w	sl, sl, #1
 80028d0:	9304      	str	r3, [sp, #16]
 80028d2:	9307      	str	r3, [sp, #28]
 80028d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028d8:	931a      	str	r3, [sp, #104]	; 0x68
 80028da:	4654      	mov	r4, sl
 80028dc:	2205      	movs	r2, #5
 80028de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028e2:	4858      	ldr	r0, [pc, #352]	; (8002a44 <_vfiprintf_r+0x24c>)
 80028e4:	f7fd fc94 	bl	8000210 <memchr>
 80028e8:	9a04      	ldr	r2, [sp, #16]
 80028ea:	b9d8      	cbnz	r0, 8002924 <_vfiprintf_r+0x12c>
 80028ec:	06d1      	lsls	r1, r2, #27
 80028ee:	bf44      	itt	mi
 80028f0:	2320      	movmi	r3, #32
 80028f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028f6:	0713      	lsls	r3, r2, #28
 80028f8:	bf44      	itt	mi
 80028fa:	232b      	movmi	r3, #43	; 0x2b
 80028fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002900:	f89a 3000 	ldrb.w	r3, [sl]
 8002904:	2b2a      	cmp	r3, #42	; 0x2a
 8002906:	d015      	beq.n	8002934 <_vfiprintf_r+0x13c>
 8002908:	9a07      	ldr	r2, [sp, #28]
 800290a:	4654      	mov	r4, sl
 800290c:	2000      	movs	r0, #0
 800290e:	f04f 0c0a 	mov.w	ip, #10
 8002912:	4621      	mov	r1, r4
 8002914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002918:	3b30      	subs	r3, #48	; 0x30
 800291a:	2b09      	cmp	r3, #9
 800291c:	d94e      	bls.n	80029bc <_vfiprintf_r+0x1c4>
 800291e:	b1b0      	cbz	r0, 800294e <_vfiprintf_r+0x156>
 8002920:	9207      	str	r2, [sp, #28]
 8002922:	e014      	b.n	800294e <_vfiprintf_r+0x156>
 8002924:	eba0 0308 	sub.w	r3, r0, r8
 8002928:	fa09 f303 	lsl.w	r3, r9, r3
 800292c:	4313      	orrs	r3, r2
 800292e:	9304      	str	r3, [sp, #16]
 8002930:	46a2      	mov	sl, r4
 8002932:	e7d2      	b.n	80028da <_vfiprintf_r+0xe2>
 8002934:	9b03      	ldr	r3, [sp, #12]
 8002936:	1d19      	adds	r1, r3, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	9103      	str	r1, [sp, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	bfbb      	ittet	lt
 8002940:	425b      	neglt	r3, r3
 8002942:	f042 0202 	orrlt.w	r2, r2, #2
 8002946:	9307      	strge	r3, [sp, #28]
 8002948:	9307      	strlt	r3, [sp, #28]
 800294a:	bfb8      	it	lt
 800294c:	9204      	strlt	r2, [sp, #16]
 800294e:	7823      	ldrb	r3, [r4, #0]
 8002950:	2b2e      	cmp	r3, #46	; 0x2e
 8002952:	d10c      	bne.n	800296e <_vfiprintf_r+0x176>
 8002954:	7863      	ldrb	r3, [r4, #1]
 8002956:	2b2a      	cmp	r3, #42	; 0x2a
 8002958:	d135      	bne.n	80029c6 <_vfiprintf_r+0x1ce>
 800295a:	9b03      	ldr	r3, [sp, #12]
 800295c:	1d1a      	adds	r2, r3, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	9203      	str	r2, [sp, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfb8      	it	lt
 8002966:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800296a:	3402      	adds	r4, #2
 800296c:	9305      	str	r3, [sp, #20]
 800296e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002a48 <_vfiprintf_r+0x250>
 8002972:	7821      	ldrb	r1, [r4, #0]
 8002974:	2203      	movs	r2, #3
 8002976:	4650      	mov	r0, sl
 8002978:	f7fd fc4a 	bl	8000210 <memchr>
 800297c:	b140      	cbz	r0, 8002990 <_vfiprintf_r+0x198>
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	eba0 000a 	sub.w	r0, r0, sl
 8002984:	fa03 f000 	lsl.w	r0, r3, r0
 8002988:	9b04      	ldr	r3, [sp, #16]
 800298a:	4303      	orrs	r3, r0
 800298c:	3401      	adds	r4, #1
 800298e:	9304      	str	r3, [sp, #16]
 8002990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002994:	482d      	ldr	r0, [pc, #180]	; (8002a4c <_vfiprintf_r+0x254>)
 8002996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800299a:	2206      	movs	r2, #6
 800299c:	f7fd fc38 	bl	8000210 <memchr>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d03f      	beq.n	8002a24 <_vfiprintf_r+0x22c>
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <_vfiprintf_r+0x258>)
 80029a6:	bb1b      	cbnz	r3, 80029f0 <_vfiprintf_r+0x1f8>
 80029a8:	9b03      	ldr	r3, [sp, #12]
 80029aa:	3307      	adds	r3, #7
 80029ac:	f023 0307 	bic.w	r3, r3, #7
 80029b0:	3308      	adds	r3, #8
 80029b2:	9303      	str	r3, [sp, #12]
 80029b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029b6:	443b      	add	r3, r7
 80029b8:	9309      	str	r3, [sp, #36]	; 0x24
 80029ba:	e767      	b.n	800288c <_vfiprintf_r+0x94>
 80029bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80029c0:	460c      	mov	r4, r1
 80029c2:	2001      	movs	r0, #1
 80029c4:	e7a5      	b.n	8002912 <_vfiprintf_r+0x11a>
 80029c6:	2300      	movs	r3, #0
 80029c8:	3401      	adds	r4, #1
 80029ca:	9305      	str	r3, [sp, #20]
 80029cc:	4619      	mov	r1, r3
 80029ce:	f04f 0c0a 	mov.w	ip, #10
 80029d2:	4620      	mov	r0, r4
 80029d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029d8:	3a30      	subs	r2, #48	; 0x30
 80029da:	2a09      	cmp	r2, #9
 80029dc:	d903      	bls.n	80029e6 <_vfiprintf_r+0x1ee>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0c5      	beq.n	800296e <_vfiprintf_r+0x176>
 80029e2:	9105      	str	r1, [sp, #20]
 80029e4:	e7c3      	b.n	800296e <_vfiprintf_r+0x176>
 80029e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80029ea:	4604      	mov	r4, r0
 80029ec:	2301      	movs	r3, #1
 80029ee:	e7f0      	b.n	80029d2 <_vfiprintf_r+0x1da>
 80029f0:	ab03      	add	r3, sp, #12
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	462a      	mov	r2, r5
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <_vfiprintf_r+0x25c>)
 80029f8:	a904      	add	r1, sp, #16
 80029fa:	4630      	mov	r0, r6
 80029fc:	f3af 8000 	nop.w
 8002a00:	4607      	mov	r7, r0
 8002a02:	1c78      	adds	r0, r7, #1
 8002a04:	d1d6      	bne.n	80029b4 <_vfiprintf_r+0x1bc>
 8002a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a08:	07d9      	lsls	r1, r3, #31
 8002a0a:	d405      	bmi.n	8002a18 <_vfiprintf_r+0x220>
 8002a0c:	89ab      	ldrh	r3, [r5, #12]
 8002a0e:	059a      	lsls	r2, r3, #22
 8002a10:	d402      	bmi.n	8002a18 <_vfiprintf_r+0x220>
 8002a12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a14:	f7ff fe55 	bl	80026c2 <__retarget_lock_release_recursive>
 8002a18:	89ab      	ldrh	r3, [r5, #12]
 8002a1a:	065b      	lsls	r3, r3, #25
 8002a1c:	f53f af12 	bmi.w	8002844 <_vfiprintf_r+0x4c>
 8002a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a22:	e711      	b.n	8002848 <_vfiprintf_r+0x50>
 8002a24:	ab03      	add	r3, sp, #12
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	462a      	mov	r2, r5
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <_vfiprintf_r+0x25c>)
 8002a2c:	a904      	add	r1, sp, #16
 8002a2e:	4630      	mov	r0, r6
 8002a30:	f000 f880 	bl	8002b34 <_printf_i>
 8002a34:	e7e4      	b.n	8002a00 <_vfiprintf_r+0x208>
 8002a36:	bf00      	nop
 8002a38:	08003064 	.word	0x08003064
 8002a3c:	08003084 	.word	0x08003084
 8002a40:	08003044 	.word	0x08003044
 8002a44:	080030a4 	.word	0x080030a4
 8002a48:	080030aa 	.word	0x080030aa
 8002a4c:	080030ae 	.word	0x080030ae
 8002a50:	00000000 	.word	0x00000000
 8002a54:	080027d3 	.word	0x080027d3

08002a58 <_printf_common>:
 8002a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a5c:	4616      	mov	r6, r2
 8002a5e:	4699      	mov	r9, r3
 8002a60:	688a      	ldr	r2, [r1, #8]
 8002a62:	690b      	ldr	r3, [r1, #16]
 8002a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	bfb8      	it	lt
 8002a6c:	4613      	movlt	r3, r2
 8002a6e:	6033      	str	r3, [r6, #0]
 8002a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a74:	4607      	mov	r7, r0
 8002a76:	460c      	mov	r4, r1
 8002a78:	b10a      	cbz	r2, 8002a7e <_printf_common+0x26>
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	6033      	str	r3, [r6, #0]
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	0699      	lsls	r1, r3, #26
 8002a82:	bf42      	ittt	mi
 8002a84:	6833      	ldrmi	r3, [r6, #0]
 8002a86:	3302      	addmi	r3, #2
 8002a88:	6033      	strmi	r3, [r6, #0]
 8002a8a:	6825      	ldr	r5, [r4, #0]
 8002a8c:	f015 0506 	ands.w	r5, r5, #6
 8002a90:	d106      	bne.n	8002aa0 <_printf_common+0x48>
 8002a92:	f104 0a19 	add.w	sl, r4, #25
 8002a96:	68e3      	ldr	r3, [r4, #12]
 8002a98:	6832      	ldr	r2, [r6, #0]
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	42ab      	cmp	r3, r5
 8002a9e:	dc26      	bgt.n	8002aee <_printf_common+0x96>
 8002aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002aa4:	1e13      	subs	r3, r2, #0
 8002aa6:	6822      	ldr	r2, [r4, #0]
 8002aa8:	bf18      	it	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	0692      	lsls	r2, r2, #26
 8002aae:	d42b      	bmi.n	8002b08 <_printf_common+0xb0>
 8002ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	47c0      	blx	r8
 8002aba:	3001      	adds	r0, #1
 8002abc:	d01e      	beq.n	8002afc <_printf_common+0xa4>
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	68e5      	ldr	r5, [r4, #12]
 8002ac2:	6832      	ldr	r2, [r6, #0]
 8002ac4:	f003 0306 	and.w	r3, r3, #6
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	bf08      	it	eq
 8002acc:	1aad      	subeq	r5, r5, r2
 8002ace:	68a3      	ldr	r3, [r4, #8]
 8002ad0:	6922      	ldr	r2, [r4, #16]
 8002ad2:	bf0c      	ite	eq
 8002ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ad8:	2500      	movne	r5, #0
 8002ada:	4293      	cmp	r3, r2
 8002adc:	bfc4      	itt	gt
 8002ade:	1a9b      	subgt	r3, r3, r2
 8002ae0:	18ed      	addgt	r5, r5, r3
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	341a      	adds	r4, #26
 8002ae6:	42b5      	cmp	r5, r6
 8002ae8:	d11a      	bne.n	8002b20 <_printf_common+0xc8>
 8002aea:	2000      	movs	r0, #0
 8002aec:	e008      	b.n	8002b00 <_printf_common+0xa8>
 8002aee:	2301      	movs	r3, #1
 8002af0:	4652      	mov	r2, sl
 8002af2:	4649      	mov	r1, r9
 8002af4:	4638      	mov	r0, r7
 8002af6:	47c0      	blx	r8
 8002af8:	3001      	adds	r0, #1
 8002afa:	d103      	bne.n	8002b04 <_printf_common+0xac>
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b04:	3501      	adds	r5, #1
 8002b06:	e7c6      	b.n	8002a96 <_printf_common+0x3e>
 8002b08:	18e1      	adds	r1, r4, r3
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	2030      	movs	r0, #48	; 0x30
 8002b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b12:	4422      	add	r2, r4
 8002b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	e7c7      	b.n	8002ab0 <_printf_common+0x58>
 8002b20:	2301      	movs	r3, #1
 8002b22:	4622      	mov	r2, r4
 8002b24:	4649      	mov	r1, r9
 8002b26:	4638      	mov	r0, r7
 8002b28:	47c0      	blx	r8
 8002b2a:	3001      	adds	r0, #1
 8002b2c:	d0e6      	beq.n	8002afc <_printf_common+0xa4>
 8002b2e:	3601      	adds	r6, #1
 8002b30:	e7d9      	b.n	8002ae6 <_printf_common+0x8e>
	...

08002b34 <_printf_i>:
 8002b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b38:	7e0f      	ldrb	r7, [r1, #24]
 8002b3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b3c:	2f78      	cmp	r7, #120	; 0x78
 8002b3e:	4691      	mov	r9, r2
 8002b40:	4680      	mov	r8, r0
 8002b42:	460c      	mov	r4, r1
 8002b44:	469a      	mov	sl, r3
 8002b46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b4a:	d807      	bhi.n	8002b5c <_printf_i+0x28>
 8002b4c:	2f62      	cmp	r7, #98	; 0x62
 8002b4e:	d80a      	bhi.n	8002b66 <_printf_i+0x32>
 8002b50:	2f00      	cmp	r7, #0
 8002b52:	f000 80d8 	beq.w	8002d06 <_printf_i+0x1d2>
 8002b56:	2f58      	cmp	r7, #88	; 0x58
 8002b58:	f000 80a3 	beq.w	8002ca2 <_printf_i+0x16e>
 8002b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b64:	e03a      	b.n	8002bdc <_printf_i+0xa8>
 8002b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b6a:	2b15      	cmp	r3, #21
 8002b6c:	d8f6      	bhi.n	8002b5c <_printf_i+0x28>
 8002b6e:	a101      	add	r1, pc, #4	; (adr r1, 8002b74 <_printf_i+0x40>)
 8002b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b74:	08002bcd 	.word	0x08002bcd
 8002b78:	08002be1 	.word	0x08002be1
 8002b7c:	08002b5d 	.word	0x08002b5d
 8002b80:	08002b5d 	.word	0x08002b5d
 8002b84:	08002b5d 	.word	0x08002b5d
 8002b88:	08002b5d 	.word	0x08002b5d
 8002b8c:	08002be1 	.word	0x08002be1
 8002b90:	08002b5d 	.word	0x08002b5d
 8002b94:	08002b5d 	.word	0x08002b5d
 8002b98:	08002b5d 	.word	0x08002b5d
 8002b9c:	08002b5d 	.word	0x08002b5d
 8002ba0:	08002ced 	.word	0x08002ced
 8002ba4:	08002c11 	.word	0x08002c11
 8002ba8:	08002ccf 	.word	0x08002ccf
 8002bac:	08002b5d 	.word	0x08002b5d
 8002bb0:	08002b5d 	.word	0x08002b5d
 8002bb4:	08002d0f 	.word	0x08002d0f
 8002bb8:	08002b5d 	.word	0x08002b5d
 8002bbc:	08002c11 	.word	0x08002c11
 8002bc0:	08002b5d 	.word	0x08002b5d
 8002bc4:	08002b5d 	.word	0x08002b5d
 8002bc8:	08002cd7 	.word	0x08002cd7
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	1d1a      	adds	r2, r3, #4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	602a      	str	r2, [r5, #0]
 8002bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0a3      	b.n	8002d28 <_printf_i+0x1f4>
 8002be0:	6820      	ldr	r0, [r4, #0]
 8002be2:	6829      	ldr	r1, [r5, #0]
 8002be4:	0606      	lsls	r6, r0, #24
 8002be6:	f101 0304 	add.w	r3, r1, #4
 8002bea:	d50a      	bpl.n	8002c02 <_printf_i+0xce>
 8002bec:	680e      	ldr	r6, [r1, #0]
 8002bee:	602b      	str	r3, [r5, #0]
 8002bf0:	2e00      	cmp	r6, #0
 8002bf2:	da03      	bge.n	8002bfc <_printf_i+0xc8>
 8002bf4:	232d      	movs	r3, #45	; 0x2d
 8002bf6:	4276      	negs	r6, r6
 8002bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bfc:	485e      	ldr	r0, [pc, #376]	; (8002d78 <_printf_i+0x244>)
 8002bfe:	230a      	movs	r3, #10
 8002c00:	e019      	b.n	8002c36 <_printf_i+0x102>
 8002c02:	680e      	ldr	r6, [r1, #0]
 8002c04:	602b      	str	r3, [r5, #0]
 8002c06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c0a:	bf18      	it	ne
 8002c0c:	b236      	sxthne	r6, r6
 8002c0e:	e7ef      	b.n	8002bf0 <_printf_i+0xbc>
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	6820      	ldr	r0, [r4, #0]
 8002c14:	1d19      	adds	r1, r3, #4
 8002c16:	6029      	str	r1, [r5, #0]
 8002c18:	0601      	lsls	r1, r0, #24
 8002c1a:	d501      	bpl.n	8002c20 <_printf_i+0xec>
 8002c1c:	681e      	ldr	r6, [r3, #0]
 8002c1e:	e002      	b.n	8002c26 <_printf_i+0xf2>
 8002c20:	0646      	lsls	r6, r0, #25
 8002c22:	d5fb      	bpl.n	8002c1c <_printf_i+0xe8>
 8002c24:	881e      	ldrh	r6, [r3, #0]
 8002c26:	4854      	ldr	r0, [pc, #336]	; (8002d78 <_printf_i+0x244>)
 8002c28:	2f6f      	cmp	r7, #111	; 0x6f
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2308      	moveq	r3, #8
 8002c2e:	230a      	movne	r3, #10
 8002c30:	2100      	movs	r1, #0
 8002c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c36:	6865      	ldr	r5, [r4, #4]
 8002c38:	60a5      	str	r5, [r4, #8]
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	bfa2      	ittt	ge
 8002c3e:	6821      	ldrge	r1, [r4, #0]
 8002c40:	f021 0104 	bicge.w	r1, r1, #4
 8002c44:	6021      	strge	r1, [r4, #0]
 8002c46:	b90e      	cbnz	r6, 8002c4c <_printf_i+0x118>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d04d      	beq.n	8002ce8 <_printf_i+0x1b4>
 8002c4c:	4615      	mov	r5, r2
 8002c4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c52:	fb03 6711 	mls	r7, r3, r1, r6
 8002c56:	5dc7      	ldrb	r7, [r0, r7]
 8002c58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c5c:	4637      	mov	r7, r6
 8002c5e:	42bb      	cmp	r3, r7
 8002c60:	460e      	mov	r6, r1
 8002c62:	d9f4      	bls.n	8002c4e <_printf_i+0x11a>
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d10b      	bne.n	8002c80 <_printf_i+0x14c>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	07de      	lsls	r6, r3, #31
 8002c6c:	d508      	bpl.n	8002c80 <_printf_i+0x14c>
 8002c6e:	6923      	ldr	r3, [r4, #16]
 8002c70:	6861      	ldr	r1, [r4, #4]
 8002c72:	4299      	cmp	r1, r3
 8002c74:	bfde      	ittt	le
 8002c76:	2330      	movle	r3, #48	; 0x30
 8002c78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002c80:	1b52      	subs	r2, r2, r5
 8002c82:	6122      	str	r2, [r4, #16]
 8002c84:	f8cd a000 	str.w	sl, [sp]
 8002c88:	464b      	mov	r3, r9
 8002c8a:	aa03      	add	r2, sp, #12
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	4640      	mov	r0, r8
 8002c90:	f7ff fee2 	bl	8002a58 <_printf_common>
 8002c94:	3001      	adds	r0, #1
 8002c96:	d14c      	bne.n	8002d32 <_printf_i+0x1fe>
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c9c:	b004      	add	sp, #16
 8002c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ca2:	4835      	ldr	r0, [pc, #212]	; (8002d78 <_printf_i+0x244>)
 8002ca4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ca8:	6829      	ldr	r1, [r5, #0]
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	f851 6b04 	ldr.w	r6, [r1], #4
 8002cb0:	6029      	str	r1, [r5, #0]
 8002cb2:	061d      	lsls	r5, r3, #24
 8002cb4:	d514      	bpl.n	8002ce0 <_printf_i+0x1ac>
 8002cb6:	07df      	lsls	r7, r3, #31
 8002cb8:	bf44      	itt	mi
 8002cba:	f043 0320 	orrmi.w	r3, r3, #32
 8002cbe:	6023      	strmi	r3, [r4, #0]
 8002cc0:	b91e      	cbnz	r6, 8002cca <_printf_i+0x196>
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	f023 0320 	bic.w	r3, r3, #32
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	2310      	movs	r3, #16
 8002ccc:	e7b0      	b.n	8002c30 <_printf_i+0xfc>
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	f043 0320 	orr.w	r3, r3, #32
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	2378      	movs	r3, #120	; 0x78
 8002cd8:	4828      	ldr	r0, [pc, #160]	; (8002d7c <_printf_i+0x248>)
 8002cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cde:	e7e3      	b.n	8002ca8 <_printf_i+0x174>
 8002ce0:	0659      	lsls	r1, r3, #25
 8002ce2:	bf48      	it	mi
 8002ce4:	b2b6      	uxthmi	r6, r6
 8002ce6:	e7e6      	b.n	8002cb6 <_printf_i+0x182>
 8002ce8:	4615      	mov	r5, r2
 8002cea:	e7bb      	b.n	8002c64 <_printf_i+0x130>
 8002cec:	682b      	ldr	r3, [r5, #0]
 8002cee:	6826      	ldr	r6, [r4, #0]
 8002cf0:	6961      	ldr	r1, [r4, #20]
 8002cf2:	1d18      	adds	r0, r3, #4
 8002cf4:	6028      	str	r0, [r5, #0]
 8002cf6:	0635      	lsls	r5, r6, #24
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	d501      	bpl.n	8002d00 <_printf_i+0x1cc>
 8002cfc:	6019      	str	r1, [r3, #0]
 8002cfe:	e002      	b.n	8002d06 <_printf_i+0x1d2>
 8002d00:	0670      	lsls	r0, r6, #25
 8002d02:	d5fb      	bpl.n	8002cfc <_printf_i+0x1c8>
 8002d04:	8019      	strh	r1, [r3, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	6123      	str	r3, [r4, #16]
 8002d0a:	4615      	mov	r5, r2
 8002d0c:	e7ba      	b.n	8002c84 <_printf_i+0x150>
 8002d0e:	682b      	ldr	r3, [r5, #0]
 8002d10:	1d1a      	adds	r2, r3, #4
 8002d12:	602a      	str	r2, [r5, #0]
 8002d14:	681d      	ldr	r5, [r3, #0]
 8002d16:	6862      	ldr	r2, [r4, #4]
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f7fd fa78 	bl	8000210 <memchr>
 8002d20:	b108      	cbz	r0, 8002d26 <_printf_i+0x1f2>
 8002d22:	1b40      	subs	r0, r0, r5
 8002d24:	6060      	str	r0, [r4, #4]
 8002d26:	6863      	ldr	r3, [r4, #4]
 8002d28:	6123      	str	r3, [r4, #16]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d30:	e7a8      	b.n	8002c84 <_printf_i+0x150>
 8002d32:	6923      	ldr	r3, [r4, #16]
 8002d34:	462a      	mov	r2, r5
 8002d36:	4649      	mov	r1, r9
 8002d38:	4640      	mov	r0, r8
 8002d3a:	47d0      	blx	sl
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	d0ab      	beq.n	8002c98 <_printf_i+0x164>
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	079b      	lsls	r3, r3, #30
 8002d44:	d413      	bmi.n	8002d6e <_printf_i+0x23a>
 8002d46:	68e0      	ldr	r0, [r4, #12]
 8002d48:	9b03      	ldr	r3, [sp, #12]
 8002d4a:	4298      	cmp	r0, r3
 8002d4c:	bfb8      	it	lt
 8002d4e:	4618      	movlt	r0, r3
 8002d50:	e7a4      	b.n	8002c9c <_printf_i+0x168>
 8002d52:	2301      	movs	r3, #1
 8002d54:	4632      	mov	r2, r6
 8002d56:	4649      	mov	r1, r9
 8002d58:	4640      	mov	r0, r8
 8002d5a:	47d0      	blx	sl
 8002d5c:	3001      	adds	r0, #1
 8002d5e:	d09b      	beq.n	8002c98 <_printf_i+0x164>
 8002d60:	3501      	adds	r5, #1
 8002d62:	68e3      	ldr	r3, [r4, #12]
 8002d64:	9903      	ldr	r1, [sp, #12]
 8002d66:	1a5b      	subs	r3, r3, r1
 8002d68:	42ab      	cmp	r3, r5
 8002d6a:	dcf2      	bgt.n	8002d52 <_printf_i+0x21e>
 8002d6c:	e7eb      	b.n	8002d46 <_printf_i+0x212>
 8002d6e:	2500      	movs	r5, #0
 8002d70:	f104 0619 	add.w	r6, r4, #25
 8002d74:	e7f5      	b.n	8002d62 <_printf_i+0x22e>
 8002d76:	bf00      	nop
 8002d78:	080030b5 	.word	0x080030b5
 8002d7c:	080030c6 	.word	0x080030c6

08002d80 <__sread>:
 8002d80:	b510      	push	{r4, lr}
 8002d82:	460c      	mov	r4, r1
 8002d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d88:	f000 f894 	bl	8002eb4 <_read_r>
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	bfab      	itete	ge
 8002d90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d92:	89a3      	ldrhlt	r3, [r4, #12]
 8002d94:	181b      	addge	r3, r3, r0
 8002d96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d9a:	bfac      	ite	ge
 8002d9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d9e:	81a3      	strhlt	r3, [r4, #12]
 8002da0:	bd10      	pop	{r4, pc}

08002da2 <__swrite>:
 8002da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da6:	461f      	mov	r7, r3
 8002da8:	898b      	ldrh	r3, [r1, #12]
 8002daa:	05db      	lsls	r3, r3, #23
 8002dac:	4605      	mov	r5, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	4616      	mov	r6, r2
 8002db2:	d505      	bpl.n	8002dc0 <__swrite+0x1e>
 8002db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db8:	2302      	movs	r3, #2
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f000 f868 	bl	8002e90 <_lseek_r>
 8002dc0:	89a3      	ldrh	r3, [r4, #12]
 8002dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dca:	81a3      	strh	r3, [r4, #12]
 8002dcc:	4632      	mov	r2, r6
 8002dce:	463b      	mov	r3, r7
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd6:	f000 b817 	b.w	8002e08 <_write_r>

08002dda <__sseek>:
 8002dda:	b510      	push	{r4, lr}
 8002ddc:	460c      	mov	r4, r1
 8002dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de2:	f000 f855 	bl	8002e90 <_lseek_r>
 8002de6:	1c43      	adds	r3, r0, #1
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	bf15      	itete	ne
 8002dec:	6560      	strne	r0, [r4, #84]	; 0x54
 8002dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002df6:	81a3      	strheq	r3, [r4, #12]
 8002df8:	bf18      	it	ne
 8002dfa:	81a3      	strhne	r3, [r4, #12]
 8002dfc:	bd10      	pop	{r4, pc}

08002dfe <__sclose>:
 8002dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e02:	f000 b813 	b.w	8002e2c <_close_r>
	...

08002e08 <_write_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	4d07      	ldr	r5, [pc, #28]	; (8002e28 <_write_r+0x20>)
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	4608      	mov	r0, r1
 8002e10:	4611      	mov	r1, r2
 8002e12:	2200      	movs	r2, #0
 8002e14:	602a      	str	r2, [r5, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f7fe fee0 	bl	8001bdc <_write>
 8002e1c:	1c43      	adds	r3, r0, #1
 8002e1e:	d102      	bne.n	8002e26 <_write_r+0x1e>
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	b103      	cbz	r3, 8002e26 <_write_r+0x1e>
 8002e24:	6023      	str	r3, [r4, #0]
 8002e26:	bd38      	pop	{r3, r4, r5, pc}
 8002e28:	2000011c 	.word	0x2000011c

08002e2c <_close_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	4d06      	ldr	r5, [pc, #24]	; (8002e48 <_close_r+0x1c>)
 8002e30:	2300      	movs	r3, #0
 8002e32:	4604      	mov	r4, r0
 8002e34:	4608      	mov	r0, r1
 8002e36:	602b      	str	r3, [r5, #0]
 8002e38:	f7fe feec 	bl	8001c14 <_close>
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d102      	bne.n	8002e46 <_close_r+0x1a>
 8002e40:	682b      	ldr	r3, [r5, #0]
 8002e42:	b103      	cbz	r3, 8002e46 <_close_r+0x1a>
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
 8002e48:	2000011c 	.word	0x2000011c

08002e4c <_fstat_r>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4d07      	ldr	r5, [pc, #28]	; (8002e6c <_fstat_r+0x20>)
 8002e50:	2300      	movs	r3, #0
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	602b      	str	r3, [r5, #0]
 8002e5a:	f7fe fee6 	bl	8001c2a <_fstat>
 8002e5e:	1c43      	adds	r3, r0, #1
 8002e60:	d102      	bne.n	8002e68 <_fstat_r+0x1c>
 8002e62:	682b      	ldr	r3, [r5, #0]
 8002e64:	b103      	cbz	r3, 8002e68 <_fstat_r+0x1c>
 8002e66:	6023      	str	r3, [r4, #0]
 8002e68:	bd38      	pop	{r3, r4, r5, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000011c 	.word	0x2000011c

08002e70 <_isatty_r>:
 8002e70:	b538      	push	{r3, r4, r5, lr}
 8002e72:	4d06      	ldr	r5, [pc, #24]	; (8002e8c <_isatty_r+0x1c>)
 8002e74:	2300      	movs	r3, #0
 8002e76:	4604      	mov	r4, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	602b      	str	r3, [r5, #0]
 8002e7c:	f7fe fee4 	bl	8001c48 <_isatty>
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	d102      	bne.n	8002e8a <_isatty_r+0x1a>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	b103      	cbz	r3, 8002e8a <_isatty_r+0x1a>
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	bd38      	pop	{r3, r4, r5, pc}
 8002e8c:	2000011c 	.word	0x2000011c

08002e90 <_lseek_r>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	4d07      	ldr	r5, [pc, #28]	; (8002eb0 <_lseek_r+0x20>)
 8002e94:	4604      	mov	r4, r0
 8002e96:	4608      	mov	r0, r1
 8002e98:	4611      	mov	r1, r2
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	602a      	str	r2, [r5, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f7fe fedc 	bl	8001c5c <_lseek>
 8002ea4:	1c43      	adds	r3, r0, #1
 8002ea6:	d102      	bne.n	8002eae <_lseek_r+0x1e>
 8002ea8:	682b      	ldr	r3, [r5, #0]
 8002eaa:	b103      	cbz	r3, 8002eae <_lseek_r+0x1e>
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	bd38      	pop	{r3, r4, r5, pc}
 8002eb0:	2000011c 	.word	0x2000011c

08002eb4 <_read_r>:
 8002eb4:	b538      	push	{r3, r4, r5, lr}
 8002eb6:	4d07      	ldr	r5, [pc, #28]	; (8002ed4 <_read_r+0x20>)
 8002eb8:	4604      	mov	r4, r0
 8002eba:	4608      	mov	r0, r1
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	602a      	str	r2, [r5, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f7fe fe6d 	bl	8001ba2 <_read>
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	d102      	bne.n	8002ed2 <_read_r+0x1e>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	b103      	cbz	r3, 8002ed2 <_read_r+0x1e>
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
 8002ed4:	2000011c 	.word	0x2000011c

08002ed8 <_init>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr

08002ee4 <_fini>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr
